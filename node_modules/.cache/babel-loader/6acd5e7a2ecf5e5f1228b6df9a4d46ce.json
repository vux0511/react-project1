{"ast":null,"code":"import $cUVuN$swchelperssrc_class_private_field_initmjs from \"@swc/helpers/src/_class_private_field_init.mjs\";\nimport $cUVuN$swchelperssrc_define_propertymjs from \"@swc/helpers/src/_define_property.mjs\";\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/*\n* Copyright 2020 Adobe. All rights reserved.\n* This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License. You may obtain a copy\n* of the License at http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software distributed under\n* the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n* OF ANY KIND, either express or implied. See the License for the specific language\n* governing permissions and limitations under the License.\n*/\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/*\n* Copyright 2020 Adobe. All rights reserved.\n* This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License. You may obtain a copy\n* of the License at http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software distributed under\n* the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n* OF ANY KIND, either express or implied. See the License for the specific language\n* governing permissions and limitations under the License.\n*/\n// Portions of the code in this file are based on code from the TC39 Temporal proposal.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $2b4dce13dd5a17fa$export$842a2cf37af977e1(amount, numerator) {\n  return amount - numerator * Math.floor(amount / numerator);\n}\n\nfunction $2b4dce13dd5a17fa$export$784d13d8ee351f07(date) {\n  if (date.era) return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(date.calendar, date.era, date.year, date.month, date.day);else return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(date.calendar, date.year, date.month, date.day);\n}\n\nfunction $2b4dce13dd5a17fa$export$27fa0172ae2644b3(date) {\n  if (date.era) return new (0, $35ea8db9cb2ccb90$export$ca871e8dbb80966f)(date.calendar, date.era, date.year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);else return new (0, $35ea8db9cb2ccb90$export$ca871e8dbb80966f)(date.calendar, date.year, date.month, date.day, date.hour, date.minute, date.second);\n}\n\nconst $3b62074eb05584b2$var$EPOCH = 1721426; // 001/01/03 Julian C.E.\n\nfunction $3b62074eb05584b2$export$f297eb839006d339(era, year, month, day) {\n  year = $3b62074eb05584b2$export$c36e0ecb2d4fa69d(era, year);\n  let y1 = year - 1;\n  let monthOffset = -2;\n  if (month <= 2) monthOffset = 0;else if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) monthOffset = -1;\n  return $3b62074eb05584b2$var$EPOCH - 1 + 365 * y1 + Math.floor(y1 / 4) - Math.floor(y1 / 100) + Math.floor(y1 / 400) + Math.floor((367 * month - 362) / 12 + monthOffset + day);\n}\n\nfunction $3b62074eb05584b2$export$553d7fa8e3805fc0(year) {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\n\nfunction $3b62074eb05584b2$export$c36e0ecb2d4fa69d(era, year) {\n  return era === \"BC\" ? 1 - year : year;\n}\n\nfunction $3b62074eb05584b2$export$4475b7e617eb123c(year) {\n  let era = \"AD\";\n\n  if (year <= 0) {\n    era = \"BC\";\n    year = 1 - year;\n  }\n\n  return [era, year];\n}\n\nconst $3b62074eb05584b2$var$daysInMonth = {\n  standard: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n  leapyear: [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n};\n\nclass $3b62074eb05584b2$export$80ee6245ec4f29ec {\n  fromJulianDay(jd) {\n    let jd0 = jd;\n    let depoch = jd0 - $3b62074eb05584b2$var$EPOCH;\n    let quadricent = Math.floor(depoch / 146097);\n    let dqc = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(depoch, 146097);\n    let cent = Math.floor(dqc / 36524);\n    let dcent = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(dqc, 36524);\n    let quad = Math.floor(dcent / 1461);\n    let dquad = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(dcent, 1461);\n    let yindex = Math.floor(dquad / 365);\n    let extendedYear = quadricent * 400 + cent * 100 + quad * 4 + yindex + (cent !== 4 && yindex !== 4 ? 1 : 0);\n    let [era, year] = $3b62074eb05584b2$export$4475b7e617eb123c(extendedYear);\n    let yearDay = jd0 - $3b62074eb05584b2$export$f297eb839006d339(era, year, 1, 1);\n    let leapAdj = 2;\n    if (jd0 < $3b62074eb05584b2$export$f297eb839006d339(era, year, 3, 1)) leapAdj = 0;else if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) leapAdj = 1;\n    let month = Math.floor(((yearDay + leapAdj) * 12 + 373) / 367);\n    let day = jd0 - $3b62074eb05584b2$export$f297eb839006d339(era, year, month, 1) + 1;\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(era, year, month, day);\n  }\n\n  toJulianDay(date) {\n    return $3b62074eb05584b2$export$f297eb839006d339(date.era, date.year, date.month, date.day);\n  }\n\n  getDaysInMonth(date) {\n    return $3b62074eb05584b2$var$daysInMonth[$3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? \"leapyear\" : \"standard\"][date.month - 1];\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  getMonthsInYear(date) {\n    return 12;\n  }\n\n  getDaysInYear(date) {\n    return $3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? 366 : 365;\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  getYearsInEra(date) {\n    return 9999;\n  }\n\n  getEras() {\n    return [\"BC\", \"AD\"];\n  }\n\n  isInverseEra(date) {\n    return date.era === \"BC\";\n  }\n\n  balanceDate(date) {\n    if (date.year <= 0) {\n      date.era = date.era === \"BC\" ? \"AD\" : \"BC\";\n      date.year = 1 - date.year;\n    }\n  }\n\n  constructor() {\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(this, \"identifier\", \"gregory\");\n  }\n\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Data from https://github.com/unicode-cldr/cldr-core/blob/master/supplemental/weekData.json\n// Locales starting on Sunday have been removed for compression.\n\n\nconst $2fe286d2fb449abb$export$7a5acbd77d414bd9 = {\n  \"001\": 1,\n  AD: 1,\n  AE: 6,\n  AF: 6,\n  AI: 1,\n  AL: 1,\n  AM: 1,\n  AN: 1,\n  AT: 1,\n  AX: 1,\n  AZ: 1,\n  BA: 1,\n  BE: 1,\n  BG: 1,\n  BH: 6,\n  BM: 1,\n  BN: 1,\n  BY: 1,\n  CH: 1,\n  CL: 1,\n  CM: 1,\n  CR: 1,\n  CY: 1,\n  CZ: 1,\n  DE: 1,\n  DJ: 6,\n  DK: 1,\n  DZ: 6,\n  EC: 1,\n  EE: 1,\n  EG: 6,\n  ES: 1,\n  FI: 1,\n  FJ: 1,\n  FO: 1,\n  FR: 1,\n  GB: 1,\n  GE: 1,\n  GF: 1,\n  GP: 1,\n  GR: 1,\n  HR: 1,\n  HU: 1,\n  IE: 1,\n  IQ: 6,\n  IR: 6,\n  IS: 1,\n  IT: 1,\n  JO: 6,\n  KG: 1,\n  KW: 6,\n  KZ: 1,\n  LB: 1,\n  LI: 1,\n  LK: 1,\n  LT: 1,\n  LU: 1,\n  LV: 1,\n  LY: 6,\n  MC: 1,\n  MD: 1,\n  ME: 1,\n  MK: 1,\n  MN: 1,\n  MQ: 1,\n  MV: 5,\n  MY: 1,\n  NL: 1,\n  NO: 1,\n  NZ: 1,\n  OM: 6,\n  PL: 1,\n  QA: 6,\n  RE: 1,\n  RO: 1,\n  RS: 1,\n  RU: 1,\n  SD: 6,\n  SE: 1,\n  SI: 1,\n  SK: 1,\n  SM: 1,\n  SY: 6,\n  TJ: 1,\n  TM: 1,\n  TR: 1,\n  UA: 1,\n  UY: 1,\n  UZ: 1,\n  VA: 1,\n  VN: 1,\n  XK: 1\n};\n\nfunction $14e0f24ef4ac5c92$export$ea39ec197993aef0(a, b) {\n  b = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(b, a.calendar);\n  return a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\n\nfunction $14e0f24ef4ac5c92$export$a18c89cbd24170ff(a, b) {\n  b = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(b, a.calendar); // In the Japanese calendar, months can span multiple eras/years, so only compare the first of the month.\n\n  a = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(a);\n  b = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(b);\n  return a.era === b.era && a.year === b.year && a.month === b.month;\n}\n\nfunction $14e0f24ef4ac5c92$export$5841f9eb9773f25f(a, b) {\n  b = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(b, a.calendar);\n  a = $14e0f24ef4ac5c92$export$f91e89d3d0406102(a);\n  b = $14e0f24ef4ac5c92$export$f91e89d3d0406102(b);\n  return a.era === b.era && a.year === b.year;\n}\n\nfunction $14e0f24ef4ac5c92$export$91b62ebf2ba703ee(a, b) {\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\n\nfunction $14e0f24ef4ac5c92$export$5a8da0c44a3afdf2(a, b) {\n  a = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(a);\n  b = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month;\n}\n\nfunction $14e0f24ef4ac5c92$export$ea840f5a6dda8147(a, b) {\n  a = $14e0f24ef4ac5c92$export$f91e89d3d0406102(a);\n  b = $14e0f24ef4ac5c92$export$f91e89d3d0406102(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year;\n}\n\nfunction $14e0f24ef4ac5c92$export$629b0a497aa65267(date, timeZone) {\n  return $14e0f24ef4ac5c92$export$ea39ec197993aef0(date, $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone));\n}\n\nfunction $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale) {\n  let julian = date.calendar.toJulianDay(date); // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n\n  let dayOfWeek = Math.ceil(julian + 1 - $14e0f24ef4ac5c92$var$getWeekStart(locale)) % 7;\n  if (dayOfWeek < 0) dayOfWeek += 7;\n  return dayOfWeek;\n}\n\nfunction $14e0f24ef4ac5c92$export$461939dd4422153(timeZone) {\n  return (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(Date.now(), timeZone);\n}\n\nfunction $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone) {\n  return (0, $11d87f3f76e88657$export$93522d1a439f3617)($14e0f24ef4ac5c92$export$461939dd4422153(timeZone));\n}\n\nfunction $14e0f24ef4ac5c92$export$68781ddf31c0090f(a, b) {\n  return a.calendar.toJulianDay(a) - b.calendar.toJulianDay(b);\n}\n\nfunction $14e0f24ef4ac5c92$export$c19a80a9721b80f6(a, b) {\n  return $14e0f24ef4ac5c92$var$timeToMs(a) - $14e0f24ef4ac5c92$var$timeToMs(b);\n}\n\nfunction $14e0f24ef4ac5c92$var$timeToMs(a) {\n  return a.hour * 3600000 + a.minute * 60000 + a.second * 1000 + a.millisecond;\n}\n\nfunction $14e0f24ef4ac5c92$export$126c91c941de7e(a, timeZone) {\n  let ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(a, timeZone);\n  let tomorrow = a.add({\n    days: 1\n  });\n  let tomorrowMs = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(tomorrow, timeZone);\n  return (tomorrowMs - ms) / 3600000;\n}\n\nlet $14e0f24ef4ac5c92$var$localTimeZone = null;\n\nfunction $14e0f24ef4ac5c92$export$aa8b41735afcabd2() {\n  // TODO: invalidate this somehow?\n  if ($14e0f24ef4ac5c92$var$localTimeZone == null) $14e0f24ef4ac5c92$var$localTimeZone = new Intl.DateTimeFormat().resolvedOptions().timeZone;\n  return $14e0f24ef4ac5c92$var$localTimeZone;\n}\n\nfunction $14e0f24ef4ac5c92$export$a5a3b454ada2268e(date) {\n  // Use `subtract` instead of `set` so we don't get constrained in an era.\n  return date.subtract({\n    days: date.day - 1\n  });\n}\n\nfunction $14e0f24ef4ac5c92$export$a2258d9c4118825c(date) {\n  return date.add({\n    days: date.calendar.getDaysInMonth(date) - date.day\n  });\n}\n\nfunction $14e0f24ef4ac5c92$export$f91e89d3d0406102(date) {\n  return $14e0f24ef4ac5c92$export$a5a3b454ada2268e(date.subtract({\n    months: date.month - 1\n  }));\n}\n\nfunction $14e0f24ef4ac5c92$export$8b7aa55c66d5569e(date) {\n  return $14e0f24ef4ac5c92$export$a2258d9c4118825c(date.add({\n    months: date.calendar.getMonthsInYear(date) - date.month\n  }));\n}\n\nfunction $14e0f24ef4ac5c92$export$5412ac11713b72ad(date) {\n  if (date.calendar.getMinimumMonthInYear) return date.calendar.getMinimumMonthInYear(date);\n  return 1;\n}\n\nfunction $14e0f24ef4ac5c92$export$b2f4953d301981d5(date) {\n  if (date.calendar.getMinimumDayInMonth) return date.calendar.getMinimumDayInMonth(date);\n  return 1;\n}\n\nfunction $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale) {\n  let dayOfWeek = $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale);\n  return date.subtract({\n    days: dayOfWeek\n  });\n}\n\nfunction $14e0f24ef4ac5c92$export$ef8b6d9133084f4e(date, locale) {\n  return $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale).add({\n    days: 6\n  });\n}\n\nconst $14e0f24ef4ac5c92$var$cachedRegions = new Map();\n\nfunction $14e0f24ef4ac5c92$var$getRegion(locale) {\n  // If the Intl.Locale API is available, use it to get the region for the locale.\n  // @ts-ignore\n  if (Intl.Locale) {\n    // Constructing an Intl.Locale is expensive, so cache the result.\n    let region = $14e0f24ef4ac5c92$var$cachedRegions.get(locale);\n\n    if (!region) {\n      // @ts-ignore\n      region = new Intl.Locale(locale).maximize().region;\n      $14e0f24ef4ac5c92$var$cachedRegions.set(locale, region);\n    }\n\n    return region;\n  } // If not, just try splitting the string.\n  // If the second part of the locale string is 'u',\n  // then this is a unicode extension, so ignore it.\n  // Otherwise, it should be the region.\n\n\n  let part = locale.split(\"-\")[1];\n  return part === \"u\" ? null : part;\n}\n\nfunction $14e0f24ef4ac5c92$var$getWeekStart(locale) {\n  // TODO: use Intl.Locale for this once browsers support the weekInfo property\n  // https://github.com/tc39/proposal-intl-locale-info\n  let region = $14e0f24ef4ac5c92$var$getRegion(locale);\n  return (0, $2fe286d2fb449abb$export$7a5acbd77d414bd9)[region] || 0;\n}\n\nfunction $14e0f24ef4ac5c92$export$ccc1b2479e7dd654(date, locale) {\n  let days = date.calendar.getDaysInMonth(date);\n  return Math.ceil(($14e0f24ef4ac5c92$export$2061056d06d7cdf7($14e0f24ef4ac5c92$export$a5a3b454ada2268e(date), locale) + days) / 7);\n}\n\nfunction $14e0f24ef4ac5c92$export$5c333a116e949cdd(a, b) {\n  if (a && b) return a.compare(b) <= 0 ? a : b;\n  return a || b;\n}\n\nfunction $14e0f24ef4ac5c92$export$a75f2bff57811055(a, b) {\n  if (a && b) return a.compare(b) >= 0 ? a : b;\n  return a || b;\n}\n\nconst $14e0f24ef4ac5c92$var$WEEKEND_DATA = {\n  AF: [4, 5],\n  AE: [5, 6],\n  BH: [5, 6],\n  DZ: [5, 6],\n  EG: [5, 6],\n  IL: [5, 6],\n  IQ: [5, 6],\n  IR: [5, 5],\n  JO: [5, 6],\n  KW: [5, 6],\n  LY: [5, 6],\n  OM: [5, 6],\n  QA: [5, 6],\n  SA: [5, 6],\n  SD: [5, 6],\n  SY: [5, 6],\n  YE: [5, 6]\n};\n\nfunction $14e0f24ef4ac5c92$export$618d60ea299da42(date, locale) {\n  let julian = date.calendar.toJulianDay(date); // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n\n  let dayOfWeek = Math.ceil(julian + 1) % 7;\n  if (dayOfWeek < 0) dayOfWeek += 7;\n  let region = $14e0f24ef4ac5c92$var$getRegion(locale); // Use Intl.Locale for this once weekInfo is supported.\n  // https://github.com/tc39/proposal-intl-locale-info\n\n  let [start, end] = $14e0f24ef4ac5c92$var$WEEKEND_DATA[region] || [6, 0];\n  return dayOfWeek === start || dayOfWeek === end;\n}\n\nfunction $14e0f24ef4ac5c92$export$ee9d87258e1d19ed(date, locale) {\n  return !$14e0f24ef4ac5c92$export$618d60ea299da42(date, locale);\n}\n\nfunction $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) {\n  date = $11d87f3f76e88657$export$b4a036af3fc0b032(date, new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());\n  let year = (0, $3b62074eb05584b2$export$c36e0ecb2d4fa69d)(date.era, date.year);\n  return $11d87f3f76e88657$var$epochFromParts(year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);\n}\n\nfunction $11d87f3f76e88657$var$epochFromParts(year, month, day, hour, minute, second, millisecond) {\n  // Note: Date.UTC() interprets one and two-digit years as being in the\n  // 20th century, so don't use it\n  let date = new Date();\n  date.setUTCHours(hour, minute, second, millisecond);\n  date.setUTCFullYear(year, month - 1, day);\n  return date.getTime();\n}\n\nfunction $11d87f3f76e88657$export$59c99f3515d3493f(ms, timeZone) {\n  // Fast path for UTC.\n  if (timeZone === \"UTC\") return 0; // Fast path: for local timezone after 1970, use native Date.\n\n  if (ms > 0 && timeZone === (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)()) return new Date(ms).getTimezoneOffset() * -60000;\n  let {\n    year: year,\n    month: month,\n    day: day,\n    hour: hour,\n    minute: minute,\n    second: second\n  } = $11d87f3f76e88657$var$getTimeZoneParts(ms, timeZone);\n  let utc = $11d87f3f76e88657$var$epochFromParts(year, month, day, hour, minute, second, 0);\n  return utc - Math.floor(ms / 1000) * 1000;\n}\n\nconst $11d87f3f76e88657$var$formattersByTimeZone = new Map();\n\nfunction $11d87f3f76e88657$var$getTimeZoneParts(ms, timeZone) {\n  let formatter = $11d87f3f76e88657$var$formattersByTimeZone.get(timeZone);\n\n  if (!formatter) {\n    formatter = new Intl.DateTimeFormat(\"en-US\", {\n      timeZone: timeZone,\n      hour12: false,\n      era: \"short\",\n      year: \"numeric\",\n      month: \"numeric\",\n      day: \"numeric\",\n      hour: \"numeric\",\n      minute: \"numeric\",\n      second: \"numeric\"\n    });\n    $11d87f3f76e88657$var$formattersByTimeZone.set(timeZone, formatter);\n  }\n\n  let parts = formatter.formatToParts(new Date(ms));\n  let namedParts = {};\n\n  for (let part of parts) if (part.type !== \"literal\") namedParts[part.type] = part.value;\n\n  return {\n    // Firefox returns B instead of BC... https://bugzilla.mozilla.org/show_bug.cgi?id=1752253\n    year: namedParts.era === \"BC\" || namedParts.era === \"B\" ? -namedParts.year + 1 : +namedParts.year,\n    month: +namedParts.month,\n    day: +namedParts.day,\n    hour: namedParts.hour === \"24\" ? 0 : +namedParts.hour,\n    minute: +namedParts.minute,\n    second: +namedParts.second\n  };\n}\n\nconst $11d87f3f76e88657$var$DAYMILLIS = 86400000;\n\nfunction $11d87f3f76e88657$export$136f38efe7caf549(date, timeZone) {\n  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date);\n  let earlier = ms - $11d87f3f76e88657$export$59c99f3515d3493f(ms - $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  let later = ms - $11d87f3f76e88657$export$59c99f3515d3493f(ms + $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  return $11d87f3f76e88657$var$getValidWallTimes(date, timeZone, earlier, later);\n}\n\nfunction $11d87f3f76e88657$var$getValidWallTimes(date, timeZone, earlier, later) {\n  let found = earlier === later ? [earlier] : [earlier, later];\n  return found.filter(absolute => $11d87f3f76e88657$var$isValidWallTime(date, timeZone, absolute));\n}\n\nfunction $11d87f3f76e88657$var$isValidWallTime(date, timeZone, absolute) {\n  let parts = $11d87f3f76e88657$var$getTimeZoneParts(absolute, timeZone);\n  return date.year === parts.year && date.month === parts.month && date.day === parts.day && date.hour === parts.hour && date.minute === parts.minute && date.second === parts.second;\n}\n\nfunction $11d87f3f76e88657$export$5107c82f94518f5c(date, timeZone) {\n  let disambiguation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"compatible\";\n  let dateTime = $11d87f3f76e88657$export$b21e0b124e224484(date); // Fast path: if the time zone is UTC, use native Date.\n\n  if (timeZone === \"UTC\") return $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime); // Fast path: if the time zone is the local timezone and disambiguation is compatible, use native Date.\n\n  if (timeZone === (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)() && disambiguation === \"compatible\") {\n    dateTime = $11d87f3f76e88657$export$b4a036af3fc0b032(dateTime, new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)()); // Don't use Date constructor here because two-digit years are interpreted in the 20th century.\n\n    let date1 = new Date();\n    let year = (0, $3b62074eb05584b2$export$c36e0ecb2d4fa69d)(dateTime.era, dateTime.year);\n    date1.setFullYear(year, dateTime.month - 1, dateTime.day);\n    date1.setHours(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n    return date1.getTime();\n  }\n\n  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime);\n  let offsetBefore = $11d87f3f76e88657$export$59c99f3515d3493f(ms - $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  let offsetAfter = $11d87f3f76e88657$export$59c99f3515d3493f(ms + $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  let valid = $11d87f3f76e88657$var$getValidWallTimes(dateTime, timeZone, ms - offsetBefore, ms - offsetAfter);\n  if (valid.length === 1) return valid[0];\n  if (valid.length > 1) switch (disambiguation) {\n    // 'compatible' means 'earlier' for \"fall back\" transitions\n    case \"compatible\":\n    case \"earlier\":\n      return valid[0];\n\n    case \"later\":\n      return valid[valid.length - 1];\n\n    case \"reject\":\n      throw new RangeError(\"Multiple possible absolute times found\");\n  }\n\n  switch (disambiguation) {\n    case \"earlier\":\n      return Math.min(ms - offsetBefore, ms - offsetAfter);\n    // 'compatible' means 'later' for \"spring forward\" transitions\n\n    case \"compatible\":\n    case \"later\":\n      return Math.max(ms - offsetBefore, ms - offsetAfter);\n\n    case \"reject\":\n      throw new RangeError(\"No such absolute time found\");\n  }\n}\n\nfunction $11d87f3f76e88657$export$e67a095c620b86fe(dateTime, timeZone) {\n  let disambiguation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"compatible\";\n  return new Date($11d87f3f76e88657$export$5107c82f94518f5c(dateTime, timeZone, disambiguation));\n}\n\nfunction $11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone) {\n  let offset = $11d87f3f76e88657$export$59c99f3515d3493f(ms, timeZone);\n  let date = new Date(ms + offset);\n  let year = date.getUTCFullYear();\n  let month = date.getUTCMonth() + 1;\n  let day = date.getUTCDate();\n  let hour = date.getUTCHours();\n  let minute = date.getUTCMinutes();\n  let second = date.getUTCSeconds();\n  let millisecond = date.getUTCMilliseconds();\n  return new (0, $35ea8db9cb2ccb90$export$d3b7288e7994edea)(year, month, day, timeZone, offset, hour, minute, second, millisecond);\n}\n\nfunction $11d87f3f76e88657$export$e57ff100d91bd4b9(date, timeZone) {\n  return $11d87f3f76e88657$export$1b96692a1ba042ac(date.getTime(), timeZone);\n}\n\nfunction $11d87f3f76e88657$export$d7f92bcd3596b086(date) {\n  return $11d87f3f76e88657$export$e57ff100d91bd4b9(date, (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)());\n}\n\nfunction $11d87f3f76e88657$export$93522d1a439f3617(dateTime) {\n  return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(dateTime.calendar, dateTime.era, dateTime.year, dateTime.month, dateTime.day);\n}\n\nfunction $11d87f3f76e88657$export$6f4d78149f3f53ac(date) {\n  return {\n    era: date.era,\n    year: date.year,\n    month: date.month,\n    day: date.day\n  };\n}\n\nfunction $11d87f3f76e88657$export$4d0393e732857be5(date) {\n  return {\n    hour: date.hour,\n    minute: date.minute,\n    second: date.second,\n    millisecond: date.millisecond\n  };\n}\n\nfunction $11d87f3f76e88657$export$b21e0b124e224484(date, time) {\n  let hour = 0,\n      minute = 0,\n      second = 0,\n      millisecond = 0;\n  if (\"timeZone\" in date) ({\n    hour: hour,\n    minute: minute,\n    second: second,\n    millisecond: millisecond\n  } = date);else if (\"hour\" in date && !time) return date;\n  if (time) ({\n    hour: hour,\n    minute: minute,\n    second: second,\n    millisecond: millisecond\n  } = time);\n  return new (0, $35ea8db9cb2ccb90$export$ca871e8dbb80966f)(date.calendar, date.era, date.year, date.month, date.day, hour, minute, second, millisecond);\n}\n\nfunction $11d87f3f76e88657$export$d33f79e3ffc3dc83(dateTime) {\n  return new (0, $35ea8db9cb2ccb90$export$680ea196effce5f)(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n}\n\nfunction $11d87f3f76e88657$export$b4a036af3fc0b032(date, calendar) {\n  if (date.calendar.identifier === calendar.identifier) return date;\n  let calendarDate = calendar.fromJulianDay(date.calendar.toJulianDay(date));\n  let copy = date.copy();\n  copy.calendar = calendar;\n  copy.era = calendarDate.era;\n  copy.year = calendarDate.year;\n  copy.month = calendarDate.month;\n  copy.day = calendarDate.day;\n  (0, $735220c2d4774dd3$export$c4e2ecac49351ef2)(copy);\n  return copy;\n}\n\nfunction $11d87f3f76e88657$export$84c95a83c799e074(date, timeZone, disambiguation) {\n  if (date instanceof (0, $35ea8db9cb2ccb90$export$d3b7288e7994edea)) {\n    if (date.timeZone === timeZone) return date;\n    return $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone);\n  }\n\n  let ms = $11d87f3f76e88657$export$5107c82f94518f5c(date, timeZone, disambiguation);\n  return $11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone);\n}\n\nfunction $11d87f3f76e88657$export$83aac07b4c37b25(date) {\n  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;\n  return new Date(ms);\n}\n\nfunction $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone) {\n  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;\n  return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone), date.calendar);\n}\n\nfunction $11d87f3f76e88657$export$d9b67bc93c097491(date) {\n  return $11d87f3f76e88657$export$538b00033cc11c75(date, (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)());\n}\n\nconst $735220c2d4774dd3$var$ONE_HOUR = 3600000;\n\nfunction $735220c2d4774dd3$export$e16d8520af44a096(date, duration) {\n  let mutableDate = date.copy();\n  let days = \"hour\" in mutableDate ? $735220c2d4774dd3$var$addTimeFields(mutableDate, duration) : 0;\n  $735220c2d4774dd3$var$addYears(mutableDate, duration.years || 0);\n  if (mutableDate.calendar.balanceYearMonth) mutableDate.calendar.balanceYearMonth(mutableDate, date);\n  mutableDate.month += duration.months || 0;\n  $735220c2d4774dd3$var$balanceYearMonth(mutableDate);\n  $735220c2d4774dd3$var$constrainMonthDay(mutableDate);\n  mutableDate.day += (duration.weeks || 0) * 7;\n  mutableDate.day += duration.days || 0;\n  mutableDate.day += days;\n  $735220c2d4774dd3$var$balanceDay(mutableDate);\n  if (mutableDate.calendar.balanceDate) mutableDate.calendar.balanceDate(mutableDate); // Constrain in case adding ended up with a date outside the valid range for the calendar system.\n  // The behavior here is slightly different than when constraining in the `set` function in that\n  // we adjust smaller fields to their minimum/maximum values rather than constraining each field\n  // individually. This matches the general behavior of `add` vs `set` regarding how fields are balanced.\n\n  if (mutableDate.year < 1) {\n    mutableDate.year = 1;\n    mutableDate.month = 1;\n    mutableDate.day = 1;\n  }\n\n  let maxYear = mutableDate.calendar.getYearsInEra(mutableDate);\n\n  if (mutableDate.year > maxYear) {\n    var _mutableDate_calendar, _mutableDate_calendar_isInverseEra;\n\n    let isInverseEra = (_mutableDate_calendar_isInverseEra = (_mutableDate_calendar = mutableDate.calendar).isInverseEra) === null || _mutableDate_calendar_isInverseEra === void 0 ? void 0 : _mutableDate_calendar_isInverseEra.call(_mutableDate_calendar, mutableDate);\n    mutableDate.year = maxYear;\n    mutableDate.month = isInverseEra ? 1 : mutableDate.calendar.getMonthsInYear(mutableDate);\n    mutableDate.day = isInverseEra ? 1 : mutableDate.calendar.getDaysInMonth(mutableDate);\n  }\n\n  if (mutableDate.month < 1) {\n    mutableDate.month = 1;\n    mutableDate.day = 1;\n  }\n\n  let maxMonth = mutableDate.calendar.getMonthsInYear(mutableDate);\n\n  if (mutableDate.month > maxMonth) {\n    mutableDate.month = maxMonth;\n    mutableDate.day = mutableDate.calendar.getDaysInMonth(mutableDate);\n  }\n\n  mutableDate.day = Math.max(1, Math.min(mutableDate.calendar.getDaysInMonth(mutableDate), mutableDate.day));\n  return mutableDate;\n}\n\nfunction $735220c2d4774dd3$var$addYears(date, years) {\n  var _date_calendar, _date_calendar_isInverseEra;\n\n  if ((_date_calendar_isInverseEra = (_date_calendar = date.calendar).isInverseEra) === null || _date_calendar_isInverseEra === void 0 ? void 0 : _date_calendar_isInverseEra.call(_date_calendar, date)) years = -years;\n  date.year += years;\n}\n\nfunction $735220c2d4774dd3$var$balanceYearMonth(date) {\n  while (date.month < 1) {\n    $735220c2d4774dd3$var$addYears(date, -1);\n    date.month += date.calendar.getMonthsInYear(date);\n  }\n\n  let monthsInYear = 0;\n\n  while (date.month > (monthsInYear = date.calendar.getMonthsInYear(date))) {\n    date.month -= monthsInYear;\n    $735220c2d4774dd3$var$addYears(date, 1);\n  }\n}\n\nfunction $735220c2d4774dd3$var$balanceDay(date) {\n  while (date.day < 1) {\n    date.month--;\n    $735220c2d4774dd3$var$balanceYearMonth(date);\n    date.day += date.calendar.getDaysInMonth(date);\n  }\n\n  while (date.day > date.calendar.getDaysInMonth(date)) {\n    date.day -= date.calendar.getDaysInMonth(date);\n    date.month++;\n    $735220c2d4774dd3$var$balanceYearMonth(date);\n  }\n}\n\nfunction $735220c2d4774dd3$var$constrainMonthDay(date) {\n  date.month = Math.max(1, Math.min(date.calendar.getMonthsInYear(date), date.month));\n  date.day = Math.max(1, Math.min(date.calendar.getDaysInMonth(date), date.day));\n}\n\nfunction $735220c2d4774dd3$export$c4e2ecac49351ef2(date) {\n  if (date.calendar.constrainDate) date.calendar.constrainDate(date);\n  date.year = Math.max(1, Math.min(date.calendar.getYearsInEra(date), date.year));\n  $735220c2d4774dd3$var$constrainMonthDay(date);\n}\n\nfunction $735220c2d4774dd3$export$3e2544e88a25bff8(duration) {\n  let inverseDuration = {};\n\n  for (let key in duration) if (typeof duration[key] === \"number\") inverseDuration[key] = -duration[key];\n\n  return inverseDuration;\n}\n\nfunction $735220c2d4774dd3$export$4e2d2ead65e5f7e3(date, duration) {\n  return $735220c2d4774dd3$export$e16d8520af44a096(date, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));\n}\n\nfunction $735220c2d4774dd3$export$adaa4cf7ef1b65be(date, fields) {\n  let mutableDate = date.copy();\n  if (fields.era != null) mutableDate.era = fields.era;\n  if (fields.year != null) mutableDate.year = fields.year;\n  if (fields.month != null) mutableDate.month = fields.month;\n  if (fields.day != null) mutableDate.day = fields.day;\n  $735220c2d4774dd3$export$c4e2ecac49351ef2(mutableDate);\n  return mutableDate;\n}\n\nfunction $735220c2d4774dd3$export$e5d5e1c1822b6e56(value, fields) {\n  let mutableValue = value.copy();\n  if (fields.hour != null) mutableValue.hour = fields.hour;\n  if (fields.minute != null) mutableValue.minute = fields.minute;\n  if (fields.second != null) mutableValue.second = fields.second;\n  if (fields.millisecond != null) mutableValue.millisecond = fields.millisecond;\n  $735220c2d4774dd3$export$7555de1e070510cb(mutableValue);\n  return mutableValue;\n}\n\nfunction $735220c2d4774dd3$var$balanceTime(time) {\n  time.second += Math.floor(time.millisecond / 1000);\n  time.millisecond = $735220c2d4774dd3$var$nonNegativeMod(time.millisecond, 1000);\n  time.minute += Math.floor(time.second / 60);\n  time.second = $735220c2d4774dd3$var$nonNegativeMod(time.second, 60);\n  time.hour += Math.floor(time.minute / 60);\n  time.minute = $735220c2d4774dd3$var$nonNegativeMod(time.minute, 60);\n  let days = Math.floor(time.hour / 24);\n  time.hour = $735220c2d4774dd3$var$nonNegativeMod(time.hour, 24);\n  return days;\n}\n\nfunction $735220c2d4774dd3$export$7555de1e070510cb(time) {\n  time.millisecond = Math.max(0, Math.min(time.millisecond, 1000));\n  time.second = Math.max(0, Math.min(time.second, 59));\n  time.minute = Math.max(0, Math.min(time.minute, 59));\n  time.hour = Math.max(0, Math.min(time.hour, 23));\n}\n\nfunction $735220c2d4774dd3$var$nonNegativeMod(a, b) {\n  let result = a % b;\n  if (result < 0) result += b;\n  return result;\n}\n\nfunction $735220c2d4774dd3$var$addTimeFields(time, duration) {\n  time.hour += duration.hours || 0;\n  time.minute += duration.minutes || 0;\n  time.second += duration.seconds || 0;\n  time.millisecond += duration.milliseconds || 0;\n  return $735220c2d4774dd3$var$balanceTime(time);\n}\n\nfunction $735220c2d4774dd3$export$7ed87b6bc2506470(time, duration) {\n  let res = time.copy();\n  $735220c2d4774dd3$var$addTimeFields(res, duration);\n  return res;\n}\n\nfunction $735220c2d4774dd3$export$fe34d3a381cd7501(time, duration) {\n  return $735220c2d4774dd3$export$7ed87b6bc2506470(time, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));\n}\n\nfunction $735220c2d4774dd3$export$d52ced6badfb9a4c(value, field, amount, options) {\n  let mutable = value.copy();\n\n  switch (field) {\n    case \"era\":\n      {\n        let eras = value.calendar.getEras();\n        let eraIndex = eras.indexOf(value.era);\n        if (eraIndex < 0) throw new Error(\"Invalid era: \" + value.era);\n        eraIndex = $735220c2d4774dd3$var$cycleValue(eraIndex, amount, 0, eras.length - 1, options === null || options === void 0 ? void 0 : options.round);\n        mutable.era = eras[eraIndex]; // Constrain the year and other fields within the era, so the era doesn't change when we balance below.\n\n        $735220c2d4774dd3$export$c4e2ecac49351ef2(mutable);\n        break;\n      }\n\n    case \"year\":\n      var _mutable_calendar, _mutable_calendar_isInverseEra;\n\n      if ((_mutable_calendar_isInverseEra = (_mutable_calendar = mutable.calendar).isInverseEra) === null || _mutable_calendar_isInverseEra === void 0 ? void 0 : _mutable_calendar_isInverseEra.call(_mutable_calendar, mutable)) amount = -amount; // The year field should not cycle within the era as that can cause weird behavior affecting other fields.\n      // We need to also allow values < 1 so that decrementing goes to the previous era. If we get -Infinity back\n      // we know we wrapped around after reaching 9999 (the maximum), so set the year back to 1.\n\n      mutable.year = $735220c2d4774dd3$var$cycleValue(value.year, amount, -Infinity, 9999, options === null || options === void 0 ? void 0 : options.round);\n      if (mutable.year === -Infinity) mutable.year = 1;\n      if (mutable.calendar.balanceYearMonth) mutable.calendar.balanceYearMonth(mutable, value);\n      break;\n\n    case \"month\":\n      mutable.month = $735220c2d4774dd3$var$cycleValue(value.month, amount, 1, value.calendar.getMonthsInYear(value), options === null || options === void 0 ? void 0 : options.round);\n      break;\n\n    case \"day\":\n      mutable.day = $735220c2d4774dd3$var$cycleValue(value.day, amount, 1, value.calendar.getDaysInMonth(value), options === null || options === void 0 ? void 0 : options.round);\n      break;\n\n    default:\n      throw new Error(\"Unsupported field \" + field);\n  }\n\n  if (value.calendar.balanceDate) value.calendar.balanceDate(mutable);\n  $735220c2d4774dd3$export$c4e2ecac49351ef2(mutable);\n  return mutable;\n}\n\nfunction $735220c2d4774dd3$export$dd02b3e0007dfe28(value, field, amount, options) {\n  let mutable = value.copy();\n\n  switch (field) {\n    case \"hour\":\n      {\n        let hours = value.hour;\n        let min = 0;\n        let max = 23;\n\n        if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {\n          let isPM = hours >= 12;\n          min = isPM ? 12 : 0;\n          max = isPM ? 23 : 11;\n        }\n\n        mutable.hour = $735220c2d4774dd3$var$cycleValue(hours, amount, min, max, options === null || options === void 0 ? void 0 : options.round);\n        break;\n      }\n\n    case \"minute\":\n      mutable.minute = $735220c2d4774dd3$var$cycleValue(value.minute, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);\n      break;\n\n    case \"second\":\n      mutable.second = $735220c2d4774dd3$var$cycleValue(value.second, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);\n      break;\n\n    case \"millisecond\":\n      mutable.millisecond = $735220c2d4774dd3$var$cycleValue(value.millisecond, amount, 0, 999, options === null || options === void 0 ? void 0 : options.round);\n      break;\n\n    default:\n      throw new Error(\"Unsupported field \" + field);\n  }\n\n  return mutable;\n}\n\nfunction $735220c2d4774dd3$var$cycleValue(value, amount, min, max) {\n  let round = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  if (round) {\n    value += Math.sign(amount);\n    if (value < min) value = max;\n    let div = Math.abs(amount);\n    if (amount > 0) value = Math.ceil(value / div) * div;else value = Math.floor(value / div) * div;\n    if (value > max) value = min;\n  } else {\n    value += amount;\n    if (value < min) value = max - (min - value - 1);else if (value > max) value = min + (value - max - 1);\n  }\n\n  return value;\n}\n\nfunction $735220c2d4774dd3$export$96b1d28349274637(dateTime, duration) {\n  let ms;\n\n  if (duration.years != null && duration.years !== 0 || duration.months != null && duration.months !== 0 || duration.days != null && duration.days !== 0) {\n    let res = $735220c2d4774dd3$export$e16d8520af44a096((0, $11d87f3f76e88657$export$b21e0b124e224484)(dateTime), {\n      years: duration.years,\n      months: duration.months,\n      days: duration.days\n    }); // Changing the date may change the timezone offset, so we need to recompute\n    // using the 'compatible' disambiguation.\n\n    ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(res, dateTime.timeZone);\n  } else // Otherwise, preserve the offset of the original date.\n    ms = (0, $11d87f3f76e88657$export$bd4fb2bc8bb06fb)(dateTime) - dateTime.offset; // Perform time manipulation in milliseconds rather than on the original time fields to account for DST.\n  // For example, adding one hour during a DST transition may result in the hour field staying the same or\n  // skipping an hour. This results in the offset field changing value instead of the specified field.\n\n\n  ms += duration.milliseconds || 0;\n  ms += (duration.seconds || 0) * 1000;\n  ms += (duration.minutes || 0) * 60000;\n  ms += (duration.hours || 0) * 3600000;\n  let res1 = (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone);\n  return (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(res1, dateTime.calendar);\n}\n\nfunction $735220c2d4774dd3$export$6814caac34ca03c7(dateTime, duration) {\n  return $735220c2d4774dd3$export$96b1d28349274637(dateTime, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));\n}\n\nfunction $735220c2d4774dd3$export$9a297d111fc86b79(dateTime, field, amount, options) {\n  // For date fields, we want the time to remain consistent and the UTC offset to potentially change to account for DST changes.\n  // For time fields, we want the time to change by the amount given. This may result in the hour field staying the same, but the UTC\n  // offset changing in the case of a backward DST transition, or skipping an hour in the case of a forward DST transition.\n  switch (field) {\n    case \"hour\":\n      {\n        let min = 0;\n        let max = 23;\n\n        if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {\n          let isPM = dateTime.hour >= 12;\n          min = isPM ? 12 : 0;\n          max = isPM ? 23 : 11;\n        } // The minimum and maximum hour may be affected by daylight saving time.\n        // For example, it might jump forward at midnight, and skip 1am.\n        // Or it might end at midnight and repeat the 11pm hour. To handle this, we get\n        // the possible absolute times for the min and max, and find the maximum range\n        // that is within the current day.\n\n\n        let plainDateTime = (0, $11d87f3f76e88657$export$b21e0b124e224484)(dateTime);\n        let minDate = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)($735220c2d4774dd3$export$e5d5e1c1822b6e56(plainDateTime, {\n          hour: min\n        }), new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());\n        let minAbsolute = [(0, $11d87f3f76e88657$export$5107c82f94518f5c)(minDate, dateTime.timeZone, \"earlier\"), (0, $11d87f3f76e88657$export$5107c82f94518f5c)(minDate, dateTime.timeZone, \"later\")].filter(ms => (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone).day === minDate.day)[0];\n        let maxDate = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)($735220c2d4774dd3$export$e5d5e1c1822b6e56(plainDateTime, {\n          hour: max\n        }), new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());\n        let maxAbsolute = [(0, $11d87f3f76e88657$export$5107c82f94518f5c)(maxDate, dateTime.timeZone, \"earlier\"), (0, $11d87f3f76e88657$export$5107c82f94518f5c)(maxDate, dateTime.timeZone, \"later\")].filter(ms => (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone).day === maxDate.day).pop(); // Since hours may repeat, we need to operate on the absolute time in milliseconds.\n        // This is done in hours from the Unix epoch so that cycleValue works correctly,\n        // and then converted back to milliseconds.\n\n        let ms = (0, $11d87f3f76e88657$export$bd4fb2bc8bb06fb)(dateTime) - dateTime.offset;\n        let hours = Math.floor(ms / $735220c2d4774dd3$var$ONE_HOUR);\n        let remainder = ms % $735220c2d4774dd3$var$ONE_HOUR;\n        ms = $735220c2d4774dd3$var$cycleValue(hours, amount, Math.floor(minAbsolute / $735220c2d4774dd3$var$ONE_HOUR), Math.floor(maxAbsolute / $735220c2d4774dd3$var$ONE_HOUR), options === null || options === void 0 ? void 0 : options.round) * $735220c2d4774dd3$var$ONE_HOUR + remainder; // Now compute the new timezone offset, and convert the absolute time back to local time.\n\n        return (0, $11d87f3f76e88657$export$b4a036af3fc0b032)((0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone), dateTime.calendar);\n      }\n\n    case \"minute\":\n    case \"second\":\n    case \"millisecond\":\n      // @ts-ignore\n      return $735220c2d4774dd3$export$dd02b3e0007dfe28(dateTime, field, amount, options);\n\n    case \"era\":\n    case \"year\":\n    case \"month\":\n    case \"day\":\n      {\n        let res = $735220c2d4774dd3$export$d52ced6badfb9a4c((0, $11d87f3f76e88657$export$b21e0b124e224484)(dateTime), field, amount, options);\n        let ms1 = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(res, dateTime.timeZone);\n        return (0, $11d87f3f76e88657$export$b4a036af3fc0b032)((0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms1, dateTime.timeZone), dateTime.calendar);\n      }\n\n    default:\n      throw new Error(\"Unsupported field \" + field);\n  }\n}\n\nfunction $735220c2d4774dd3$export$31b5430eb18be4f8(dateTime, fields, disambiguation) {\n  // Set the date/time fields, and recompute the UTC offset to account for DST changes.\n  // We also need to validate by converting back to a local time in case hours are skipped during forward DST transitions.\n  let plainDateTime = (0, $11d87f3f76e88657$export$b21e0b124e224484)(dateTime);\n  let res = $735220c2d4774dd3$export$e5d5e1c1822b6e56($735220c2d4774dd3$export$adaa4cf7ef1b65be(plainDateTime, fields), fields); // If the resulting plain date time values are equal, return the original time.\n  // We don't want to change the offset when setting the time to the same value.\n\n  if (res.compare(plainDateTime) === 0) return dateTime;\n  let ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(res, dateTime.timeZone, disambiguation);\n  return (0, $11d87f3f76e88657$export$b4a036af3fc0b032)((0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone), dateTime.calendar);\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n\nconst $fae977aafc393c5c$var$TIME_RE = /^(\\d{2})(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nconst $fae977aafc393c5c$var$DATE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})$/;\nconst $fae977aafc393c5c$var$DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nconst $fae977aafc393c5c$var$ZONED_DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:([+-]\\d{2})(?::(\\d{2}))?)?\\[(.*?)\\]$/;\nconst $fae977aafc393c5c$var$ABSOLUTE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:(?:([+-]\\d{2})(?::(\\d{2}))?)|Z)$/;\nconst $fae977aafc393c5c$var$DATE_TIME_DURATION_RE = /^((?<negative>-)|\\+)?P((?<years>\\d*)Y)?((?<months>\\d*)M)?((?<weeks>\\d*)W)?((?<days>\\d*)D)?((?<time>T)((?<hours>\\d*[.,]?\\d{1,9})H)?((?<minutes>\\d*[.,]?\\d{1,9})M)?((?<seconds>\\d*[.,]?\\d{1,9})S)?)?$/;\nconst $fae977aafc393c5c$var$requiredDurationTimeGroups = [\"hours\", \"minutes\", \"seconds\"];\nconst $fae977aafc393c5c$var$requiredDurationGroups = [\"years\", \"months\", \"weeks\", \"days\", ...$fae977aafc393c5c$var$requiredDurationTimeGroups];\n\nfunction $fae977aafc393c5c$export$c9698ec7f05a07e1(value) {\n  let m = value.match($fae977aafc393c5c$var$TIME_RE);\n  if (!m) throw new Error(\"Invalid ISO 8601 time string: \" + value);\n  return new (0, $35ea8db9cb2ccb90$export$680ea196effce5f)($fae977aafc393c5c$var$parseNumber(m[1], 0, 23), m[2] ? $fae977aafc393c5c$var$parseNumber(m[2], 0, 59) : 0, m[3] ? $fae977aafc393c5c$var$parseNumber(m[3], 0, 59) : 0, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, Infinity) * 1000 : 0);\n}\n\nfunction $fae977aafc393c5c$export$6b862160d295c8e(value) {\n  let m = value.match($fae977aafc393c5c$var$DATE_RE);\n  if (!m) throw new Error(\"Invalid ISO 8601 date string: \" + value);\n  let date = new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)($fae977aafc393c5c$var$parseNumber(m[1], 0, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1);\n  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  return date;\n}\n\nfunction $fae977aafc393c5c$export$588937bcd60ade55(value) {\n  let m = value.match($fae977aafc393c5c$var$DATE_TIME_RE);\n  if (!m) throw new Error(\"Invalid ISO 8601 date time string: \" + value);\n  let date = new (0, $35ea8db9cb2ccb90$export$ca871e8dbb80966f)($fae977aafc393c5c$var$parseNumber(m[1], 1, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);\n  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  return date;\n}\n\nfunction $fae977aafc393c5c$export$fd7893f06e92a6a4(value, disambiguation) {\n  let m = value.match($fae977aafc393c5c$var$ZONED_DATE_TIME_RE);\n  if (!m) throw new Error(\"Invalid ISO 8601 date time string: \" + value);\n  let date = new (0, $35ea8db9cb2ccb90$export$d3b7288e7994edea)($fae977aafc393c5c$var$parseNumber(m[1], 1, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, m[10], 0, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);\n  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  let plainDateTime = (0, $11d87f3f76e88657$export$b21e0b124e224484)(date);\n  let ms;\n\n  if (m[8]) {\n    var _m_;\n\n    date.offset = $fae977aafc393c5c$var$parseNumber(m[8], -23, 23) * 3600000 + $fae977aafc393c5c$var$parseNumber((_m_ = m[9]) !== null && _m_ !== void 0 ? _m_ : \"0\", 0, 59) * 60000;\n    ms = (0, $11d87f3f76e88657$export$bd4fb2bc8bb06fb)(date) - date.offset; // Validate offset against parsed date.\n\n    let absolutes = (0, $11d87f3f76e88657$export$136f38efe7caf549)(plainDateTime, date.timeZone);\n    if (!absolutes.includes(ms)) throw new Error(`Offset ${$fae977aafc393c5c$var$offsetToString(date.offset)} is invalid for ${$fae977aafc393c5c$export$4223de14708adc63(date)} in ${date.timeZone}`);\n  } else // Convert to absolute and back to fix invalid times due to DST.\n    ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)((0, $11d87f3f76e88657$export$b21e0b124e224484)(plainDateTime), date.timeZone, disambiguation);\n\n  return (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, date.timeZone);\n}\n\nfunction $fae977aafc393c5c$export$5adfdab05168c219(value, timeZone) {\n  let m = value.match($fae977aafc393c5c$var$ABSOLUTE_RE);\n  if (!m) throw new Error(\"Invalid ISO 8601 date time string: \" + value);\n  let date = new (0, $35ea8db9cb2ccb90$export$d3b7288e7994edea)($fae977aafc393c5c$var$parseNumber(m[1], 1, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, timeZone, 0, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);\n  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n\n  var _m_;\n\n  if (m[8]) date.offset = $fae977aafc393c5c$var$parseNumber(m[8], -23, 23) * 3600000 + $fae977aafc393c5c$var$parseNumber((_m_ = m[9]) !== null && _m_ !== void 0 ? _m_ : \"0\", 0, 59) * 60000;\n  return (0, $11d87f3f76e88657$export$538b00033cc11c75)(date, timeZone);\n}\n\nfunction $fae977aafc393c5c$export$8e384432362ed0f0(value) {\n  return $fae977aafc393c5c$export$5adfdab05168c219(value, (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)());\n}\n\nfunction $fae977aafc393c5c$var$parseNumber(value, min, max) {\n  let val = Number(value);\n  if (val < min || val > max) throw new RangeError(`Value out of range: ${min} <= ${val} <= ${max}`);\n  return val;\n}\n\nfunction $fae977aafc393c5c$export$f59dee82248f5ad4(time) {\n  return `${String(time.hour).padStart(2, \"0\")}:${String(time.minute).padStart(2, \"0\")}:${String(time.second).padStart(2, \"0\")}${time.millisecond ? String(time.millisecond / 1000).slice(1) : \"\"}`;\n}\n\nfunction $fae977aafc393c5c$export$60dfd74aa96791bd(date) {\n  let gregorianDate = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(date, new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());\n  return `${String(gregorianDate.year).padStart(4, \"0\")}-${String(gregorianDate.month).padStart(2, \"0\")}-${String(gregorianDate.day).padStart(2, \"0\")}`;\n}\n\nfunction $fae977aafc393c5c$export$4223de14708adc63(date) {\n  // @ts-ignore\n  return `${$fae977aafc393c5c$export$60dfd74aa96791bd(date)}T${$fae977aafc393c5c$export$f59dee82248f5ad4(date)}`;\n}\n\nfunction $fae977aafc393c5c$var$offsetToString(offset) {\n  let sign = Math.sign(offset) < 0 ? \"-\" : \"+\";\n  offset = Math.abs(offset);\n  let offsetHours = Math.floor(offset / 3600000);\n  let offsetMinutes = offset % 3600000 / 60000;\n  return `${sign}${String(offsetHours).padStart(2, \"0\")}:${String(offsetMinutes).padStart(2, \"0\")}`;\n}\n\nfunction $fae977aafc393c5c$export$bf79f1ebf4b18792(date) {\n  return `${$fae977aafc393c5c$export$4223de14708adc63(date)}${$fae977aafc393c5c$var$offsetToString(date.offset)}[${date.timeZone}]`;\n}\n\nfunction $fae977aafc393c5c$export$ecae829bb3747ea6(value) {\n  var _match_groups, _match_groups1, _match_groups2, _match_groups3, _match_groups4, _match_groups5, _match_groups6, _match_groups7, _match_groups8;\n\n  const match = value.match($fae977aafc393c5c$var$DATE_TIME_DURATION_RE);\n  if (!match) throw new Error(`Invalid ISO 8601 Duration string: ${value}`);\n\n  const parseDurationGroup = (group, isNegative, min, max) => {\n    if (!group) return 0;\n\n    try {\n      const sign = isNegative ? -1 : 1;\n      return sign * $fae977aafc393c5c$var$parseNumber(group.replace(\",\", \".\"), min, max);\n    } catch {\n      throw new Error(`Invalid ISO 8601 Duration string: ${value}`);\n    }\n  };\n\n  const isNegative = !!((_match_groups = match.groups) === null || _match_groups === void 0 ? void 0 : _match_groups.negative);\n  const hasRequiredGroups = $fae977aafc393c5c$var$requiredDurationGroups.some(group => {\n    var _match_groups;\n\n    return (_match_groups = match.groups) === null || _match_groups === void 0 ? void 0 : _match_groups[group];\n  });\n  if (!hasRequiredGroups) throw new Error(`Invalid ISO 8601 Duration string: ${value}`);\n  const durationStringIncludesTime = (_match_groups1 = match.groups) === null || _match_groups1 === void 0 ? void 0 : _match_groups1.time;\n\n  if (durationStringIncludesTime) {\n    const hasRequiredDurationTimeGroups = $fae977aafc393c5c$var$requiredDurationTimeGroups.some(group => {\n      var _match_groups;\n\n      return (_match_groups = match.groups) === null || _match_groups === void 0 ? void 0 : _match_groups[group];\n    });\n    if (!hasRequiredDurationTimeGroups) throw new Error(`Invalid ISO 8601 Duration string: ${value}`);\n  }\n\n  const duration = {\n    years: parseDurationGroup((_match_groups2 = match.groups) === null || _match_groups2 === void 0 ? void 0 : _match_groups2.years, isNegative, 0, 9999),\n    months: parseDurationGroup((_match_groups3 = match.groups) === null || _match_groups3 === void 0 ? void 0 : _match_groups3.months, isNegative, 0, 12),\n    weeks: parseDurationGroup((_match_groups4 = match.groups) === null || _match_groups4 === void 0 ? void 0 : _match_groups4.weeks, isNegative, 0, Infinity),\n    days: parseDurationGroup((_match_groups5 = match.groups) === null || _match_groups5 === void 0 ? void 0 : _match_groups5.days, isNegative, 0, 31),\n    hours: parseDurationGroup((_match_groups6 = match.groups) === null || _match_groups6 === void 0 ? void 0 : _match_groups6.hours, isNegative, 0, 23),\n    minutes: parseDurationGroup((_match_groups7 = match.groups) === null || _match_groups7 === void 0 ? void 0 : _match_groups7.minutes, isNegative, 0, 59),\n    seconds: parseDurationGroup((_match_groups8 = match.groups) === null || _match_groups8 === void 0 ? void 0 : _match_groups8.seconds, isNegative, 0, 59)\n  };\n  if (duration.hours % 1 !== 0 && (duration.minutes || duration.seconds)) throw new Error(`Invalid ISO 8601 Duration string: ${value} - only the smallest unit can be fractional`);\n  if (duration.minutes % 1 !== 0 && duration.seconds) throw new Error(`Invalid ISO 8601 Duration string: ${value} - only the smallest unit can be fractional`);\n  return duration;\n}\n\nfunction $35ea8db9cb2ccb90$var$shiftArgs(args) {\n  let calendar = typeof args[0] === \"object\" ? args.shift() : new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)();\n  let era;\n  if (typeof args[0] === \"string\") era = args.shift();else {\n    let eras = calendar.getEras();\n    era = eras[eras.length - 1];\n  }\n  let year = args.shift();\n  let month = args.shift();\n  let day = args.shift();\n  return [calendar, era, year, month, day];\n}\n\nvar // This prevents TypeScript from allowing other types with the same fields to match.\n// i.e. a ZonedDateTime should not be be passable to a parameter that expects CalendarDate.\n// If that behavior is desired, use the AnyCalendarDate interface instead.\n// @ts-ignore\n$35ea8db9cb2ccb90$var$_type = /*#__PURE__*/new WeakMap();\n\nclass $35ea8db9cb2ccb90$export$99faa760c7908e4f {\n  /** Returns a copy of this date. */\n  copy() {\n    if (this.era) return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this.calendar, this.era, this.year, this.month, this.day);else return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this.calendar, this.year, this.month, this.day);\n  }\n  /** Returns a new `CalendarDate` with the given duration added to it. */\n\n\n  add(duration) {\n    return (0, $735220c2d4774dd3$export$e16d8520af44a096)(this, duration);\n  }\n  /** Returns a new `CalendarDate` with the given duration subtracted from it. */\n\n\n  subtract(duration) {\n    return (0, $735220c2d4774dd3$export$4e2d2ead65e5f7e3)(this, duration);\n  }\n  /** Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n\n\n  set(fields) {\n    return (0, $735220c2d4774dd3$export$adaa4cf7ef1b65be)(this, fields);\n  }\n  /**\n  * Returns a new `CalendarDate` with the given field adjusted by a specified amount.\n  * When the resulting value reaches the limits of the field, it wraps around.\n  */\n\n\n  cycle(field, amount, options) {\n    return (0, $735220c2d4774dd3$export$d52ced6badfb9a4c)(this, field, amount, options);\n  }\n  /** Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone. */\n\n\n  toDate(timeZone) {\n    return (0, $11d87f3f76e88657$export$e67a095c620b86fe)(this, timeZone);\n  }\n  /** Converts the date to an ISO 8601 formatted string. */\n\n\n  toString() {\n    return (0, $fae977aafc393c5c$export$60dfd74aa96791bd)(this);\n  }\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n\n\n  compare(b) {\n    return (0, $14e0f24ef4ac5c92$export$68781ddf31c0090f)(this, b);\n  }\n\n  constructor() {\n    (0, $cUVuN$swchelperssrc_class_private_field_initmjs)(this, $35ea8db9cb2ccb90$var$_type, {\n      writable: true,\n      value: void 0\n    });\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    (0, $735220c2d4774dd3$export$c4e2ecac49351ef2)(this);\n  }\n\n}\n\nvar // This prevents TypeScript from allowing other types with the same fields to match.\n// @ts-ignore\n$35ea8db9cb2ccb90$var$_type1 = /*#__PURE__*/new WeakMap();\n\nclass $35ea8db9cb2ccb90$export$680ea196effce5f {\n  /** Returns a copy of this time. */\n  copy() {\n    return new $35ea8db9cb2ccb90$export$680ea196effce5f(this.hour, this.minute, this.second, this.millisecond);\n  }\n  /** Returns a new `Time` with the given duration added to it. */\n\n\n  add(duration) {\n    return (0, $735220c2d4774dd3$export$7ed87b6bc2506470)(this, duration);\n  }\n  /** Returns a new `Time` with the given duration subtracted from it. */\n\n\n  subtract(duration) {\n    return (0, $735220c2d4774dd3$export$fe34d3a381cd7501)(this, duration);\n  }\n  /** Returns a new `Time` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n\n\n  set(fields) {\n    return (0, $735220c2d4774dd3$export$e5d5e1c1822b6e56)(this, fields);\n  }\n  /**\n  * Returns a new `Time` with the given field adjusted by a specified amount.\n  * When the resulting value reaches the limits of the field, it wraps around.\n  */\n\n\n  cycle(field, amount, options) {\n    return (0, $735220c2d4774dd3$export$dd02b3e0007dfe28)(this, field, amount, options);\n  }\n  /** Converts the time to an ISO 8601 formatted string. */\n\n\n  toString() {\n    return (0, $fae977aafc393c5c$export$f59dee82248f5ad4)(this);\n  }\n  /** Compares this time with another. A negative result indicates that this time is before the given one, and a positive time indicates that it is after. */\n\n\n  compare(b) {\n    return (0, $14e0f24ef4ac5c92$export$c19a80a9721b80f6)(this, b);\n  }\n\n  constructor() {\n    let hour = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let minute = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let second = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let millisecond = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    (0, $cUVuN$swchelperssrc_class_private_field_initmjs)(this, $35ea8db9cb2ccb90$var$_type1, {\n      writable: true,\n      value: void 0\n    });\n    this.hour = hour;\n    this.minute = minute;\n    this.second = second;\n    this.millisecond = millisecond;\n    (0, $735220c2d4774dd3$export$7555de1e070510cb)(this);\n  }\n\n}\n\nvar // This prevents TypeScript from allowing other types with the same fields to match.\n// @ts-ignore\n$35ea8db9cb2ccb90$var$_type2 = /*#__PURE__*/new WeakMap();\n\nclass $35ea8db9cb2ccb90$export$ca871e8dbb80966f {\n  /** Returns a copy of this date. */\n  copy() {\n    if (this.era) return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(this.calendar, this.era, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);else return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(this.calendar, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n  }\n  /** Returns a new `CalendarDateTime` with the given duration added to it. */\n\n\n  add(duration) {\n    return (0, $735220c2d4774dd3$export$e16d8520af44a096)(this, duration);\n  }\n  /** Returns a new `CalendarDateTime` with the given duration subtracted from it. */\n\n\n  subtract(duration) {\n    return (0, $735220c2d4774dd3$export$4e2d2ead65e5f7e3)(this, duration);\n  }\n  /** Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n\n\n  set(fields) {\n    return (0, $735220c2d4774dd3$export$adaa4cf7ef1b65be)((0, $735220c2d4774dd3$export$e5d5e1c1822b6e56)(this, fields), fields);\n  }\n  /**\n  * Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.\n  * When the resulting value reaches the limits of the field, it wraps around.\n  */\n\n\n  cycle(field, amount, options) {\n    switch (field) {\n      case \"era\":\n      case \"year\":\n      case \"month\":\n      case \"day\":\n        return (0, $735220c2d4774dd3$export$d52ced6badfb9a4c)(this, field, amount, options);\n\n      default:\n        return (0, $735220c2d4774dd3$export$dd02b3e0007dfe28)(this, field, amount, options);\n    }\n  }\n  /** Converts the date to a native JavaScript Date object in the given time zone. */\n\n\n  toDate(timeZone, disambiguation) {\n    return (0, $11d87f3f76e88657$export$e67a095c620b86fe)(this, timeZone, disambiguation);\n  }\n  /** Converts the date to an ISO 8601 formatted string. */\n\n\n  toString() {\n    return (0, $fae977aafc393c5c$export$4223de14708adc63)(this);\n  }\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n\n\n  compare(b) {\n    let res = (0, $14e0f24ef4ac5c92$export$68781ddf31c0090f)(this, b);\n    if (res === 0) return (0, $14e0f24ef4ac5c92$export$c19a80a9721b80f6)(this, (0, $11d87f3f76e88657$export$b21e0b124e224484)(b));\n    return res;\n  }\n\n  constructor() {\n    (0, $cUVuN$swchelperssrc_class_private_field_initmjs)(this, $35ea8db9cb2ccb90$var$_type2, {\n      writable: true,\n      value: void 0\n    });\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    this.hour = args.shift() || 0;\n    this.minute = args.shift() || 0;\n    this.second = args.shift() || 0;\n    this.millisecond = args.shift() || 0;\n    (0, $735220c2d4774dd3$export$c4e2ecac49351ef2)(this);\n  }\n\n}\n\nvar // This prevents TypeScript from allowing other types with the same fields to match.\n// @ts-ignore\n$35ea8db9cb2ccb90$var$_type3 = /*#__PURE__*/new WeakMap();\n\nclass $35ea8db9cb2ccb90$export$d3b7288e7994edea {\n  /** Returns a copy of this date. */\n  copy() {\n    if (this.era) return new $35ea8db9cb2ccb90$export$d3b7288e7994edea(this.calendar, this.era, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);else return new $35ea8db9cb2ccb90$export$d3b7288e7994edea(this.calendar, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);\n  }\n  /** Returns a new `ZonedDateTime` with the given duration added to it. */\n\n\n  add(duration) {\n    return (0, $735220c2d4774dd3$export$96b1d28349274637)(this, duration);\n  }\n  /** Returns a new `ZonedDateTime` with the given duration subtracted from it. */\n\n\n  subtract(duration) {\n    return (0, $735220c2d4774dd3$export$6814caac34ca03c7)(this, duration);\n  }\n  /** Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n\n\n  set(fields, disambiguation) {\n    return (0, $735220c2d4774dd3$export$31b5430eb18be4f8)(this, fields, disambiguation);\n  }\n  /**\n  * Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.\n  * When the resulting value reaches the limits of the field, it wraps around.\n  */\n\n\n  cycle(field, amount, options) {\n    return (0, $735220c2d4774dd3$export$9a297d111fc86b79)(this, field, amount, options);\n  }\n  /** Converts the date to a native JavaScript Date object. */\n\n\n  toDate() {\n    return (0, $11d87f3f76e88657$export$83aac07b4c37b25)(this);\n  }\n  /** Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier. */\n\n\n  toString() {\n    return (0, $fae977aafc393c5c$export$bf79f1ebf4b18792)(this);\n  }\n  /** Converts the date to an ISO 8601 formatted string in UTC. */\n\n\n  toAbsoluteString() {\n    return this.toDate().toISOString();\n  }\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n\n\n  compare(b) {\n    // TODO: Is this a bad idea??\n    return this.toDate().getTime() - (0, $11d87f3f76e88657$export$84c95a83c799e074)(b, this.timeZone).toDate().getTime();\n  }\n\n  constructor() {\n    (0, $cUVuN$swchelperssrc_class_private_field_initmjs)(this, $35ea8db9cb2ccb90$var$_type3, {\n      writable: true,\n      value: void 0\n    });\n\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);\n    let timeZone = args.shift();\n    let offset = args.shift();\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    this.timeZone = timeZone;\n    this.offset = offset;\n    this.hour = args.shift() || 0;\n    this.minute = args.shift() || 0;\n    this.second = args.shift() || 0;\n    this.millisecond = args.shift() || 0;\n    (0, $735220c2d4774dd3$export$c4e2ecac49351ef2)(this);\n  }\n\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Portions of the code in this file are based on code from the TC39 Temporal proposal.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\n\nconst $62225008020f0a13$var$ERA_START_DATES = [[1868, 9, 8], [1912, 7, 30], [1926, 12, 25], [1989, 1, 8], [2019, 5, 1]];\nconst $62225008020f0a13$var$ERA_END_DATES = [[1912, 7, 29], [1926, 12, 24], [1989, 1, 7], [2019, 4, 30]];\nconst $62225008020f0a13$var$ERA_ADDENDS = [1867, 1911, 1925, 1988, 2018];\nconst $62225008020f0a13$var$ERA_NAMES = [\"meiji\", \"taisho\", \"showa\", \"heisei\", \"reiwa\"];\n\nfunction $62225008020f0a13$var$findEraFromGregorianDate(date) {\n  const idx = $62225008020f0a13$var$ERA_START_DATES.findIndex(_ref => {\n    let [year, month, day] = _ref;\n    if (date.year < year) return true;\n    if (date.year === year && date.month < month) return true;\n    if (date.year === year && date.month === month && date.day < day) return true;\n    return false;\n  });\n  if (idx === -1) return $62225008020f0a13$var$ERA_START_DATES.length - 1;\n  if (idx === 0) return 0;\n  return idx - 1;\n}\n\nfunction $62225008020f0a13$var$toGregorian(date) {\n  let eraAddend = $62225008020f0a13$var$ERA_ADDENDS[$62225008020f0a13$var$ERA_NAMES.indexOf(date.era)];\n  if (!eraAddend) throw new Error(\"Unknown era: \" + date.era);\n  return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(date.year + eraAddend, date.month, date.day);\n}\n\nclass $62225008020f0a13$export$b746ab2b60cdffbf extends (0, $3b62074eb05584b2$export$80ee6245ec4f29ec) {\n  fromJulianDay(jd) {\n    let date = super.fromJulianDay(jd);\n    let era = $62225008020f0a13$var$findEraFromGregorianDate(date);\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, $62225008020f0a13$var$ERA_NAMES[era], date.year - $62225008020f0a13$var$ERA_ADDENDS[era], date.month, date.day);\n  }\n\n  toJulianDay(date) {\n    return super.toJulianDay($62225008020f0a13$var$toGregorian(date));\n  }\n\n  balanceDate(date) {\n    let gregorianDate = $62225008020f0a13$var$toGregorian(date);\n    let era = $62225008020f0a13$var$findEraFromGregorianDate(gregorianDate);\n\n    if ($62225008020f0a13$var$ERA_NAMES[era] !== date.era) {\n      date.era = $62225008020f0a13$var$ERA_NAMES[era];\n      date.year = gregorianDate.year - $62225008020f0a13$var$ERA_ADDENDS[era];\n    } // Constrain in case we went before the first supported era.\n\n\n    this.constrainDate(date);\n  }\n\n  constrainDate(date) {\n    let idx = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);\n    let end = $62225008020f0a13$var$ERA_END_DATES[idx];\n\n    if (end != null) {\n      let [endYear, endMonth, endDay] = end; // Constrain the year to the maximum possible value in the era.\n      // Then constrain the month and day fields within that.\n\n      let maxYear = endYear - $62225008020f0a13$var$ERA_ADDENDS[idx];\n      date.year = Math.max(1, Math.min(maxYear, date.year));\n\n      if (date.year === maxYear) {\n        date.month = Math.min(endMonth, date.month);\n        if (date.month === endMonth) date.day = Math.min(endDay, date.day);\n      }\n    }\n\n    if (date.year === 1 && idx >= 0) {\n      let [, startMonth, startDay] = $62225008020f0a13$var$ERA_START_DATES[idx];\n      date.month = Math.max(startMonth, date.month);\n      if (date.month === startMonth) date.day = Math.max(startDay, date.day);\n    }\n  }\n\n  getEras() {\n    return $62225008020f0a13$var$ERA_NAMES;\n  }\n\n  getYearsInEra(date) {\n    // Get the number of years in the era, taking into account the date's month and day fields.\n    let era = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);\n    let cur = $62225008020f0a13$var$ERA_START_DATES[era];\n    let next = $62225008020f0a13$var$ERA_START_DATES[era + 1];\n    if (next == null) // 9999 gregorian is the maximum year allowed.\n      return 9999 - cur[0] + 1;\n    let years = next[0] - cur[0];\n    if (date.month < next[1] || date.month === next[1] && date.day < next[2]) years++;\n    return years;\n  }\n\n  getDaysInMonth(date) {\n    return super.getDaysInMonth($62225008020f0a13$var$toGregorian(date));\n  }\n\n  getMinimumMonthInYear(date) {\n    let start = $62225008020f0a13$var$getMinimums(date);\n    return start ? start[1] : 1;\n  }\n\n  getMinimumDayInMonth(date) {\n    let start = $62225008020f0a13$var$getMinimums(date);\n    return start && date.month === start[1] ? start[2] : 1;\n  }\n\n  constructor() {\n    super(...arguments);\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(this, \"identifier\", \"japanese\");\n  }\n\n}\n\nfunction $62225008020f0a13$var$getMinimums(date) {\n  if (date.year === 1) {\n    let idx = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);\n    return $62225008020f0a13$var$ERA_START_DATES[idx];\n  }\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\n\nconst $8d73d47422ca7302$var$BUDDHIST_ERA_START = -543;\n\nclass $8d73d47422ca7302$export$42d20a78301dee44 extends (0, $3b62074eb05584b2$export$80ee6245ec4f29ec) {\n  fromJulianDay(jd) {\n    let gregorianDate = super.fromJulianDay(jd);\n    let year = (0, $3b62074eb05584b2$export$c36e0ecb2d4fa69d)(gregorianDate.era, gregorianDate.year);\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, year - $8d73d47422ca7302$var$BUDDHIST_ERA_START, gregorianDate.month, gregorianDate.day);\n  }\n\n  toJulianDay(date) {\n    return super.toJulianDay($8d73d47422ca7302$var$toGregorian(date));\n  }\n\n  getEras() {\n    return [\"BE\"];\n  }\n\n  getDaysInMonth(date) {\n    return super.getDaysInMonth($8d73d47422ca7302$var$toGregorian(date));\n  }\n\n  balanceDate() {}\n\n  constructor() {\n    super(...arguments);\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(this, \"identifier\", \"buddhist\");\n  }\n\n}\n\nfunction $8d73d47422ca7302$var$toGregorian(date) {\n  let [era, year] = (0, $3b62074eb05584b2$export$4475b7e617eb123c)(date.year + $8d73d47422ca7302$var$BUDDHIST_ERA_START);\n  return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(era, year, date.month, date.day);\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\n\nconst $5f31bd6f0c8940b2$var$TAIWAN_ERA_START = 1911;\n\nfunction $5f31bd6f0c8940b2$var$gregorianYear(date) {\n  return date.era === \"minguo\" ? date.year + $5f31bd6f0c8940b2$var$TAIWAN_ERA_START : 1 - date.year + $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;\n}\n\nfunction $5f31bd6f0c8940b2$var$gregorianToTaiwan(year) {\n  let y = year - $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;\n  if (y > 0) return [\"minguo\", y];else return [\"before_minguo\", 1 - y];\n}\n\nclass $5f31bd6f0c8940b2$export$65e01080afcb0799 extends (0, $3b62074eb05584b2$export$80ee6245ec4f29ec) {\n  fromJulianDay(jd) {\n    let date = super.fromJulianDay(jd);\n    let extendedYear = (0, $3b62074eb05584b2$export$c36e0ecb2d4fa69d)(date.era, date.year);\n    let [era, year] = $5f31bd6f0c8940b2$var$gregorianToTaiwan(extendedYear);\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, era, year, date.month, date.day);\n  }\n\n  toJulianDay(date) {\n    return super.toJulianDay($5f31bd6f0c8940b2$var$toGregorian(date));\n  }\n\n  getEras() {\n    return [\"before_minguo\", \"minguo\"];\n  }\n\n  balanceDate(date) {\n    let [era, year] = $5f31bd6f0c8940b2$var$gregorianToTaiwan($5f31bd6f0c8940b2$var$gregorianYear(date));\n    date.era = era;\n    date.year = year;\n  }\n\n  isInverseEra(date) {\n    return date.era === \"before_minguo\";\n  }\n\n  getDaysInMonth(date) {\n    return super.getDaysInMonth($5f31bd6f0c8940b2$var$toGregorian(date));\n  }\n\n  getYearsInEra(date) {\n    return date.era === \"before_minguo\" ? 9999 : 9999 - $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;\n  }\n\n  constructor() {\n    super(...arguments);\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(this, \"identifier\", \"roc\") // Republic of China\n    ;\n  }\n\n}\n\nfunction $5f31bd6f0c8940b2$var$toGregorian(date) {\n  let [era, year] = (0, $3b62074eb05584b2$export$4475b7e617eb123c)($5f31bd6f0c8940b2$var$gregorianYear(date));\n  return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(era, year, date.month, date.day);\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\n\nconst $f3ed2e4472ae7e25$var$PERSIAN_EPOCH = 1948321; // 622/03/19 Julian C.E.\n\nfunction $f3ed2e4472ae7e25$var$isLeapYear(year) {\n  let y0 = year > 0 ? year - 474 : year - 473;\n  let y1 = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(y0, 2820) + 474;\n  return (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)((y1 + 38) * 31, 128) < 31;\n}\n\nfunction $f3ed2e4472ae7e25$var$persianToJulianDay(year, month, day) {\n  let y0 = year > 0 ? year - 474 : year - 473;\n  let y1 = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(y0, 2820) + 474;\n  let offset = month <= 7 ? 31 * (month - 1) : 30 * (month - 1) + 6;\n  return $f3ed2e4472ae7e25$var$PERSIAN_EPOCH - 1 + 1029983 * Math.floor(y0 / 2820) + 365 * (y1 - 1) + Math.floor((31 * y1 - 5) / 128) + offset + day;\n}\n\nclass $f3ed2e4472ae7e25$export$37fccdbfd14c5939 {\n  fromJulianDay(jd) {\n    let d0 = jd - $f3ed2e4472ae7e25$var$persianToJulianDay(475, 1, 1);\n    let n2820 = Math.floor(d0 / 1029983);\n    let d1 = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(d0, 1029983);\n    let y2820 = d1 === 1029982 ? 2820 : Math.floor((128 * d1 + 46878) / 46751);\n    let year = 474 + 2820 * n2820 + y2820;\n    if (year <= 0) year--;\n    let yDay = jd - $f3ed2e4472ae7e25$var$persianToJulianDay(year, 1, 1) + 1;\n    let month = yDay <= 186 ? Math.ceil(yDay / 31) : Math.ceil((yDay - 6) / 31);\n    let day = jd - $f3ed2e4472ae7e25$var$persianToJulianDay(year, month, 1) + 1;\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, year, month, day);\n  }\n\n  toJulianDay(date) {\n    return $f3ed2e4472ae7e25$var$persianToJulianDay(date.year, date.month, date.day);\n  }\n\n  getMonthsInYear() {\n    return 12;\n  }\n\n  getDaysInMonth(date) {\n    if (date.month <= 6) return 31;\n    if (date.month <= 11) return 30;\n    return $f3ed2e4472ae7e25$var$isLeapYear(date.year) ? 30 : 29;\n  }\n\n  getEras() {\n    return [\"AP\"];\n  }\n\n  getYearsInEra() {\n    // 9378-10-10 persian is 9999-12-31 gregorian.\n    // Round down to 9377 to set the maximum full year.\n    return 9377;\n  }\n\n  constructor() {\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(this, \"identifier\", \"persian\");\n  }\n\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n// Starts in 78 AD,\n\n\nconst $82c358003bdda0a8$var$INDIAN_ERA_START = 78; // The Indian year starts 80 days later than the Gregorian year.\n\nconst $82c358003bdda0a8$var$INDIAN_YEAR_START = 80;\n\nclass $82c358003bdda0a8$export$39f31c639fa15726 extends (0, $3b62074eb05584b2$export$80ee6245ec4f29ec) {\n  fromJulianDay(jd) {\n    // Gregorian date for Julian day\n    let date = super.fromJulianDay(jd); // Year in Saka era\n\n    let indianYear = date.year - $82c358003bdda0a8$var$INDIAN_ERA_START; // Day number in Gregorian year (starting from 0)\n\n    let yDay = jd - (0, $3b62074eb05584b2$export$f297eb839006d339)(date.era, date.year, 1, 1);\n    let leapMonth;\n\n    if (yDay < $82c358003bdda0a8$var$INDIAN_YEAR_START) {\n      //  Day is at the end of the preceding Saka year\n      indianYear--; // Days in leapMonth this year, previous Gregorian year\n\n      leapMonth = (0, $3b62074eb05584b2$export$553d7fa8e3805fc0)(date.year - 1) ? 31 : 30;\n      yDay += leapMonth + 155 + 90 + 10;\n    } else {\n      // Days in leapMonth this year\n      leapMonth = (0, $3b62074eb05584b2$export$553d7fa8e3805fc0)(date.year) ? 31 : 30;\n      yDay -= $82c358003bdda0a8$var$INDIAN_YEAR_START;\n    }\n\n    let indianMonth;\n    let indianDay;\n\n    if (yDay < leapMonth) {\n      indianMonth = 1;\n      indianDay = yDay + 1;\n    } else {\n      let mDay = yDay - leapMonth;\n\n      if (mDay < 155) {\n        indianMonth = Math.floor(mDay / 31) + 2;\n        indianDay = mDay % 31 + 1;\n      } else {\n        mDay -= 155;\n        indianMonth = Math.floor(mDay / 30) + 7;\n        indianDay = mDay % 30 + 1;\n      }\n    }\n\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, indianYear, indianMonth, indianDay);\n  }\n\n  toJulianDay(date) {\n    let extendedYear = date.year + $82c358003bdda0a8$var$INDIAN_ERA_START;\n    let [era, year] = (0, $3b62074eb05584b2$export$4475b7e617eb123c)(extendedYear);\n    let leapMonth;\n    let jd;\n\n    if ((0, $3b62074eb05584b2$export$553d7fa8e3805fc0)(year)) {\n      leapMonth = 31;\n      jd = (0, $3b62074eb05584b2$export$f297eb839006d339)(era, year, 3, 21);\n    } else {\n      leapMonth = 30;\n      jd = (0, $3b62074eb05584b2$export$f297eb839006d339)(era, year, 3, 22);\n    }\n\n    if (date.month === 1) return jd + date.day - 1;\n    jd += leapMonth + Math.min(date.month - 2, 5) * 31;\n    if (date.month >= 8) jd += (date.month - 7) * 30;\n    jd += date.day - 1;\n    return jd;\n  }\n\n  getDaysInMonth(date) {\n    if (date.month === 1 && (0, $3b62074eb05584b2$export$553d7fa8e3805fc0)(date.year + $82c358003bdda0a8$var$INDIAN_ERA_START)) return 31;\n    if (date.month >= 2 && date.month <= 6) return 31;\n    return 30;\n  }\n\n  getYearsInEra() {\n    // 9999-12-31 gregorian is 9920-10-10 indian.\n    // Round down to 9919 for the last full year.\n    return 9919;\n  }\n\n  getEras() {\n    return [\"saka\"];\n  }\n\n  balanceDate() {}\n\n  constructor() {\n    super(...arguments);\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(this, \"identifier\", \"indian\");\n  }\n\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\n\nconst $f2f3e0e3a817edbd$var$CIVIL_EPOC = 1948440; // CE 622 July 16 Friday (Julian calendar) / CE 622 July 19 (Gregorian calendar)\n\nconst $f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC = 1948439; // CE 622 July 15 Thursday (Julian calendar)\n\nconst $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START = 1300;\nconst $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END = 1600;\nconst $f2f3e0e3a817edbd$var$UMALQURA_START_DAYS = 460322;\n\nfunction $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, month, day) {\n  return day + Math.ceil(29.5 * (month - 1)) + (year - 1) * 354 + Math.floor((3 + 11 * year) / 30) + epoch - 1;\n}\n\nfunction $f2f3e0e3a817edbd$var$julianDayToIslamic(calendar, epoch, jd) {\n  let year = Math.floor((30 * (jd - epoch) + 10646) / 10631);\n  let month = Math.min(12, Math.ceil((jd - (29 + $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, 1, 1))) / 29.5) + 1);\n  let day = jd - $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, month, 1) + 1;\n  return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(calendar, year, month, day);\n}\n\nfunction $f2f3e0e3a817edbd$var$isLeapYear(year) {\n  return (14 + 11 * year) % 30 < 11;\n}\n\nclass $f2f3e0e3a817edbd$export$2066795aadd37bfc {\n  fromJulianDay(jd) {\n    return $f2f3e0e3a817edbd$var$julianDayToIslamic(this, $f2f3e0e3a817edbd$var$CIVIL_EPOC, jd);\n  }\n\n  toJulianDay(date) {\n    return $f2f3e0e3a817edbd$var$islamicToJulianDay($f2f3e0e3a817edbd$var$CIVIL_EPOC, date.year, date.month, date.day);\n  }\n\n  getDaysInMonth(date) {\n    let length = 29 + date.month % 2;\n    if (date.month === 12 && $f2f3e0e3a817edbd$var$isLeapYear(date.year)) length++;\n    return length;\n  }\n\n  getMonthsInYear() {\n    return 12;\n  }\n\n  getDaysInYear(date) {\n    return $f2f3e0e3a817edbd$var$isLeapYear(date.year) ? 355 : 354;\n  }\n\n  getYearsInEra() {\n    // 9999 gregorian\n    return 9665;\n  }\n\n  getEras() {\n    return [\"AH\"];\n  }\n\n  constructor() {\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(this, \"identifier\", \"islamic-civil\");\n  }\n\n}\n\nclass $f2f3e0e3a817edbd$export$37f0887f2f9d22f7 extends $f2f3e0e3a817edbd$export$2066795aadd37bfc {\n  fromJulianDay(jd) {\n    return $f2f3e0e3a817edbd$var$julianDayToIslamic(this, $f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC, jd);\n  }\n\n  toJulianDay(date) {\n    return $f2f3e0e3a817edbd$var$islamicToJulianDay($f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC, date.year, date.month, date.day);\n  }\n\n  constructor() {\n    super(...arguments);\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(this, \"identifier\", \"islamic-tbla\");\n  }\n\n} // Generated by scripts/generate-umalqura.js\n\n\nconst $f2f3e0e3a817edbd$var$UMALQURA_DATA = \"qgpUDckO1AbqBmwDrQpVBakGkgepC9QF2gpcBS0NlQZKB1QLagutBa4ETwoXBYsGpQbVCtYCWwmdBE0KJg2VDawFtgm6AlsKKwWVCsoG6Qr0AnYJtgJWCcoKpAvSC9kF3AJtCU0FpQpSC6ULtAW2CVcFlwJLBaMGUgdlC2oFqworBZUMSg2lDcoF1gpXCasESwmlClILagt1BXYCtwhbBFUFqQW0BdoJ3QRuAjYJqgpUDbIN1QXaAlsJqwRVCkkLZAtxC7QFtQpVCiUNkg7JDtQG6QprCasEkwpJDaQNsg25CroEWworBZUKKgtVC1wFvQQ9Ah0JlQpKC1oLbQW2AjsJmwRVBqkGVAdqC2wFrQpVBSkLkgupC9QF2gpaBasKlQVJB2QHqgu1BbYCVgpNDiULUgtqC60FrgIvCZcESwalBqwG1gpdBZ0ETQoWDZUNqgW1BdoCWwmtBJUFygbkBuoK9QS2AlYJqgpUC9IL2QXqAm0JrQSVCkoLpQuyBbUJ1gSXCkcFkwZJB1ULagVrCisFiwpGDaMNygXWCtsEawJLCaUKUgtpC3UFdgG3CFsCKwVlBbQF2gntBG0BtgimClINqQ3UBdoKWwmrBFMGKQdiB6kLsgW1ClUFJQuSDckO0gbpCmsFqwRVCikNVA2qDbUJugQ7CpsETQqqCtUK2gJdCV4ELgqaDFUNsga5BroEXQotBZUKUguoC7QLuQXaAloJSgukDdEO6AZqC20FNQWVBkoNqA3UDdoGWwWdAisGFQtKC5ULqgWuCi4JjwwnBZUGqgbWCl0FnQI=\";\nlet $f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH;\nlet $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE;\n\nfunction $f2f3e0e3a817edbd$var$umalquraYearStart(year) {\n  return $f2f3e0e3a817edbd$var$UMALQURA_START_DAYS + $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START];\n}\n\nfunction $f2f3e0e3a817edbd$var$umalquraMonthLength(year, month) {\n  let idx = year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START;\n  let mask = 0x01 << 11 - (month - 1);\n  if (($f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH[idx] & mask) === 0) return 29;else return 30;\n}\n\nfunction $f2f3e0e3a817edbd$var$umalquraMonthStart(year, month) {\n  let day = $f2f3e0e3a817edbd$var$umalquraYearStart(year);\n\n  for (let i = 1; i < month; i++) day += $f2f3e0e3a817edbd$var$umalquraMonthLength(year, i);\n\n  return day;\n}\n\nfunction $f2f3e0e3a817edbd$var$umalquraYearLength(year) {\n  return $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year + 1 - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START] - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START];\n}\n\nclass $f2f3e0e3a817edbd$export$5baab4758c231076 extends $f2f3e0e3a817edbd$export$2066795aadd37bfc {\n  fromJulianDay(jd) {\n    let days = jd - $f2f3e0e3a817edbd$var$CIVIL_EPOC;\n    let startDays = $f2f3e0e3a817edbd$var$umalquraYearStart($f2f3e0e3a817edbd$var$UMALQURA_YEAR_START);\n    let endDays = $f2f3e0e3a817edbd$var$umalquraYearStart($f2f3e0e3a817edbd$var$UMALQURA_YEAR_END);\n    if (days < startDays || days > endDays) return super.fromJulianDay(jd);else {\n      let y = $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START - 1;\n      let m = 1;\n      let d = 1;\n\n      while (d > 0) {\n        y++;\n        d = days - $f2f3e0e3a817edbd$var$umalquraYearStart(y) + 1;\n        let yearLength = $f2f3e0e3a817edbd$var$umalquraYearLength(y);\n\n        if (d === yearLength) {\n          m = 12;\n          break;\n        } else if (d < yearLength) {\n          let monthLength = $f2f3e0e3a817edbd$var$umalquraMonthLength(y, m);\n          m = 1;\n\n          while (d > monthLength) {\n            d -= monthLength;\n            m++;\n            monthLength = $f2f3e0e3a817edbd$var$umalquraMonthLength(y, m);\n          }\n\n          break;\n        }\n      }\n\n      return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, y, m, days - $f2f3e0e3a817edbd$var$umalquraMonthStart(y, m) + 1);\n    }\n  }\n\n  toJulianDay(date) {\n    if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.toJulianDay(date);\n    return $f2f3e0e3a817edbd$var$CIVIL_EPOC + $f2f3e0e3a817edbd$var$umalquraMonthStart(date.year, date.month) + (date.day - 1);\n  }\n\n  getDaysInMonth(date) {\n    if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.getDaysInMonth(date);\n    return $f2f3e0e3a817edbd$var$umalquraMonthLength(date.year, date.month);\n  }\n\n  getDaysInYear(date) {\n    if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.getDaysInYear(date);\n    return $f2f3e0e3a817edbd$var$umalquraYearLength(date.year);\n  }\n\n  constructor() {\n    super();\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(this, \"identifier\", \"islamic-umalqura\");\n    if (!$f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH) $f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH = new Uint16Array(Uint8Array.from(atob($f2f3e0e3a817edbd$var$UMALQURA_DATA), c => c.charCodeAt(0)).buffer);\n\n    if (!$f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE) {\n      $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE = new Uint32Array($f2f3e0e3a817edbd$var$UMALQURA_YEAR_END - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START + 1);\n      let yearStart = 0;\n\n      for (let year = $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START; year <= $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END; year++) {\n        $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START] = yearStart;\n\n        for (let i = 1; i <= 12; i++) yearStart += $f2f3e0e3a817edbd$var$umalquraMonthLength(year, i);\n      }\n    }\n  }\n\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\n\nconst $7c5f6fbf42389787$var$HEBREW_EPOCH = 347997; // Hebrew date calculations are performed in terms of days, hours, and\n// \"parts\" (or halakim), which are 1/1080 of an hour, or 3 1/3 seconds.\n\nconst $7c5f6fbf42389787$var$HOUR_PARTS = 1080;\nconst $7c5f6fbf42389787$var$DAY_PARTS = 24 * $7c5f6fbf42389787$var$HOUR_PARTS; // An approximate value for the length of a lunar month.\n// It is used to calculate the approximate year and month of a given\n// absolute date.\n\nconst $7c5f6fbf42389787$var$MONTH_DAYS = 29;\nconst $7c5f6fbf42389787$var$MONTH_FRACT = 12 * $7c5f6fbf42389787$var$HOUR_PARTS + 793;\nconst $7c5f6fbf42389787$var$MONTH_PARTS = $7c5f6fbf42389787$var$MONTH_DAYS * $7c5f6fbf42389787$var$DAY_PARTS + $7c5f6fbf42389787$var$MONTH_FRACT;\n\nfunction $7c5f6fbf42389787$var$isLeapYear(year) {\n  return (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(year * 7 + 1, 19) < 7;\n} // Test for delay of start of new year and to avoid\n// Sunday, Wednesday, and Friday as start of the new year.\n\n\nfunction $7c5f6fbf42389787$var$hebrewDelay1(year) {\n  let months = Math.floor((235 * year - 234) / 19);\n  let parts = 12084 + 13753 * months;\n  let day = months * 29 + Math.floor(parts / 25920);\n  if ((0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(3 * (day + 1), 7) < 3) day += 1;\n  return day;\n} // Check for delay in start of new year due to length of adjacent years\n\n\nfunction $7c5f6fbf42389787$var$hebrewDelay2(year) {\n  let last = $7c5f6fbf42389787$var$hebrewDelay1(year - 1);\n  let present = $7c5f6fbf42389787$var$hebrewDelay1(year);\n  let next = $7c5f6fbf42389787$var$hebrewDelay1(year + 1);\n  if (next - present === 356) return 2;\n  if (present - last === 382) return 1;\n  return 0;\n}\n\nfunction $7c5f6fbf42389787$var$startOfYear(year) {\n  return $7c5f6fbf42389787$var$hebrewDelay1(year) + $7c5f6fbf42389787$var$hebrewDelay2(year);\n}\n\nfunction $7c5f6fbf42389787$var$getDaysInYear(year) {\n  return $7c5f6fbf42389787$var$startOfYear(year + 1) - $7c5f6fbf42389787$var$startOfYear(year);\n}\n\nfunction $7c5f6fbf42389787$var$getYearType(year) {\n  let yearLength = $7c5f6fbf42389787$var$getDaysInYear(year);\n  if (yearLength > 380) yearLength -= 30; // Subtract length of leap month.\n\n  switch (yearLength) {\n    case 353:\n      return 0;\n    // deficient\n\n    case 354:\n      return 1;\n    // normal\n\n    case 355:\n      return 2;\n    // complete\n  }\n}\n\nfunction $7c5f6fbf42389787$var$getDaysInMonth(year, month) {\n  // Normalize month numbers from 1 - 13, even on non-leap years\n  if (month >= 6 && !$7c5f6fbf42389787$var$isLeapYear(year)) month++; // First of all, dispose of fixed-length 29 day months\n\n  if (month === 4 || month === 7 || month === 9 || month === 11 || month === 13) return 29;\n  let yearType = $7c5f6fbf42389787$var$getYearType(year); // If it's Heshvan, days depend on length of year\n\n  if (month === 2) return yearType === 2 ? 30 : 29; // Similarly, Kislev varies with the length of year\n\n  if (month === 3) return yearType === 0 ? 29 : 30; // Adar I only exists in leap years\n\n  if (month === 6) return $7c5f6fbf42389787$var$isLeapYear(year) ? 30 : 0;\n  return 30;\n}\n\nclass $7c5f6fbf42389787$export$ca405048b8fb5af {\n  fromJulianDay(jd) {\n    let d = jd - $7c5f6fbf42389787$var$HEBREW_EPOCH;\n    let m = d * $7c5f6fbf42389787$var$DAY_PARTS / $7c5f6fbf42389787$var$MONTH_PARTS; // Months (approx)\n\n    let year = Math.floor((19 * m + 234) / 235) + 1; // Years (approx)\n\n    let ys = $7c5f6fbf42389787$var$startOfYear(year); // 1st day of year\n\n    let dayOfYear = Math.floor(d - ys); // Because of the postponement rules, it's possible to guess wrong.  Fix it.\n\n    while (dayOfYear < 1) {\n      year--;\n      ys = $7c5f6fbf42389787$var$startOfYear(year);\n      dayOfYear = Math.floor(d - ys);\n    } // Now figure out which month we're in, and the date within that month\n\n\n    let month = 1;\n    let monthStart = 0;\n\n    while (monthStart < dayOfYear) {\n      monthStart += $7c5f6fbf42389787$var$getDaysInMonth(year, month);\n      month++;\n    }\n\n    month--;\n    monthStart -= $7c5f6fbf42389787$var$getDaysInMonth(year, month);\n    let day = dayOfYear - monthStart;\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, year, month, day);\n  }\n\n  toJulianDay(date) {\n    let jd = $7c5f6fbf42389787$var$startOfYear(date.year);\n\n    for (let month = 1; month < date.month; month++) jd += $7c5f6fbf42389787$var$getDaysInMonth(date.year, month);\n\n    return jd + date.day + $7c5f6fbf42389787$var$HEBREW_EPOCH;\n  }\n\n  getDaysInMonth(date) {\n    return $7c5f6fbf42389787$var$getDaysInMonth(date.year, date.month);\n  }\n\n  getMonthsInYear(date) {\n    return $7c5f6fbf42389787$var$isLeapYear(date.year) ? 13 : 12;\n  }\n\n  getDaysInYear(date) {\n    return $7c5f6fbf42389787$var$getDaysInYear(date.year);\n  }\n\n  getYearsInEra() {\n    // 6239 gregorian\n    return 9999;\n  }\n\n  getEras() {\n    return [\"AM\"];\n  }\n\n  balanceYearMonth(date, previousDate) {\n    // Keep date in the same month when switching between leap years and non leap years\n    if (previousDate.year !== date.year) {\n      if ($7c5f6fbf42389787$var$isLeapYear(previousDate.year) && !$7c5f6fbf42389787$var$isLeapYear(date.year) && previousDate.month > 6) date.month--;else if (!$7c5f6fbf42389787$var$isLeapYear(previousDate.year) && $7c5f6fbf42389787$var$isLeapYear(date.year) && previousDate.month > 6) date.month++;\n    }\n  }\n\n  constructor() {\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(this, \"identifier\", \"hebrew\");\n  }\n\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\n\nconst $b956b2d7a6cf451f$var$ETHIOPIC_EPOCH = 1723856;\nconst $b956b2d7a6cf451f$var$COPTIC_EPOCH = 1824665; // The delta between Amete Alem 1 and Amete Mihret 1\n// AA 5501 = AM 1\n\nconst $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA = 5500;\n\nfunction $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, month, day) {\n  return epoch // difference from Julian epoch to 1,1,1\n  + 365 * year // number of days from years\n  + Math.floor(year / 4) // extra day of leap year\n  + 30 * (month - 1 // number of days from months (1 based)\n  ) + day - 1 // number of days for present month (1 based)\n  ;\n}\n\nfunction $b956b2d7a6cf451f$var$julianDayToCE(epoch, jd) {\n  let year = Math.floor(4 * (jd - epoch) / 1461);\n  let month = 1 + Math.floor((jd - $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, 1, 1)) / 30);\n  let day = jd + 1 - $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, month, 1);\n  return [year, month, day];\n}\n\nfunction $b956b2d7a6cf451f$var$getLeapDay(year) {\n  return Math.floor(year % 4 / 3);\n}\n\nfunction $b956b2d7a6cf451f$var$getDaysInMonth(year, month) {\n  // The Ethiopian and Coptic calendars have 13 months, 12 of 30 days each and\n  // an intercalary month at the end of the year of 5 or 6 days, depending whether\n  // the year is a leap year or not. The Leap Year follows the same rules as the\n  // Julian Calendar so that the extra month always has six days in the year before\n  // a Julian Leap Year.\n  if (month % 13 !== 0) // not intercalary month\n    return 30;else // intercalary month 5 days + possible leap day\n    return $b956b2d7a6cf451f$var$getLeapDay(year) + 5;\n}\n\nclass $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {\n  fromJulianDay(jd) {\n    let [year, month, day] = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, jd);\n    let era = \"AM\";\n\n    if (year <= 0) {\n      era = \"AA\";\n      year += $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;\n    }\n\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, era, year, month, day);\n  }\n\n  toJulianDay(date) {\n    let year = date.year;\n    if (date.era === \"AA\") year -= $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;\n    return $b956b2d7a6cf451f$var$ceToJulianDay($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, year, date.month, date.day);\n  }\n\n  getDaysInMonth(date) {\n    return $b956b2d7a6cf451f$var$getDaysInMonth(date.year, date.month);\n  }\n\n  getMonthsInYear() {\n    return 13;\n  }\n\n  getDaysInYear(date) {\n    return 365 + $b956b2d7a6cf451f$var$getLeapDay(date.year);\n  }\n\n  getYearsInEra(date) {\n    // 9999-12-31 gregorian is 9992-20-02 ethiopic.\n    // Round down to 9991 for the last full year.\n    // AA 9999-01-01 ethiopic is 4506-09-30 gregorian.\n    return date.era === \"AA\" ? 9999 : 9991;\n  }\n\n  getEras() {\n    return [\"AA\", \"AM\"];\n  }\n\n  constructor() {\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(this, \"identifier\", \"ethiopic\");\n  }\n\n}\n\nclass $b956b2d7a6cf451f$export$d72e0c37005a4914 extends $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {\n  fromJulianDay(jd) {\n    let [year, month, day] = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, jd);\n    year += $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, \"AA\", year, month, day);\n  }\n\n  getEras() {\n    return [\"AA\"];\n  }\n\n  getYearsInEra() {\n    // 9999-13-04 ethioaa is the maximum date, which is equivalent to 4506-09-29 gregorian.\n    return 9999;\n  }\n\n  constructor() {\n    super(...arguments);\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(this, \"identifier\", \"ethioaa\") // also known as 'ethiopic-amete-alem' in ICU\n    ;\n  }\n\n}\n\nclass $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1 extends $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {\n  fromJulianDay(jd) {\n    let [year, month, day] = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$COPTIC_EPOCH, jd);\n    let era = \"CE\";\n\n    if (year <= 0) {\n      era = \"BCE\";\n      year = 1 - year;\n    }\n\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, era, year, month, day);\n  }\n\n  toJulianDay(date) {\n    let year = date.year;\n    if (date.era === \"BCE\") year = 1 - year;\n    return $b956b2d7a6cf451f$var$ceToJulianDay($b956b2d7a6cf451f$var$COPTIC_EPOCH, year, date.month, date.day);\n  }\n\n  getDaysInMonth(date) {\n    let year = date.year;\n    if (date.era === \"BCE\") year = 1 - year;\n    return $b956b2d7a6cf451f$var$getDaysInMonth(year, date.month);\n  }\n\n  isInverseEra(date) {\n    return date.era === \"BCE\";\n  }\n\n  balanceDate(date) {\n    if (date.year <= 0) {\n      date.era = date.era === \"BCE\" ? \"CE\" : \"BCE\";\n      date.year = 1 - date.year;\n    }\n  }\n\n  getEras() {\n    return [\"BCE\", \"CE\"];\n  }\n\n  getYearsInEra(date) {\n    // 9999-12-30 gregorian is 9716-02-20 coptic.\n    // Round down to 9715 for the last full year.\n    // BCE 9999-01-01 coptic is BC 9716-06-15 gregorian.\n    return date.era === \"BCE\" ? 9999 : 9715;\n  }\n\n  constructor() {\n    super(...arguments);\n    (0, $cUVuN$swchelperssrc_define_propertymjs)(this, \"identifier\", \"coptic\");\n  }\n\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n\nfunction $64244302c3013299$export$dd0bbc9b26defe37(name) {\n  switch (name) {\n    case \"buddhist\":\n      return new (0, $8d73d47422ca7302$export$42d20a78301dee44)();\n\n    case \"ethiopic\":\n      return new (0, $b956b2d7a6cf451f$export$26ba6eab5e20cd7d)();\n\n    case \"ethioaa\":\n      return new (0, $b956b2d7a6cf451f$export$d72e0c37005a4914)();\n\n    case \"coptic\":\n      return new (0, $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1)();\n\n    case \"hebrew\":\n      return new (0, $7c5f6fbf42389787$export$ca405048b8fb5af)();\n\n    case \"indian\":\n      return new (0, $82c358003bdda0a8$export$39f31c639fa15726)();\n\n    case \"islamic-civil\":\n      return new (0, $f2f3e0e3a817edbd$export$2066795aadd37bfc)();\n\n    case \"islamic-tbla\":\n      return new (0, $f2f3e0e3a817edbd$export$37f0887f2f9d22f7)();\n\n    case \"islamic-umalqura\":\n      return new (0, $f2f3e0e3a817edbd$export$5baab4758c231076)();\n\n    case \"japanese\":\n      return new (0, $62225008020f0a13$export$b746ab2b60cdffbf)();\n\n    case \"persian\":\n      return new (0, $f3ed2e4472ae7e25$export$37fccdbfd14c5939)();\n\n    case \"roc\":\n      return new (0, $5f31bd6f0c8940b2$export$65e01080afcb0799)();\n\n    case \"gregory\":\n    default:\n      return new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)();\n  }\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n\nlet $fb18d541ea1ad717$var$formatterCache = new Map();\n\nclass $fb18d541ea1ad717$export$ad991b66133851cf {\n  /** Formats a date as a string according to the locale and format options passed to the constructor. */\n  format(value) {\n    return this.formatter.format(value);\n  }\n  /** Formats a date to an array of parts such as separators, numbers, punctuation, and more. */\n\n\n  formatToParts(value) {\n    return this.formatter.formatToParts(value);\n  }\n  /** Formats a date range as a string. */\n\n\n  formatRange(start, end) {\n    // @ts-ignore\n    if (typeof this.formatter.formatRange === \"function\") // @ts-ignore\n      return this.formatter.formatRange(start, end);\n    if (end < start) throw new RangeError(\"End date must be >= start date\"); // Very basic fallback for old browsers.\n\n    return `${this.formatter.format(start)} – ${this.formatter.format(end)}`;\n  }\n  /** Formats a date range as an array of parts. */\n\n\n  formatRangeToParts(start, end) {\n    // @ts-ignore\n    if (typeof this.formatter.formatRangeToParts === \"function\") // @ts-ignore\n      return this.formatter.formatRangeToParts(start, end);\n    if (end < start) throw new RangeError(\"End date must be >= start date\");\n    let startParts = this.formatter.formatToParts(start);\n    let endParts = this.formatter.formatToParts(end);\n    return [...startParts.map(p => ({ ...p,\n      source: \"startRange\"\n    })), {\n      type: \"literal\",\n      value: \" – \",\n      source: \"shared\"\n    }, ...endParts.map(p => ({ ...p,\n      source: \"endRange\"\n    }))];\n  }\n  /** Returns the resolved formatting options based on the values passed to the constructor. */\n\n\n  resolvedOptions() {\n    let resolvedOptions = this.formatter.resolvedOptions();\n\n    if ($fb18d541ea1ad717$var$hasBuggyResolvedHourCycle()) {\n      if (!this.resolvedHourCycle) this.resolvedHourCycle = $fb18d541ea1ad717$var$getResolvedHourCycle(resolvedOptions.locale, this.options);\n      resolvedOptions.hourCycle = this.resolvedHourCycle;\n      resolvedOptions.hour12 = this.resolvedHourCycle === \"h11\" || this.resolvedHourCycle === \"h12\";\n    } // Safari uses a different name for the Ethiopic (Amete Alem) calendar.\n    // https://bugs.webkit.org/show_bug.cgi?id=241564\n\n\n    if (resolvedOptions.calendar === \"ethiopic-amete-alem\") resolvedOptions.calendar = \"ethioaa\";\n    return resolvedOptions;\n  }\n\n  constructor(locale) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, options);\n    this.options = options;\n  }\n\n} // There are multiple bugs involving the hour12 and hourCycle options in various browser engines.\n//   - Chrome [1] (and the ECMA 402 spec [2]) resolve hour12: false in English and other locales to h24 (24:00 - 23:59)\n//     rather than h23 (00:00 - 23:59). Same can happen with hour12: true in French, which Chrome resolves to h11 (00:00 - 11:59)\n//     rather than h12 (12:00 - 11:59).\n//   - WebKit returns an incorrect hourCycle resolved option in the French locale due to incorrect parsing of 'h' literal\n//     in the resolved pattern. It also formats incorrectly when specifying the hourCycle option for the same reason. [3]\n// [1] https://bugs.chromium.org/p/chromium/issues/detail?id=1045791\n// [2] https://github.com/tc39/ecma402/issues/402\n// [3] https://bugs.webkit.org/show_bug.cgi?id=229313\n// https://github.com/unicode-org/cldr/blob/018b55eff7ceb389c7e3fc44e2f657eae3b10b38/common/supplemental/supplementalData.xml#L4774-L4802\n\n\nconst $fb18d541ea1ad717$var$hour12Preferences = {\n  true: {\n    // Only Japanese uses the h11 style for 12 hour time. All others use h12.\n    ja: \"h11\"\n  },\n  false: {}\n};\n\nfunction $fb18d541ea1ad717$var$getCachedDateFormatter(locale) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  // Work around buggy hour12 behavior in Chrome / ECMA 402 spec by using hourCycle instead.\n  // Only apply the workaround if the issue is detected, because the hourCycle option is buggy in Safari.\n  if (typeof options.hour12 === \"boolean\" && $fb18d541ea1ad717$var$hasBuggyHour12Behavior()) {\n    options = { ...options\n    };\n    let pref = $fb18d541ea1ad717$var$hour12Preferences[String(options.hour12)][locale.split(\"-\")[0]];\n    let defaultHourCycle = options.hour12 ? \"h12\" : \"h23\";\n    options.hourCycle = pref !== null && pref !== void 0 ? pref : defaultHourCycle;\n    delete options.hour12;\n  }\n\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : \"\");\n  if ($fb18d541ea1ad717$var$formatterCache.has(cacheKey)) return $fb18d541ea1ad717$var$formatterCache.get(cacheKey);\n  let numberFormatter = new Intl.DateTimeFormat(locale, options);\n  $fb18d541ea1ad717$var$formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\n\nlet $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = null;\n\nfunction $fb18d541ea1ad717$var$hasBuggyHour12Behavior() {\n  if ($fb18d541ea1ad717$var$_hasBuggyHour12Behavior == null) $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = new Intl.DateTimeFormat(\"en-US\", {\n    hour: \"numeric\",\n    hour12: false\n  }).format(new Date(2020, 2, 3, 0)) === \"24\";\n  return $fb18d541ea1ad717$var$_hasBuggyHour12Behavior;\n}\n\nlet $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = null;\n\nfunction $fb18d541ea1ad717$var$hasBuggyResolvedHourCycle() {\n  if ($fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle == null) $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = new Intl.DateTimeFormat(\"fr\", {\n    hour: \"numeric\",\n    hour12: false\n  }).resolvedOptions().hourCycle === \"h12\";\n  return $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle;\n}\n\nfunction $fb18d541ea1ad717$var$getResolvedHourCycle(locale, options) {\n  if (!options.timeStyle && !options.hour) return undefined; // Work around buggy results in resolved hourCycle and hour12 options in WebKit.\n  // Format the minimum possible hour and maximum possible hour in a day and parse the results.\n\n  locale = locale.replace(/(-u-)?-nu-[a-zA-Z0-9]+/, \"\");\n  locale += (locale.includes(\"-u-\") ? \"\" : \"-u\") + \"-nu-latn\";\n  let formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, { ...options,\n    timeZone: undefined // use local timezone\n\n  });\n  let min = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 0)).find(p => p.type === \"hour\").value, 10);\n  let max = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 23)).find(p => p.type === \"hour\").value, 10);\n  if (min === 0 && max === 23) return \"h23\";\n  if (min === 24 && max === 23) return \"h24\";\n  if (min === 0 && max === 11) return \"h11\";\n  if (min === 12 && max === 11) return \"h12\";\n  throw new Error(\"Unexpected hour cycle result\");\n}\n\nexport { $35ea8db9cb2ccb90$export$99faa760c7908e4f as CalendarDate, $35ea8db9cb2ccb90$export$ca871e8dbb80966f as CalendarDateTime, $35ea8db9cb2ccb90$export$680ea196effce5f as Time, $35ea8db9cb2ccb90$export$d3b7288e7994edea as ZonedDateTime, $3b62074eb05584b2$export$80ee6245ec4f29ec as GregorianCalendar, $62225008020f0a13$export$b746ab2b60cdffbf as JapaneseCalendar, $8d73d47422ca7302$export$42d20a78301dee44 as BuddhistCalendar, $5f31bd6f0c8940b2$export$65e01080afcb0799 as TaiwanCalendar, $f3ed2e4472ae7e25$export$37fccdbfd14c5939 as PersianCalendar, $82c358003bdda0a8$export$39f31c639fa15726 as IndianCalendar, $f2f3e0e3a817edbd$export$2066795aadd37bfc as IslamicCivilCalendar, $f2f3e0e3a817edbd$export$37f0887f2f9d22f7 as IslamicTabularCalendar, $f2f3e0e3a817edbd$export$5baab4758c231076 as IslamicUmalquraCalendar, $7c5f6fbf42389787$export$ca405048b8fb5af as HebrewCalendar, $b956b2d7a6cf451f$export$26ba6eab5e20cd7d as EthiopicCalendar, $b956b2d7a6cf451f$export$d72e0c37005a4914 as EthiopicAmeteAlemCalendar, $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1 as CopticCalendar, $64244302c3013299$export$dd0bbc9b26defe37 as createCalendar, $11d87f3f76e88657$export$93522d1a439f3617 as toCalendarDate, $11d87f3f76e88657$export$b21e0b124e224484 as toCalendarDateTime, $11d87f3f76e88657$export$d33f79e3ffc3dc83 as toTime, $11d87f3f76e88657$export$b4a036af3fc0b032 as toCalendar, $11d87f3f76e88657$export$84c95a83c799e074 as toZoned, $11d87f3f76e88657$export$538b00033cc11c75 as toTimeZone, $11d87f3f76e88657$export$d9b67bc93c097491 as toLocalTimeZone, $14e0f24ef4ac5c92$export$ea39ec197993aef0 as isSameDay, $14e0f24ef4ac5c92$export$a18c89cbd24170ff as isSameMonth, $14e0f24ef4ac5c92$export$5841f9eb9773f25f as isSameYear, $14e0f24ef4ac5c92$export$91b62ebf2ba703ee as isEqualDay, $14e0f24ef4ac5c92$export$5a8da0c44a3afdf2 as isEqualMonth, $14e0f24ef4ac5c92$export$ea840f5a6dda8147 as isEqualYear, $14e0f24ef4ac5c92$export$629b0a497aa65267 as isToday, $14e0f24ef4ac5c92$export$2061056d06d7cdf7 as getDayOfWeek, $14e0f24ef4ac5c92$export$461939dd4422153 as now, $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3 as today, $14e0f24ef4ac5c92$export$126c91c941de7e as getHoursInDay, $14e0f24ef4ac5c92$export$aa8b41735afcabd2 as getLocalTimeZone, $14e0f24ef4ac5c92$export$a5a3b454ada2268e as startOfMonth, $14e0f24ef4ac5c92$export$42c81a444fbfb5d4 as startOfWeek, $14e0f24ef4ac5c92$export$f91e89d3d0406102 as startOfYear, $14e0f24ef4ac5c92$export$a2258d9c4118825c as endOfMonth, $14e0f24ef4ac5c92$export$ef8b6d9133084f4e as endOfWeek, $14e0f24ef4ac5c92$export$8b7aa55c66d5569e as endOfYear, $14e0f24ef4ac5c92$export$5412ac11713b72ad as getMinimumMonthInYear, $14e0f24ef4ac5c92$export$b2f4953d301981d5 as getMinimumDayInMonth, $14e0f24ef4ac5c92$export$ccc1b2479e7dd654 as getWeeksInMonth, $14e0f24ef4ac5c92$export$5c333a116e949cdd as minDate, $14e0f24ef4ac5c92$export$a75f2bff57811055 as maxDate, $14e0f24ef4ac5c92$export$618d60ea299da42 as isWeekend, $14e0f24ef4ac5c92$export$ee9d87258e1d19ed as isWeekday, $fae977aafc393c5c$export$6b862160d295c8e as parseDate, $fae977aafc393c5c$export$588937bcd60ade55 as parseDateTime, $fae977aafc393c5c$export$c9698ec7f05a07e1 as parseTime, $fae977aafc393c5c$export$5adfdab05168c219 as parseAbsolute, $fae977aafc393c5c$export$8e384432362ed0f0 as parseAbsoluteToLocal, $fae977aafc393c5c$export$fd7893f06e92a6a4 as parseZonedDateTime, $fae977aafc393c5c$export$ecae829bb3747ea6 as parseDuration, $fb18d541ea1ad717$export$ad991b66133851cf as DateFormatter };","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;ACAA;;AAAA;;;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;AAAA;;;;;;;;;;;AAYA;AACA;;ACbA;;;;;;;;;;;AAYA;AACA;;ACbA;;;;;;;;;;;;AAkBO,SAASA,yCAAT,CAAaC,MAAb,EAA6BC,SAA7B,EAAwD;AAC7D,SAAOD,SAASC,YAAYC,KAAKC,KAAL,CAAWH,SAASC,SAApB,CAA5B;AACF;;AAEO,SAASG,yCAAT,CAAcC,IAAd,EAAyD;AAC9D,MAAIA,KAAKC,GAAT,EACE,OAAO,KAAI,4CAAJ,EAAiBD,KAAKE,QAAtB,EAAgCF,KAAKC,GAArC,EAA0CD,KAAKG,IAA/C,EAAqDH,KAAKI,KAA1D,EAAiEJ,KAAKK,GAAtE,CAAP,CADF,KAGE,OAAO,KAAI,4CAAJ,EAAiBL,KAAKE,QAAtB,EAAgCF,KAAKG,IAArC,EAA2CH,KAAKI,KAAhD,EAAuDJ,KAAKK,GAA5D,CAAP;AAEJ;;AAEO,SAASC,yCAAT,CAAsBN,IAAtB,EAAyE;AAC9E,MAAIA,KAAKC,GAAT,EACE,OAAO,KAAI,4CAAJ,EAAqBD,KAAKE,QAA1B,EAAoCF,KAAKC,GAAzC,EAA8CD,KAAKG,IAAnD,EAAyDH,KAAKI,KAA9D,EAAqEJ,KAAKK,GAA1E,EAA+EL,KAAKO,IAApF,EAA0FP,KAAKQ,MAA/F,EAAuGR,KAAKS,MAA5G,EAAoHT,KAAKU,WAAzH,CAAP,CADF,KAGE,OAAO,KAAI,4CAAJ,EAAqBV,KAAKE,QAA1B,EAAoCF,KAAKG,IAAzC,EAA+CH,KAAKI,KAApD,EAA2DJ,KAAKK,GAAhE,EAAqEL,KAAKO,IAA1E,EAAgFP,KAAKQ,MAArF,EAA6FR,KAAKS,MAAlG,CAAP;AAEJ;;ADjBA,MAAME,8BAAQ,OAAd,C,CAAuB;;AAChB,SAASC,yCAAT,CAA8BX,GAA9B,EAA2CE,IAA3C,EAAyDC,KAAzD,EAAwEC,GAAxE,EAA6F;AAClGF,SAAOU,0CAAgBZ,GAAhB,EAAqBE,IAArB,CAAP;AAEA,MAAIW,KAAKX,OAAO,CAAhB;AACA,MAAIY,cAAc,EAAlB;AACA,MAAIX,SAAS,CAAb,EACEW,cAAc,CAAd,CADF,KAEO,IAAIC,0CAAWb,IAAX,CAAJ,EACLY,cAAc,EAAd;AAGF,SACEJ,8BACA,CADA,GAEA,MAAMG,EAFN,GAGAjB,KAAKC,KAAL,CAAWgB,KAAK,CAAhB,CAHA,GAIAjB,KAAKC,KAAL,CAAWgB,KAAK,GAAhB,CAJA,GAKAjB,KAAKC,KAAL,CAAWgB,KAAK,GAAhB,CALA,GAMAjB,KAAKC,KAAL,CAAW,CAAC,MAAMM,KAAN,GAAc,GAAf,IAAsB,EAAtB,GAA2BW,WAA3B,GAAyCV,GAApD,CAPF;AASF;;AAEO,SAASW,yCAAT,CAAoBb,IAApB,EAA2C;AAChD,SAAOA,OAAO,CAAP,KAAa,CAAb,KAAmBA,OAAO,GAAP,KAAe,CAAf,IAAoBA,OAAO,GAAP,KAAe,CAAtD,CAAP;AACF;;AAEO,SAASU,yCAAT,CAAyBZ,GAAzB,EAAsCE,IAAtC,EAA4D;AACjE,SAAOF,QAAQ,IAAR,GAAe,IAAIE,IAAnB,GAA0BA,IAAjC;AACF;;AAEO,SAASc,yCAAT,CAA0Bd,IAA1B,EAA0D;AAC/D,MAAIF,MAAM,IAAV;;AACA,MAAIE,QAAQ,CAAZ,EAAe;AACbF,UAAM,IAAN;AACAE,WAAO,IAAIA,IAAX;AACD;;AAED,SAAO,CAACF,GAAD,EAAME,IAAN,CAAP;AACF;;AAEA,MAAMe,oCAAc;AAClBC,YAAU,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CADQ;AAElBC,YAAU,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C;AAFQ,CAApB;;AASO,MAAMC,yCAAN,CAAM;AAGXC,gBAAcC,EAAd,EAAwC;AACtC,QAAIC,MAAMD,EAAV;AACA,QAAIE,SAASD,MAAMb,2BAAnB;AACA,QAAIe,aAAa7B,KAAKC,KAAL,CAAW2B,SAAS,MAApB,CAAjB;AACA,QAAIE,MAAM,+CAAIF,MAAJ,EAAY,MAAZ,CAAV;AACA,QAAIG,OAAO/B,KAAKC,KAAL,CAAW6B,MAAM,KAAjB,CAAX;AACA,QAAIE,QAAQ,+CAAIF,GAAJ,EAAS,KAAT,CAAZ;AACA,QAAIG,OAAOjC,KAAKC,KAAL,CAAW+B,QAAQ,IAAnB,CAAX;AACA,QAAIE,QAAQ,+CAAIF,KAAJ,EAAW,IAAX,CAAZ;AACA,QAAIG,SAASnC,KAAKC,KAAL,CAAWiC,QAAQ,GAAnB,CAAb;AAEA,QAAIE,eAAeP,aAAa,GAAb,GAAmBE,OAAO,GAA1B,GAAgCE,OAAO,CAAvC,GAA2CE,MAA3C,IAAqDJ,SAAS,CAAT,IAAcI,WAAW,CAAzB,GAA6B,CAA7B,GAAiC,CAAtF,CAAnB;AACA,QAAI,CAAC/B,GAAD,EAAME,IAAN,IAAcc,0CAAiBgB,YAAjB,CAAlB;AACA,QAAIC,UAAUV,MAAMZ,0CAAqBX,GAArB,EAA0BE,IAA1B,EAAgC,CAAhC,EAAmC,CAAnC,CAApB;AACA,QAAIgC,UAAU,CAAd;AACA,QAAIX,MAAMZ,0CAAqBX,GAArB,EAA0BE,IAA1B,EAAgC,CAAhC,EAAmC,CAAnC,CAAV,EACEgC,UAAU,CAAV,CADF,KAEO,IAAInB,0CAAWb,IAAX,CAAJ,EACLgC,UAAU,CAAV;AAEF,QAAI/B,QAAQP,KAAKC,KAAL,CAAW,CAAC,CAACoC,UAAUC,OAAX,IAAsB,EAAtB,GAA2B,GAA5B,IAAmC,GAA9C,CAAZ;AACA,QAAI9B,MAAMmB,MAAMZ,0CAAqBX,GAArB,EAA0BE,IAA1B,EAAgCC,KAAhC,EAAuC,CAAvC,CAAN,GAAkD,CAA5D;AAEA,WAAO,KAAI,4CAAJ,EAAiBH,GAAjB,EAAsBE,IAAtB,EAA4BC,KAA5B,EAAmCC,GAAnC,CAAP;AACF;;AAEA+B,cAAYpC,IAAZ,EAA2C;AACzC,WAAOY,0CAAqBZ,KAAKC,GAA1B,EAA+BD,KAAKG,IAApC,EAA0CH,KAAKI,KAA/C,EAAsDJ,KAAKK,GAA3D,CAAP;AACF;;AAEAgC,iBAAerC,IAAf,EAA8C;AAC5C,WAAOkB,iCAAW,CAACF,0CAAWhB,KAAKG,IAAhB,IAAwB,UAAxB,GAAqC,UAAtC,CAAX,CAA6DH,KAAKI,KAAL,GAAa,CAA1E,CAAP;AACF,GAnCW,CAqCX;;;AACAkC,kBAAgBtC,IAAhB,EAA+C;AAC7C,WAAO,EAAP;AACF;;AAEAuC,gBAAcvC,IAAd,EAA6C;AAC3C,WAAOgB,0CAAWhB,KAAKG,IAAhB,IAAwB,GAAxB,GAA8B,GAArC;AACF,GA5CW,CA8CX;;;AACAqC,gBAAcxC,IAAd,EAA6C;AAC3C,WAAO,IAAP;AACF;;AAEAyC,YAAU;AACR,WAAO,CAAC,IAAD,EAAO,IAAP,CAAP;AACF;;AAEAC,eAAa1C,IAAb,EAA6C;AAC3C,WAAOA,KAAKC,GAAL,KAAa,IAApB;AACF;;AAEA0C,cAAY3C,IAAZ,EAA4C;AAC1C,QAAIA,KAAKG,IAAL,IAAa,CAAjB,EAAoB;AAClBH,WAAKC,GAAL,GAAWD,KAAKC,GAAL,KAAa,IAAb,GAAoB,IAApB,GAA2B,IAAtC;AACAD,WAAKG,IAAL,GAAY,IAAIH,KAAKG,IAArB;AACD;AACH;;;AA/DA,qEAAa,SAAb;;;AADW;AErEb;;;;;;;;;;;;ACAA;;;;;;;;;;;AAYA;AACA;;;AACO,MAAMyC,4CAAgB;AAC3B,SAAO,CADoB;AAE3BC,MAAI,CAFuB;AAG3BC,MAAI,CAHuB;AAI3BC,MAAI,CAJuB;AAK3BC,MAAI,CALuB;AAM3BC,MAAI,CANuB;AAO3BC,MAAI,CAPuB;AAQ3BC,MAAI,CARuB;AAS3BC,MAAI,CATuB;AAU3BC,MAAI,CAVuB;AAW3BC,MAAI,CAXuB;AAY3BC,MAAI,CAZuB;AAa3BC,MAAI,CAbuB;AAc3BC,MAAI,CAduB;AAe3BC,MAAI,CAfuB;AAgB3BC,MAAI,CAhBuB;AAiB3BC,MAAI,CAjBuB;AAkB3BC,MAAI,CAlBuB;AAmB3BC,MAAI,CAnBuB;AAoB3BC,MAAI,CApBuB;AAqB3BC,MAAI,CArBuB;AAsB3BC,MAAI,CAtBuB;AAuB3BC,MAAI,CAvBuB;AAwB3BC,MAAI,CAxBuB;AAyB3BC,MAAI,CAzBuB;AA0B3BC,MAAI,CA1BuB;AA2B3BC,MAAI,CA3BuB;AA4B3BC,MAAI,CA5BuB;AA6B3BC,MAAI,CA7BuB;AA8B3BC,MAAI,CA9BuB;AA+B3BC,MAAI,CA/BuB;AAgC3BC,MAAI,CAhCuB;AAiC3BC,MAAI,CAjCuB;AAkC3BC,MAAI,CAlCuB;AAmC3BC,MAAI,CAnCuB;AAoC3BC,MAAI,CApCuB;AAqC3BC,MAAI,CArCuB;AAsC3BC,MAAI,CAtCuB;AAuC3BC,MAAI,CAvCuB;AAwC3BC,MAAI,CAxCuB;AAyC3BC,MAAI,CAzCuB;AA0C3BC,MAAI,CA1CuB;AA2C3BC,MAAI,CA3CuB;AA4C3BC,MAAI,CA5CuB;AA6C3BC,MAAI,CA7CuB;AA8C3BC,MAAI,CA9CuB;AA+C3BC,MAAI,CA/CuB;AAgD3BC,MAAI,CAhDuB;AAiD3BC,MAAI,CAjDuB;AAkD3BC,MAAI,CAlDuB;AAmD3BC,MAAI,CAnDuB;AAoD3BC,MAAI,CApDuB;AAqD3BC,MAAI,CArDuB;AAsD3BC,MAAI,CAtDuB;AAuD3BC,MAAI,CAvDuB;AAwD3BC,MAAI,CAxDuB;AAyD3BC,MAAI,CAzDuB;AA0D3BC,MAAI,CA1DuB;AA2D3BC,MAAI,CA3DuB;AA4D3BC,MAAI,CA5DuB;AA6D3BC,MAAI,CA7DuB;AA8D3BC,MAAI,CA9DuB;AA+D3BC,MAAI,CA/DuB;AAgE3BC,MAAI,CAhEuB;AAiE3BC,MAAI,CAjEuB;AAkE3BC,MAAI,CAlEuB;AAmE3BC,MAAI,CAnEuB;AAoE3BC,MAAI,CApEuB;AAqE3BC,MAAI,CArEuB;AAsE3BC,MAAI,CAtEuB;AAuE3BC,MAAI,CAvEuB;AAwE3BC,MAAI,CAxEuB;AAyE3BC,MAAI,CAzEuB;AA0E3BC,MAAI,CA1EuB;AA2E3BC,MAAI,CA3EuB;AA4E3BC,MAAI,CA5EuB;AA6E3BC,MAAI,CA7EuB;AA8E3BC,MAAI,CA9EuB;AA+E3BC,MAAI,CA/EuB;AAgF3BC,MAAI,CAhFuB;AAiF3BC,MAAI,CAjFuB;AAkF3BC,MAAI,CAlFuB;AAmF3BC,MAAI,CAnFuB;AAoF3BC,MAAI,CApFuB;AAqF3BC,MAAI,CArFuB;AAsF3BC,MAAI,CAtFuB;AAuF3BC,MAAI,CAvFuB;AAwF3BC,MAAI,CAxFuB;AAyF3BC,MAAI,CAzFuB;AA0F3BC,MAAI,CA1FuB;AA2F3BC,MAAI,CA3FuB;AA4F3BC,MAAI;AA5FuB,CAAtB;;ADMA,SAASC,yCAAT,CAAmBC,CAAnB,EAAiCC,CAAjC,EAAwD;AAC7DA,MAAI,+CAAWA,CAAX,EAAcD,EAAEvI,QAAhB,CAAJ;AACA,SAAOuI,EAAExI,GAAF,KAAUyI,EAAEzI,GAAZ,IAAmBwI,EAAEtI,IAAF,KAAWuI,EAAEvI,IAAhC,IAAwCsI,EAAErI,KAAF,KAAYsI,EAAEtI,KAAtD,IAA+DqI,EAAEpI,GAAF,KAAUqI,EAAErI,GAAlF;AACF;;AAGO,SAASsI,yCAAT,CAAqBF,CAArB,EAAmCC,CAAnC,EAA0D;AAC/DA,MAAI,+CAAWA,CAAX,EAAcD,EAAEvI,QAAhB,CAAJ,CAD+D,CAE/D;;AACAuI,MAAIG,0CAAaH,CAAb,CAAJ;AACAC,MAAIE,0CAAaF,CAAb,CAAJ;AACA,SAAOD,EAAExI,GAAF,KAAUyI,EAAEzI,GAAZ,IAAmBwI,EAAEtI,IAAF,KAAWuI,EAAEvI,IAAhC,IAAwCsI,EAAErI,KAAF,KAAYsI,EAAEtI,KAA7D;AACF;;AAGO,SAASyI,yCAAT,CAAoBJ,CAApB,EAAkCC,CAAlC,EAAyD;AAC9DA,MAAI,+CAAWA,CAAX,EAAcD,EAAEvI,QAAhB,CAAJ;AACAuI,MAAIK,0CAAYL,CAAZ,CAAJ;AACAC,MAAII,0CAAYJ,CAAZ,CAAJ;AACA,SAAOD,EAAExI,GAAF,KAAUyI,EAAEzI,GAAZ,IAAmBwI,EAAEtI,IAAF,KAAWuI,EAAEvI,IAAvC;AACF;;AAGO,SAAS4I,yCAAT,CAAoBN,CAApB,EAAkCC,CAAlC,EAAyD;AAC9D,SAAOD,EAAEvI,QAAF,CAAW8I,UAAX,KAA0BN,EAAExI,QAAF,CAAW8I,UAArC,IAAmDP,EAAExI,GAAF,KAAUyI,EAAEzI,GAA/D,IAAsEwI,EAAEtI,IAAF,KAAWuI,EAAEvI,IAAnF,IAA2FsI,EAAErI,KAAF,KAAYsI,EAAEtI,KAAzG,IAAkHqI,EAAEpI,GAAF,KAAUqI,EAAErI,GAArI;AACF;;AAGO,SAAS4I,yCAAT,CAAsBR,CAAtB,EAAoCC,CAApC,EAA2D;AAChED,MAAIG,0CAAaH,CAAb,CAAJ;AACAC,MAAIE,0CAAaF,CAAb,CAAJ;AACA,SAAOD,EAAEvI,QAAF,CAAW8I,UAAX,KAA0BN,EAAExI,QAAF,CAAW8I,UAArC,IAAmDP,EAAExI,GAAF,KAAUyI,EAAEzI,GAA/D,IAAsEwI,EAAEtI,IAAF,KAAWuI,EAAEvI,IAAnF,IAA2FsI,EAAErI,KAAF,KAAYsI,EAAEtI,KAAhH;AACF;;AAGO,SAAS8I,yCAAT,CAAqBT,CAArB,EAAmCC,CAAnC,EAA0D;AAC/DD,MAAIK,0CAAYL,CAAZ,CAAJ;AACAC,MAAII,0CAAYJ,CAAZ,CAAJ;AACA,SAAOD,EAAEvI,QAAF,CAAW8I,UAAX,KAA0BN,EAAExI,QAAF,CAAW8I,UAArC,IAAmDP,EAAExI,GAAF,KAAUyI,EAAEzI,GAA/D,IAAsEwI,EAAEtI,IAAF,KAAWuI,EAAEvI,IAA1F;AACF;;AAGO,SAASgJ,yCAAT,CAAiBnJ,IAAjB,EAAkCoJ,QAAlC,EAA6D;AAClE,SAAOZ,0CAAUxI,IAAV,EAAgBqJ,0CAAMD,QAAN,CAAhB,CAAP;AACF;;AAOO,SAASE,yCAAT,CAAsBtJ,IAAtB,EAAuCuJ,MAAvC,EAA+D;AACpE,MAAIC,SAASxJ,KAAKE,QAAL,CAAckC,WAAd,CAA0BpC,IAA1B,CAAb,CADoE,CAGpE;AACA;;AACA,MAAIyJ,YAAY5J,KAAK6J,IAAL,CAAUF,SAAS,CAAT,GAAaG,mCAAaJ,MAAb,CAAvB,IAA+C,CAA/D;AACA,MAAIE,YAAY,CAAhB,EACEA,aAAa,CAAb;AAGF,SAAOA,SAAP;AACF;;AAGO,SAASG,wCAAT,CAAaR,QAAb,EAA8C;AACnD,SAAO,+CAAaS,KAAKC,GAAL,EAAb,EAAyBV,QAAzB,CAAP;AACF;;AAGO,SAASC,yCAAT,CAAeD,QAAf,EAA+C;AACpD,SAAO,+CAAeQ,yCAAIR,QAAJ,CAAf,CAAP;AACF;;AAEO,SAASW,yCAAT,CAAqBtB,CAArB,EAAyCC,CAAzC,EAAqE;AAC1E,SAAOD,EAAEvI,QAAF,CAAWkC,WAAX,CAAuBqG,CAAvB,IAA4BC,EAAExI,QAAF,CAAWkC,WAAX,CAAuBsG,CAAvB,CAAnC;AACF;;AAEO,SAASsB,yCAAT,CAAqBvB,CAArB,EAAiCC,CAAjC,EAAqD;AAC1D,SAAOuB,+BAASxB,CAAT,IAAcwB,+BAASvB,CAAT,CAArB;AACF;;AAEA,SAASuB,8BAAT,CAAkBxB,CAAlB,EAAsC;AACpC,SAAOA,EAAElI,IAAF,aAA0BkI,EAAEjI,MAAF,QAA1B,GAAiDiI,EAAEhI,MAAF,GAAW,IAA5D,GAAmEgI,EAAE/H,WAA5E;AACF;;AAMO,SAASwJ,uCAAT,CAAuBzB,CAAvB,EAAwCW,QAAxC,EAAkE;AACvE,MAAIe,KAAK,+CAAW1B,CAAX,EAAcW,QAAd,CAAT;AACA,MAAIgB,WAAW3B,EAAE4B,GAAF,CAAM;AAACC,UAAM;AAAP,GAAN,CAAf;AACA,MAAIC,aAAa,+CAAWH,QAAX,EAAqBhB,QAArB,CAAjB;AACA,SAAO,CAACmB,aAAaJ,EAAd,IAAoB,OAA3B;AACF;;AAEA,IAAIK,sCAAgB,IAApB;;AAGO,SAASC,yCAAT,GAAoC;AACzC;AACA,MAAID,uCAAiB,IAArB,EACEA,sCAAgB,IAAIE,KAAKC,cAAT,GAA0BC,eAA1B,GAA4CxB,QAA5D;AAGF,SAAOoB,mCAAP;AACF;;AAOO,SAAS5B,yCAAT,CAAsB5I,IAAtB,EAAkD;AACvD;AACA,SAAOA,KAAK6K,QAAL,CAAc;AAACP,UAAMtK,KAAKK,GAAL,GAAW;AAAlB,GAAd,CAAP;AACF;;AAOO,SAASyK,yCAAT,CAAoB9K,IAApB,EAAgD;AACrD,SAAOA,KAAKqK,GAAL,CAAS;AAACC,UAAMtK,KAAKE,QAAL,CAAcmC,cAAd,CAA6BrC,IAA7B,IAAqCA,KAAKK;AAAjD,GAAT,CAAP;AACF;;AAOO,SAASyI,yCAAT,CAAqB9I,IAArB,EAAiD;AACtD,SAAO4I,0CAAa5I,KAAK6K,QAAL,CAAc;AAACE,YAAQ/K,KAAKI,KAAL,GAAa;AAAtB,GAAd,CAAb,CAAP;AACF;;AAOO,SAAS4K,yCAAT,CAAmBhL,IAAnB,EAA+C;AACpD,SAAO8K,0CAAW9K,KAAKqK,GAAL,CAAS;AAACU,YAAQ/K,KAAKE,QAAL,CAAcoC,eAAd,CAA8BtC,IAA9B,IAAsCA,KAAKI;AAApD,GAAT,CAAX,CAAP;AACF;;AAEO,SAAS6K,yCAAT,CAA+BjL,IAA/B,EAAsD;AAC3D,MAAIA,KAAKE,QAAL,CAAcgL,qBAAlB,EACE,OAAOlL,KAAKE,QAAL,CAAcgL,qBAAd,CAAoClL,IAApC,CAAP;AAGF,SAAO,CAAP;AACF;;AAEO,SAASmL,yCAAT,CAA8BnL,IAA9B,EAAqD;AAC1D,MAAIA,KAAKE,QAAL,CAAckL,oBAAlB,EACE,OAAOpL,KAAKE,QAAL,CAAckL,oBAAd,CAAmCpL,IAAnC,CAAP;AAGF,SAAO,CAAP;AACF;;AAOO,SAASqL,yCAAT,CAAqBrL,IAArB,EAAsCuJ,MAAtC,EAAiE;AACtE,MAAIE,YAAYH,0CAAatJ,IAAb,EAAmBuJ,MAAnB,CAAhB;AACA,SAAOvJ,KAAK6K,QAAL,CAAc;AAACP,UAAMb;AAAP,GAAd,CAAP;AACF;;AAMO,SAAS6B,yCAAT,CAAmBtL,IAAnB,EAAoCuJ,MAApC,EAA+D;AACpE,SAAO8B,0CAAYrL,IAAZ,EAAkBuJ,MAAlB,EAA0Bc,GAA1B,CAA8B;AAACC,UAAM;AAAP,GAA9B,CAAP;AACF;;AAEA,MAAMiB,sCAAgB,IAAIC,GAAJ,EAAtB;;AAEA,SAASC,+BAAT,CAAmBlC,MAAnB,EAAmC;AACjC;AACA;AACA,MAAImB,KAAKgB,MAAT,EAAiB;AACf;AACA,QAAIC,SAASJ,oCAAcK,GAAd,CAAkBrC,MAAlB,CAAb;;AACA,QAAI,CAACoC,MAAL,EAAa;AACX;AACAA,eAAS,IAAIjB,KAAKgB,MAAT,CAAgBnC,MAAhB,EAAwBsC,QAAxB,GAAmCF,MAA5C;AACAJ,0CAAcO,GAAd,CAAkBvC,MAAlB,EAA0BoC,MAA1B;AACD;;AACD,WAAOA,MAAP;AACD,GAZgC,CAcjC;AACA;AACA;AACA;;;AACA,MAAII,OAAOxC,OAAOyC,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAAX;AACA,SAAOD,SAAS,GAAT,GAAe,IAAf,GAAsBA,IAA7B;AACF;;AAEA,SAASpC,kCAAT,CAAsBJ,MAAtB,EAAsC;AACpC;AACA;AACA,MAAIoC,SAASF,gCAAUlC,MAAV,CAAb;AACA,SAAO,+CAAcoC,MAAd,KAAyB,CAAhC;AACF;;AAGO,SAASM,yCAAT,CAAyBjM,IAAzB,EAA0CuJ,MAA1C,EAAkE;AACvE,MAAIe,OAAOtK,KAAKE,QAAL,CAAcmC,cAAd,CAA6BrC,IAA7B,CAAX;AACA,SAAOH,KAAK6J,IAAL,CAAU,CAACJ,0CAAaV,0CAAa5I,IAAb,CAAb,EAAiCuJ,MAAjC,IAA2Ce,IAA5C,IAAoD,CAA9D,CAAP;AACF;;AAGO,SAAS4B,yCAAT,CAA2DzD,CAA3D,EAAiEC,CAAjE,EAA8E;AACnF,MAAID,KAAKC,CAAT,EACE,OAAOD,EAAE0D,OAAF,CAAUzD,CAAV,KAAgB,CAAhB,GAAoBD,CAApB,GAAwBC,CAA/B;AAGF,SAAOD,KAAKC,CAAZ;AACF;;AAGO,SAAS0D,yCAAT,CAA2D3D,CAA3D,EAAiEC,CAAjE,EAA8E;AACnF,MAAID,KAAKC,CAAT,EACE,OAAOD,EAAE0D,OAAF,CAAUzD,CAAV,KAAgB,CAAhB,GAAoBD,CAApB,GAAwBC,CAA/B;AAGF,SAAOD,KAAKC,CAAZ;AACF;;AAEA,MAAM2D,qCAAe;AACnBtJ,MAAI,CAAC,CAAD,EAAI,CAAJ,CADe;AAEnBD,MAAI,CAAC,CAAD,EAAI,CAAJ,CAFe;AAGnBY,MAAI,CAAC,CAAD,EAAI,CAAJ,CAHe;AAInBa,MAAI,CAAC,CAAD,EAAI,CAAJ,CAJe;AAKnBG,MAAI,CAAC,CAAD,EAAI,CAAJ,CALe;AAMnB4H,MAAI,CAAC,CAAD,EAAI,CAAJ,CANe;AAOnB9G,MAAI,CAAC,CAAD,EAAI,CAAJ,CAPe;AAQnBC,MAAI,CAAC,CAAD,EAAI,CAAJ,CARe;AASnBG,MAAI,CAAC,CAAD,EAAI,CAAJ,CATe;AAUnBE,MAAI,CAAC,CAAD,EAAI,CAAJ,CAVe;AAWnBQ,MAAI,CAAC,CAAD,EAAI,CAAJ,CAXe;AAYnBY,MAAI,CAAC,CAAD,EAAI,CAAJ,CAZe;AAanBE,MAAI,CAAC,CAAD,EAAI,CAAJ,CAbe;AAcnBmF,MAAI,CAAC,CAAD,EAAI,CAAJ,CAde;AAenB9E,MAAI,CAAC,CAAD,EAAI,CAAJ,CAfe;AAgBnBK,MAAI,CAAC,CAAD,EAAI,CAAJ,CAhBe;AAiBnB0E,MAAI,CAAC,CAAD,EAAI,CAAJ;AAjBe,CAArB;;AAqBO,SAASC,wCAAT,CAAmBzM,IAAnB,EAAoCuJ,MAApC,EAA6D;AAClE,MAAIC,SAASxJ,KAAKE,QAAL,CAAckC,WAAd,CAA0BpC,IAA1B,CAAb,CADkE,CAGlE;AACA;;AACA,MAAIyJ,YAAY5J,KAAK6J,IAAL,CAAUF,SAAS,CAAnB,IAAwB,CAAxC;AACA,MAAIC,YAAY,CAAhB,EACEA,aAAa,CAAb;AAGF,MAAIkC,SAASF,gCAAUlC,MAAV,CAAb,CAVkE,CAWlE;AACA;;AACA,MAAI,CAACmD,KAAD,EAAQC,GAAR,IAAeN,kCAAY,CAACV,MAAD,CAAZ,IAAwB,CAAC,CAAD,EAAI,CAAJ,CAA3C;AACA,SAAOlC,cAAciD,KAAd,IAAuBjD,cAAckD,GAA5C;AACF;;AAGO,SAASC,yCAAT,CAAmB5M,IAAnB,EAAoCuJ,MAApC,EAA6D;AAClE,SAAO,CAACkD,yCAAUzM,IAAV,EAAgBuJ,MAAhB,CAAR;AACF;;AHlRO,SAASsD,wCAAT,CAAuB7M,IAAvB,EAA0C;AAC/CA,SAAO8M,0CAAW9M,IAAX,EAAiB,KAAI,4CAAJ,GAAjB,CAAP;AACA,MAAIG,OAAO,+CAAgBH,KAAKC,GAArB,EAA0BD,KAAKG,IAA/B,CAAX;AACA,SAAO4M,qCAAe5M,IAAf,EAAqBH,KAAKI,KAA1B,EAAiCJ,KAAKK,GAAtC,EAA2CL,KAAKO,IAAhD,EAAsDP,KAAKQ,MAA3D,EAAmER,KAAKS,MAAxE,EAAgFT,KAAKU,WAArF,CAAP;AACF;;AAEA,SAASqM,oCAAT,CAAwB5M,IAAxB,EAAsCC,KAAtC,EAAqDC,GAArD,EAAkEE,IAAlE,EAAgFC,MAAhF,EAAgGC,MAAhG,EAAgHC,WAAhH,EAAqI;AACnI;AACA;AACA,MAAIV,OAAO,IAAI6J,IAAJ,EAAX;AACA7J,OAAKgN,WAAL,CAAiBzM,IAAjB,EAAuBC,MAAvB,EAA+BC,MAA/B,EAAuCC,WAAvC;AACAV,OAAKiN,cAAL,CAAoB9M,IAApB,EAA0BC,QAAQ,CAAlC,EAAqCC,GAArC;AACA,SAAOL,KAAKkN,OAAL,EAAP;AACF;;AAEO,SAASC,yCAAT,CAA2BhD,EAA3B,EAAuCf,QAAvC,EAAyD;AAC9D;AACA,MAAIA,aAAa,KAAjB,EACE,OAAO,CAAP,CAH4D,CAM9D;;AACA,MAAIe,KAAK,CAAL,IAAUf,aAAa,gDAA3B,EACE,OAAO,IAAIS,IAAJ,CAASM,EAAT,EAAaiD,iBAAb,WAAP;AAGF,MAAI;AAAAjN,UAACA,IAAD;AAAKC,WAAEA,KAAP;AAAYC,SAAEA,GAAd;AAAiBE,UAAEA,IAAnB;AAAuBC,YAAEA,MAAzB;AAA+BC,YAAEA;AAAjC,MAA2C4M,uCAAiBlD,EAAjB,EAAqBf,QAArB,CAA/C;AACA,MAAIkE,MAAMP,qCAAe5M,IAAf,EAAqBC,KAArB,EAA4BC,GAA5B,EAAiCE,IAAjC,EAAuCC,MAAvC,EAA+CC,MAA/C,EAAuD,CAAvD,CAAV;AACA,SAAO6M,MAAMzN,KAAKC,KAAL,CAAWqK,KAAK,IAAhB,IAAwB,IAArC;AACF;;AAEA,MAAMoD,6CAAuB,IAAI/B,GAAJ,EAA7B;;AAEA,SAAS6B,sCAAT,CAA0BlD,EAA1B,EAAsCf,QAAtC,EAAwD;AACtD,MAAIoE,YAAYD,2CAAqB3B,GAArB,CAAyBxC,QAAzB,CAAhB;;AACA,MAAI,CAACoE,SAAL,EAAgB;AACdA,gBAAY,IAAI9C,KAAKC,cAAT,CAAwB,OAAxB,EAAiC;gBAC3CvB,QAD2C;AAE3CqE,cAAQ,KAFmC;AAG3CxN,WAAK,OAHsC;AAI3CE,YAAM,SAJqC;AAK3CC,aAAO,SALoC;AAM3CC,WAAK,SANsC;AAO3CE,YAAM,SAPqC;AAQ3CC,cAAQ,SARmC;AAS3CC,cAAQ;AATmC,KAAjC,CAAZ;AAYA8M,+CAAqBzB,GAArB,CAAyB1C,QAAzB,EAAmCoE,SAAnC;AACD;;AAED,MAAIE,QAAQF,UAAUG,aAAV,CAAwB,IAAI9D,IAAJ,CAASM,EAAT,CAAxB,CAAZ;AACA,MAAIyD,aAAuC,EAA3C;;AACA,OAAK,IAAI7B,IAAT,IAAiB2B,KAAjB,EACE,IAAI3B,KAAK8B,IAAL,KAAc,SAAlB,EACED,UAAU,CAAC7B,KAAK8B,IAAN,CAAV,GAAwB9B,KAAK+B,KAA7B;;AAKJ,SAAO;AACL;AACA3N,UAAMyN,WAAW3N,GAAX,KAAmB,IAAnB,IAA2B2N,WAAW3N,GAAX,KAAmB,GAA9C,GAAoD,CAAC2N,WAAWzN,IAAZ,GAAmB,CAAvE,GAA2E,CAACyN,WAAWzN,IAFxF;AAGLC,WAAO,CAACwN,WAAWxN,KAHd;AAILC,SAAK,CAACuN,WAAWvN,GAJZ;AAKLE,UAAMqN,WAAWrN,IAAX,KAAoB,IAApB,GAA2B,CAA3B,GAA+B,CAACqN,WAAWrN,IAL5C;AAMLC,YAAQ,CAACoN,WAAWpN,MANf;AAOLC,YAAQ,CAACmN,WAAWnN;AAPf,GAAP;AASF;;AAEA,MAAMsN,kCAAY,QAAlB;;AAEO,SAASC,yCAAT,CAA2BhO,IAA3B,EAAmDoJ,QAAnD,EAA+E;AACpF,MAAIe,KAAK0C,yCAAc7M,IAAd,CAAT;AACA,MAAIiO,UAAU9D,KAAKgD,0CAAkBhD,KAAK4D,+BAAvB,EAAkC3E,QAAlC,CAAnB;AACA,MAAI8E,QAAQ/D,KAAKgD,0CAAkBhD,KAAK4D,+BAAvB,EAAkC3E,QAAlC,CAAjB;AACA,SAAO+E,wCAAkBnO,IAAlB,EAAwBoJ,QAAxB,EAAkC6E,OAAlC,EAA2CC,KAA3C,CAAP;AACF;;AAEA,SAASC,uCAAT,CAA2BnO,IAA3B,EAAmDoJ,QAAnD,EAAqE6E,OAArE,EAAsFC,KAAtF,EAA+G;AAC7G,MAAIE,QAAQH,YAAYC,KAAZ,GAAoB,CAACD,OAAD,CAApB,GAAgC,CAACA,OAAD,EAAUC,KAAV,CAA5C;AACA,SAAOE,MAAMC,MAAN,CAAaC,YAAYC,sCAAgBvO,IAAhB,EAAsBoJ,QAAtB,EAAgCkF,QAAhC,CAAzB,CAAP;AACF;;AAEA,SAASC,qCAAT,CAAyBvO,IAAzB,EAAiDoJ,QAAjD,EAAmEkF,QAAnE,EAAqF;AACnF,MAAIZ,QAAQL,uCAAiBiB,QAAjB,EAA2BlF,QAA3B,CAAZ;AACA,SAAOpJ,KAAKG,IAAL,KAAcuN,MAAMvN,IAApB,IACFH,KAAKI,KAAL,KAAesN,MAAMtN,KADnB,IAEFJ,KAAKK,GAAL,KAAaqN,MAAMrN,GAFjB,IAGFL,KAAKO,IAAL,KAAcmN,MAAMnN,IAHlB,IAIFP,KAAKQ,MAAL,KAAgBkN,MAAMlN,MAJpB,IAKFR,KAAKS,MAAL,KAAgBiN,MAAMjN,MAL3B;AAMF;;AAEO,SAAS+N,yCAAT,CAAoBxO,IAApB,EAA2DoJ,QAA3D,EAAoI;AAAA,MAAvDqF,cAAuD,uEAAtB,YAAsB;AACzI,MAAIC,WAAWC,0CAAmB3O,IAAnB,CAAf,CADyI,CAGzI;;AACA,MAAIoJ,aAAa,KAAjB,EACE,OAAOyD,yCAAc6B,QAAd,CAAP,CALuI,CAQzI;;AACA,MAAItF,aAAa,gDAAb,IAAmCqF,mBAAmB,YAA1D,EAAwE;AACtEC,eAAW5B,0CAAW4B,QAAX,EAAqB,KAAI,4CAAJ,GAArB,CAAX,CADsE,CAGtE;;AACA,QAAIE,QAAO,IAAI/E,IAAJ,EAAX;AACA,QAAI1J,OAAO,+CAAgBuO,SAASzO,GAAzB,EAA8ByO,SAASvO,IAAvC,CAAX;AACAyO,UAAKC,WAAL,CAAiB1O,IAAjB,EAAuBuO,SAAStO,KAAT,GAAiB,CAAxC,EAA2CsO,SAASrO,GAApD;AACAuO,UAAKE,QAAL,CAAcJ,SAASnO,IAAvB,EAA6BmO,SAASlO,MAAtC,EAA8CkO,SAASjO,MAAvD,EAA+DiO,SAAShO,WAAxE;AACA,WAAOkO,MAAK1B,OAAL,EAAP;AACD;;AAED,MAAI/C,KAAK0C,yCAAc6B,QAAd,CAAT;AACA,MAAIK,eAAe5B,0CAAkBhD,KAAK4D,+BAAvB,EAAkC3E,QAAlC,CAAnB;AACA,MAAI4F,cAAc7B,0CAAkBhD,KAAK4D,+BAAvB,EAAkC3E,QAAlC,CAAlB;AACA,MAAI6F,QAAQd,wCAAkBO,QAAlB,EAA4BtF,QAA5B,EAAsCe,KAAK4E,YAA3C,EAAyD5E,KAAK6E,WAA9D,CAAZ;AAEA,MAAIC,MAAMC,MAAN,KAAiB,CAArB,EACE,OAAOD,KAAK,CAAC,CAAD,CAAZ;AAGF,MAAIA,MAAMC,MAAN,GAAe,CAAnB,EACE,QAAQT,cAAR;AACE;AACA,SAAK,YAAL;AACA,SAAK,SAAL;AACE,aAAOQ,KAAK,CAAC,CAAD,CAAZ;;AACF,SAAK,OAAL;AACE,aAAOA,KAAK,CAACA,MAAMC,MAAN,GAAe,CAAhB,CAAZ;;AACF,SAAK,QAAL;AACE,YAAM,IAAIC,UAAJ,CAAe,wCAAf,CAAN;AARJ;;AAYF,UAAQV,cAAR;AACE,SAAK,SAAL;AACE,aAAO5O,KAAKuP,GAAL,CAASjF,KAAK4E,YAAd,EAA4B5E,KAAK6E,WAAjC,CAAP;AACF;;AACA,SAAK,YAAL;AACA,SAAK,OAAL;AACE,aAAOnP,KAAKwP,GAAL,CAASlF,KAAK4E,YAAd,EAA4B5E,KAAK6E,WAAjC,CAAP;;AACF,SAAK,QAAL;AACE,YAAM,IAAIG,UAAJ,CAAe,6BAAf,CAAN;AARJ;AAUF;;AAEO,SAASG,yCAAT,CAAgBZ,QAAhB,EAA2DtF,QAA3D,EAAkI;AAAA,MAArDqF,cAAqD,uEAApB,YAAoB;AACvI,SAAO,IAAI5E,IAAJ,CAAS2E,0CAAWE,QAAX,EAAqBtF,QAArB,EAA+BqF,cAA/B,CAAT,CAAP;AACF;;AAEO,SAASc,yCAAT,CAAsBpF,EAAtB,EAAkCf,QAAlC,EAAmE;AACxE,MAAIoG,SAASrC,0CAAkBhD,EAAlB,EAAsBf,QAAtB,CAAb;AACA,MAAIpJ,OAAO,IAAI6J,IAAJ,CAASM,KAAKqF,MAAd,CAAX;AACA,MAAIrP,OAAOH,KAAKyP,cAAL,EAAX;AACA,MAAIrP,QAAQJ,KAAK0P,WAAL,KAAqB,CAAjC;AACA,MAAIrP,MAAML,KAAK2P,UAAL,EAAV;AACA,MAAIpP,OAAOP,KAAK4P,WAAL,EAAX;AACA,MAAIpP,SAASR,KAAK6P,aAAL,EAAb;AACA,MAAIpP,SAAST,KAAK8P,aAAL,EAAb;AACA,MAAIpP,cAAcV,KAAK+P,kBAAL,EAAlB;AAEA,SAAO,KAAI,4CAAJ,EAAkB5P,IAAlB,EAAwBC,KAAxB,EAA+BC,GAA/B,EAAoC+I,QAApC,EAA8CoG,MAA9C,EAAsDjP,IAAtD,EAA4DC,MAA5D,EAAoEC,MAApE,EAA4EC,WAA5E,CAAP;AACF;;AAEO,SAASsP,yCAAT,CAAkBhQ,IAAlB,EAA8BoJ,QAA9B,EAA+D;AACpE,SAAOmG,0CAAavP,KAAKkN,OAAL,EAAb,EAA6B9D,QAA7B,CAAP;AACF;;AAEO,SAAS6G,yCAAT,CAAyBjQ,IAAzB,EAAoD;AACzD,SAAOgQ,0CAAShQ,IAAT,EAAe,gDAAf,CAAP;AACF;;AAGO,SAASkQ,yCAAT,CAAwBxB,QAAxB,EAAiE;AACtE,SAAO,KAAI,4CAAJ,EAAiBA,SAASxO,QAA1B,EAAoCwO,SAASzO,GAA7C,EAAkDyO,SAASvO,IAA3D,EAAiEuO,SAAStO,KAA1E,EAAiFsO,SAASrO,GAA1F,CAAP;AACF;;AAEO,SAAS8P,yCAAT,CAAsBnQ,IAAtB,EAAyD;AAC9D,SAAO;AACLC,SAAKD,KAAKC,GADL;AAELE,UAAMH,KAAKG,IAFN;AAGLC,WAAOJ,KAAKI,KAHP;AAILC,SAAKL,KAAKK;AAJL,GAAP;AAMF;;AAEO,SAAS+P,yCAAT,CAAsBpQ,IAAtB,EAAiD;AACtD,SAAO;AACLO,UAAMP,KAAKO,IADN;AAELC,YAAQR,KAAKQ,MAFR;AAGLC,YAAQT,KAAKS,MAHR;AAILC,iBAAaV,KAAKU;AAJb,GAAP;AAMF;;AAMO,SAASiO,yCAAT,CAA4B3O,IAA5B,EAAmFqQ,IAAnF,EAAqH;AAC1H,MAAI9P,OAAO,CAAX;AAAA,MAAcC,SAAS,CAAvB;AAAA,MAA0BC,SAAS,CAAnC;AAAA,MAAsCC,cAAc,CAApD;AACA,MAAI,cAAcV,IAAlB,EACG;AAAAO,UAACA,IAAD;AAAKC,YAAEA,MAAP;AAAaC,YAAEA,MAAf;AAAqBC,iBAAEA;AAAvB,MAAsCV,IAAtC,EADH,KAEO,IAAI,UAAUA,IAAV,IAAkB,CAACqQ,IAAvB,EACL,OAAOrQ,IAAP;AAGF,MAAIqQ,IAAJ,EACG;AAAA9P,UAACA,IAAD;AAAKC,YAAEA,MAAP;AAAaC,YAAEA,MAAf;AAAqBC,iBAAEA;AAAvB,MAAsC2P,IAAtC;AAGH,SAAO,KAAI,4CAAJ,EACLrQ,KAAKE,QADA,EAELF,KAAKC,GAFA,EAGLD,KAAKG,IAHA,EAILH,KAAKI,KAJA,EAKLJ,KAAKK,GALA,EAMLE,IANK,EAOLC,MAPK,EAQLC,MARK,EASLC,WATK,CAAP;AAWF;;AAGO,SAAS4P,yCAAT,CAAgB5B,QAAhB,EAAkE;AACvE,SAAO,KAAI,2CAAJ,EAASA,SAASnO,IAAlB,EAAwBmO,SAASlO,MAAjC,EAAyCkO,SAASjO,MAAlD,EAA0DiO,SAAShO,WAAnE,CAAP;AACF;;AAGO,SAASoM,yCAAT,CAA+C9M,IAA/C,EAAwDE,QAAxD,EAA+E;AACpF,MAAIF,KAAKE,QAAL,CAAc8I,UAAd,KAA6B9I,SAAS8I,UAA1C,EACE,OAAOhJ,IAAP;AAGF,MAAIuQ,eAAerQ,SAASoB,aAAT,CAAuBtB,KAAKE,QAAL,CAAckC,WAAd,CAA0BpC,IAA1B,CAAvB,CAAnB;AACA,MAAIwQ,OAAmBxQ,KAAKwQ,IAAL,EAAvB;AACAA,OAAKtQ,QAAL,GAAgBA,QAAhB;AACAsQ,OAAKvQ,GAAL,GAAWsQ,aAAatQ,GAAxB;AACAuQ,OAAKrQ,IAAL,GAAYoQ,aAAapQ,IAAzB;AACAqQ,OAAKpQ,KAAL,GAAamQ,aAAanQ,KAA1B;AACAoQ,OAAKnQ,GAAL,GAAWkQ,aAAalQ,GAAxB;AACA,iDAAUmQ,IAAV;AACA,SAAOA,IAAP;AACF;;AAMO,SAASC,yCAAT,CAAiBzQ,IAAjB,EAAwEoJ,QAAxE,EAA0FqF,cAA1F,EAA0I;AAC/I,MAAIzO,iBAAgB,4CAAhB,CAAJ,EAAmC;AACjC,QAAIA,KAAKoJ,QAAL,KAAkBA,QAAtB,EACE,OAAOpJ,IAAP;AAGF,WAAO0Q,0CAAW1Q,IAAX,EAAiBoJ,QAAjB,CAAP;AACD;;AAED,MAAIe,KAAKqE,0CAAWxO,IAAX,EAAiBoJ,QAAjB,EAA2BqF,cAA3B,CAAT;AACA,SAAOc,0CAAapF,EAAb,EAAiBf,QAAjB,CAAP;AACF;;AAEO,SAASuH,wCAAT,CAAqB3Q,IAArB,EAA0C;AAC/C,MAAImK,KAAK0C,yCAAc7M,IAAd,IAAsBA,KAAKwP,MAApC;AACA,SAAO,IAAI3F,IAAJ,CAASM,EAAT,CAAP;AACF;;AAGO,SAASuG,yCAAT,CAAoB1Q,IAApB,EAAyCoJ,QAAzC,EAA0E;AAC/E,MAAIe,KAAK0C,yCAAc7M,IAAd,IAAsBA,KAAKwP,MAApC;AACA,SAAO1C,0CAAWyC,0CAAapF,EAAb,EAAiBf,QAAjB,CAAX,EAAuCpJ,KAAKE,QAA5C,CAAP;AACF;;AAGO,SAAS0Q,yCAAT,CAAyB5Q,IAAzB,EAA6D;AAClE,SAAO0Q,0CAAW1Q,IAAX,EAAiB,gDAAjB,CAAP;AACF;;AD5RA,MAAM6Q,iCAAW,OAAjB;;AAKO,SAASC,yCAAT,CAAa9Q,IAAb,EAAoD+Q,QAApD,EAAgF;AACrF,MAAIC,cAAsDhR,KAAKwQ,IAAL,EAA1D;AACA,MAAIlG,OAAO,UAAU0G,WAAV,GAAwBC,oCAAcD,WAAd,EAA2BD,QAA3B,CAAxB,GAA+D,CAA1E;AAEAG,iCAASF,WAAT,EAAsBD,SAASI,KAAT,IAAkB,CAAxC;AACA,MAAIH,YAAY9Q,QAAZ,CAAqBkR,gBAAzB,EACEJ,YAAY9Q,QAAZ,CAAqBkR,gBAArB,CAAsCJ,WAAtC,EAAmDhR,IAAnD;AAGFgR,cAAY5Q,KAAZ,IAAqB2Q,SAAShG,MAAT,IAAmB,CAAxC;AAEAsG,yCAAiBL,WAAjB;AACAM,0CAAkBN,WAAlB;AAEAA,cAAY3Q,GAAZ,IAAmB,CAAC0Q,SAASQ,KAAT,IAAkB,CAAnB,IAAwB,CAA3C;AACAP,cAAY3Q,GAAZ,IAAmB0Q,SAASzG,IAAT,IAAiB,CAApC;AACA0G,cAAY3Q,GAAZ,IAAmBiK,IAAnB;AAEAkH,mCAAWR,WAAX;AAEA,MAAIA,YAAY9Q,QAAZ,CAAqByC,WAAzB,EACEqO,YAAY9Q,QAAZ,CAAqByC,WAArB,CAAiCqO,WAAjC,EArBmF,CAwBrF;AACA;AACA;AACA;;AACA,MAAIA,YAAY7Q,IAAZ,GAAmB,CAAvB,EAA0B;AACxB6Q,gBAAY7Q,IAAZ,GAAmB,CAAnB;AACA6Q,gBAAY5Q,KAAZ,GAAoB,CAApB;AACA4Q,gBAAY3Q,GAAZ,GAAkB,CAAlB;AACD;;AAED,MAAIoR,UAAUT,YAAY9Q,QAAZ,CAAqBsC,aAArB,CAAmCwO,WAAnC,CAAd;;AACA,MAAIA,YAAY7Q,IAAZ,GAAmBsR,OAAvB,EAAgC;QACXC;;AAAnB,QAAIhP,eAAe,2EAAYxC,QAAZ,EAAqBwC,YAArB,MAAiC,IAAjC,4HAAoCsO,WAApC,CAAnB;AACAA,gBAAY7Q,IAAZ,GAAmBsR,OAAnB;AACAT,gBAAY5Q,KAAZ,GAAoBsC,eAAe,CAAf,GAAmBsO,YAAY9Q,QAAZ,CAAqBoC,eAArB,CAAqC0O,WAArC,CAAvC;AACAA,gBAAY3Q,GAAZ,GAAkBqC,eAAe,CAAf,GAAmBsO,YAAY9Q,QAAZ,CAAqBmC,cAArB,CAAoC2O,WAApC,CAArC;AACD;;AAED,MAAIA,YAAY5Q,KAAZ,GAAoB,CAAxB,EAA2B;AACzB4Q,gBAAY5Q,KAAZ,GAAoB,CAApB;AACA4Q,gBAAY3Q,GAAZ,GAAkB,CAAlB;AACD;;AAED,MAAIsR,WAAWX,YAAY9Q,QAAZ,CAAqBoC,eAArB,CAAqC0O,WAArC,CAAf;;AACA,MAAIA,YAAY5Q,KAAZ,GAAoBuR,QAAxB,EAAkC;AAChCX,gBAAY5Q,KAAZ,GAAoBuR,QAApB;AACAX,gBAAY3Q,GAAZ,GAAkB2Q,YAAY9Q,QAAZ,CAAqBmC,cAArB,CAAoC2O,WAApC,CAAlB;AACD;;AAEDA,cAAY3Q,GAAZ,GAAkBR,KAAKwP,GAAL,CAAS,CAAT,EAAYxP,KAAKuP,GAAL,CAAS4B,YAAY9Q,QAAZ,CAAqBmC,cAArB,CAAoC2O,WAApC,CAAT,EAA2DA,YAAY3Q,GAAvE,CAAZ,CAAlB;AACA,SAAO2Q,WAAP;AACF;;AAEA,SAASE,8BAAT,CAAkBlR,IAAlB,EAAkDmR,KAAlD,EAAiE;MAC3DS;;AAAJ,MAAI,sDAAK1R,QAAL,EAAcwC,YAAd,MAA0B,IAA1B,uGAA6B1C,IAA7B,CAAJ,EACEmR,QAAQ,CAACA,KAAT;AAGFnR,OAAKG,IAAL,IAAagR,KAAb;AACF;;AAEA,SAASE,sCAAT,CAA0BrR,IAA1B,EAA0D;AACxD,SAAOA,KAAKI,KAAL,GAAa,CAApB,EAAuB;AACrB8Q,mCAASlR,IAAT,EAAe,EAAf;AACAA,SAAKI,KAAL,IAAcJ,KAAKE,QAAL,CAAcoC,eAAd,CAA8BtC,IAA9B,CAAd;AACF;;AAEA,MAAI6R,eAAe,CAAnB;;AACA,SAAO7R,KAAKI,KAAL,IAAcyR,eAAe7R,KAAKE,QAAL,CAAcoC,eAAd,CAA8BtC,IAA9B,CAA7B,CAAP,EAA0E;AACxEA,SAAKI,KAAL,IAAcyR,YAAd;AACAX,mCAASlR,IAAT,EAAe,CAAf;AACF;AACF;;AAEA,SAASwR,gCAAT,CAAoBxR,IAApB,EAAoD;AAClD,SAAOA,KAAKK,GAAL,GAAW,CAAlB,EAAqB;AACnBL,SAAKI,KAAL;AACAiR,2CAAiBrR,IAAjB;AACAA,SAAKK,GAAL,IAAYL,KAAKE,QAAL,CAAcmC,cAAd,CAA6BrC,IAA7B,CAAZ;AACF;;AAEA,SAAOA,KAAKK,GAAL,GAAWL,KAAKE,QAAL,CAAcmC,cAAd,CAA6BrC,IAA7B,CAAlB,EAAsD;AACpDA,SAAKK,GAAL,IAAYL,KAAKE,QAAL,CAAcmC,cAAd,CAA6BrC,IAA7B,CAAZ;AACAA,SAAKI,KAAL;AACAiR,2CAAiBrR,IAAjB;AACF;AACF;;AAEA,SAASsR,uCAAT,CAA2BtR,IAA3B,EAA2D;AACzDA,OAAKI,KAAL,GAAaP,KAAKwP,GAAL,CAAS,CAAT,EAAYxP,KAAKuP,GAAL,CAASpP,KAAKE,QAAL,CAAcoC,eAAd,CAA8BtC,IAA9B,CAAT,EAA8CA,KAAKI,KAAnD,CAAZ,CAAb;AACAJ,OAAKK,GAAL,GAAWR,KAAKwP,GAAL,CAAS,CAAT,EAAYxP,KAAKuP,GAAL,CAASpP,KAAKE,QAAL,CAAcmC,cAAd,CAA6BrC,IAA7B,CAAT,EAA6CA,KAAKK,GAAlD,CAAZ,CAAX;AACF;;AAEO,SAASyR,yCAAT,CAAmB9R,IAAnB,EAAmD;AACxD,MAAIA,KAAKE,QAAL,CAAc6R,aAAlB,EACE/R,KAAKE,QAAL,CAAc6R,aAAd,CAA4B/R,IAA5B;AAGFA,OAAKG,IAAL,GAAYN,KAAKwP,GAAL,CAAS,CAAT,EAAYxP,KAAKuP,GAAL,CAASpP,KAAKE,QAAL,CAAcsC,aAAd,CAA4BxC,IAA5B,CAAT,EAA4CA,KAAKG,IAAjD,CAAZ,CAAZ;AACAmR,0CAAkBtR,IAAlB;AACF;;AAEO,SAASgS,yCAAT,CAAwBjB,QAAxB,EAAsE;AAC3E,MAAIkB,kBAAkB,EAAtB;;AACA,OAAK,IAAIC,GAAT,IAAgBnB,QAAhB,EACE,IAAI,OAAOA,QAAQ,CAACmB,GAAD,CAAf,KAAyB,QAA7B,EACED,eAAe,CAACC,GAAD,CAAf,GAAuB,CAACnB,QAAQ,CAACmB,GAAD,CAAhC;;AAIJ,SAAOD,eAAP;AACF;;AAIO,SAASE,yCAAT,CAAkBnS,IAAlB,EAAyD+Q,QAAzD,EAAsH;AAC3H,SAAOD,0CAAI9Q,IAAJ,EAAUgS,0CAAejB,QAAf,CAAV,CAAP;AACF;;AAIO,SAASqB,yCAAT,CAAapS,IAAb,EAAoDqS,MAApD,EAAwE;AAC7E,MAAIrB,cAAwChR,KAAKwQ,IAAL,EAA5C;AAEA,MAAI6B,OAAOpS,GAAP,IAAc,IAAlB,EACE+Q,YAAY/Q,GAAZ,GAAkBoS,OAAOpS,GAAzB;AAGF,MAAIoS,OAAOlS,IAAP,IAAe,IAAnB,EACE6Q,YAAY7Q,IAAZ,GAAmBkS,OAAOlS,IAA1B;AAGF,MAAIkS,OAAOjS,KAAP,IAAgB,IAApB,EACE4Q,YAAY5Q,KAAZ,GAAoBiS,OAAOjS,KAA3B;AAGF,MAAIiS,OAAOhS,GAAP,IAAc,IAAlB,EACE2Q,YAAY3Q,GAAZ,GAAkBgS,OAAOhS,GAAzB;AAGFyR,4CAAUd,WAAV;AACA,SAAOA,WAAP;AACF;;AAIO,SAASsB,yCAAT,CAAiBxE,KAAjB,EAAiDuE,MAAjD,EAAqE;AAC1E,MAAIE,eAAiDzE,MAAM0C,IAAN,EAArD;AAEA,MAAI6B,OAAO9R,IAAP,IAAe,IAAnB,EACEgS,aAAahS,IAAb,GAAoB8R,OAAO9R,IAA3B;AAGF,MAAI8R,OAAO7R,MAAP,IAAiB,IAArB,EACE+R,aAAa/R,MAAb,GAAsB6R,OAAO7R,MAA7B;AAGF,MAAI6R,OAAO5R,MAAP,IAAiB,IAArB,EACE8R,aAAa9R,MAAb,GAAsB4R,OAAO5R,MAA7B;AAGF,MAAI4R,OAAO3R,WAAP,IAAsB,IAA1B,EACE6R,aAAa7R,WAAb,GAA2B2R,OAAO3R,WAAlC;AAGF8R,4CAAcD,YAAd;AACA,SAAOA,YAAP;AACF;;AAEA,SAASE,iCAAT,CAAqBpC,IAArB,EAAqD;AACnDA,OAAK5P,MAAL,IAAeZ,KAAKC,KAAL,CAAWuQ,KAAK3P,WAAL,GAAmB,IAA9B,CAAf;AACA2P,OAAK3P,WAAL,GAAmBgS,qCAAerC,KAAK3P,WAApB,EAAiC,IAAjC,CAAnB;AAEA2P,OAAK7P,MAAL,IAAeX,KAAKC,KAAL,CAAWuQ,KAAK5P,MAAL,GAAc,EAAzB,CAAf;AACA4P,OAAK5P,MAAL,GAAciS,qCAAerC,KAAK5P,MAApB,EAA4B,EAA5B,CAAd;AAEA4P,OAAK9P,IAAL,IAAaV,KAAKC,KAAL,CAAWuQ,KAAK7P,MAAL,GAAc,EAAzB,CAAb;AACA6P,OAAK7P,MAAL,GAAckS,qCAAerC,KAAK7P,MAApB,EAA4B,EAA5B,CAAd;AAEA,MAAI8J,OAAOzK,KAAKC,KAAL,CAAWuQ,KAAK9P,IAAL,GAAY,EAAvB,CAAX;AACA8P,OAAK9P,IAAL,GAAYmS,qCAAerC,KAAK9P,IAApB,EAA0B,EAA1B,CAAZ;AAEA,SAAO+J,IAAP;AACF;;AAEO,SAASkI,yCAAT,CAAuBnC,IAAvB,EAA+C;AACpDA,OAAK3P,WAAL,GAAmBb,KAAKwP,GAAL,CAAS,CAAT,EAAYxP,KAAKuP,GAAL,CAASiB,KAAK3P,WAAd,EAA2B,IAA3B,CAAZ,CAAnB;AACA2P,OAAK5P,MAAL,GAAcZ,KAAKwP,GAAL,CAAS,CAAT,EAAYxP,KAAKuP,GAAL,CAASiB,KAAK5P,MAAd,EAAsB,EAAtB,CAAZ,CAAd;AACA4P,OAAK7P,MAAL,GAAcX,KAAKwP,GAAL,CAAS,CAAT,EAAYxP,KAAKuP,GAAL,CAASiB,KAAK7P,MAAd,EAAsB,EAAtB,CAAZ,CAAd;AACA6P,OAAK9P,IAAL,GAAYV,KAAKwP,GAAL,CAAS,CAAT,EAAYxP,KAAKuP,GAAL,CAASiB,KAAK9P,IAAd,EAAoB,EAApB,CAAZ,CAAZ;AACF;;AAEA,SAASmS,oCAAT,CAAwBjK,CAAxB,EAAmCC,CAAnC,EAA8C;AAC5C,MAAIiK,SAASlK,IAAIC,CAAjB;AACA,MAAIiK,SAAS,CAAb,EACEA,UAAUjK,CAAV;AAEF,SAAOiK,MAAP;AACF;;AAEA,SAAS1B,mCAAT,CAAuBZ,IAAvB,EAA+CU,QAA/C,EAA+E;AAC7EV,OAAK9P,IAAL,IAAawQ,SAAS6B,KAAT,IAAkB,CAA/B;AACAvC,OAAK7P,MAAL,IAAeuQ,SAAS8B,OAAT,IAAoB,CAAnC;AACAxC,OAAK5P,MAAL,IAAesQ,SAAS+B,OAAT,IAAoB,CAAnC;AACAzC,OAAK3P,WAAL,IAAoBqQ,SAASgC,YAAT,IAAyB,CAA7C;AACA,SAAON,kCAAYpC,IAAZ,CAAP;AACF;;AAEO,SAAS2C,yCAAT,CAAiB3C,IAAjB,EAA6BU,QAA7B,EAA2D;AAChE,MAAIkC,MAAM5C,KAAKG,IAAL,EAAV;AACAS,sCAAcgC,GAAd,EAAmBlC,QAAnB;AACA,SAAOkC,GAAP;AACF;;AAEO,SAASC,yCAAT,CAAsB7C,IAAtB,EAAkCU,QAAlC,EAAgE;AACrE,SAAOiC,0CAAQ3C,IAAR,EAAc2B,0CAAejB,QAAf,CAAd,CAAP;AACF;;AAIO,SAASoC,yCAAT,CAAmBrF,KAAnB,EAA2DsF,KAA3D,EAA6EzT,MAA7E,EAA6F0T,OAA7F,EAAqH;AAC1H,MAAIC,UAAoDxF,MAAM0C,IAAN,EAAxD;;AAEA,UAAQ4C,KAAR;AACE,SAAK,KAAL;AAAY;AACV,YAAIG,OAAOzF,MAAM5N,QAAN,CAAeuC,OAAf,EAAX;AACA,YAAI+Q,WAAWD,KAAKE,OAAL,CAAa3F,MAAM7N,GAAnB,CAAf;AACA,YAAIuT,WAAW,CAAf,EACE,MAAM,IAAIE,KAAJ,CAAU,kBAAkB5F,MAAM7N,GAAlC,CAAN;AAEFuT,mBAAWG,iCAAWH,QAAX,EAAqB7T,MAArB,EAA6B,CAA7B,EAAgC4T,KAAKrE,MAAL,GAAc,CAA9C,EAAiDmE,0DAASO,KAA1D,CAAX;AACAN,gBAAQrT,GAAR,GAAcsT,IAAI,CAACC,QAAD,CAAlB,CAPU,CASV;;AACA1B,kDAAUwB,OAAV;AACA;AACF;;AACA,SAAK,MAAL;UACMO;;AAAJ,UAAI,+DAAQ3T,QAAR,EAAiBwC,YAAjB,MAA6B,IAA7B,gHAAgC4Q,OAAhC,CAAJ,EACE3T,SAAS,CAACA,MAAV,CAFJ,CAKE;AACA;AACA;;AACA2T,cAAQnT,IAAR,GAAewT,iCAAW7F,MAAM3N,IAAjB,EAAuBR,MAAvB,EAA+B,CAACmU,QAAhC,EAA0C,IAA1C,EAAgDT,0DAASO,KAAzD,CAAf;AACA,UAAIN,QAAQnT,IAAR,KAAiB,CAAC2T,QAAtB,EACER,QAAQnT,IAAR,GAAe,CAAf;AAGF,UAAImT,QAAQpT,QAAR,CAAiBkR,gBAArB,EACEkC,QAAQpT,QAAR,CAAiBkR,gBAAjB,CAAkCkC,OAAlC,EAA2CxF,KAA3C;AAEF;;AAEF,SAAK,OAAL;AACEwF,cAAQlT,KAAR,GAAgBuT,iCAAW7F,MAAM1N,KAAjB,EAAwBT,MAAxB,EAAgC,CAAhC,EAAmCmO,MAAM5N,QAAN,CAAeoC,eAAf,CAA+BwL,KAA/B,CAAnC,EAA0EuF,0DAASO,KAAnF,CAAhB;AACA;;AACF,SAAK,KAAL;AACEN,cAAQjT,GAAR,GAAcsT,iCAAW7F,MAAMzN,GAAjB,EAAsBV,MAAtB,EAA8B,CAA9B,EAAiCmO,MAAM5N,QAAN,CAAemC,cAAf,CAA8ByL,KAA9B,CAAjC,EAAuEuF,0DAASO,KAAhF,CAAd;AACA;;AACF;AACE,YAAM,IAAIF,KAAJ,CAAU,uBAAuBN,KAAjC,CAAN;AAvCJ;;AA0CA,MAAItF,MAAM5N,QAAN,CAAeyC,WAAnB,EACEmL,MAAM5N,QAAN,CAAeyC,WAAf,CAA2B2Q,OAA3B;AAGFxB,4CAAUwB,OAAV;AACA,SAAOA,OAAP;AACF;;AAIO,SAASS,yCAAT,CAAmBjG,KAAnB,EAAmDsF,KAAnD,EAAqEzT,MAArE,EAAqF0T,OAArF,EAAiH;AACtH,MAAIC,UAA4CxF,MAAM0C,IAAN,EAAhD;;AAEA,UAAQ4C,KAAR;AACE,SAAK,MAAL;AAAa;AACX,YAAIR,QAAQ9E,MAAMvN,IAAlB;AACA,YAAI6O,MAAM,CAAV;AACA,YAAIC,MAAM,EAAV;;AACA,YAAI,2DAAS2E,SAAT,MAAuB,EAA3B,EAA+B;AAC7B,cAAIC,OAAOrB,SAAS,EAApB;AACAxD,gBAAM6E,OAAO,EAAP,GAAY,CAAlB;AACA5E,gBAAM4E,OAAO,EAAP,GAAY,EAAlB;AACD;;AACDX,gBAAQ/S,IAAR,GAAeoT,iCAAWf,KAAX,EAAkBjT,MAAlB,EAA0ByP,GAA1B,EAA+BC,GAA/B,EAAoCgE,0DAASO,KAA7C,CAAf;AACA;AACF;;AACA,SAAK,QAAL;AACEN,cAAQ9S,MAAR,GAAiBmT,iCAAW7F,MAAMtN,MAAjB,EAAyBb,MAAzB,EAAiC,CAAjC,EAAoC,EAApC,EAAwC0T,0DAASO,KAAjD,CAAjB;AACA;;AACF,SAAK,QAAL;AACEN,cAAQ7S,MAAR,GAAiBkT,iCAAW7F,MAAMrN,MAAjB,EAAyBd,MAAzB,EAAiC,CAAjC,EAAoC,EAApC,EAAwC0T,0DAASO,KAAjD,CAAjB;AACA;;AACF,SAAK,aAAL;AACEN,cAAQ5S,WAAR,GAAsBiT,iCAAW7F,MAAMpN,WAAjB,EAA8Bf,MAA9B,EAAsC,CAAtC,EAAyC,GAAzC,EAA8C0T,0DAASO,KAAvD,CAAtB;AACA;;AACF;AACE,YAAM,IAAIF,KAAJ,CAAU,uBAAuBN,KAAjC,CAAN;AAvBJ;;AA0BA,SAAOE,OAAP;AACF;;AAEA,SAASK,gCAAT,CAAoB7F,KAApB,EAAmCnO,MAAnC,EAAmDyP,GAAnD,EAAgEC,GAAhE,EAA4F;AAAA,MAAfuE,KAAe,uEAAP,KAAO;;AAC1F,MAAIA,KAAJ,EAAW;AACT9F,aAASjO,KAAKqU,IAAL,CAAUvU,MAAV,CAAT;AAEA,QAAImO,QAAQsB,GAAZ,EACEtB,QAAQuB,GAAR;AAGF,QAAI8E,MAAMtU,KAAKuU,GAAL,CAASzU,MAAT,CAAV;AACA,QAAIA,SAAS,CAAb,EACEmO,QAAQjO,KAAK6J,IAAL,CAAUoE,QAAQqG,GAAlB,IAAyBA,GAAjC,CADF,KAGErG,QAAQjO,KAAKC,KAAL,CAAWgO,QAAQqG,GAAnB,IAA0BA,GAAlC;AAGF,QAAIrG,QAAQuB,GAAZ,EACEvB,QAAQsB,GAAR;AAEJ,GAjBA,MAiBO;AACLtB,aAASnO,MAAT;AACA,QAAImO,QAAQsB,GAAZ,EACEtB,QAAQuB,OAAOD,MAAMtB,KAAN,GAAc,CAArB,CAAR,CADF,KAEO,IAAIA,QAAQuB,GAAZ,EACLvB,QAAQsB,OAAOtB,QAAQuB,GAAR,GAAc,CAArB,CAAR;AAEH;;AAED,SAAOvB,KAAP;AACF;;AAEO,SAASuG,yCAAT,CAAkB3F,QAAlB,EAA2CqC,QAA3C,EAAsF;AAC3F,MAAI5G,EAAJ;;AACA,MAAI4G,QAAC,CAASI,KAAV,IAAmB,IAAnB,IAA2BJ,SAASI,KAAT,KAAmB,CAA9C,IAAqDJ,SAAShG,MAAT,IAAmB,IAAnB,IAA2BgG,SAAShG,MAAT,KAAoB,CAApG,IAA2GgG,SAASzG,IAAT,IAAiB,IAAjB,IAAyByG,SAASzG,IAAT,KAAkB,CAA1J,EAA8J;AAC5J,QAAI2I,MAAMnC,0CAAI,+CAAmBpC,QAAnB,CAAJ,EAAkC;AAC1CyC,aAAOJ,SAASI,KAD0B;AAE1CpG,cAAQgG,SAAShG,MAFyB;AAG1CT,YAAMyG,SAASzG;AAH2B,KAAlC,CAAV,CAD4J,CAO5J;AACA;;AACAH,SAAK,+CAAW8I,GAAX,EAAgBvE,SAAStF,QAAzB,CAAL;AACF,GAVA,MAWE;AACAe,SAAK,8CAAcuE,QAAd,IAA0BA,SAASc,MAAxC,CAdyF,CAiB3F;AACA;AACA;;;AACArF,QAAM4G,SAASgC,YAAT,IAAyB,CAA/B;AACA5I,QAAM,CAAC4G,SAAS+B,OAAT,IAAoB,CAArB,IAA0B,IAAhC;AACA3I,QAAM,CAAC4G,SAAS8B,OAAT,IAAoB,CAArB,SAAN;AACA1I,QAAM,CAAC4G,SAAS6B,KAAT,IAAkB,CAAnB,WAAN;AAEA,MAAI0B,OAAM,+CAAanK,EAAb,EAAiBuE,SAAStF,QAA1B,CAAV;AACA,SAAO,+CAAWkL,IAAX,EAAgB5F,SAASxO,QAAzB,CAAP;AACF;;AAEO,SAASqU,yCAAT,CAAuB7F,QAAvB,EAAgDqC,QAAhD,EAA2F;AAChG,SAAOsD,0CAAS3F,QAAT,EAAmBsD,0CAAejB,QAAf,CAAnB,CAAP;AACF;;AAEO,SAASyD,yCAAT,CAAoB9F,QAApB,EAA6C0E,KAA7C,EAA2EzT,MAA3E,EAA2F0T,OAA3F,EAAsI;AAC3I;AACA;AACA;AACA,UAAQD,KAAR;AACE,SAAK,MAAL;AAAa;AACX,YAAIhE,MAAM,CAAV;AACA,YAAIC,MAAM,EAAV;;AACA,YAAI,2DAAS2E,SAAT,MAAuB,EAA3B,EAA+B;AAC7B,cAAIC,OAAOvF,SAASnO,IAAT,IAAiB,EAA5B;AACA6O,gBAAM6E,OAAO,EAAP,GAAY,CAAlB;AACA5E,gBAAM4E,OAAO,EAAP,GAAY,EAAlB;AACD,SAPU,CASX;AACA;AACA;AACA;AACA;;;AACA,YAAIQ,gBAAgB,+CAAmB/F,QAAnB,CAApB;AACA,YAAIgG,UAAU,+CAAWpC,0CAAQmC,aAAR,EAAuB;AAAClU,gBAAM6O;AAAP,SAAvB,CAAX,EAAgD,KAAI,4CAAJ,GAAhD,CAAd;AACA,YAAIuF,cAAc,CAAC,+CAAWD,OAAX,EAAoBhG,SAAStF,QAA7B,EAAuC,SAAvC,CAAD,EAAoD,+CAAWsL,OAAX,EAAoBhG,SAAStF,QAA7B,EAAuC,OAAvC,CAApD,EACfiF,MADe,CACRlE,MAAM,+CAAaA,EAAb,EAAiBuE,SAAStF,QAA1B,EAAoC/I,GAApC,KAA4CqU,QAAQrU,GADlD,EACuD,CADvD,CAAlB;AAGA,YAAIuU,UAAU,+CAAWtC,0CAAQmC,aAAR,EAAuB;AAAClU,gBAAM8O;AAAP,SAAvB,CAAX,EAAgD,KAAI,4CAAJ,GAAhD,CAAd;AACA,YAAIwF,cAAc,CAAC,+CAAWD,OAAX,EAAoBlG,SAAStF,QAA7B,EAAuC,SAAvC,CAAD,EAAoD,+CAAWwL,OAAX,EAAoBlG,SAAStF,QAA7B,EAAuC,OAAvC,CAApD,EACfiF,MADe,CACRlE,MAAM,+CAAaA,EAAb,EAAiBuE,SAAStF,QAA1B,EAAoC/I,GAApC,KAA4CuU,QAAQvU,GADlD,EACuDyU,GADvD,EAAlB,CApBW,CAuBX;AACA;AACA;;AACA,YAAI3K,KAAK,8CAAcuE,QAAd,IAA0BA,SAASc,MAA5C;AACA,YAAIoD,QAAQ/S,KAAKC,KAAL,CAAWqK,KAAK0G,8BAAhB,CAAZ;AACA,YAAIkE,YAAY5K,KAAK0G,8BAArB;AACA1G,aAAKwJ,iCACHf,KADG,EAEHjT,MAFG,EAGHE,KAAKC,KAAL,CAAW6U,cAAc9D,8BAAzB,CAHG,EAIHhR,KAAKC,KAAL,CAAW+U,cAAchE,8BAAzB,CAJG,EAKHwC,0DAASO,KALN,IAMD/C,8BANC,GAMUkE,SANf,CA7BW,CAqCX;;AACA,eAAO,+CAAW,+CAAa5K,EAAb,EAAiBuE,SAAStF,QAA1B,CAAX,EAAgDsF,SAASxO,QAAzD,CAAP;AACF;;AACA,SAAK,QAAL;AACA,SAAK,QAAL;AACA,SAAK,aAAL;AACE;AACA,aAAO6T,0CAAUrF,QAAV,EAAoB0E,KAApB,EAA2BzT,MAA3B,EAAmC0T,OAAnC,CAAP;;AACF,SAAK,KAAL;AACA,SAAK,MAAL;AACA,SAAK,OAAL;AACA,SAAK,KAAL;AAAY;AACV,YAAIJ,MAAME,0CAAU,+CAAmBzE,QAAnB,CAAV,EAAwC0E,KAAxC,EAA+CzT,MAA/C,EAAuD0T,OAAvD,CAAV;AACA,YAAI2B,MAAK,+CAAW/B,GAAX,EAAgBvE,SAAStF,QAAzB,CAAT;AACA,eAAO,+CAAW,+CAAa4L,GAAb,EAAiBtG,SAAStF,QAA1B,CAAX,EAAgDsF,SAASxO,QAAzD,CAAP;AACF;;AACA;AACE,YAAM,IAAIwT,KAAJ,CAAU,uBAAuBN,KAAjC,CAAN;AAvDJ;AAyDF;;AAEO,SAAS6B,yCAAT,CAAkBvG,QAAlB,EAA2C2D,MAA3C,EAA4E5D,cAA5E,EAA4H;AACjI;AACA;AACA,MAAIgG,gBAAgB,+CAAmB/F,QAAnB,CAApB;AACA,MAAIuE,MAAMX,0CAAQF,0CAAIqC,aAAJ,EAAmBpC,MAAnB,CAAR,EAAoCA,MAApC,CAAV,CAJiI,CAMjI;AACA;;AACA,MAAIY,IAAI9G,OAAJ,CAAYsI,aAAZ,MAA+B,CAAnC,EACE,OAAO/F,QAAP;AAGF,MAAIvE,KAAK,+CAAW8I,GAAX,EAAgBvE,SAAStF,QAAzB,EAAmCqF,cAAnC,CAAT;AACA,SAAO,+CAAW,+CAAatE,EAAb,EAAiBuE,SAAStF,QAA1B,CAAX,EAAgDsF,SAASxO,QAAzD,CAAP;AACF;AM1dA;;;;;;;;;;;;;AAmBA,MAAMgV,gCAAU,6CAAhB;AACA,MAAMC,gCAAU,2BAAhB;AACA,MAAMC,qCAAe,0EAArB;AACA,MAAMC,2CAAqB,gHAA3B;AACA,MAAMC,oCAAc,4GAApB;AACA,MAAMC,8CACF,qMADJ;AAEA,MAAMC,mDAA6B,CAAC,OAAD,EAAU,SAAV,EAAqB,SAArB,CAAnC;AACA,MAAMC,+CAAyB,CAAC,OAAD,EAAU,QAAV,EAAoB,OAApB,EAA6B,MAA7B,KAAwCD,gDAAxC,CAA/B;;AAGO,SAASE,yCAAT,CAAmB5H,KAAnB,EAAwC;AAC7C,MAAI6H,IAAI7H,MAAM8H,KAAN,CAAYV,6BAAZ,CAAR;AACA,MAAI,CAACS,CAAL,EACE,MAAM,IAAIjC,KAAJ,CAAU,mCAAmC5F,KAA7C,CAAN;AAGF,SAAO,KAAI,2CAAJ,EACL+H,kCAAYF,CAAC,CAAC,CAAD,CAAb,EAAkB,CAAlB,EAAqB,EAArB,CADK,EAELA,CAAC,CAAC,CAAD,CAAD,GAAOE,kCAAYF,CAAC,CAAC,CAAD,CAAb,EAAkB,CAAlB,EAAqB,EAArB,CAAP,GAAkC,CAF7B,EAGLA,CAAC,CAAC,CAAD,CAAD,GAAOE,kCAAYF,CAAC,CAAC,CAAD,CAAb,EAAkB,CAAlB,EAAqB,EAArB,CAAP,GAAkC,CAH7B,EAILA,CAAC,CAAC,CAAD,CAAD,GAAOE,kCAAYF,CAAC,CAAC,CAAD,CAAb,EAAkB,CAAlB,EAAqB7B,QAArB,IAAiC,IAAxC,GAA+C,CAJ1C,CAAP;AAMF;;AAGO,SAASgC,wCAAT,CAAmBhI,KAAnB,EAAgD;AACrD,MAAI6H,IAAI7H,MAAM8H,KAAN,CAAYT,6BAAZ,CAAR;AACA,MAAI,CAACQ,CAAL,EACE,MAAM,IAAIjC,KAAJ,CAAU,mCAAmC5F,KAA7C,CAAN;AAGF,MAAI9N,OAA8B,KAAI,4CAAJ,EAChC6V,kCAAYF,CAAC,CAAC,CAAD,CAAb,EAAkB,CAAlB,EAAqB,IAArB,CADgC,EAEhCE,kCAAYF,CAAC,CAAC,CAAD,CAAb,EAAkB,CAAlB,EAAqB,EAArB,CAFgC,EAGhC,CAHgC,CAAlC;AAMA3V,OAAKK,GAAL,GAAWwV,kCAAYF,CAAC,CAAC,CAAD,CAAb,EAAkB,CAAlB,EAAqB3V,KAAKE,QAAL,CAAcmC,cAAd,CAA6BrC,IAA7B,CAArB,CAAX;AACA,SAAOA,IAAP;AACF;;AAGO,SAAS+V,yCAAT,CAAuBjI,KAAvB,EAAwD;AAC7D,MAAI6H,IAAI7H,MAAM8H,KAAN,CAAYR,kCAAZ,CAAR;AACA,MAAI,CAACO,CAAL,EACE,MAAM,IAAIjC,KAAJ,CAAU,wCAAwC5F,KAAlD,CAAN;AAGF,MAAI9N,OAAkC,KAAI,4CAAJ,EACpC6V,kCAAYF,CAAC,CAAC,CAAD,CAAb,EAAkB,CAAlB,EAAqB,IAArB,CADoC,EAEpCE,kCAAYF,CAAC,CAAC,CAAD,CAAb,EAAkB,CAAlB,EAAqB,EAArB,CAFoC,EAGpC,CAHoC,EAIpCA,CAAC,CAAC,CAAD,CAAD,GAAOE,kCAAYF,CAAC,CAAC,CAAD,CAAb,EAAkB,CAAlB,EAAqB,EAArB,CAAP,GAAkC,CAJE,EAKpCA,CAAC,CAAC,CAAD,CAAD,GAAOE,kCAAYF,CAAC,CAAC,CAAD,CAAb,EAAkB,CAAlB,EAAqB,EAArB,CAAP,GAAkC,CALE,EAMpCA,CAAC,CAAC,CAAD,CAAD,GAAOE,kCAAYF,CAAC,CAAC,CAAD,CAAb,EAAkB,CAAlB,EAAqB,EAArB,CAAP,GAAkC,CANE,EAOpCA,CAAC,CAAC,CAAD,CAAD,GAAOE,kCAAYF,CAAC,CAAC,CAAD,CAAb,EAAkB,CAAlB,EAAqB7B,QAArB,IAAiC,IAAxC,GAA+C,CAPX,CAAtC;AAUA9T,OAAKK,GAAL,GAAWwV,kCAAYF,CAAC,CAAC,CAAD,CAAb,EAAkB,CAAlB,EAAqB3V,KAAKE,QAAL,CAAcmC,cAAd,CAA6BrC,IAA7B,CAArB,CAAX;AACA,SAAOA,IAAP;AACF;;AAQO,SAASgW,yCAAT,CAA4BlI,KAA5B,EAA2CW,cAA3C,EAA2F;AAChG,MAAIkH,IAAI7H,MAAM8H,KAAN,CAAYP,wCAAZ,CAAR;AACA,MAAI,CAACM,CAAL,EACE,MAAM,IAAIjC,KAAJ,CAAU,wCAAwC5F,KAAlD,CAAN;AAGF,MAAI9N,OAA+B,KAAI,4CAAJ,EACjC6V,kCAAYF,CAAC,CAAC,CAAD,CAAb,EAAkB,CAAlB,EAAqB,IAArB,CADiC,EAEjCE,kCAAYF,CAAC,CAAC,CAAD,CAAb,EAAkB,CAAlB,EAAqB,EAArB,CAFiC,EAGjC,CAHiC,EAIjCA,CAAC,CAAC,EAAD,CAJgC,EAKjC,CALiC,EAMjCA,CAAC,CAAC,CAAD,CAAD,GAAOE,kCAAYF,CAAC,CAAC,CAAD,CAAb,EAAkB,CAAlB,EAAqB,EAArB,CAAP,GAAkC,CAND,EAOjCA,CAAC,CAAC,CAAD,CAAD,GAAOE,kCAAYF,CAAC,CAAC,CAAD,CAAb,EAAkB,CAAlB,EAAqB,EAArB,CAAP,GAAkC,CAPD,EAQjCA,CAAC,CAAC,CAAD,CAAD,GAAOE,kCAAYF,CAAC,CAAC,CAAD,CAAb,EAAkB,CAAlB,EAAqB,EAArB,CAAP,GAAkC,CARD,EASjCA,CAAC,CAAC,CAAD,CAAD,GAAOE,kCAAYF,CAAC,CAAC,CAAD,CAAb,EAAkB,CAAlB,EAAqB7B,QAArB,IAAiC,IAAxC,GAA+C,CATd,CAAnC;AAYA9T,OAAKK,GAAL,GAAWwV,kCAAYF,CAAC,CAAC,CAAD,CAAb,EAAkB,CAAlB,EAAqB3V,KAAKE,QAAL,CAAcmC,cAAd,CAA6BrC,IAA7B,CAArB,CAAX;AAEA,MAAIyU,gBAAgB,+CAAmBzU,IAAnB,CAApB;AAEA,MAAImK,EAAJ;;AACA,MAAIwL,CAAC,CAAC,CAAD,CAAL,EAAU;QACgEM;;AAAxEjW,SAAKwP,MAAL,GAAcqG,kCAAYF,CAAC,CAAC,CAAD,CAAb,EAAkB,GAAlB,EAAuB,EAAvB,cAA8CE,kCAAY,QAAC,CAAC,CAAD,CAAD,MAAI,IAAJ,2BAAQ,GAApB,EAAyB,CAAzB,EAA4B,EAA5B,SAA5D;AACA1L,SAAK,8CAAcnK,IAAd,IAAuCA,KAAKwP,MAAjD,CAFQ,CAIR;;AACA,QAAI0G,YAAY,+CAAkBzB,aAAlB,EAAiCzU,KAAKoJ,QAAtC,CAAhB;AACA,QAAI,CAAC8M,UAAUC,QAAV,CAAmBhM,EAAnB,CAAL,EACE,MAAM,IAAIuJ,KAAJ,CAAW,UAAS0C,qCAAepW,KAAKwP,MAApB,CAA4B,mBAAkB6G,0CAAiBrW,IAAjB,CAAuB,OAAMA,KAAKoJ,QAAS,EAA7G,CAAN;AAEJ,GATA,MAUE;AACAe,SAAK,+CAAW,+CAAmBsK,aAAnB,CAAX,EAA8CzU,KAAKoJ,QAAnD,EAA6DqF,cAA7D,CAAL;;AAGF,SAAO,+CAAatE,EAAb,EAAiBnK,KAAKoJ,QAAtB,CAAP;AACF;;AAMO,SAASkN,yCAAT,CAAuBxI,KAAvB,EAAsC1E,QAAtC,EAAuE;AAC5E,MAAIuM,IAAI7H,MAAM8H,KAAN,CAAYN,iCAAZ,CAAR;AACA,MAAI,CAACK,CAAL,EACE,MAAM,IAAIjC,KAAJ,CAAU,wCAAwC5F,KAAlD,CAAN;AAGF,MAAI9N,OAA+B,KAAI,4CAAJ,EACjC6V,kCAAYF,CAAC,CAAC,CAAD,CAAb,EAAkB,CAAlB,EAAqB,IAArB,CADiC,EAEjCE,kCAAYF,CAAC,CAAC,CAAD,CAAb,EAAkB,CAAlB,EAAqB,EAArB,CAFiC,EAGjC,CAHiC,EAIjCvM,QAJiC,EAKjC,CALiC,EAMjCuM,CAAC,CAAC,CAAD,CAAD,GAAOE,kCAAYF,CAAC,CAAC,CAAD,CAAb,EAAkB,CAAlB,EAAqB,EAArB,CAAP,GAAkC,CAND,EAOjCA,CAAC,CAAC,CAAD,CAAD,GAAOE,kCAAYF,CAAC,CAAC,CAAD,CAAb,EAAkB,CAAlB,EAAqB,EAArB,CAAP,GAAkC,CAPD,EAQjCA,CAAC,CAAC,CAAD,CAAD,GAAOE,kCAAYF,CAAC,CAAC,CAAD,CAAb,EAAkB,CAAlB,EAAqB,EAArB,CAAP,GAAkC,CARD,EASjCA,CAAC,CAAC,CAAD,CAAD,GAAOE,kCAAYF,CAAC,CAAC,CAAD,CAAb,EAAkB,CAAlB,EAAqB7B,QAArB,IAAiC,IAAxC,GAA+C,CATd,CAAnC;AAYA9T,OAAKK,GAAL,GAAWwV,kCAAYF,CAAC,CAAC,CAAD,CAAb,EAAkB,CAAlB,EAAqB3V,KAAKE,QAAL,CAAcmC,cAAd,CAA6BrC,IAA7B,CAArB,CAAX;;MAG0EiW;;AAD1E,MAAIN,CAAC,CAAC,CAAD,CAAL,EACE3V,KAAKwP,MAAL,GAAcqG,kCAAYF,CAAC,CAAC,CAAD,CAAb,EAAkB,GAAlB,EAAuB,EAAvB,cAA8CE,kCAAY,QAAC,CAAC,CAAD,CAAD,MAAI,IAAJ,2BAAQ,GAApB,EAAyB,CAAzB,EAA4B,EAA5B,SAA5D;AAGF,SAAO,+CAAW7V,IAAX,EAAkCoJ,QAAlC,CAAP;AACF;;AAMO,SAASmN,yCAAT,CAA8BzI,KAA9B,EAA4D;AACjE,SAAOwI,0CAAcxI,KAAd,EAAqB,gDAArB,CAAP;AACF;;AAEA,SAAS+H,iCAAT,CAAqB/H,KAArB,EAAoCsB,GAApC,EAAiDC,GAAjD,EAA8D;AAC5D,MAAImH,MAAMC,OAAO3I,KAAP,CAAV;AACA,MAAI0I,MAAMpH,GAAN,IAAaoH,MAAMnH,GAAvB,EACE,MAAM,IAAIF,UAAJ,CAAgB,uBAAsBC,GAAI,OAAMoH,GAAI,OAAMnH,GAAI,EAA9D,CAAN;AAGF,SAAOmH,GAAP;AACF;;AAEO,SAASE,yCAAT,CAAsBrG,IAAtB,EAA0C;AAC/C,SAAQ,GAAEsG,OAAOtG,KAAK9P,IAAZ,EAAkBqW,QAAlB,CAA2B,CAA3B,EAA8B,GAA9B,CAAmC,IAAGD,OAAOtG,KAAK7P,MAAZ,EAAoBoW,QAApB,CAA6B,CAA7B,EAAgC,GAAhC,CAAqC,IAAGD,OAAOtG,KAAK5P,MAAZ,EAAoBmW,QAApB,CAA6B,CAA7B,EAAgC,GAAhC,CAAqC,GAAEvG,KAAK3P,WAAL,GAAmBiW,OAAOtG,KAAK3P,WAAL,GAAmB,IAA1B,EAAgCmW,KAAhC,CAAsC,CAAtC,CAAnB,GAA8D,EAAG,EAAhM;AACF;;AAEO,SAASC,yCAAT,CAAsB9W,IAAtB,EAAkD;AACvD,MAAI+W,gBAAgB,+CAAW/W,IAAX,EAAiB,KAAI,4CAAJ,GAAjB,CAApB;AACA,SAAQ,GAAE2W,OAAOI,cAAc5W,IAArB,EAA2ByW,QAA3B,CAAoC,CAApC,EAAuC,GAAvC,CAA4C,IAAGD,OAAOI,cAAc3W,KAArB,EAA4BwW,QAA5B,CAAqC,CAArC,EAAwC,GAAxC,CAA6C,IAAGD,OAAOI,cAAc1W,GAArB,EAA0BuW,QAA1B,CAAmC,CAAnC,EAAsC,GAAtC,CAA2C,EAApJ;AACF;;AAEO,SAASP,yCAAT,CAA0BrW,IAA1B,EAAqD;AAC1D;AACA,SAAQ,GAAE8W,0CAAa9W,IAAb,CAAmB,IAAG0W,0CAAa1W,IAAb,CAAmB,EAAnD;AACF;;AAEA,SAASoW,oCAAT,CAAwB5G,MAAxB,EAAwC;AACtC,MAAI0E,OAAOrU,KAAKqU,IAAL,CAAU1E,MAAV,IAAoB,CAApB,GAAwB,GAAxB,GAA8B,GAAzC;AACAA,WAAS3P,KAAKuU,GAAL,CAAS5E,MAAT,CAAT;AACA,MAAIwH,cAAcnX,KAAKC,KAAL,CAAW0P,SAAU,OAArB,CAAlB;AACA,MAAIyH,gBAAgBzH,MAAC,GAAU,OAAX,GAA+B,KAAnD;AACA,SAAQ,GAAE0E,IAAK,GAAEyC,OAAOK,WAAP,EAAoBJ,QAApB,CAA6B,CAA7B,EAAgC,GAAhC,CAAqC,IAAGD,OAAOM,aAAP,EAAsBL,QAAtB,CAA+B,CAA/B,EAAkC,GAAlC,CAAuC,EAAhG;AACF;;AAEO,SAASM,yCAAT,CAA+BlX,IAA/B,EAA4D;AACjE,SAAQ,GAAEqW,0CAAiBrW,IAAjB,CAAuB,GAAEoW,qCAAepW,KAAKwP,MAApB,CAA4B,IAAGxP,KAAKoJ,QAAS,GAAhF;AACF;;AAOO,SAAS+N,yCAAT,CAAuBrJ,KAAvB,EAAkE;MAwBlDsJ,eAQcC,gBAUPC,gBACCC,gBACDC,gBACDC,gBACCC,gBACEC,gBACAC;;AA/C9B,QAAMhC,QAAQ9H,MAAM8H,KAAN,CAAYL,2CAAZ,CAAd;AAEA,MAAI,CAACK,KAAL,EACE,MAAM,IAAIlC,KAAJ,CAAW,qCAAoC5F,KAAM,EAArD,CAAN;;AAGF,QAAM+J,qBAAqB,CACzBC,KADyB,EAEzBC,UAFyB,EAGzB3I,GAHyB,EAIzBC,GAJyB,KAKd;AACX,QAAI,CAACyI,KAAL,EACE,OAAO,CAAP;;AAEF,QAAI;AACF,YAAM5D,OAAO6D,aAAa,EAAb,GAAkB,CAA/B;AACA,aAAO7D,OAAO2B,kCAAYiC,MAAME,OAAN,CAAc,GAAd,EAAmB,GAAnB,CAAZ,EAAqC5I,GAArC,EAA0CC,GAA1C,CAAd;AACF,KAHA,CAGE,MAAM;AACN,YAAM,IAAIqE,KAAJ,CAAW,qCAAoC5F,KAAM,EAArD,CAAN;AACF;AACF,GAfA;;AAiBA,QAAMiK,aAAa,CAAC,EAAC,uBAAME,MAAN,MAAY,IAAZ,sDAAcC,QAAf,CAApB;AAEA,QAAMC,oBAAoB1C,6CAAuB2C,IAAvB,CAA4BN;QAASV;;AAAA,kCAAMa,MAAN,MAAY,IAAZ,qDAAc,CAACH,KAAD,CAAd;GAArC,CAA1B;AAEA,MAAI,CAACK,iBAAL,EACE,MAAM,IAAIzE,KAAJ,CAAW,qCAAoC5F,KAAM,EAArD,CAAN;AAGF,QAAMuK,6BAA6B,wBAAMJ,MAAN,MAAY,IAAZ,wDAAc5H,IAAjD;;AAEA,MAAIgI,0BAAJ,EAAgC;AAC9B,UAAMC,gCAAgC9C,iDAA2B4C,IAA3B,CAAgCN;UAASV;;AAAA,oCAAMa,MAAN,MAAY,IAAZ,qDAAc,CAACH,KAAD,CAAd;KAAzC,CAAtC;AACA,QAAI,CAACQ,6BAAL,EACE,MAAM,IAAI5E,KAAJ,CAAW,qCAAoC5F,KAAM,EAArD,CAAN;AAEH;;AAED,QAAMiD,WAAsC;AAC1CI,WAAO0G,mBAAmB,wBAAMI,MAAN,MAAY,IAAZ,wDAAc9G,KAAjC,EAAwC4G,UAAxC,EAAoD,CAApD,EAAuD,IAAvD,CADmC;AAE1ChN,YAAQ8M,mBAAmB,wBAAMI,MAAN,MAAY,IAAZ,wDAAclN,MAAjC,EAAyCgN,UAAzC,EAAqD,CAArD,EAAwD,EAAxD,CAFkC;AAG1CxG,WAAOsG,mBAAmB,wBAAMI,MAAN,MAAY,IAAZ,wDAAc1G,KAAjC,EAAwCwG,UAAxC,EAAoD,CAApD,EAAuDjE,QAAvD,CAHmC;AAI1CxJ,UAAMuN,mBAAmB,wBAAMI,MAAN,MAAY,IAAZ,wDAAc3N,IAAjC,EAAuCyN,UAAvC,EAAmD,CAAnD,EAAsD,EAAtD,CAJoC;AAK1CnF,WAAOiF,mBAAmB,wBAAMI,MAAN,MAAY,IAAZ,wDAAcrF,KAAjC,EAAwCmF,UAAxC,EAAoD,CAApD,EAAuD,EAAvD,CALmC;AAM1ClF,aAASgF,mBAAmB,wBAAMI,MAAN,MAAY,IAAZ,wDAAcpF,OAAjC,EAA0CkF,UAA1C,EAAsD,CAAtD,EAAyD,EAAzD,CANiC;AAO1CjF,aAAS+E,mBAAmB,wBAAMI,MAAN,MAAY,IAAZ,wDAAcnF,OAAjC,EAA0CiF,UAA1C,EAAsD,CAAtD,EAAyD,EAAzD;AAPiC,GAA5C;AAUA,MAAIhH,QAAE,CAAS6B,KAAX,GAAmB,CAAnB,KAA0B,CAA1B,KAAiC7B,SAAS8B,OAAT,IAAoB9B,SAAS+B,OAA9D,CAAJ,EACE,MAAM,IAAIY,KAAJ,CAAW,qCAAoC5F,KAAM,6CAArD,CAAN;AAGF,MAAIiD,QAAE,CAAS8B,OAAX,GAAqB,CAArB,KAA4B,CAA5B,IAAkC9B,SAAS+B,OAA/C,EACE,MAAM,IAAIY,KAAJ,CAAW,qCAAoC5F,KAAM,6CAArD,CAAN;AAGF,SAAOiD,QAAP;AACF;;APxPA,SAASwH,+BAAT,CAAmBC,IAAnB,EAAgC;AAC9B,MAAItY,WAAqB,OAAOsY,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAnB,GACrBA,KAAKC,KAAL,EADqB,GAErB,KAAI,4CAAJ,GAFJ;AAIA,MAAIxY,GAAJ;AACA,MAAI,OAAOuY,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAvB,EACEvY,MAAMuY,KAAKC,KAAL,EAAN,CADF,KAEO;AACL,QAAIlF,OAAOrT,SAASuC,OAAT,EAAX;AACAxC,UAAMsT,IAAI,CAACA,KAAKrE,MAAL,GAAc,CAAf,CAAV;AACD;AAED,MAAI/O,OAAOqY,KAAKC,KAAL,EAAX;AACA,MAAIrY,QAAQoY,KAAKC,KAAL,EAAZ;AACA,MAAIpY,MAAMmY,KAAKC,KAAL,EAAV;AAEA,SAAO,CAACvY,QAAD,EAAWD,GAAX,EAAgBE,IAAhB,EAAsBC,KAAtB,EAA6BC,GAA7B,CAAP;AACF;;IAIE;AACA;AACA;AACA;AACAqY;;AALK,MAAMC,yCAAN,CAAM;AAoCX;AACAnI,SAAqB;AACnB,QAAI,KAAKvQ,GAAT,EACE,OAAO,IAAI0Y,yCAAJ,CAAiB,KAAKzY,QAAtB,EAAgC,KAAKD,GAArC,EAA0C,KAAKE,IAA/C,EAAqD,KAAKC,KAA1D,EAAiE,KAAKC,GAAtE,CAAP,CADF,KAGE,OAAO,IAAIsY,yCAAJ,CAAiB,KAAKzY,QAAtB,EAAgC,KAAKC,IAArC,EAA2C,KAAKC,KAAhD,EAAuD,KAAKC,GAA5D,CAAP;AAEJ;AAEA;;;AACAgK,MAAI0G,QAAJ,EAA0C;AACxC,WAAO,+CAAI,IAAJ,EAAUA,QAAV,CAAP;AACF;AAEA;;;AACAlG,WAASkG,QAAT,EAA+C;AAC7C,WAAO,+CAAS,IAAT,EAAeA,QAAf,CAAP;AACF;AAEA;;;AACAjF,MAAIuG,MAAJ,EAAsC;AACpC,WAAO,+CAAI,IAAJ,EAAUA,MAAV,CAAP;AACF;AAEA;;;;;;AAIAuG,QAAMxF,KAAN,EAAwBzT,MAAxB,EAAwC0T,OAAxC,EAA8E;AAC5E,WAAO,+CAAU,IAAV,EAAgBD,KAAhB,EAAuBzT,MAAvB,EAA+B0T,OAA/B,CAAP;AACF;AAEA;;;AACAwF,SAAOzP,QAAP,EAA+B;AAC7B,WAAO,+CAAO,IAAP,EAAaA,QAAb,CAAP;AACF;AAEA;;;AACA0P,aAAmB;AACjB,WAAO,+CAAa,IAAb,CAAP;AACF;AAEA;;;AACA3M,UAAQzD,CAAR,EAAoC;AAClC,WAAO,+CAAY,IAAZ,EAAkBA,CAAlB,CAAP;AACF;;AAxDAqQ,gBAA4B;AApB5B;oBAAA;aAAA;AAAA;;AAoB4B,sCAAbP,IAAa;AAAbA,UAAa;AAAA;;AAC1B,QAAI,CAACtY,QAAD,EAAWD,GAAX,EAAgBE,IAAhB,EAAsBC,KAAtB,EAA6BC,GAA7B,IAAoCkY,gCAAUC,IAAV,CAAxC;AACA,SAAKtY,QAAL,GAAgBA,QAAhB;AACA,SAAKD,GAAL,GAAWA,GAAX;AACA,SAAKE,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,GAAL,GAAWA,GAAX;AAEA,mDAAU,IAAV;AACF;;AAlCW;;IAsFX;AACA;AACA2Y;;AAHK,MAAMC,wCAAN,CAAM;AA0BX;AACAzI,SAAa;AACX,WAAO,IAAIyI,wCAAJ,CAAS,KAAK1Y,IAAd,EAAoB,KAAKC,MAAzB,EAAiC,KAAKC,MAAtC,EAA8C,KAAKC,WAAnD,CAAP;AACF;AAEA;;;AACA2J,MAAI0G,QAAJ,EAA4B;AAC1B,WAAO,+CAAQ,IAAR,EAAcA,QAAd,CAAP;AACF;AAEA;;;AACAlG,WAASkG,QAAT,EAAiC;AAC/B,WAAO,+CAAa,IAAb,EAAmBA,QAAnB,CAAP;AACF;AAEA;;;AACAjF,MAAIuG,MAAJ,EAAwB;AACtB,WAAO,+CAAQ,IAAR,EAAcA,MAAd,CAAP;AACF;AAEA;;;;;;AAIAuG,QAAMxF,KAAN,EAAwBzT,MAAxB,EAAwC0T,OAAxC,EAAoE;AAClE,WAAO,+CAAU,IAAV,EAAgBD,KAAhB,EAAuBzT,MAAvB,EAA+B0T,OAA/B,CAAP;AACF;AAEA;;;AACAyF,aAAW;AACT,WAAO,+CAAa,IAAb,CAAP;AACF;AAEA;;;AACA3M,UAAQzD,CAAR,EAAoB;AAClB,WAAO,+CAAY,IAAZ,EAAkBA,CAAlB,CAAP;AACF;;AAjDAqQ,gBAKE;AAAA,QAJAxY,IAIA,uEAJe,CAIf;AAAA,QAHAC,MAGA,uEAHiB,CAGjB;AAAA,QAFAC,MAEA,uEAFiB,CAEjB;AAAA,QADAC,WACA,uEADsB,CACtB;AAfF;oBAAA;aAAA;AAAA;AAgBE,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,mDAAc,IAAd;AACF;;AAxBW;;IAmEX;AACA;AACAwY;;AAHK,MAAMC,yCAAN,CAAM;AA8CX;AACA3I,SAAyB;AACvB,QAAI,KAAKvQ,GAAT,EACE,OAAO,IAAIkZ,yCAAJ,CAAqB,KAAKjZ,QAA1B,EAAoC,KAAKD,GAAzC,EAA8C,KAAKE,IAAnD,EAAyD,KAAKC,KAA9D,EAAqE,KAAKC,GAA1E,EAA+E,KAAKE,IAApF,EAA0F,KAAKC,MAA/F,EAAuG,KAAKC,MAA5G,EAAoH,KAAKC,WAAzH,CAAP,CADF,KAGE,OAAO,IAAIyY,yCAAJ,CAAqB,KAAKjZ,QAA1B,EAAoC,KAAKC,IAAzC,EAA+C,KAAKC,KAApD,EAA2D,KAAKC,GAAhE,EAAqE,KAAKE,IAA1E,EAAgF,KAAKC,MAArF,EAA6F,KAAKC,MAAlG,EAA0G,KAAKC,WAA/G,CAAP;AAEJ;AAEA;;;AACA2J,MAAI0G,QAAJ,EAAkD;AAChD,WAAO,+CAAI,IAAJ,EAAUA,QAAV,CAAP;AACF;AAEA;;;AACAlG,WAASkG,QAAT,EAAuD;AACrD,WAAO,+CAAS,IAAT,EAAeA,QAAf,CAAP;AACF;AAEA;;;AACAjF,MAAIuG,MAAJ,EAAuD;AACrD,WAAO,+CAAI,+CAAQ,IAAR,EAAcA,MAAd,CAAJ,EAA2BA,MAA3B,CAAP;AACF;AAEA;;;;;;AAIAuG,QAAMxF,KAAN,EAAoCzT,MAApC,EAAoD0T,OAApD,EAAkG;AAChG,YAAQD,KAAR;AACE,WAAK,KAAL;AACA,WAAK,MAAL;AACA,WAAK,OAAL;AACA,WAAK,KAAL;AACE,eAAO,+CAAU,IAAV,EAAgBA,KAAhB,EAAuBzT,MAAvB,EAA+B0T,OAA/B,CAAP;;AACF;AACE,eAAO,+CAAU,IAAV,EAAgBD,KAAhB,EAAuBzT,MAAvB,EAA+B0T,OAA/B,CAAP;AAPJ;AASF;AAEA;;;AACAwF,SAAOzP,QAAP,EAAyBqF,cAAzB,EAAgE;AAC9D,WAAO,+CAAO,IAAP,EAAarF,QAAb,EAAuBqF,cAAvB,CAAP;AACF;AAEA;;;AACAqK,aAAmB;AACjB,WAAO,+CAAiB,IAAjB,CAAP;AACF;AAEA;;;AACA3M,UAAQzD,CAAR,EAAoE;AAClE,QAAIuK,MAAM,+CAAY,IAAZ,EAAkBvK,CAAlB,CAAV;AACA,QAAIuK,QAAQ,CAAZ,EACE,OAAO,+CAAY,IAAZ,EAAkB,+CAAmBvK,CAAnB,CAAlB,CAAP;AAGF,WAAOuK,GAAP;AACF;;AAzEA8F,gBAA4B;AA5B5B;oBAAA;aAAA;AAAA;;AA4B4B,uCAAbP,IAAa;AAAbA,UAAa;AAAA;;AAC1B,QAAI,CAACtY,QAAD,EAAWD,GAAX,EAAgBE,IAAhB,EAAsBC,KAAtB,EAA6BC,GAA7B,IAAoCkY,gCAAUC,IAAV,CAAxC;AACA,SAAKtY,QAAL,GAAgBA,QAAhB;AACA,SAAKD,GAAL,GAAWA,GAAX;AACA,SAAKE,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,GAAL,GAAWA,GAAX;AACA,SAAKE,IAAL,GAAYiY,KAAKC,KAAL,MAAgB,CAA5B;AACA,SAAKjY,MAAL,GAAcgY,KAAKC,KAAL,MAAgB,CAA9B;AACA,SAAKhY,MAAL,GAAc+X,KAAKC,KAAL,MAAgB,CAA9B;AACA,SAAK/X,WAAL,GAAmB8X,KAAKC,KAAL,MAAgB,CAAnC;AAEA,mDAAU,IAAV;AACF;;AA5CW;;IA6GX;AACA;AACAW;;AAHK,MAAMC,yCAAN,CAAM;AAsDX;AACA7I,SAAsB;AACpB,QAAI,KAAKvQ,GAAT,EACE,OAAO,IAAIoZ,yCAAJ,CAAkB,KAAKnZ,QAAvB,EAAiC,KAAKD,GAAtC,EAA2C,KAAKE,IAAhD,EAAsD,KAAKC,KAA3D,EAAkE,KAAKC,GAAvE,EAA4E,KAAK+I,QAAjF,EAA2F,KAAKoG,MAAhG,EAAwG,KAAKjP,IAA7G,EAAmH,KAAKC,MAAxH,EAAgI,KAAKC,MAArI,EAA6I,KAAKC,WAAlJ,CAAP,CADF,KAGE,OAAO,IAAI2Y,yCAAJ,CAAkB,KAAKnZ,QAAvB,EAAiC,KAAKC,IAAtC,EAA4C,KAAKC,KAAjD,EAAwD,KAAKC,GAA7D,EAAkE,KAAK+I,QAAvE,EAAiF,KAAKoG,MAAtF,EAA8F,KAAKjP,IAAnG,EAAyG,KAAKC,MAA9G,EAAsH,KAAKC,MAA3H,EAAmI,KAAKC,WAAxI,CAAP;AAEJ;AAEA;;;AACA2J,MAAI0G,QAAJ,EAAgC;AAC9B,WAAO,+CAAS,IAAT,EAAeA,QAAf,CAAP;AACF;AAEA;;;AACAlG,WAASkG,QAAT,EAAqC;AACnC,WAAO,+CAAc,IAAd,EAAoBA,QAApB,CAAP;AACF;AAEA;;;AACAjF,MAAIuG,MAAJ,EAAqC5D,cAArC,EAAsE;AACpE,WAAO,+CAAS,IAAT,EAAe4D,MAAf,EAAuB5D,cAAvB,CAAP;AACF;AAEA;;;;;;AAIAmK,QAAMxF,KAAN,EAAoCzT,MAApC,EAAoD0T,OAApD,EAAgF;AAC9E,WAAO,+CAAW,IAAX,EAAiBD,KAAjB,EAAwBzT,MAAxB,EAAgC0T,OAAhC,CAAP;AACF;AAEA;;;AACAwF,WAAS;AACP,WAAO,8CAAY,IAAZ,CAAP;AACF;AAEC;;;AACDC,aAAW;AACT,WAAO,+CAAsB,IAAtB,CAAP;AACF;AAEC;;;AACDQ,qBAAmB;AACjB,WAAO,KAAKT,MAAL,GAAcU,WAAd,EAAP;AACF;AAEA;;;AACApN,UAAQzD,CAAR,EAA4D;AAC1D;AACA,WAAO,KAAKmQ,MAAL,GAAc3L,OAAd,KAA0B,+CAAQxE,CAAR,EAAW,KAAKU,QAAhB,EAA0ByP,MAA1B,GAAmC3L,OAAnC,EAAjC;AACF;;AAtEA6L,gBAA4B;AAhC5B;oBAAA;aAAA;AAAA;;AAgC4B,uCAAbP,IAAa;AAAbA,UAAa;AAAA;;AAC1B,QAAI,CAACtY,QAAD,EAAWD,GAAX,EAAgBE,IAAhB,EAAsBC,KAAtB,EAA6BC,GAA7B,IAAoCkY,gCAAUC,IAAV,CAAxC;AACA,QAAIpP,WAAWoP,KAAKC,KAAL,EAAf;AACA,QAAIjJ,SAASgJ,KAAKC,KAAL,EAAb;AACA,SAAKvY,QAAL,GAAgBA,QAAhB;AACA,SAAKD,GAAL,GAAWA,GAAX;AACA,SAAKE,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,GAAL,GAAWA,GAAX;AACA,SAAK+I,QAAL,GAAgBA,QAAhB;AACA,SAAKoG,MAAL,GAAcA,MAAd;AACA,SAAKjP,IAAL,GAAYiY,KAAKC,KAAL,MAAgB,CAA5B;AACA,SAAKjY,MAAL,GAAcgY,KAAKC,KAAL,MAAgB,CAA9B;AACA,SAAKhY,MAAL,GAAc+X,KAAKC,KAAL,MAAgB,CAA9B;AACA,SAAK/X,WAAL,GAAmB8X,KAAKC,KAAL,MAAgB,CAAnC;AAEA,mDAAU,IAAV;AACF;;AApDW;AQ3Sb;;;;;;;;;;;AAYA;AACA;;;AAOA,MAAMe,wCAAkB,CAAC,CAAC,IAAD,EAAO,CAAP,EAAU,CAAV,CAAD,EAAe,CAAC,IAAD,EAAO,CAAP,EAAU,EAAV,CAAf,EAA8B,CAAC,IAAD,EAAO,EAAP,EAAW,EAAX,CAA9B,EAA8C,CAAC,IAAD,EAAO,CAAP,EAAU,CAAV,CAA9C,EAA4D,CAAC,IAAD,EAAO,CAAP,EAAU,CAAV,CAA5D,CAAxB;AACA,MAAMC,sCAAgB,CAAC,CAAC,IAAD,EAAO,CAAP,EAAU,EAAV,CAAD,EAAgB,CAAC,IAAD,EAAO,EAAP,EAAW,EAAX,CAAhB,EAAgC,CAAC,IAAD,EAAO,CAAP,EAAU,CAAV,CAAhC,EAA8C,CAAC,IAAD,EAAO,CAAP,EAAU,EAAV,CAA9C,CAAtB;AACA,MAAMC,oCAAc,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,CAApB;AACA,MAAMC,kCAAY,CAAC,OAAD,EAAU,QAAV,EAAoB,OAApB,EAA6B,QAA7B,EAAuC,OAAvC,CAAlB;;AAEA,SAASC,8CAAT,CAAkC5Z,IAAlC,EAAyD;AACvD,QAAM6Z,MAAML,sCAAgBM,SAAhB,CAA0B,QAAwB;AAAA,QAAvB,CAAC3Z,IAAD,EAAOC,KAAP,EAAcC,GAAd,CAAuB;AAC5D,QAAIL,KAAKG,IAAL,GAAYA,IAAhB,EACE,OAAO,IAAP;AAGF,QAAIH,KAAKG,IAAL,KAAcA,IAAd,IAAsBH,KAAKI,KAAL,GAAaA,KAAvC,EACE,OAAO,IAAP;AAGF,QAAIJ,KAAKG,IAAL,KAAcA,IAAd,IAAsBH,KAAKI,KAAL,KAAeA,KAArC,IAA8CJ,KAAKK,GAAL,GAAWA,GAA7D,EACE,OAAO,IAAP;AAGF,WAAO,KAAP;AACF,GAdY,CAAZ;AAgBA,MAAIwZ,QAAQ,EAAZ,EACE,OAAOL,sCAAgBtK,MAAhB,GAAyB,CAAhC;AAGF,MAAI2K,QAAQ,CAAZ,EACE,OAAO,CAAP;AAGF,SAAOA,MAAM,CAAb;AACF;;AAEA,SAASE,iCAAT,CAAqB/Z,IAArB,EAA4C;AAC1C,MAAIga,YAAYN,iCAAW,CAACC,gCAAUlG,OAAV,CAAkBzT,KAAKC,GAAvB,CAAD,CAA3B;AACA,MAAI,CAAC+Z,SAAL,EACE,MAAM,IAAItG,KAAJ,CAAU,kBAAkB1T,KAAKC,GAAjC,CAAN;AAGF,SAAO,KAAI,4CAAJ,EACLD,KAAKG,IAAL,GAAY6Z,SADP,EAELha,KAAKI,KAFA,EAGLJ,KAAKK,GAHA,CAAP;AAKF;;AAOO,MAAM4Z,yCAAN,UAA+B,4CAA/B,EAA+C;AAGpD3Y,gBAAcC,EAAd,EAAwC;AACtC,QAAIvB,OAAO,MAAMsB,aAAN,CAAoBC,EAApB,CAAX;AACA,QAAItB,MAAM2Z,+CAAyB5Z,IAAzB,CAAV;AAEA,WAAO,KAAI,4CAAJ,EACL,IADK,EAEL2Z,+BAAS,CAAC1Z,GAAD,CAFJ,EAGLD,KAAKG,IAAL,GAAYuZ,iCAAW,CAACzZ,GAAD,CAHlB,EAILD,KAAKI,KAJA,EAKLJ,KAAKK,GALA,CAAP;AAOF;;AAEA+B,cAAYpC,IAAZ,EAAmC;AACjC,WAAO,MAAMoC,WAAN,CAAkB2X,kCAAY/Z,IAAZ,CAAlB,CAAP;AACF;;AAEA2C,cAAY3C,IAAZ,EAA4C;AAC1C,QAAI+W,gBAAgBgD,kCAAY/Z,IAAZ,CAApB;AACA,QAAIC,MAAM2Z,+CAAyB7C,aAAzB,CAAV;;AAEA,QAAI4C,+BAAS,CAAC1Z,GAAD,CAAT,KAAmBD,KAAKC,GAA5B,EAAiC;AAC/BD,WAAKC,GAAL,GAAW0Z,+BAAS,CAAC1Z,GAAD,CAApB;AACAD,WAAKG,IAAL,GAAY4W,cAAc5W,IAAd,GAAqBuZ,iCAAW,CAACzZ,GAAD,CAA5C;AACD,KAPyC,CAS1C;;;AACA,SAAK8R,aAAL,CAAmB/R,IAAnB;AACF;;AAEA+R,gBAAc/R,IAAd,EAA8C;AAC5C,QAAI6Z,MAAMF,gCAAUlG,OAAV,CAAkBzT,KAAKC,GAAvB,CAAV;AACA,QAAI0M,MAAM8M,mCAAa,CAACI,GAAD,CAAvB;;AACA,QAAIlN,OAAO,IAAX,EAAiB;AACf,UAAI,CAACuN,OAAD,EAAUC,QAAV,EAAoBC,MAApB,IAA8BzN,GAAlC,CADe,CAGf;AACA;;AACA,UAAI8E,UAAUyI,UAAUR,iCAAW,CAACG,GAAD,CAAnC;AACA7Z,WAAKG,IAAL,GAAYN,KAAKwP,GAAL,CAAS,CAAT,EAAYxP,KAAKuP,GAAL,CAASqC,OAAT,EAAkBzR,KAAKG,IAAvB,CAAZ,CAAZ;;AACA,UAAIH,KAAKG,IAAL,KAAcsR,OAAlB,EAA2B;AACzBzR,aAAKI,KAAL,GAAaP,KAAKuP,GAAL,CAAS+K,QAAT,EAAmBna,KAAKI,KAAxB,CAAb;AAEA,YAAIJ,KAAKI,KAAL,KAAe+Z,QAAnB,EACEna,KAAKK,GAAL,GAAWR,KAAKuP,GAAL,CAASgL,MAAT,EAAiBpa,KAAKK,GAAtB,CAAX;AAEH;AACF;;AAED,QAAIL,KAAKG,IAAL,KAAc,CAAd,IAAmB0Z,OAAO,CAA9B,EAAiC;AAC/B,UAAI,GAAGQ,UAAH,EAAeC,QAAf,IAA2Bd,qCAAe,CAACK,GAAD,CAA9C;AACA7Z,WAAKI,KAAL,GAAaP,KAAKwP,GAAL,CAASgL,UAAT,EAAqBra,KAAKI,KAA1B,CAAb;AAEA,UAAIJ,KAAKI,KAAL,KAAeia,UAAnB,EACEra,KAAKK,GAAL,GAAWR,KAAKwP,GAAL,CAASiL,QAAT,EAAmBta,KAAKK,GAAxB,CAAX;AAEH;AACH;;AAEAoC,YAAU;AACR,WAAOkX,+BAAP;AACF;;AAEAnX,gBAAcxC,IAAd,EAA6C;AAC3C;AACA,QAAIC,MAAM0Z,gCAAUlG,OAAV,CAAkBzT,KAAKC,GAAvB,CAAV;AACA,QAAIsa,MAAMf,qCAAe,CAACvZ,GAAD,CAAzB;AACA,QAAIua,OAAOhB,qCAAe,CAACvZ,MAAM,CAAP,CAA1B;AACA,QAAIua,QAAQ,IAAZ,EACE;AACA,aAAO,OAAOD,GAAG,CAAC,CAAD,CAAV,GAAgB,CAAvB;AAGF,QAAIpJ,QAAQqJ,IAAI,CAAC,CAAD,CAAJ,GAAUD,GAAG,CAAC,CAAD,CAAzB;AAEA,QAAIva,KAAKI,KAAL,GAAaoa,IAAI,CAAC,CAAD,CAAjB,IAAyBxa,KAAKI,KAAL,KAAeoa,IAAI,CAAC,CAAD,CAAnB,IAA0Bxa,KAAKK,GAAL,GAAWma,IAAI,CAAC,CAAD,CAAtE,EACErJ;AAGF,WAAOA,KAAP;AACF;;AAEA9O,iBAAerC,IAAf,EAA8C;AAC5C,WAAO,MAAMqC,cAAN,CAAqB0X,kCAAY/Z,IAAZ,CAArB,CAAP;AACF;;AAEAkL,wBAAsBlL,IAAtB,EAAqD;AACnD,QAAI0M,QAAQ+N,kCAAYza,IAAZ,CAAZ;AACA,WAAO0M,QAAQA,KAAK,CAAC,CAAD,CAAb,GAAmB,CAA1B;AACF;;AAEAtB,uBAAqBpL,IAArB,EAAoD;AAClD,QAAI0M,QAAQ+N,kCAAYza,IAAZ,CAAZ;AACA,WAAO0M,SAAS1M,KAAKI,KAAL,KAAesM,KAAK,CAAC,CAAD,CAA7B,GAAmCA,KAAK,CAAC,CAAD,CAAxC,GAA8C,CAArD;AACF;;;;AAhGA,qEAAa,UAAb;;;AADoD;;AAoGtD,SAAS+N,iCAAT,CAAqBza,IAArB,EAA4C;AAC1C,MAAIA,KAAKG,IAAL,KAAc,CAAlB,EAAqB;AACnB,QAAI0Z,MAAMF,gCAAUlG,OAAV,CAAkBzT,KAAKC,GAAvB,CAAV;AACA,WAAOuZ,qCAAe,CAACK,GAAD,CAAtB;AACD;AACH;AChLA;;;;;;;;;;;AAYA;AACA;;;AAMA,MAAMa,2CAAqB,IAA3B;;AAOO,MAAMC,yCAAN,UAA+B,4CAA/B,EAA+C;AAGpDrZ,gBAAcC,EAAd,EAAwC;AACtC,QAAIwV,gBAAgB,MAAMzV,aAAN,CAAoBC,EAApB,CAApB;AACA,QAAIpB,OAAO,+CAAgB4W,cAAc9W,GAA9B,EAAmC8W,cAAc5W,IAAjD,CAAX;AACA,WAAO,KAAI,4CAAJ,EACL,IADK,EAELA,OAAOua,wCAFF,EAGL3D,cAAc3W,KAHT,EAIL2W,cAAc1W,GAJT,CAAP;AAMF;;AAEA+B,cAAYpC,IAAZ,EAAmC;AACjC,WAAO,MAAMoC,WAAN,CAAkBwY,kCAAY5a,IAAZ,CAAlB,CAAP;AACF;;AAEAyC,YAAU;AACR,WAAO,CAAC,IAAD,CAAP;AACF;;AAEAJ,iBAAerC,IAAf,EAA8C;AAC5C,WAAO,MAAMqC,cAAN,CAAqBuY,kCAAY5a,IAAZ,CAArB,CAAP;AACF;;AAEA2C,gBAAc,CAAC;;;;AAzBf,qEAAa,UAAb;;;AADoD;;AA6BtD,SAASiY,iCAAT,CAAqB5a,IAArB,EAA4C;AAC1C,MAAI,CAACC,GAAD,EAAME,IAAN,IAAc,+CAAiBH,KAAKG,IAAL,GAAYua,wCAA7B,CAAlB;AACA,SAAO,KAAI,4CAAJ,EACLza,GADK,EAELE,IAFK,EAGLH,KAAKI,KAHA,EAILJ,KAAKK,GAJA,CAAP;AAMF;AC/DA;;;;;;;;;;;AAYA;AACA;;;AAOA,MAAMwa,yCAAmB,IAAzB;;AAEA,SAASC,mCAAT,CAAuB9a,IAAvB,EAA8C;AAC5C,SAAOA,KAAKC,GAAL,KAAa,QAAb,GACHD,KAAKG,IAAL,GAAY0a,sCADT,GAEH,IAAI7a,KAAKG,IAAT,GAAgB0a,sCAFpB;AAGF;;AAEA,SAASE,uCAAT,CAA2B5a,IAA3B,EAA2D;AACzD,MAAI6a,IAAI7a,OAAO0a,sCAAf;AACA,MAAIG,IAAI,CAAR,EACE,OAAO,CAAC,QAAD,EAAWA,CAAX,CAAP,CADF,KAGE,OAAO,CAAC,eAAD,EAAkB,IAAIA,CAAtB,CAAP;AAEJ;;AAOO,MAAMC,yCAAN,UAA6B,4CAA7B,EAA6C;AAGlD3Z,gBAAcC,EAAd,EAAwC;AACtC,QAAIvB,OAAO,MAAMsB,aAAN,CAAoBC,EAApB,CAAX;AACA,QAAIU,eAAe,+CAAgBjC,KAAKC,GAArB,EAA0BD,KAAKG,IAA/B,CAAnB;AACA,QAAI,CAACF,GAAD,EAAME,IAAN,IAAc4a,wCAAkB9Y,YAAlB,CAAlB;AACA,WAAO,KAAI,4CAAJ,EAAiB,IAAjB,EAAuBhC,GAAvB,EAA4BE,IAA5B,EAAkCH,KAAKI,KAAvC,EAA8CJ,KAAKK,GAAnD,CAAP;AACF;;AAEA+B,cAAYpC,IAAZ,EAAmC;AACjC,WAAO,MAAMoC,WAAN,CAAkB8Y,kCAAYlb,IAAZ,CAAlB,CAAP;AACF;;AAEAyC,YAAU;AACR,WAAO,CAAC,eAAD,EAAkB,QAAlB,CAAP;AACF;;AAEAE,cAAY3C,IAAZ,EAA4C;AAC1C,QAAI,CAACC,GAAD,EAAME,IAAN,IAAc4a,wCAAkBD,oCAAc9a,IAAd,CAAlB,CAAlB;AACAA,SAAKC,GAAL,GAAWA,GAAX;AACAD,SAAKG,IAAL,GAAYA,IAAZ;AACF;;AAEAuC,eAAa1C,IAAb,EAA6C;AAC3C,WAAOA,KAAKC,GAAL,KAAa,eAApB;AACF;;AAEAoC,iBAAerC,IAAf,EAA8C;AAC5C,WAAO,MAAMqC,cAAN,CAAqB6Y,kCAAYlb,IAAZ,CAArB,CAAP;AACF;;AAEAwC,gBAAcxC,IAAd,EAA6C;AAC3C,WAAOA,KAAKC,GAAL,KAAa,eAAb,GAA+B,IAA/B,GAAsC,OAAO4a,sCAApD;AACF;;;;AAjCA,qEAAa,KAAb,EAAoB;AAApB;;;AADkD;;AAqCpD,SAASK,iCAAT,CAAqBlb,IAArB,EAA4C;AAC1C,MAAI,CAACC,GAAD,EAAME,IAAN,IAAc,+CAAiB2a,oCAAc9a,IAAd,CAAjB,CAAlB;AACA,SAAO,KAAI,4CAAJ,EACLC,GADK,EAELE,IAFK,EAGLH,KAAKI,KAHA,EAILJ,KAAKK,GAJA,CAAP;AAMF;ACvFA;;;;;;;;;;;AAYA;AACA;;;AAMA,MAAM8a,sCAAgB,OAAtB,C,CAA+B;;AAE/B,SAASC,gCAAT,CAAoBjb,IAApB,EAA2C;AACzC,MAAIkb,KAAKlb,OAAO,CAAP,GAAWA,OAAO,GAAlB,GAAwBA,OAAO,GAAxC;AACA,MAAIW,KAAK,+CAAIua,EAAJ,EAAQ,IAAR,IAAgB,GAAzB;AAEA,SAAO,+CAAI,CAACva,KAAK,EAAN,IAAY,EAAhB,EAAoB,GAApB,IAA2B,EAAlC;AACF;;AAEA,SAASwa,wCAAT,CAA4Bnb,IAA5B,EAA0CC,KAA1C,EAAyDC,GAAzD,EAA8E;AAC5E,MAAIgb,KAAKlb,OAAO,CAAP,GAAWA,OAAO,GAAlB,GAAwBA,OAAO,GAAxC;AACA,MAAIW,KAAK,+CAAIua,EAAJ,EAAQ,IAAR,IAAgB,GAAzB;AACA,MAAI7L,SAASpP,SAAS,CAAT,GAAa,MAAMA,QAAQ,CAAd,CAAb,GAAgC,MAAMA,QAAQ,CAAd,IAAmB,CAAhE;AAEA,SACE+a,sCACA,CADA,GAEA,UAAUtb,KAAKC,KAAL,CAAWub,KAAK,IAAhB,CAFV,GAGA,OAAOva,KAAK,CAAZ,CAHA,GAIAjB,KAAKC,KAAL,CAAW,CAAC,KAAKgB,EAAL,GAAU,CAAX,IAAgB,GAA3B,CAJA,GAKA0O,MALA,GAMAnP,GAPF;AASF;;AAQO,MAAMkb,yCAAN,CAAM;AAGXja,gBAAcC,EAAd,EAAwC;AACtC,QAAIia,KAAKja,KAAK+Z,yCAAmB,GAAnB,EAAwB,CAAxB,EAA2B,CAA3B,CAAd;AACA,QAAIG,QAAQ5b,KAAKC,KAAL,CAAW0b,KAAK,OAAhB,CAAZ;AACA,QAAIE,KAAK,+CAAIF,EAAJ,EAAQ,OAAR,CAAT;AACA,QAAIG,QAAQD,OAAO,OAAP,GAAiB,IAAjB,GAAwB7b,KAAKC,KAAL,CAAW,CAAC,MAAM4b,EAAN,GAAW,KAAZ,IAAqB,KAAhC,CAApC;AACA,QAAIvb,OAAO,MAAM,OAAOsb,KAAb,GAAqBE,KAAhC;AACA,QAAIxb,QAAQ,CAAZ,EACEA;AAGF,QAAIyb,OAAOra,KAAK+Z,yCAAmBnb,IAAnB,EAAyB,CAAzB,EAA4B,CAA5B,CAAL,GAAsC,CAAjD;AACA,QAAIC,QAAQwb,QAAQ,GAAR,GAAc/b,KAAK6J,IAAL,CAAUkS,OAAO,EAAjB,CAAd,GAAqC/b,KAAK6J,IAAL,CAAU,CAACkS,OAAO,CAAR,IAAa,EAAvB,CAAjD;AACA,QAAIvb,MAAMkB,KAAK+Z,yCAAmBnb,IAAnB,EAAyBC,KAAzB,EAAgC,CAAhC,CAAL,GAA0C,CAApD;AAEA,WAAO,KAAI,4CAAJ,EAAiB,IAAjB,EAAuBD,IAAvB,EAA6BC,KAA7B,EAAoCC,GAApC,CAAP;AACF;;AAEA+B,cAAYpC,IAAZ,EAA2C;AACzC,WAAOsb,yCAAmBtb,KAAKG,IAAxB,EAA8BH,KAAKI,KAAnC,EAA0CJ,KAAKK,GAA/C,CAAP;AACF;;AAEAiC,oBAA0B;AACxB,WAAO,EAAP;AACF;;AAEAD,iBAAerC,IAAf,EAA8C;AAC5C,QAAIA,KAAKI,KAAL,IAAc,CAAlB,EACE,OAAO,EAAP;AAGF,QAAIJ,KAAKI,KAAL,IAAc,EAAlB,EACE,OAAO,EAAP;AAGF,WAAOgb,iCAAWpb,KAAKG,IAAhB,IAAwB,EAAxB,GAA6B,EAApC;AACF;;AAEAsC,YAAU;AACR,WAAO,CAAC,IAAD,CAAP;AACF;;AAEAD,kBAAwB;AACtB;AACA;AACA,WAAO,IAAP;AACF;;;AA/CA,qEAAa,SAAb;;;AADW;AClDb;;;;;;;;;;;AAYA;AACA;AAMA;;;AACA,MAAMqZ,yCAAmB,EAAzB,C,CAEA;;AACA,MAAMC,0CAAoB,EAA1B;;AAOO,MAAMC,yCAAN,UAA6B,4CAA7B,EAA6C;AAGlDza,gBAAcC,EAAd,EAAwC;AACtC;AACA,QAAIvB,OAAO,MAAMsB,aAAN,CAAoBC,EAApB,CAAX,CAFsC,CAItC;;AACA,QAAIya,aAAahc,KAAKG,IAAL,GAAY0b,sCAA7B,CALsC,CAOtC;;AACA,QAAID,OAAOra,KAAK,+CAAqBvB,KAAKC,GAA1B,EAA+BD,KAAKG,IAApC,EAA0C,CAA1C,EAA6C,CAA7C,CAAhB;AAEA,QAAI8b,SAAJ;;AACA,QAAIL,OAAOE,uCAAX,EAA8B;AAC5B;AACAE,mBAF4B,CAI5B;;AACAC,kBAAY,+CAAWjc,KAAKG,IAAL,GAAY,CAAvB,IAA4B,EAA5B,GAAiC,EAA7C;AACAyb,cAAQK,YAAa,GAAb,GAAwB,EAAxB,GAAkC,EAA1C;AACF,KAPA,MAOO;AACL;AACAA,kBAAY,+CAAWjc,KAAKG,IAAhB,IAAwB,EAAxB,GAA6B,EAAzC;AACAyb,cAAQE,uCAAR;AACD;;AAED,QAAII,WAAJ;AACA,QAAIC,SAAJ;;AACA,QAAIP,OAAOK,SAAX,EAAsB;AACpBC,oBAAc,CAAd;AACAC,kBAAYP,OAAO,CAAnB;AACF,KAHA,MAGO;AACL,UAAIQ,OAAOR,OAAOK,SAAlB;;AACA,UAAIG,OAAQ,GAAZ,EAAqB;AACnBF,sBAAcrc,KAAKC,KAAL,CAAWsc,OAAO,EAAlB,IAAwB,CAAtC;AACAD,oBAAYC,IAAC,GAAO,EAAR,GAAc,CAA1B;AACF,OAHA,MAGO;AACLA,gBAAQ,GAAR;AACAF,sBAAcrc,KAAKC,KAAL,CAAWsc,OAAO,EAAlB,IAAwB,CAAtC;AACAD,oBAAYC,IAAC,GAAO,EAAR,GAAc,CAA1B;AACD;AACF;;AAED,WAAO,KAAI,4CAAJ,EAAiB,IAAjB,EAAuBJ,UAAvB,EAAmCE,WAAnC,EAAgDC,SAAhD,CAAP;AACF;;AAEA/Z,cAAYpC,IAAZ,EAAmC;AACjC,QAAIiC,eAAejC,KAAKG,IAAL,GAAY0b,sCAA/B;AACA,QAAI,CAAC5b,GAAD,EAAME,IAAN,IAAc,+CAAiB8B,YAAjB,CAAlB;AAEA,QAAIga,SAAJ;AACA,QAAI1a,EAAJ;;AACA,QAAI,+CAAWpB,IAAX,CAAJ,EAAsB;AACpB8b,kBAAY,EAAZ;AACA1a,WAAK,+CAAqBtB,GAArB,EAA0BE,IAA1B,EAAgC,CAAhC,EAAmC,EAAnC,CAAL;AACF,KAHA,MAGO;AACL8b,kBAAY,EAAZ;AACA1a,WAAK,+CAAqBtB,GAArB,EAA0BE,IAA1B,EAAgC,CAAhC,EAAmC,EAAnC,CAAL;AACD;;AAED,QAAIH,KAAKI,KAAL,KAAe,CAAnB,EACE,OAAOmB,KAAKvB,KAAKK,GAAV,GAAgB,CAAvB;AAGFkB,UAAM0a,YAAYpc,KAAKuP,GAAL,CAASpP,KAAKI,KAAL,GAAa,CAAtB,EAAyB,CAAzB,IAA8B,EAAhD;AAEA,QAAIJ,KAAKI,KAAL,IAAc,CAAlB,EACEmB,MAAM,CAACvB,KAAKI,KAAL,GAAa,CAAd,IAAmB,EAAzB;AAGFmB,UAAMvB,KAAKK,GAAL,GAAW,CAAjB;AACA,WAAOkB,EAAP;AACF;;AAEAc,iBAAerC,IAAf,EAA8C;AAC5C,QAAIA,KAAKI,KAAL,KAAe,CAAf,IAAoB,+CAAWJ,KAAKG,IAAL,GAAY0b,sCAAvB,CAAxB,EACE,OAAO,EAAP;AAGF,QAAI7b,KAAKI,KAAL,IAAc,CAAd,IAAmBJ,KAAKI,KAAL,IAAc,CAArC,EACE,OAAO,EAAP;AAGF,WAAO,EAAP;AACF;;AAEAoC,kBAAwB;AACtB;AACA;AACA,WAAO,IAAP;AACF;;AAEAC,YAAU;AACR,WAAO,CAAC,MAAD,CAAP;AACF;;AAEAE,gBAAc,CAAC;;;;AAhGf,qEAAa,QAAb;;;AADkD;AC9BpD;;;;;;;;;;;AAYA;AACA;;;AAKA,MAAM0Z,mCAAa,OAAnB,C,CAA4B;;AAC5B,MAAMC,0CAAoB,OAA1B,C,CAAmC;;AACnC,MAAMC,4CAAsB,IAA5B;AACA,MAAMC,0CAAoB,IAA1B;AACA,MAAMC,4CAAsB,MAA5B;;AAEA,SAASC,wCAAT,CAA4BC,KAA5B,EAA2Cxc,IAA3C,EAAyDC,KAAzD,EAAwEC,GAAxE,EAA6F;AAC3F,SAAOA,MACLR,KAAK6J,IAAL,CAAU,QAAQtJ,QAAQ,CAAhB,CAAV,CADK,GAEL,CAACD,OAAO,CAAR,IAAa,GAFR,GAGLN,KAAKC,KAAL,CAAW,CAAC,IAAI,KAAKK,IAAV,IAAkB,EAA7B,CAHK,GAILwc,KAJK,GAIG,CAJV;AAKF;;AAEA,SAASC,wCAAT,CAA4B1c,QAA5B,EAAgDyc,KAAhD,EAA+Dpb,EAA/D,EAA2E;AACzE,MAAIpB,OAAON,KAAKC,KAAL,CAAW,CAAC,MAAMyB,KAAKob,KAAX,IAAoB,KAArB,IAA8B,KAAzC,CAAX;AACA,MAAIvc,QAAQP,KAAKuP,GAAL,CAAS,EAAT,EAAavP,KAAK6J,IAAL,CAAU,CAACnI,MAAM,KAAKmb,yCAAmBC,KAAnB,EAA0Bxc,IAA1B,EAAgC,CAAhC,EAAmC,CAAnC,CAAX,CAAD,IAAsD,IAAhE,IAAwE,CAArF,CAAZ;AACA,MAAIE,MAAMkB,KAAKmb,yCAAmBC,KAAnB,EAA0Bxc,IAA1B,EAAgCC,KAAhC,EAAuC,CAAvC,CAAL,GAAiD,CAA3D;AAEA,SAAO,KAAI,4CAAJ,EAAiBF,QAAjB,EAA2BC,IAA3B,EAAiCC,KAAjC,EAAwCC,GAAxC,CAAP;AACF;;AAEA,SAASwc,gCAAT,CAAoB1c,IAApB,EAA2C;AACzC,SAAO,CAAC,KAAK,KAAKA,IAAX,IAAmB,EAAnB,GAAwB,EAA/B;AACF;;AASO,MAAM2c,yCAAN,CAAM;AAGXxb,gBAAcC,EAAd,EAAwC;AACtC,WAAOqb,yCAAmB,IAAnB,EAAyBP,gCAAzB,EAAqC9a,EAArC,CAAP;AACF;;AAEAa,cAAYpC,IAAZ,EAAmC;AACjC,WAAO0c,yCAAmBL,gCAAnB,EAA+Brc,KAAKG,IAApC,EAA0CH,KAAKI,KAA/C,EAAsDJ,KAAKK,GAA3D,CAAP;AACF;;AAEAgC,iBAAerC,IAAf,EAA8C;AAC5C,QAAIkP,SAAS,KAAKlP,KAAKI,KAAL,GAAa,CAA/B;AACA,QAAIJ,KAAKI,KAAL,KAAe,EAAf,IAAqByc,iCAAW7c,KAAKG,IAAhB,CAAzB,EACE+O;AAGF,WAAOA,MAAP;AACF;;AAEA5M,oBAA0B;AACxB,WAAO,EAAP;AACF;;AAEAC,gBAAcvC,IAAd,EAA6C;AAC3C,WAAO6c,iCAAW7c,KAAKG,IAAhB,IAAwB,GAAxB,GAA8B,GAArC;AACF;;AAEAqC,kBAAwB;AACtB;AACA,WAAO,IAAP;AACF;;AAEAC,YAAU;AACR,WAAO,CAAC,IAAD,CAAP;AACF;;;AAlCA,qEAAa,eAAb;;;AADW;;AA6CN,MAAMsa,yCAAN,SAAqCD,yCAArC,CAAqC;AAG1Cxb,gBAAcC,EAAd,EAAwC;AACtC,WAAOqb,yCAAmB,IAAnB,EAAyBN,uCAAzB,EAA4C/a,EAA5C,CAAP;AACF;;AAEAa,cAAYpC,IAAZ,EAAmC;AACjC,WAAO0c,yCAAmBJ,uCAAnB,EAAsCtc,KAAKG,IAA3C,EAAiDH,KAAKI,KAAtD,EAA6DJ,KAAKK,GAAlE,CAAP;AACF;;;;AARA,qEAAa,cAAb;;;AAD0C,C,CAY5C;;;AACA,MAAM2c,sCAAgB,syBAAtB;AACA,IAAIC,0CAAJ;AACA,IAAIC,+CAAJ;;AAEA,SAASC,uCAAT,CAA2Bhd,IAA3B,EAAiD;AAC/C,SAAOsc,4CAAsBS,+CAAyB,CAAC/c,OAAOoc,yCAAR,CAAtD;AACF;;AAEA,SAASa,yCAAT,CAA6Bjd,IAA7B,EAA2CC,KAA3C,EAAkE;AAChE,MAAIyZ,MAAO1Z,OAAOoc,yCAAlB;AACA,MAAIc,OAAQ,QAAS,MAAMjd,QAAQ,CAAd,CAArB;AACA,MAAI,CAAC6c,0CAAoB,CAACpD,GAAD,CAApB,GAA4BwD,IAA7B,MAAuC,CAA3C,EACE,OAAO,EAAP,CADF,KAGE,OAAO,EAAP;AAEJ;;AAEA,SAASC,wCAAT,CAA4Bnd,IAA5B,EAA0CC,KAA1C,EAAiE;AAC/D,MAAIC,MAAM8c,wCAAkBhd,IAAlB,CAAV;;AACA,OAAK,IAAIod,IAAI,CAAb,EAAgBA,IAAInd,KAApB,EAA2Bmd,GAA3B,EACEld,OAAO+c,0CAAoBjd,IAApB,EAA0Bod,CAA1B,CAAP;;AAEF,SAAOld,GAAP;AACF;;AAEA,SAASmd,wCAAT,CAA4Brd,IAA5B,EAAkD;AAChD,SAAO+c,+CAAyB,CAAC/c,OAAO,CAAP,GAAWoc,yCAAZ,CAAzB,GAA4DW,+CAAyB,CAAC/c,OAAOoc,yCAAR,CAA5F;AACF;;AASO,MAAMkB,yCAAN,SAAsCX,yCAAtC,CAAsC;AAsB3Cxb,gBAAcC,EAAd,EAAwC;AACtC,QAAI+I,OAAO/I,KAAK8a,gCAAhB;AACA,QAAIqB,YAAYP,wCAAkBZ,yCAAlB,CAAhB;AACA,QAAIoB,UAAUR,wCAAkBX,uCAAlB,CAAd;AACA,QAAIlS,OAAOoT,SAAP,IAAoBpT,OAAOqT,OAA/B,EACE,OAAO,MAAMrc,aAAN,CAAoBC,EAApB,CAAP,CADF,KAEO;AACL,UAAIyZ,IAAIuB,4CAAsB,CAA9B;AACA,UAAI5G,IAAI,CAAR;AACA,UAAIiI,IAAI,CAAR;;AACA,aAAOA,IAAI,CAAX,EAAc;AACZ5C;AACA4C,YAAItT,OAAO6S,wCAAkBnC,CAAlB,CAAP,GAA8B,CAAlC;AACA,YAAI6C,aAAaL,yCAAmBxC,CAAnB,CAAjB;;AACA,YAAI4C,MAAMC,UAAV,EAAsB;AACpBlI,cAAI,EAAJ;AACA;AACF,SAHA,MAGO,IAAIiI,IAAIC,UAAR,EAAoB;AACzB,cAAIC,cAAcV,0CAAoBpC,CAApB,EAAuBrF,CAAvB,CAAlB;AACAA,cAAI,CAAJ;;AACA,iBAAOiI,IAAIE,WAAX,EAAwB;AACtBF,iBAAKE,WAAL;AACAnI;AACAmI,0BAAcV,0CAAoBpC,CAApB,EAAuBrF,CAAvB,CAAd;AACF;;AACA;AACD;AACH;;AAEA,aAAO,KAAI,4CAAJ,EAAiB,IAAjB,EAAuBqF,CAAvB,EAA0BrF,CAA1B,EAA8BrL,OAAOgT,yCAAmBtC,CAAnB,EAAsBrF,CAAtB,CAAP,GAAkC,CAAhE,CAAP;AACD;AACH;;AAEAvT,cAAYpC,IAAZ,EAA2C;AACzC,QAAIA,KAAKG,IAAL,GAAYoc,yCAAZ,IAAmCvc,KAAKG,IAAL,GAAYqc,uCAAnD,EACE,OAAO,MAAMpa,WAAN,CAAkBpC,IAAlB,CAAP;AAGF,WAAOqc,mCAAaiB,yCAAmBtd,KAAKG,IAAxB,EAA8BH,KAAKI,KAAnC,CAAb,IAA0DJ,KAAKK,GAAL,GAAW,CAArE,CAAP;AACF;;AAEAgC,iBAAerC,IAAf,EAA8C;AAC5C,QAAIA,KAAKG,IAAL,GAAYoc,yCAAZ,IAAmCvc,KAAKG,IAAL,GAAYqc,uCAAnD,EACE,OAAO,MAAMna,cAAN,CAAqBrC,IAArB,CAAP;AAGF,WAAOod,0CAAoBpd,KAAKG,IAAzB,EAA+BH,KAAKI,KAApC,CAAP;AACF;;AAEAmC,gBAAcvC,IAAd,EAA6C;AAC3C,QAAIA,KAAKG,IAAL,GAAYoc,yCAAZ,IAAmCvc,KAAKG,IAAL,GAAYqc,uCAAnD,EACE,OAAO,MAAMja,aAAN,CAAoBvC,IAApB,CAAP;AAGF,WAAOwd,yCAAmBxd,KAAKG,IAAxB,CAAP;AACF;;AA1EA4Y,gBAAc;AACZ;AAHF,qEAAa,kBAAb;AAIE,QAAI,CAACkE,0CAAL,EACEA,6CAAuB,IAAIc,WAAJ,CAAgBC,WAAWC,IAAX,CAAgBC,KAAKlB,mCAAL,CAAhB,EAAqCmB,KAAKA,EAAEC,UAAF,CAAa,CAAb,CAA1C,EAA2DC,MAA3E,CAAvB;;AAGF,QAAI,CAACnB,+CAAL,EAAgC;AAC9BA,wDAA4B,IAAIoB,WAAJ,CAAgB9B,0CAAoBD,yCAApB,GAA0C,CAA1D,CAA5B;AAEA,UAAIgC,YAAY,CAAhB;;AACA,WAAK,IAAIpe,OAAOoc,yCAAhB,EAAqCpc,QAAQqc,uCAA7C,EAAgErc,MAAhE,EAAwE;AACtE+c,uDAAyB,CAAC/c,OAAOoc,yCAAR,CAAzB,GAAwDgC,SAAxD;;AACA,aAAK,IAAIhB,IAAI,CAAb,EAAgBA,KAAK,EAArB,EAAyBA,GAAzB,EACEgB,aAAanB,0CAAoBjd,IAApB,EAA0Bod,CAA1B,CAAb;AAEJ;AACD;AACH;;AApB2C;AClJ7C;;;;;;;;;;;AAYA;AACA;;;AAMA,MAAMiB,qCAAe,MAArB,C,CAEA;AACA;;AACA,MAAMC,mCAAa,IAAnB;AACA,MAAMC,kCAAa,KAAKD,gCAAxB,C,CAEA;AACA;AACA;;AACA,MAAME,mCAAa,EAAnB;AACA,MAAMC,oCAAc,KAAKH,gCAAL,GAAkB,GAAtC;AACA,MAAMI,oCAAcF,mCAAaD,+BAAb,GAAyBE,iCAA7C;;AAEA,SAASE,gCAAT,CAAoB3e,IAApB,EAAkC;AAChC,SAAO,+CAAIA,OAAO,CAAP,GAAW,CAAf,EAAkB,EAAlB,IAAwB,CAA/B;AACF,C,CAEA;AACA;;;AACA,SAAS4e,kCAAT,CAAsB5e,IAAtB,EAAoC;AAClC,MAAI4K,SAASlL,KAAKC,KAAL,CAAW,CAAC,MAAMK,IAAN,GAAa,GAAd,IAAqB,EAAhC,CAAb;AACA,MAAIuN,QAAQ,QAAQ,QAAQ3C,MAA5B;AACA,MAAI1K,MAAM0K,SAAS,EAAT,GAAclL,KAAKC,KAAL,CAAW4N,QAAQ,KAAnB,CAAxB;AAEA,MAAI,+CAAI,KAAKrN,MAAM,CAAX,CAAJ,EAAmB,CAAnB,IAAwB,CAA5B,EACEA,OAAO,CAAP;AAGF,SAAOA,GAAP;AACF,C,CAEA;;;AACA,SAAS2e,kCAAT,CAAsB7e,IAAtB,EAAoC;AAClC,MAAI8e,OAAOF,mCAAa5e,OAAO,CAApB,CAAX;AACA,MAAI+e,UAAUH,mCAAa5e,IAAb,CAAd;AACA,MAAIqa,OAAOuE,mCAAa5e,OAAO,CAApB,CAAX;AAEA,MAAIqa,OAAO0E,OAAP,KAAmB,GAAvB,EACE,OAAO,CAAP;AAGF,MAAIA,UAAUD,IAAV,KAAmB,GAAvB,EACE,OAAO,CAAP;AAGF,SAAO,CAAP;AACF;;AAEA,SAASE,iCAAT,CAAqBhf,IAArB,EAAmC;AACjC,SAAO4e,mCAAa5e,IAAb,IAAqB6e,mCAAa7e,IAAb,CAA5B;AACF;;AAEA,SAASif,mCAAT,CAAuBjf,IAAvB,EAAqC;AACnC,SAAOgf,kCAAYhf,OAAO,CAAnB,IAAwBgf,kCAAYhf,IAAZ,CAA/B;AACF;;AAEA,SAASkf,iCAAT,CAAqBlf,IAArB,EAAmC;AACjC,MAAI0d,aAAauB,oCAAcjf,IAAd,CAAjB;AAEA,MAAI0d,aAAa,GAAjB,EACEA,cAAc,EAAd,CAJ+B,CAIb;;AAGpB,UAAQA,UAAR;AACE,SAAK,GAAL;AACE,aAAO,CAAP;AAAU;;AACZ,SAAK,GAAL;AACE,aAAO,CAAP;AAAU;;AACZ,SAAK,GAAL;AACE,aAAO,CAAP;AAAU;AANd;AAQF;;AAEA,SAASyB,oCAAT,CAAwBnf,IAAxB,EAAsCC,KAAtC,EAA6D;AAC3D;AACA,MAAIA,SAAS,CAAT,IAAc,CAAC0e,iCAAW3e,IAAX,CAAnB,EACEC,QAHyD,CAM3D;;AACA,MAAIA,UAAU,CAAV,IAAeA,UAAU,CAAzB,IAA8BA,UAAU,CAAxC,IAA6CA,UAAU,EAAvD,IAA6DA,UAAU,EAA3E,EACE,OAAO,EAAP;AAGF,MAAImf,WAAWF,kCAAYlf,IAAZ,CAAf,CAX2D,CAa3D;;AACA,MAAIC,UAAU,CAAd,EACE,OAAOmf,aAAa,CAAb,GAAiB,EAAjB,GAAsB,EAA7B,CAfyD,CAkB3D;;AACA,MAAInf,UAAU,CAAd,EACE,OAAOmf,aAAa,CAAb,GAAiB,EAAjB,GAAsB,EAA7B,CApByD,CAuB3D;;AACA,MAAInf,UAAU,CAAd,EACE,OAAO0e,iCAAW3e,IAAX,IAAmB,EAAnB,GAAwB,CAA/B;AAGF,SAAO,EAAP;AACF;;AAOO,MAAMqf,wCAAN,CAAM;AAGXle,gBAAcC,EAAd,EAAwC;AACtC,QAAIqc,IAAIrc,KAAKid,kCAAb;AACA,QAAI7I,IAAIiI,CAAC,GAAIc,+BAAL,GAAkBG,iCAA1B,CAFsC,CAEW;;AACjD,QAAI1e,OAAON,KAAKC,KAAL,CAAW,CAAC,KAAK6V,CAAL,GAAS,GAAV,IAAiB,GAA5B,IAAmC,CAA9C,CAHsC,CAGW;;AACjD,QAAI8J,KAAKN,kCAAYhf,IAAZ,CAAT,CAJsC,CAIW;;AACjD,QAAIuf,YAAY7f,KAAKC,KAAL,CAAW8d,IAAI6B,EAAf,CAAhB,CALsC,CAOtC;;AACA,WAAOC,YAAY,CAAnB,EAAsB;AACpBvf;AACAsf,WAAKN,kCAAYhf,IAAZ,CAAL;AACAuf,kBAAY7f,KAAKC,KAAL,CAAW8d,IAAI6B,EAAf,CAAZ;AACF,KAZsC,CActC;;;AACA,QAAIrf,QAAQ,CAAZ;AACA,QAAIuf,aAAa,CAAjB;;AACA,WAAOA,aAAaD,SAApB,EAA+B;AAC7BC,oBAAcL,qCAAenf,IAAf,EAAqBC,KAArB,CAAd;AACAA;AACF;;AAEAA;AACAuf,kBAAcL,qCAAenf,IAAf,EAAqBC,KAArB,CAAd;AAEA,QAAIC,MAAMqf,YAAYC,UAAtB;AACA,WAAO,KAAI,4CAAJ,EAAiB,IAAjB,EAAuBxf,IAAvB,EAA6BC,KAA7B,EAAoCC,GAApC,CAAP;AACF;;AAEA+B,cAAYpC,IAAZ,EAAmC;AACjC,QAAIuB,KAAK4d,kCAAYnf,KAAKG,IAAjB,CAAT;;AACA,SAAK,IAAIC,QAAQ,CAAjB,EAAoBA,QAAQJ,KAAKI,KAAjC,EAAwCA,OAAxC,EACEmB,MAAM+d,qCAAetf,KAAKG,IAApB,EAA0BC,KAA1B,CAAN;;AAGF,WAAOmB,KAAKvB,KAAKK,GAAV,GAAgBme,kCAAvB;AACF;;AAEAnc,iBAAerC,IAAf,EAA8C;AAC5C,WAAOsf,qCAAetf,KAAKG,IAApB,EAA0BH,KAAKI,KAA/B,CAAP;AACF;;AAEAkC,kBAAgBtC,IAAhB,EAA+C;AAC7C,WAAO8e,iCAAW9e,KAAKG,IAAhB,IAAwB,EAAxB,GAA6B,EAApC;AACF;;AAEAoC,gBAAcvC,IAAd,EAA6C;AAC3C,WAAOof,oCAAcpf,KAAKG,IAAnB,CAAP;AACF;;AAEAqC,kBAAwB;AACtB;AACA,WAAO,IAAP;AACF;;AAEAC,YAAU;AACR,WAAO,CAAC,IAAD,CAAP;AACF;;AAEA2O,mBAAiBpR,IAAjB,EAAiD4f,YAAjD,EAAgF;AAC9E;AACA,QAAIA,aAAazf,IAAb,KAAsBH,KAAKG,IAA/B,EAAqC;AACnC,UAAI2e,iCAAWc,aAAazf,IAAxB,KAAiC,CAAC2e,iCAAW9e,KAAKG,IAAhB,CAAlC,IAA2Dyf,aAAaxf,KAAb,GAAqB,CAApF,EACEJ,KAAKI,KAAL,GADF,KAEO,IAAI,CAAC0e,iCAAWc,aAAazf,IAAxB,CAAD,IAAkC2e,iCAAW9e,KAAKG,IAAhB,CAAlC,IAA2Dyf,aAAaxf,KAAb,GAAqB,CAApF,EACLJ,KAAKI,KAAL;AAEH;AACH;;;AAtEA,qEAAa,QAAb;;;AADW;ACjIb;;;;;;;;;;;AAYA;AACA;;;AAMA,MAAMyf,uCAAiB,OAAvB;AACA,MAAMC,qCAAe,OAArB,C,CAEA;AACA;;AACA,MAAMC,2CAAqB,IAA3B;;AAEA,SAASC,mCAAT,CAAuBrD,KAAvB,EAAsCxc,IAAtC,EAAoDC,KAApD,EAAmEC,GAAnE,EAAwF;AACtF,SACEsc,MAAwB;AAAxB,IACE,MAAMxc,IADR,CACwB;AADxB,IAEEN,KAAKC,KAAL,CAAWK,OAAO,CAAlB,CAFF,CAEwB;AAFxB,IAGE,MAAMC,QAAQ,CAAd,CAAsB;AAAtB,GAHF,GAIEC,GAJF,GAIQ,CALV,CAK0B;AAL1B;AAOF;;AAEA,SAAS4f,mCAAT,CAAuBtD,KAAvB,EAAsCpb,EAAtC,EAAkD;AAChD,MAAIpB,OAAON,KAAKC,KAAL,CAAW,KAAMyB,KAAKob,KAAX,IAAqB,IAAhC,CAAX;AACA,MAAIvc,QAAQ,IAAIP,KAAKC,KAAL,CAAW,CAACyB,KAAKye,oCAAcrD,KAAd,EAAqBxc,IAArB,EAA2B,CAA3B,EAA8B,CAA9B,CAAN,IAA0C,EAArD,CAAhB;AACA,MAAIE,MAAMkB,KAAK,CAAL,GAASye,oCAAcrD,KAAd,EAAqBxc,IAArB,EAA2BC,KAA3B,EAAkC,CAAlC,CAAnB;AACA,SAAO,CAACD,IAAD,EAAOC,KAAP,EAAcC,GAAd,CAAP;AACF;;AAEA,SAAS6f,gCAAT,CAAoB/f,IAApB,EAAkC;AAChC,SAAON,KAAKC,KAAL,CAAWK,IAAC,GAAO,CAAR,GAAa,CAAxB,CAAP;AACF;;AAEA,SAASggB,oCAAT,CAAwBhgB,IAAxB,EAAsCC,KAAtC,EAAqD;AACnD;AACA;AACA;AACA;AACA;AACA,MAAIA,QAAQ,EAAR,KAAe,CAAnB,EACE;AACA,WAAO,EAAP,CAFF,KAIE;AACA,WAAO8f,iCAAW/f,IAAX,IAAmB,CAA1B;AAEJ;;AAOO,MAAMigB,yCAAN,CAAM;AAGX9e,gBAAcC,EAAd,EAAwC;AACtC,QAAI,CAACpB,IAAD,EAAOC,KAAP,EAAcC,GAAd,IAAqB4f,oCAAcJ,oCAAd,EAA8Bte,EAA9B,CAAzB;AACA,QAAItB,MAAM,IAAV;;AACA,QAAIE,QAAQ,CAAZ,EAAe;AACbF,YAAM,IAAN;AACAE,cAAQ4f,wCAAR;AACD;;AAED,WAAO,KAAI,4CAAJ,EAAiB,IAAjB,EAAuB9f,GAAvB,EAA4BE,IAA5B,EAAkCC,KAAlC,EAAyCC,GAAzC,CAAP;AACF;;AAEA+B,cAAYpC,IAAZ,EAAmC;AACjC,QAAIG,OAAOH,KAAKG,IAAhB;AACA,QAAIH,KAAKC,GAAL,KAAa,IAAjB,EACEE,QAAQ4f,wCAAR;AAGF,WAAOC,oCAAcH,oCAAd,EAA8B1f,IAA9B,EAAoCH,KAAKI,KAAzC,EAAgDJ,KAAKK,GAArD,CAAP;AACF;;AAEAgC,iBAAerC,IAAf,EAA8C;AAC5C,WAAOmgB,qCAAengB,KAAKG,IAApB,EAA0BH,KAAKI,KAA/B,CAAP;AACF;;AAEAkC,oBAA0B;AACxB,WAAO,EAAP;AACF;;AAEAC,gBAAcvC,IAAd,EAA6C;AAC3C,WAAO,MAAMkgB,iCAAWlgB,KAAKG,IAAhB,CAAb;AACF;;AAEAqC,gBAAcxC,IAAd,EAA6C;AAC3C;AACA;AACA;AACA,WAAOA,KAAKC,GAAL,KAAa,IAAb,GAAoB,IAApB,GAA2B,IAAlC;AACF;;AAEAwC,YAAU;AACR,WAAO,CAAC,IAAD,EAAO,IAAP,CAAP;AACF;;;AA3CA,qEAAa,UAAb;;;AADW;;AAmDN,MAAM4d,yCAAN,SAAwCD,yCAAxC,CAAwC;AAG7C9e,gBAAcC,EAAd,EAAwC;AACtC,QAAI,CAACpB,IAAD,EAAOC,KAAP,EAAcC,GAAd,IAAqB4f,oCAAcJ,oCAAd,EAA8Bte,EAA9B,CAAzB;AACApB,YAAQ4f,wCAAR;AACA,WAAO,KAAI,4CAAJ,EAAiB,IAAjB,EAAuB,IAAvB,EAA6B5f,IAA7B,EAAmCC,KAAnC,EAA0CC,GAA1C,CAAP;AACF;;AAEAoC,YAAU;AACR,WAAO,CAAC,IAAD,CAAP;AACF;;AAEAD,kBAAwB;AACtB;AACA,WAAO,IAAP;AACF;;;;AAfA,qEAAa,SAAb,EAAwB;AAAxB;;;AAD6C;;AAwBxC,MAAM8d,yCAAN,SAA6BF,yCAA7B,CAA6B;AAGlC9e,gBAAcC,EAAd,EAAwC;AACtC,QAAI,CAACpB,IAAD,EAAOC,KAAP,EAAcC,GAAd,IAAqB4f,oCAAcH,kCAAd,EAA4Bve,EAA5B,CAAzB;AACA,QAAItB,MAAM,IAAV;;AACA,QAAIE,QAAQ,CAAZ,EAAe;AACbF,YAAM,KAAN;AACAE,aAAO,IAAIA,IAAX;AACD;;AAED,WAAO,KAAI,4CAAJ,EAAiB,IAAjB,EAAuBF,GAAvB,EAA4BE,IAA5B,EAAkCC,KAAlC,EAAyCC,GAAzC,CAAP;AACF;;AAEA+B,cAAYpC,IAAZ,EAAmC;AACjC,QAAIG,OAAOH,KAAKG,IAAhB;AACA,QAAIH,KAAKC,GAAL,KAAa,KAAjB,EACEE,OAAO,IAAIA,IAAX;AAGF,WAAO6f,oCAAcF,kCAAd,EAA4B3f,IAA5B,EAAkCH,KAAKI,KAAvC,EAA8CJ,KAAKK,GAAnD,CAAP;AACF;;AAEAgC,iBAAerC,IAAf,EAA8C;AAC5C,QAAIG,OAAOH,KAAKG,IAAhB;AACA,QAAIH,KAAKC,GAAL,KAAa,KAAjB,EACEE,OAAO,IAAIA,IAAX;AAGF,WAAOggB,qCAAehgB,IAAf,EAAqBH,KAAKI,KAA1B,CAAP;AACF;;AAEAsC,eAAa1C,IAAb,EAA6C;AAC3C,WAAOA,KAAKC,GAAL,KAAa,KAApB;AACF;;AAEA0C,cAAY3C,IAAZ,EAA4C;AAC1C,QAAIA,KAAKG,IAAL,IAAa,CAAjB,EAAoB;AAClBH,WAAKC,GAAL,GAAWD,KAAKC,GAAL,KAAa,KAAb,GAAqB,IAArB,GAA4B,KAAvC;AACAD,WAAKG,IAAL,GAAY,IAAIH,KAAKG,IAArB;AACD;AACH;;AAEAsC,YAAU;AACR,WAAO,CAAC,KAAD,EAAQ,IAAR,CAAP;AACF;;AAEAD,gBAAcxC,IAAd,EAA6C;AAC3C;AACA;AACA;AACA,WAAOA,KAAKC,GAAL,KAAa,KAAb,GAAqB,IAArB,GAA4B,IAAnC;AACF;;;;AAnDA,qEAAa,QAAb;;;AADkC;AC9IpC;;;;;;;;;;;;;AAwBO,SAASsgB,yCAAT,CAAwBC,IAAxB,EAAgD;AACrD,UAAQA,IAAR;AACE,SAAK,UAAL;AACE,aAAO,KAAI,4CAAJ,GAAP;;AACF,SAAK,UAAL;AACE,aAAO,KAAI,4CAAJ,GAAP;;AACF,SAAK,SAAL;AACE,aAAO,KAAI,4CAAJ,GAAP;;AACF,SAAK,QAAL;AACE,aAAO,KAAI,4CAAJ,GAAP;;AACF,SAAK,QAAL;AACE,aAAO,KAAI,2CAAJ,GAAP;;AACF,SAAK,QAAL;AACE,aAAO,KAAI,4CAAJ,GAAP;;AACF,SAAK,eAAL;AACE,aAAO,KAAI,4CAAJ,GAAP;;AACF,SAAK,cAAL;AACE,aAAO,KAAI,4CAAJ,GAAP;;AACF,SAAK,kBAAL;AACE,aAAO,KAAI,4CAAJ,GAAP;;AACF,SAAK,UAAL;AACE,aAAO,KAAI,4CAAJ,GAAP;;AACF,SAAK,SAAL;AACE,aAAO,KAAI,4CAAJ,GAAP;;AACF,SAAK,KAAL;AACE,aAAO,KAAI,4CAAJ,GAAP;;AACF,SAAK,SAAL;AACA;AACE,aAAO,KAAI,4CAAJ,GAAP;AA3BJ;AA6BF;ACtDA;;;;;;;;;;;;;AAYA,IAAIC,uCAAiB,IAAIjV,GAAJ,EAArB;;AAWO,MAAMkV,yCAAN,CAAM;AAUX;AACAC,SAAO7S,KAAP,EAA4B;AAC1B,WAAO,KAAKN,SAAL,CAAemT,MAAf,CAAsB7S,KAAtB,CAAP;AACF;AAEA;;;AACAH,gBAAcG,KAAd,EAAsD;AACpD,WAAO,KAAKN,SAAL,CAAeG,aAAf,CAA6BG,KAA7B,CAAP;AACF;AAEA;;;AACA8S,cAAYlU,KAAZ,EAAyBC,GAAzB,EAA4C;AAC1C;AACA,QAAI,OAAO,KAAKa,SAAL,CAAeoT,WAAtB,KAAsC,UAA1C,EACE;AACA,aAAO,KAAKpT,SAAL,CAAeoT,WAAf,CAA2BlU,KAA3B,EAAkCC,GAAlC,CAAP;AAGF,QAAIA,MAAMD,KAAV,EACE,MAAM,IAAIyC,UAAJ,CAAe,gCAAf,CAAN,CARwC,CAW1C;;AACA,WAAQ,GAAE,KAAK3B,SAAL,CAAemT,MAAf,CAAsBjU,KAAtB,CAA6B,MAAK,KAAKc,SAAL,CAAemT,MAAf,CAAsBhU,GAAtB,CAA2B,EAAvE;AACF;AAEA;;;AACAkU,qBAAmBnU,KAAnB,EAAgCC,GAAhC,EAAkE;AAChE;AACA,QAAI,OAAO,KAAKa,SAAL,CAAeqT,kBAAtB,KAA6C,UAAjD,EACE;AACA,aAAO,KAAKrT,SAAL,CAAeqT,kBAAf,CAAkCnU,KAAlC,EAAyCC,GAAzC,CAAP;AAGF,QAAIA,MAAMD,KAAV,EACE,MAAM,IAAIyC,UAAJ,CAAe,gCAAf,CAAN;AAGF,QAAI2R,aAAa,KAAKtT,SAAL,CAAeG,aAAf,CAA6BjB,KAA7B,CAAjB;AACA,QAAIqU,WAAW,KAAKvT,SAAL,CAAeG,aAAf,CAA6BhB,GAA7B,CAAf;AACA,WAAO,IACFmU,WAAWE,GAAX,CAAeC,MAAM,EAAC,GAAGA,CAAJ;AAAOC,cAAQ;AAAf,KAAN,CAAf,CADE,EAEL;AAACrT,YAAM,SAAP;AAAkBC,aAAO,KAAzB;AAAgCoT,cAAQ;AAAxC,KAFK,KAGFH,SAASC,GAAT,CAAaC,MAAM,EAAC,GAAGA,CAAJ;AAAOC,cAAQ;AAAf,KAAN,CAAb,CAHE,CAAP;AAKF;AAEA;;;AACAtW,oBAAiD;AAC/C,QAAIA,kBAAkB,KAAK4C,SAAL,CAAe5C,eAAf,EAAtB;;AACA,QAAIuW,iDAAJ,EAAiC;AAC/B,UAAI,CAAC,KAAKC,iBAAV,EACE,KAAKA,iBAAL,GAAyBC,2CAAqBzW,gBAAgBrB,MAArC,EAA6C,KAAK8J,OAAlD,CAAzB;AAEFzI,sBAAgBoJ,SAAhB,GAA4B,KAAKoN,iBAAjC;AACAxW,sBAAgB6C,MAAhB,GAAyB,KAAK2T,iBAAL,KAA2B,KAA3B,IAAoC,KAAKA,iBAAL,KAA2B,KAAxF;AACD,KAR8C,CAU/C;AACA;;;AACA,QAAIxW,gBAAgB1K,QAAhB,KAA6B,qBAAjC,EACE0K,gBAAgB1K,QAAhB,GAA2B,SAA3B;AAGF,WAAO0K,eAAP;AACF;;AAtEAmO,cAAYxP,MAAZ,EAAsE;AAAA,QAA1C8J,OAA0C,uEAAJ,EAAI;AACpE,SAAK7F,SAAL,GAAiB8T,6CAAuB/X,MAAvB,EAA+B8J,OAA/B,CAAjB;AACA,SAAKA,OAAL,GAAeA,OAAf;AACF;;AARW,C,CA8Eb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,MAAMkO,0CAAoB;AACxBC,QAAM;AACJ;AACAC,QAAI;AAFA,GADkB;AAKxBC,SAAO;AALiB,CAA1B;;AAUA,SAASJ,4CAAT,CAAgC/X,MAAhC,EAA+G;AAAA,MAA/D8J,OAA+D,uEAAzB,EAAyB;;AAC7G;AACA;AACA,MAAI,OAAOA,QAAQ5F,MAAf,KAA0B,SAA1B,IAAuCkU,8CAA3C,EAAqE;AACnEtO,cAAU,EAAC,GAAGA;AAAJ,KAAV;AACA,QAAIuO,OAAOL,uCAAiB,CAAC5K,OAAOtD,QAAQ5F,MAAf,CAAD,CAAjB,CAA0ClE,OAAOyC,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAA1C,CAAX;AACA,QAAI6V,mBAAmBxO,QAAQ5F,MAAR,GAAiB,KAAjB,GAAyB,KAAhD;AACA4F,YAAQW,SAAR,GAAoB4N,0CAAQC,gBAA5B;AACA,WAAOxO,QAAQ5F,MAAf;AACD;;AAED,MAAIqU,WAAWvY,UAAU8J,UAAU0O,OAAOC,OAAP,CAAe3O,OAAf,EAAwB4O,IAAxB,CAA6B,CAACxZ,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAR,GAAc,EAAd,GAAmB,CAA1D,EAA6DwZ,IAA7D,EAAV,GAAgF,EAA1F,CAAf;AACA,MAAIzB,qCAAe0B,GAAf,CAAmBL,QAAnB,CAAJ,EACE,OAAOrB,qCAAe7U,GAAf,CAAmBkW,QAAnB,CAAP;AAGF,MAAIM,kBAAkB,IAAI1X,KAAKC,cAAT,CAAwBpB,MAAxB,EAAgC8J,OAAhC,CAAtB;AACAoN,uCAAe3U,GAAf,CAAmBgW,QAAnB,EAA6BM,eAA7B;AACA,SAAOA,eAAP;AACF;;AAEA,IAAIC,gDAAmC,IAAvC;;AACA,SAASV,4CAAT,GAAkC;AAChC,MAAIU,iDAA2B,IAA/B,EACEA,gDAA0B,IAAI3X,KAAKC,cAAT,CAAwB,OAAxB,EAAiC;AACzDpK,UAAM,SADmD;AAEzDkN,YAAQ;AAFiD,GAAjC,EAGvBkT,MAHuB,CAGhB,IAAI9W,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,CAHgB,MAGa,IAHvC;AAMF,SAAOwY,6CAAP;AACF;;AAEA,IAAIC,mDAAsC,IAA1C;;AACA,SAASnB,+CAAT,GAAqC;AACnC,MAAImB,oDAA8B,IAAlC,EACEA,mDAA6B,IAAK5X,KAAKC,cAAV,CAAyB,IAAzB,EAA+B;AAC1DpK,UAAM,SADoD;AAE1DkN,YAAQ;AAFkD,GAA/B,EAG1B7C,eAH0B,GAG0BoJ,SAH1B,KAGwC,KAHrE;AAMF,SAAOsO,gDAAP;AACF;;AAEA,SAASjB,0CAAT,CAA8B9X,MAA9B,EAA8C8J,OAA9C,EAAmF;AACjF,MAAI,CAACA,QAAQkP,SAAT,IAAsB,CAAClP,QAAQ9S,IAAnC,EACE,OAAOiiB,SAAP,CAF+E,CAKjF;AACA;;AACAjZ,WAASA,OAAOyO,OAAP,CAAe,wBAAf,EAAyC,EAAzC,CAAT;AACAzO,YAAU,CAACA,OAAO4M,QAAP,CAAgB,KAAhB,IAAyB,EAAzB,GAA8B,IAA/B,IAAuC,UAAjD;AACA,MAAI3I,YAAY8T,6CAAuB/X,MAAvB,EAA+B,EAC7C,GAAG8J,OAD0C;AAE7CjK,cAAUoZ,SAFmC,CAEzB;;AAFyB,GAA/B,CAAhB;AAKA,MAAIpT,MAAMqT,SAASjV,UAAUG,aAAV,CAAwB,IAAI9D,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,CAAxB,EAAiD6Y,IAAjD,CAAsDzB,KAAKA,EAAEpT,IAAF,KAAW,MAAtE,EAA8EC,KAAvF,EAA8F,EAA9F,CAAV;AACA,MAAIuB,MAAMoT,SAASjV,UAAUG,aAAV,CAAwB,IAAI9D,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,EAAqB,EAArB,CAAxB,EAAkD6Y,IAAlD,CAAuDzB,KAAKA,EAAEpT,IAAF,KAAW,MAAvE,EAA+EC,KAAxF,EAA+F,EAA/F,CAAV;AAEA,MAAIsB,QAAQ,CAAR,IAAaC,QAAQ,EAAzB,EACE,OAAO,KAAP;AAGF,MAAID,QAAQ,EAAR,IAAcC,QAAQ,EAA1B,EACE,OAAO,KAAP;AAGF,MAAID,QAAQ,CAAR,IAAaC,QAAQ,EAAzB,EACE,OAAO,KAAP;AAGF,MAAID,QAAQ,EAAR,IAAcC,QAAQ,EAA1B,EACE,OAAO,KAAP;AAGF,QAAM,IAAIqE,KAAJ,CAAU,8BAAV,CAAN;AACF","names":["$2b4dce13dd5a17fa$export$842a2cf37af977e1","amount","numerator","Math","floor","$2b4dce13dd5a17fa$export$784d13d8ee351f07","date","era","calendar","year","month","day","$2b4dce13dd5a17fa$export$27fa0172ae2644b3","hour","minute","second","millisecond","$3b62074eb05584b2$var$EPOCH","$3b62074eb05584b2$export$f297eb839006d339","$3b62074eb05584b2$export$c36e0ecb2d4fa69d","y1","monthOffset","$3b62074eb05584b2$export$553d7fa8e3805fc0","$3b62074eb05584b2$export$4475b7e617eb123c","$3b62074eb05584b2$var$daysInMonth","standard","leapyear","$3b62074eb05584b2$export$80ee6245ec4f29ec","fromJulianDay","jd","jd0","depoch","quadricent","dqc","cent","dcent","quad","dquad","yindex","extendedYear","yearDay","leapAdj","toJulianDay","getDaysInMonth","getMonthsInYear","getDaysInYear","getYearsInEra","getEras","isInverseEra","balanceDate","$2fe286d2fb449abb$export$7a5acbd77d414bd9","AD","AE","AF","AI","AL","AM","AN","AT","AX","AZ","BA","BE","BG","BH","BM","BN","BY","CH","CL","CM","CR","CY","CZ","DE","DJ","DK","DZ","EC","EE","EG","ES","FI","FJ","FO","FR","GB","GE","GF","GP","GR","HR","HU","IE","IQ","IR","IS","IT","JO","KG","KW","KZ","LB","LI","LK","LT","LU","LV","LY","MC","MD","ME","MK","MN","MQ","MV","MY","NL","NO","NZ","OM","PL","QA","RE","RO","RS","RU","SD","SE","SI","SK","SM","SY","TJ","TM","TR","UA","UY","UZ","VA","VN","XK","$14e0f24ef4ac5c92$export$ea39ec197993aef0","a","b","$14e0f24ef4ac5c92$export$a18c89cbd24170ff","$14e0f24ef4ac5c92$export$a5a3b454ada2268e","$14e0f24ef4ac5c92$export$5841f9eb9773f25f","$14e0f24ef4ac5c92$export$f91e89d3d0406102","$14e0f24ef4ac5c92$export$91b62ebf2ba703ee","identifier","$14e0f24ef4ac5c92$export$5a8da0c44a3afdf2","$14e0f24ef4ac5c92$export$ea840f5a6dda8147","$14e0f24ef4ac5c92$export$629b0a497aa65267","timeZone","$14e0f24ef4ac5c92$export$d0bdf45af03a6ea3","$14e0f24ef4ac5c92$export$2061056d06d7cdf7","locale","julian","dayOfWeek","ceil","$14e0f24ef4ac5c92$var$getWeekStart","$14e0f24ef4ac5c92$export$461939dd4422153","Date","now","$14e0f24ef4ac5c92$export$68781ddf31c0090f","$14e0f24ef4ac5c92$export$c19a80a9721b80f6","$14e0f24ef4ac5c92$var$timeToMs","$14e0f24ef4ac5c92$export$126c91c941de7e","ms","tomorrow","add","days","tomorrowMs","$14e0f24ef4ac5c92$var$localTimeZone","$14e0f24ef4ac5c92$export$aa8b41735afcabd2","Intl","DateTimeFormat","resolvedOptions","subtract","$14e0f24ef4ac5c92$export$a2258d9c4118825c","months","$14e0f24ef4ac5c92$export$8b7aa55c66d5569e","$14e0f24ef4ac5c92$export$5412ac11713b72ad","getMinimumMonthInYear","$14e0f24ef4ac5c92$export$b2f4953d301981d5","getMinimumDayInMonth","$14e0f24ef4ac5c92$export$42c81a444fbfb5d4","$14e0f24ef4ac5c92$export$ef8b6d9133084f4e","$14e0f24ef4ac5c92$var$cachedRegions","Map","$14e0f24ef4ac5c92$var$getRegion","Locale","region","get","maximize","set","part","split","$14e0f24ef4ac5c92$export$ccc1b2479e7dd654","$14e0f24ef4ac5c92$export$5c333a116e949cdd","compare","$14e0f24ef4ac5c92$export$a75f2bff57811055","$14e0f24ef4ac5c92$var$WEEKEND_DATA","IL","SA","YE","$14e0f24ef4ac5c92$export$618d60ea299da42","start","end","$14e0f24ef4ac5c92$export$ee9d87258e1d19ed","$11d87f3f76e88657$export$bd4fb2bc8bb06fb","$11d87f3f76e88657$export$b4a036af3fc0b032","$11d87f3f76e88657$var$epochFromParts","setUTCHours","setUTCFullYear","getTime","$11d87f3f76e88657$export$59c99f3515d3493f","getTimezoneOffset","$11d87f3f76e88657$var$getTimeZoneParts","utc","$11d87f3f76e88657$var$formattersByTimeZone","formatter","hour12","parts","formatToParts","namedParts","type","value","$11d87f3f76e88657$var$DAYMILLIS","$11d87f3f76e88657$export$136f38efe7caf549","earlier","later","$11d87f3f76e88657$var$getValidWallTimes","found","filter","absolute","$11d87f3f76e88657$var$isValidWallTime","$11d87f3f76e88657$export$5107c82f94518f5c","disambiguation","dateTime","$11d87f3f76e88657$export$b21e0b124e224484","date1","setFullYear","setHours","offsetBefore","offsetAfter","valid","length","RangeError","min","max","$11d87f3f76e88657$export$e67a095c620b86fe","$11d87f3f76e88657$export$1b96692a1ba042ac","offset","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","$11d87f3f76e88657$export$e57ff100d91bd4b9","$11d87f3f76e88657$export$d7f92bcd3596b086","$11d87f3f76e88657$export$93522d1a439f3617","$11d87f3f76e88657$export$6f4d78149f3f53ac","$11d87f3f76e88657$export$4d0393e732857be5","time","$11d87f3f76e88657$export$d33f79e3ffc3dc83","calendarDate","copy","$11d87f3f76e88657$export$84c95a83c799e074","$11d87f3f76e88657$export$538b00033cc11c75","$11d87f3f76e88657$export$83aac07b4c37b25","$11d87f3f76e88657$export$d9b67bc93c097491","$735220c2d4774dd3$var$ONE_HOUR","$735220c2d4774dd3$export$e16d8520af44a096","duration","mutableDate","$735220c2d4774dd3$var$addTimeFields","$735220c2d4774dd3$var$addYears","years","balanceYearMonth","$735220c2d4774dd3$var$balanceYearMonth","$735220c2d4774dd3$var$constrainMonthDay","weeks","$735220c2d4774dd3$var$balanceDay","maxYear","_mutableDate_calendar","maxMonth","_date_calendar","monthsInYear","$735220c2d4774dd3$export$c4e2ecac49351ef2","constrainDate","$735220c2d4774dd3$export$3e2544e88a25bff8","inverseDuration","key","$735220c2d4774dd3$export$4e2d2ead65e5f7e3","$735220c2d4774dd3$export$adaa4cf7ef1b65be","fields","$735220c2d4774dd3$export$e5d5e1c1822b6e56","mutableValue","$735220c2d4774dd3$export$7555de1e070510cb","$735220c2d4774dd3$var$balanceTime","$735220c2d4774dd3$var$nonNegativeMod","result","hours","minutes","seconds","milliseconds","$735220c2d4774dd3$export$7ed87b6bc2506470","res","$735220c2d4774dd3$export$fe34d3a381cd7501","$735220c2d4774dd3$export$d52ced6badfb9a4c","field","options","mutable","eras","eraIndex","indexOf","Error","$735220c2d4774dd3$var$cycleValue","round","_mutable_calendar","Infinity","$735220c2d4774dd3$export$dd02b3e0007dfe28","hourCycle","isPM","sign","div","abs","$735220c2d4774dd3$export$96b1d28349274637","res1","$735220c2d4774dd3$export$6814caac34ca03c7","$735220c2d4774dd3$export$9a297d111fc86b79","plainDateTime","minDate","minAbsolute","maxDate","maxAbsolute","pop","remainder","ms1","$735220c2d4774dd3$export$31b5430eb18be4f8","$fae977aafc393c5c$var$TIME_RE","$fae977aafc393c5c$var$DATE_RE","$fae977aafc393c5c$var$DATE_TIME_RE","$fae977aafc393c5c$var$ZONED_DATE_TIME_RE","$fae977aafc393c5c$var$ABSOLUTE_RE","$fae977aafc393c5c$var$DATE_TIME_DURATION_RE","$fae977aafc393c5c$var$requiredDurationTimeGroups","$fae977aafc393c5c$var$requiredDurationGroups","$fae977aafc393c5c$export$c9698ec7f05a07e1","m","match","$fae977aafc393c5c$var$parseNumber","$fae977aafc393c5c$export$6b862160d295c8e","$fae977aafc393c5c$export$588937bcd60ade55","$fae977aafc393c5c$export$fd7893f06e92a6a4","_m_","absolutes","includes","$fae977aafc393c5c$var$offsetToString","$fae977aafc393c5c$export$4223de14708adc63","$fae977aafc393c5c$export$5adfdab05168c219","$fae977aafc393c5c$export$8e384432362ed0f0","val","Number","$fae977aafc393c5c$export$f59dee82248f5ad4","String","padStart","slice","$fae977aafc393c5c$export$60dfd74aa96791bd","gregorianDate","offsetHours","offsetMinutes","$fae977aafc393c5c$export$bf79f1ebf4b18792","$fae977aafc393c5c$export$ecae829bb3747ea6","_match_groups","_match_groups1","_match_groups2","_match_groups3","_match_groups4","_match_groups5","_match_groups6","_match_groups7","_match_groups8","parseDurationGroup","group","isNegative","replace","groups","negative","hasRequiredGroups","some","durationStringIncludesTime","hasRequiredDurationTimeGroups","$35ea8db9cb2ccb90$var$shiftArgs","args","shift","$35ea8db9cb2ccb90$var$_type","$35ea8db9cb2ccb90$export$99faa760c7908e4f","cycle","toDate","toString","constructor","$35ea8db9cb2ccb90$var$_type1","$35ea8db9cb2ccb90$export$680ea196effce5f","$35ea8db9cb2ccb90$var$_type2","$35ea8db9cb2ccb90$export$ca871e8dbb80966f","$35ea8db9cb2ccb90$var$_type3","$35ea8db9cb2ccb90$export$d3b7288e7994edea","toAbsoluteString","toISOString","$62225008020f0a13$var$ERA_START_DATES","$62225008020f0a13$var$ERA_END_DATES","$62225008020f0a13$var$ERA_ADDENDS","$62225008020f0a13$var$ERA_NAMES","$62225008020f0a13$var$findEraFromGregorianDate","idx","findIndex","$62225008020f0a13$var$toGregorian","eraAddend","$62225008020f0a13$export$b746ab2b60cdffbf","endYear","endMonth","endDay","startMonth","startDay","cur","next","$62225008020f0a13$var$getMinimums","$8d73d47422ca7302$var$BUDDHIST_ERA_START","$8d73d47422ca7302$export$42d20a78301dee44","$8d73d47422ca7302$var$toGregorian","$5f31bd6f0c8940b2$var$TAIWAN_ERA_START","$5f31bd6f0c8940b2$var$gregorianYear","$5f31bd6f0c8940b2$var$gregorianToTaiwan","y","$5f31bd6f0c8940b2$export$65e01080afcb0799","$5f31bd6f0c8940b2$var$toGregorian","$f3ed2e4472ae7e25$var$PERSIAN_EPOCH","$f3ed2e4472ae7e25$var$isLeapYear","y0","$f3ed2e4472ae7e25$var$persianToJulianDay","$f3ed2e4472ae7e25$export$37fccdbfd14c5939","d0","n2820","d1","y2820","yDay","$82c358003bdda0a8$var$INDIAN_ERA_START","$82c358003bdda0a8$var$INDIAN_YEAR_START","$82c358003bdda0a8$export$39f31c639fa15726","indianYear","leapMonth","indianMonth","indianDay","mDay","$f2f3e0e3a817edbd$var$CIVIL_EPOC","$f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC","$f2f3e0e3a817edbd$var$UMALQURA_YEAR_START","$f2f3e0e3a817edbd$var$UMALQURA_YEAR_END","$f2f3e0e3a817edbd$var$UMALQURA_START_DAYS","$f2f3e0e3a817edbd$var$islamicToJulianDay","epoch","$f2f3e0e3a817edbd$var$julianDayToIslamic","$f2f3e0e3a817edbd$var$isLeapYear","$f2f3e0e3a817edbd$export$2066795aadd37bfc","$f2f3e0e3a817edbd$export$37f0887f2f9d22f7","$f2f3e0e3a817edbd$var$UMALQURA_DATA","$f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH","$f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE","$f2f3e0e3a817edbd$var$umalquraYearStart","$f2f3e0e3a817edbd$var$umalquraMonthLength","mask","$f2f3e0e3a817edbd$var$umalquraMonthStart","i","$f2f3e0e3a817edbd$var$umalquraYearLength","$f2f3e0e3a817edbd$export$5baab4758c231076","startDays","endDays","d","yearLength","monthLength","Uint16Array","Uint8Array","from","atob","c","charCodeAt","buffer","Uint32Array","yearStart","$7c5f6fbf42389787$var$HEBREW_EPOCH","$7c5f6fbf42389787$var$HOUR_PARTS","$7c5f6fbf42389787$var$DAY_PARTS","$7c5f6fbf42389787$var$MONTH_DAYS","$7c5f6fbf42389787$var$MONTH_FRACT","$7c5f6fbf42389787$var$MONTH_PARTS","$7c5f6fbf42389787$var$isLeapYear","$7c5f6fbf42389787$var$hebrewDelay1","$7c5f6fbf42389787$var$hebrewDelay2","last","present","$7c5f6fbf42389787$var$startOfYear","$7c5f6fbf42389787$var$getDaysInYear","$7c5f6fbf42389787$var$getYearType","$7c5f6fbf42389787$var$getDaysInMonth","yearType","$7c5f6fbf42389787$export$ca405048b8fb5af","ys","dayOfYear","monthStart","previousDate","$b956b2d7a6cf451f$var$ETHIOPIC_EPOCH","$b956b2d7a6cf451f$var$COPTIC_EPOCH","$b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA","$b956b2d7a6cf451f$var$ceToJulianDay","$b956b2d7a6cf451f$var$julianDayToCE","$b956b2d7a6cf451f$var$getLeapDay","$b956b2d7a6cf451f$var$getDaysInMonth","$b956b2d7a6cf451f$export$26ba6eab5e20cd7d","$b956b2d7a6cf451f$export$d72e0c37005a4914","$b956b2d7a6cf451f$export$fe6243cbe1a4b7c1","$64244302c3013299$export$dd0bbc9b26defe37","name","$fb18d541ea1ad717$var$formatterCache","$fb18d541ea1ad717$export$ad991b66133851cf","format","formatRange","formatRangeToParts","startParts","endParts","map","p","source","$fb18d541ea1ad717$var$hasBuggyResolvedHourCycle","resolvedHourCycle","$fb18d541ea1ad717$var$getResolvedHourCycle","$fb18d541ea1ad717$var$getCachedDateFormatter","$fb18d541ea1ad717$var$hour12Preferences","true","ja","false","$fb18d541ea1ad717$var$hasBuggyHour12Behavior","pref","defaultHourCycle","cacheKey","Object","entries","sort","join","has","numberFormatter","$fb18d541ea1ad717$var$_hasBuggyHour12Behavior","$fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle","timeStyle","undefined","parseInt","find"],"sources":["/Users/vux/dev/react-project1/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/index.ts","/Users/vux/dev/react-project1/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/CalendarDate.ts","/Users/vux/dev/react-project1/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/manipulation.ts","/Users/vux/dev/react-project1/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/conversion.ts","/Users/vux/dev/react-project1/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/calendars/GregorianCalendar.ts","/Users/vux/dev/react-project1/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/utils.ts","/Users/vux/dev/react-project1/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/queries.ts","/Users/vux/dev/react-project1/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/weekStartData.ts","/Users/vux/dev/react-project1/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/string.ts","/Users/vux/dev/react-project1/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/calendars/JapaneseCalendar.ts","/Users/vux/dev/react-project1/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/calendars/BuddhistCalendar.ts","/Users/vux/dev/react-project1/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/calendars/TaiwanCalendar.ts","/Users/vux/dev/react-project1/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/calendars/PersianCalendar.ts","/Users/vux/dev/react-project1/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/calendars/IndianCalendar.ts","/Users/vux/dev/react-project1/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/calendars/IslamicCalendar.ts","/Users/vux/dev/react-project1/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/calendars/HebrewCalendar.ts","/Users/vux/dev/react-project1/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/calendars/EthiopicCalendar.ts","/Users/vux/dev/react-project1/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/createCalendar.ts","/Users/vux/dev/react-project1/node_modules/@internationalized/date/dist/packages/@internationalized/date/src/DateFormatter.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {\n  AnyCalendarDate,\n  AnyTime,\n  AnyDateTime,\n  Calendar,\n  DateDuration,\n  TimeDuration,\n  DateTimeDuration,\n  DateFields,\n  TimeFields,\n  DateField,\n  TimeField,\n  Disambiguation,\n  CycleOptions,\n  CycleTimeOptions\n} from './types';\n\nexport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nexport {GregorianCalendar} from './calendars/GregorianCalendar';\nexport {JapaneseCalendar} from './calendars/JapaneseCalendar';\nexport {BuddhistCalendar} from './calendars/BuddhistCalendar';\nexport {TaiwanCalendar} from './calendars/TaiwanCalendar';\nexport {PersianCalendar} from './calendars/PersianCalendar';\nexport {IndianCalendar} from './calendars/IndianCalendar';\nexport {IslamicCivilCalendar, IslamicTabularCalendar, IslamicUmalquraCalendar} from './calendars/IslamicCalendar';\nexport {HebrewCalendar} from './calendars/HebrewCalendar';\nexport {EthiopicCalendar, EthiopicAmeteAlemCalendar, CopticCalendar} from './calendars/EthiopicCalendar';\nexport {createCalendar} from './createCalendar';\nexport {toCalendarDate, toCalendarDateTime, toTime, toCalendar, toZoned, toTimeZone, toLocalTimeZone} from './conversion';\nexport {\n  isSameDay,\n  isSameMonth,\n  isSameYear,\n  isEqualDay,\n  isEqualMonth,\n  isEqualYear,\n  isToday,\n  getDayOfWeek,\n  now,\n  today,\n  getHoursInDay,\n  getLocalTimeZone,\n  startOfMonth,\n  startOfWeek,\n  startOfYear,\n  endOfMonth,\n  endOfWeek,\n  endOfYear,\n  getMinimumMonthInYear,\n  getMinimumDayInMonth,\n  getWeeksInMonth,\n  minDate,\n  maxDate,\n  isWeekend,\n  isWeekday\n} from './queries';\nexport {\n  parseDate,\n  parseDateTime,\n  parseTime,\n  parseAbsolute,\n  parseAbsoluteToLocal,\n  parseZonedDateTime,\n  parseDuration\n} from './string';\nexport {DateFormatter} from './DateFormatter';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {add, addTime, addZoned, constrain, constrainTime, cycleDate, cycleTime, cycleZoned, set, setTime, setZoned, subtract, subtractTime, subtractZoned} from './manipulation';\nimport {AnyCalendarDate, AnyTime, Calendar, CycleOptions, CycleTimeOptions, DateDuration, DateField, DateFields, DateTimeDuration, Disambiguation, TimeDuration, TimeField, TimeFields} from './types';\nimport {compareDate, compareTime} from './queries';\nimport {dateTimeToString, dateToString, timeToString, zonedDateTimeToString} from './string';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {toCalendarDateTime, toDate, toZoned, zonedToDate} from './conversion';\n\nfunction shiftArgs(args: any[]) {\n  let calendar: Calendar = typeof args[0] === 'object'\n    ? args.shift()\n    : new GregorianCalendar();\n\n  let era: string;\n  if (typeof args[0] === 'string') {\n    era = args.shift();\n  } else {\n    let eras = calendar.getEras();\n    era = eras[eras.length - 1];\n  }\n\n  let year = args.shift();\n  let month = args.shift();\n  let day = args.shift();\n\n  return [calendar, era, year, month, day];\n}\n\n/** A CalendarDate represents a date without any time components in a specific calendar system. */\nexport class CalendarDate {\n  // This prevents TypeScript from allowing other types with the same fields to match.\n  // i.e. a ZonedDateTime should not be be passable to a parameter that expects CalendarDate.\n  // If that behavior is desired, use the AnyCalendarDate interface instead.\n  // @ts-ignore\n  #type;\n  /** The calendar system associated with this date, e.g. Gregorian. */\n  public readonly calendar: Calendar;\n  /** The calendar era for this date, e.g. \"BC\" or \"AD\". */\n  public readonly era: string;\n  /** The year of this date within the era. */\n  public readonly year: number;\n  /**\n   * The month number within the year. Note that some calendar systems such as Hebrew\n   * may have a variable number of months per year. Therefore, month numbers may not\n   * always correspond to the same month names in different years.\n   */\n  public readonly month: number;\n  /** The day number within the month. */\n  public readonly day: number;\n\n  constructor(year: number, month: number, day: number);\n  constructor(era: string, year: number, month: number, day: number);\n  constructor(calendar: Calendar, year: number, month: number, day: number);\n  constructor(calendar: Calendar, era: string, year: number, month: number, day: number);\n  constructor(...args: any[]) {\n    let [calendar, era, year, month, day] = shiftArgs(args);\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n\n    constrain(this);\n  }\n\n  /** Returns a copy of this date. */\n  copy(): CalendarDate {\n    if (this.era) {\n      return new CalendarDate(this.calendar, this.era, this.year, this.month, this.day);\n    } else {\n      return new CalendarDate(this.calendar, this.year, this.month, this.day);\n    }\n  }\n\n  /** Returns a new `CalendarDate` with the given duration added to it. */\n  add(duration: DateDuration): CalendarDate {\n    return add(this, duration);\n  }\n\n  /** Returns a new `CalendarDate` with the given duration subtracted from it. */\n  subtract(duration: DateDuration): CalendarDate {\n    return subtract(this, duration);\n  }\n\n  /** Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields: DateFields): CalendarDate {\n    return set(this, fields);\n  }\n\n  /**\n   * Returns a new `CalendarDate` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */\n  cycle(field: DateField, amount: number, options?: CycleOptions): CalendarDate {\n    return cycleDate(this, field, amount, options);\n  }\n\n  /** Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone. */\n  toDate(timeZone: string): Date {\n    return toDate(this, timeZone);\n  }\n\n  /** Converts the date to an ISO 8601 formatted string. */\n  toString(): string {\n    return dateToString(this);\n  }\n\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  compare(b: AnyCalendarDate): number {\n    return compareDate(this, b);\n  }\n}\n\n/** A Time represents a clock time without any date components. */\nexport class Time {\n  // This prevents TypeScript from allowing other types with the same fields to match.\n  // @ts-ignore\n  #type;\n  /** The hour, numbered from 0 to 23. */\n  public readonly hour: number;\n  /** The minute in the hour. */\n  public readonly minute: number;\n  /** The second in the minute. */\n  public readonly second: number;\n  /** The millisecond in the second. */\n  public readonly millisecond: number;\n\n  constructor(\n    hour: number = 0,\n    minute: number = 0,\n    second: number = 0,\n    millisecond: number = 0\n  ) {\n    this.hour = hour;\n    this.minute = minute;\n    this.second = second;\n    this.millisecond = millisecond;\n    constrainTime(this);\n  }\n\n  /** Returns a copy of this time. */\n  copy(): Time {\n    return new Time(this.hour, this.minute, this.second, this.millisecond);\n  }\n\n  /** Returns a new `Time` with the given duration added to it. */\n  add(duration: TimeDuration) {\n    return addTime(this, duration);\n  }\n\n  /** Returns a new `Time` with the given duration subtracted from it. */\n  subtract(duration: TimeDuration) {\n    return subtractTime(this, duration);\n  }\n\n  /** Returns a new `Time` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields: TimeFields) {\n    return setTime(this, fields);\n  }\n\n  /**\n   * Returns a new `Time` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */\n  cycle(field: TimeField, amount: number, options?: CycleTimeOptions) {\n    return cycleTime(this, field, amount, options);\n  }\n\n  /** Converts the time to an ISO 8601 formatted string. */\n  toString() {\n    return timeToString(this);\n  }\n\n  /** Compares this time with another. A negative result indicates that this time is before the given one, and a positive time indicates that it is after. */\n  compare(b: AnyTime) {\n    return compareTime(this, b);\n  }\n}\n\n/** A CalendarDateTime represents a date and time without a time zone, in a specific calendar system. */\nexport class CalendarDateTime {\n  // This prevents TypeScript from allowing other types with the same fields to match.\n  // @ts-ignore\n  #type;\n  /** The calendar system associated with this date, e.g. Gregorian. */\n  public readonly calendar: Calendar;\n  /** The calendar era for this date, e.g. \"BC\" or \"AD\". */\n  public readonly era: string;\n  /** The year of this date within the era. */\n  public readonly year: number;\n  /**\n   * The month number within the year. Note that some calendar systems such as Hebrew\n   * may have a variable number of months per year. Therefore, month numbers may not\n   * always correspond to the same month names in different years.\n   */\n  public readonly month: number;\n  /** The day number within the month. */\n  public readonly day: number;\n  /** The hour in the day, numbered from 0 to 23. */\n  public readonly hour: number;\n  /** The minute in the hour. */\n  public readonly minute: number;\n  /** The second in the minute. */\n  public readonly second: number;\n  /** The millisecond in the second. */\n  public readonly millisecond: number;\n\n  constructor(year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(era: string, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(calendar: Calendar, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(calendar: Calendar, era: string, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(...args: any[]) {\n    let [calendar, era, year, month, day] = shiftArgs(args);\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    this.hour = args.shift() || 0;\n    this.minute = args.shift() || 0;\n    this.second = args.shift() || 0;\n    this.millisecond = args.shift() || 0;\n\n    constrain(this);\n  }\n\n  /** Returns a copy of this date. */\n  copy(): CalendarDateTime {\n    if (this.era) {\n      return new CalendarDateTime(this.calendar, this.era, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n    } else {\n      return new CalendarDateTime(this.calendar, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n    }\n  }\n\n  /** Returns a new `CalendarDateTime` with the given duration added to it. */\n  add(duration: DateTimeDuration): CalendarDateTime {\n    return add(this, duration);\n  }\n\n  /** Returns a new `CalendarDateTime` with the given duration subtracted from it. */\n  subtract(duration: DateTimeDuration): CalendarDateTime {\n    return subtract(this, duration);\n  }\n\n  /** Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields: DateFields & TimeFields): CalendarDateTime {\n    return set(setTime(this, fields), fields);\n  }\n\n  /**\n   * Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */\n  cycle(field: DateField | TimeField, amount: number, options?: CycleTimeOptions): CalendarDateTime {\n    switch (field) {\n      case 'era':\n      case 'year':\n      case 'month':\n      case 'day':\n        return cycleDate(this, field, amount, options);\n      default:\n        return cycleTime(this, field, amount, options);\n    }\n  }\n\n  /** Converts the date to a native JavaScript Date object in the given time zone. */\n  toDate(timeZone: string, disambiguation?: Disambiguation): Date {\n    return toDate(this, timeZone, disambiguation);\n  }\n\n  /** Converts the date to an ISO 8601 formatted string. */\n  toString(): string {\n    return dateTimeToString(this);\n  }\n\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  compare(b: CalendarDate | CalendarDateTime | ZonedDateTime): number {\n    let res = compareDate(this, b);\n    if (res === 0) {\n      return compareTime(this, toCalendarDateTime(b));\n    }\n\n    return res;\n  }\n}\n\n/** A ZonedDateTime represents a date and time in a specific time zone and calendar system. */\nexport class ZonedDateTime {\n  // This prevents TypeScript from allowing other types with the same fields to match.\n  // @ts-ignore\n  #type;\n  /** The calendar system associated with this date, e.g. Gregorian. */\n  public readonly calendar: Calendar;\n  /** The calendar era for this date, e.g. \"BC\" or \"AD\". */\n  public readonly era: string;\n  /** The year of this date within the era. */\n  public readonly year: number;\n  /**\n   * The month number within the year. Note that some calendar systems such as Hebrew\n   * may have a variable number of months per year. Therefore, month numbers may not\n   * always correspond to the same month names in different years.\n   */\n  public readonly month: number;\n  /** The day number within the month. */\n  public readonly day: number;\n  /** The hour in the day, numbered from 0 to 23. */\n  public readonly hour: number;\n  /** The minute in the hour. */\n  public readonly minute: number;\n  /** The second in the minute. */\n  public readonly second: number;\n  /** The millisecond in the second. */\n  public readonly millisecond: number;\n  /** The IANA time zone identifier that this date and time is represented in. */\n  public readonly timeZone: string;\n  /** The UTC offset for this time, in milliseconds. */\n  public readonly offset: number;\n\n  constructor(year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(era: string, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(calendar: Calendar, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(calendar: Calendar, era: string, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(...args: any[]) {\n    let [calendar, era, year, month, day] = shiftArgs(args);\n    let timeZone = args.shift();\n    let offset = args.shift();\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    this.timeZone = timeZone;\n    this.offset = offset;\n    this.hour = args.shift() || 0;\n    this.minute = args.shift() || 0;\n    this.second = args.shift() || 0;\n    this.millisecond = args.shift() || 0;\n\n    constrain(this);\n  }\n\n  /** Returns a copy of this date. */\n  copy(): ZonedDateTime {\n    if (this.era) {\n      return new ZonedDateTime(this.calendar, this.era, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);\n    } else {\n      return new ZonedDateTime(this.calendar, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);\n    }\n  }\n\n  /** Returns a new `ZonedDateTime` with the given duration added to it. */\n  add(duration: DateTimeDuration) {\n    return addZoned(this, duration);\n  }\n\n  /** Returns a new `ZonedDateTime` with the given duration subtracted from it. */\n  subtract(duration: DateTimeDuration) {\n    return subtractZoned(this, duration);\n  }\n\n  /** Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields: DateFields & TimeFields, disambiguation?: Disambiguation) {\n    return setZoned(this, fields, disambiguation);\n  }\n\n  /**\n   * Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */\n  cycle(field: DateField | TimeField, amount: number, options?: CycleTimeOptions) {\n    return cycleZoned(this, field, amount, options);\n  }\n\n  /** Converts the date to a native JavaScript Date object. */\n  toDate() {\n    return zonedToDate(this);\n  }\n\n   /** Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier. */\n  toString() {\n    return zonedDateTimeToString(this);\n  }\n\n   /** Converts the date to an ISO 8601 formatted string in UTC. */\n  toAbsoluteString() {\n    return this.toDate().toISOString();\n  }\n\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  compare(b: CalendarDate | CalendarDateTime | ZonedDateTime) {\n    // TODO: Is this a bad idea??\n    return this.toDate().getTime() - toZoned(b, this.timeZone).toDate().getTime();\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AnyCalendarDate, AnyDateTime, AnyTime, CycleOptions, CycleTimeOptions, DateDuration, DateField, DateFields, DateTimeDuration, Disambiguation, TimeDuration, TimeField, TimeFields} from './types';\nimport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nimport {epochFromDate, fromAbsolute, toAbsolute, toCalendar, toCalendarDateTime} from './conversion';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {Mutable} from './utils';\n\nconst ONE_HOUR = 3600000;\n\nexport function add(date: CalendarDateTime, duration: DateTimeDuration): CalendarDateTime;\nexport function add(date: CalendarDate, duration: DateDuration): CalendarDate;\nexport function add(date: CalendarDate | CalendarDateTime, duration: DateTimeDuration): CalendarDate | CalendarDateTime;\nexport function add(date: CalendarDate | CalendarDateTime, duration: DateTimeDuration) {\n  let mutableDate: Mutable<AnyCalendarDate | AnyDateTime> = date.copy();\n  let days = 'hour' in mutableDate ? addTimeFields(mutableDate, duration) : 0;\n\n  addYears(mutableDate, duration.years || 0);\n  if (mutableDate.calendar.balanceYearMonth) {\n    mutableDate.calendar.balanceYearMonth(mutableDate, date);\n  }\n\n  mutableDate.month += duration.months || 0;\n\n  balanceYearMonth(mutableDate);\n  constrainMonthDay(mutableDate);\n\n  mutableDate.day += (duration.weeks || 0) * 7;\n  mutableDate.day += duration.days || 0;\n  mutableDate.day += days;\n\n  balanceDay(mutableDate);\n\n  if (mutableDate.calendar.balanceDate) {\n    mutableDate.calendar.balanceDate(mutableDate);\n  }\n\n  // Constrain in case adding ended up with a date outside the valid range for the calendar system.\n  // The behavior here is slightly different than when constraining in the `set` function in that\n  // we adjust smaller fields to their minimum/maximum values rather than constraining each field\n  // individually. This matches the general behavior of `add` vs `set` regarding how fields are balanced.\n  if (mutableDate.year < 1) {\n    mutableDate.year = 1;\n    mutableDate.month = 1;\n    mutableDate.day = 1;\n  }\n\n  let maxYear = mutableDate.calendar.getYearsInEra(mutableDate);\n  if (mutableDate.year > maxYear) {\n    let isInverseEra = mutableDate.calendar.isInverseEra?.(mutableDate);\n    mutableDate.year = maxYear;\n    mutableDate.month = isInverseEra ? 1 : mutableDate.calendar.getMonthsInYear(mutableDate);\n    mutableDate.day = isInverseEra ? 1 : mutableDate.calendar.getDaysInMonth(mutableDate);\n  }\n\n  if (mutableDate.month < 1) {\n    mutableDate.month = 1;\n    mutableDate.day = 1;\n  }\n\n  let maxMonth = mutableDate.calendar.getMonthsInYear(mutableDate);\n  if (mutableDate.month > maxMonth) {\n    mutableDate.month = maxMonth;\n    mutableDate.day = mutableDate.calendar.getDaysInMonth(mutableDate);\n  }\n\n  mutableDate.day = Math.max(1, Math.min(mutableDate.calendar.getDaysInMonth(mutableDate), mutableDate.day));\n  return mutableDate;\n}\n\nfunction addYears(date: Mutable<AnyCalendarDate>, years: number) {\n  if (date.calendar.isInverseEra?.(date)) {\n    years = -years;\n  }\n\n  date.year += years;\n}\n\nfunction balanceYearMonth(date: Mutable<AnyCalendarDate>) {\n  while (date.month < 1) {\n    addYears(date, -1);\n    date.month += date.calendar.getMonthsInYear(date);\n  }\n\n  let monthsInYear = 0;\n  while (date.month > (monthsInYear = date.calendar.getMonthsInYear(date))) {\n    date.month -= monthsInYear;\n    addYears(date, 1);\n  }\n}\n\nfunction balanceDay(date: Mutable<AnyCalendarDate>) {\n  while (date.day < 1) {\n    date.month--;\n    balanceYearMonth(date);\n    date.day += date.calendar.getDaysInMonth(date);\n  }\n\n  while (date.day > date.calendar.getDaysInMonth(date)) {\n    date.day -= date.calendar.getDaysInMonth(date);\n    date.month++;\n    balanceYearMonth(date);\n  }\n}\n\nfunction constrainMonthDay(date: Mutable<AnyCalendarDate>) {\n  date.month = Math.max(1, Math.min(date.calendar.getMonthsInYear(date), date.month));\n  date.day = Math.max(1, Math.min(date.calendar.getDaysInMonth(date), date.day));\n}\n\nexport function constrain(date: Mutable<AnyCalendarDate>) {\n  if (date.calendar.constrainDate) {\n    date.calendar.constrainDate(date);\n  }\n\n  date.year = Math.max(1, Math.min(date.calendar.getYearsInEra(date), date.year));\n  constrainMonthDay(date);\n}\n\nexport function invertDuration(duration: DateTimeDuration): DateTimeDuration {\n  let inverseDuration = {};\n  for (let key in duration) {\n    if (typeof duration[key] === 'number') {\n      inverseDuration[key] = -duration[key];\n    }\n  }\n\n  return inverseDuration;\n}\n\nexport function subtract(date: CalendarDateTime, duration: DateTimeDuration): CalendarDateTime;\nexport function subtract(date: CalendarDate, duration: DateDuration): CalendarDate;\nexport function subtract(date: CalendarDate | CalendarDateTime, duration: DateTimeDuration): CalendarDate | CalendarDateTime {\n  return add(date, invertDuration(duration));\n}\n\nexport function set(date: CalendarDateTime, fields: DateFields): CalendarDateTime;\nexport function set(date: CalendarDate, fields: DateFields): CalendarDate;\nexport function set(date: CalendarDate | CalendarDateTime, fields: DateFields) {\n  let mutableDate: Mutable<AnyCalendarDate> = date.copy();\n\n  if (fields.era != null) {\n    mutableDate.era = fields.era;\n  }\n\n  if (fields.year != null) {\n    mutableDate.year = fields.year;\n  }\n\n  if (fields.month != null) {\n    mutableDate.month = fields.month;\n  }\n\n  if (fields.day != null) {\n    mutableDate.day = fields.day;\n  }\n\n  constrain(mutableDate);\n  return mutableDate;\n}\n\nexport function setTime(value: CalendarDateTime, fields: TimeFields): CalendarDateTime;\nexport function setTime(value: Time, fields: TimeFields): Time;\nexport function setTime(value: Time | CalendarDateTime, fields: TimeFields) {\n  let mutableValue: Mutable<Time | CalendarDateTime> = value.copy();\n\n  if (fields.hour != null) {\n    mutableValue.hour = fields.hour;\n  }\n\n  if (fields.minute != null) {\n    mutableValue.minute = fields.minute;\n  }\n\n  if (fields.second != null) {\n    mutableValue.second = fields.second;\n  }\n\n  if (fields.millisecond != null) {\n    mutableValue.millisecond = fields.millisecond;\n  }\n\n  constrainTime(mutableValue);\n  return mutableValue;\n}\n\nfunction balanceTime(time: Mutable<AnyTime>): number {\n  time.second += Math.floor(time.millisecond / 1000);\n  time.millisecond = nonNegativeMod(time.millisecond, 1000);\n\n  time.minute += Math.floor(time.second / 60);\n  time.second = nonNegativeMod(time.second, 60);\n\n  time.hour += Math.floor(time.minute / 60);\n  time.minute = nonNegativeMod(time.minute, 60);\n\n  let days = Math.floor(time.hour / 24);\n  time.hour = nonNegativeMod(time.hour, 24);\n\n  return days;\n}\n\nexport function constrainTime(time: Mutable<AnyTime>) {\n  time.millisecond = Math.max(0, Math.min(time.millisecond, 1000));\n  time.second = Math.max(0, Math.min(time.second, 59));\n  time.minute = Math.max(0, Math.min(time.minute, 59));\n  time.hour = Math.max(0, Math.min(time.hour, 23));\n}\n\nfunction nonNegativeMod(a: number, b: number) {\n  let result = a % b;\n  if (result < 0) {\n    result += b;\n  }\n  return result;\n}\n\nfunction addTimeFields(time: Mutable<AnyTime>, duration: TimeDuration): number {\n  time.hour += duration.hours || 0;\n  time.minute += duration.minutes || 0;\n  time.second += duration.seconds || 0;\n  time.millisecond += duration.milliseconds || 0;\n  return balanceTime(time);\n}\n\nexport function addTime(time: Time, duration: TimeDuration): Time {\n  let res = time.copy();\n  addTimeFields(res, duration);\n  return res;\n}\n\nexport function subtractTime(time: Time, duration: TimeDuration): Time {\n  return addTime(time, invertDuration(duration));\n}\n\nexport function cycleDate(value: CalendarDateTime, field: DateField, amount: number, options?: CycleOptions): CalendarDateTime;\nexport function cycleDate(value: CalendarDate, field: DateField, amount: number, options?: CycleOptions): CalendarDate;\nexport function cycleDate(value: CalendarDate | CalendarDateTime, field: DateField, amount: number, options?: CycleOptions) {\n  let mutable: Mutable<CalendarDate | CalendarDateTime> = value.copy();\n\n  switch (field) {\n    case 'era': {\n      let eras = value.calendar.getEras();\n      let eraIndex = eras.indexOf(value.era);\n      if (eraIndex < 0) {\n        throw new Error('Invalid era: ' + value.era);\n      }\n      eraIndex = cycleValue(eraIndex, amount, 0, eras.length - 1, options?.round);\n      mutable.era = eras[eraIndex];\n\n      // Constrain the year and other fields within the era, so the era doesn't change when we balance below.\n      constrain(mutable);\n      break;\n    }\n    case 'year': {\n      if (mutable.calendar.isInverseEra?.(mutable)) {\n        amount = -amount;\n      }\n\n      // The year field should not cycle within the era as that can cause weird behavior affecting other fields.\n      // We need to also allow values < 1 so that decrementing goes to the previous era. If we get -Infinity back\n      // we know we wrapped around after reaching 9999 (the maximum), so set the year back to 1.\n      mutable.year = cycleValue(value.year, amount, -Infinity, 9999, options?.round);\n      if (mutable.year === -Infinity) {\n        mutable.year = 1;\n      }\n\n      if (mutable.calendar.balanceYearMonth) {\n        mutable.calendar.balanceYearMonth(mutable, value);\n      }\n      break;\n    }\n    case 'month':\n      mutable.month = cycleValue(value.month, amount, 1, value.calendar.getMonthsInYear(value), options?.round);\n      break;\n    case 'day':\n      mutable.day = cycleValue(value.day, amount, 1, value.calendar.getDaysInMonth(value), options?.round);\n      break;\n    default:\n      throw new Error('Unsupported field ' + field);\n  }\n\n  if (value.calendar.balanceDate) {\n    value.calendar.balanceDate(mutable);\n  }\n\n  constrain(mutable);\n  return mutable;\n}\n\nexport function cycleTime(value: CalendarDateTime, field: TimeField, amount: number, options?: CycleTimeOptions): CalendarDateTime;\nexport function cycleTime(value: Time, field: TimeField, amount: number, options?: CycleTimeOptions): Time;\nexport function cycleTime(value: Time | CalendarDateTime, field: TimeField, amount: number, options?: CycleTimeOptions) {\n  let mutable: Mutable<Time | CalendarDateTime> = value.copy();\n\n  switch (field) {\n    case 'hour': {\n      let hours = value.hour;\n      let min = 0;\n      let max = 23;\n      if (options?.hourCycle === 12) {\n        let isPM = hours >= 12;\n        min = isPM ? 12 : 0;\n        max = isPM ? 23 : 11;\n      }\n      mutable.hour = cycleValue(hours, amount, min, max, options?.round);\n      break;\n    }\n    case 'minute':\n      mutable.minute = cycleValue(value.minute, amount, 0, 59, options?.round);\n      break;\n    case 'second':\n      mutable.second = cycleValue(value.second, amount, 0, 59, options?.round);\n      break;\n    case 'millisecond':\n      mutable.millisecond = cycleValue(value.millisecond, amount, 0, 999, options?.round);\n      break;\n    default:\n      throw new Error('Unsupported field ' + field);\n  }\n\n  return mutable;\n}\n\nfunction cycleValue(value: number, amount: number, min: number, max: number, round = false) {\n  if (round) {\n    value += Math.sign(amount);\n\n    if (value < min) {\n      value = max;\n    }\n\n    let div = Math.abs(amount);\n    if (amount > 0) {\n      value = Math.ceil(value / div) * div;\n    } else {\n      value = Math.floor(value / div) * div;\n    }\n\n    if (value > max) {\n      value = min;\n    }\n  } else {\n    value += amount;\n    if (value < min) {\n      value = max - (min - value - 1);\n    } else if (value > max) {\n      value = min + (value - max - 1);\n    }\n  }\n\n  return value;\n}\n\nexport function addZoned(dateTime: ZonedDateTime, duration: DateTimeDuration): ZonedDateTime {\n  let ms: number;\n  if ((duration.years != null && duration.years !== 0) || (duration.months != null && duration.months !== 0) || (duration.days != null && duration.days !== 0)) {\n    let res = add(toCalendarDateTime(dateTime), {\n      years: duration.years,\n      months: duration.months,\n      days: duration.days\n    });\n\n    // Changing the date may change the timezone offset, so we need to recompute\n    // using the 'compatible' disambiguation.\n    ms = toAbsolute(res, dateTime.timeZone);\n  } else {\n    // Otherwise, preserve the offset of the original date.\n    ms = epochFromDate(dateTime) - dateTime.offset;\n  }\n\n  // Perform time manipulation in milliseconds rather than on the original time fields to account for DST.\n  // For example, adding one hour during a DST transition may result in the hour field staying the same or\n  // skipping an hour. This results in the offset field changing value instead of the specified field.\n  ms += duration.milliseconds || 0;\n  ms += (duration.seconds || 0) * 1000;\n  ms += (duration.minutes || 0) * 60 * 1000;\n  ms += (duration.hours || 0) * 60 * 60 * 1000;\n\n  let res = fromAbsolute(ms, dateTime.timeZone);\n  return toCalendar(res, dateTime.calendar);\n}\n\nexport function subtractZoned(dateTime: ZonedDateTime, duration: DateTimeDuration): ZonedDateTime {\n  return addZoned(dateTime, invertDuration(duration));\n}\n\nexport function cycleZoned(dateTime: ZonedDateTime, field: DateField | TimeField, amount: number, options?: CycleTimeOptions): ZonedDateTime {\n  // For date fields, we want the time to remain consistent and the UTC offset to potentially change to account for DST changes.\n  // For time fields, we want the time to change by the amount given. This may result in the hour field staying the same, but the UTC\n  // offset changing in the case of a backward DST transition, or skipping an hour in the case of a forward DST transition.\n  switch (field) {\n    case 'hour': {\n      let min = 0;\n      let max = 23;\n      if (options?.hourCycle === 12) {\n        let isPM = dateTime.hour >= 12;\n        min = isPM ? 12 : 0;\n        max = isPM ? 23 : 11;\n      }\n\n      // The minimum and maximum hour may be affected by daylight saving time.\n      // For example, it might jump forward at midnight, and skip 1am.\n      // Or it might end at midnight and repeat the 11pm hour. To handle this, we get\n      // the possible absolute times for the min and max, and find the maximum range\n      // that is within the current day.\n      let plainDateTime = toCalendarDateTime(dateTime);\n      let minDate = toCalendar(setTime(plainDateTime, {hour: min}), new GregorianCalendar());\n      let minAbsolute = [toAbsolute(minDate, dateTime.timeZone, 'earlier'), toAbsolute(minDate, dateTime.timeZone, 'later')]\n        .filter(ms => fromAbsolute(ms, dateTime.timeZone).day === minDate.day)[0];\n\n      let maxDate = toCalendar(setTime(plainDateTime, {hour: max}), new GregorianCalendar());\n      let maxAbsolute = [toAbsolute(maxDate, dateTime.timeZone, 'earlier'), toAbsolute(maxDate, dateTime.timeZone, 'later')]\n        .filter(ms => fromAbsolute(ms, dateTime.timeZone).day === maxDate.day).pop();\n\n      // Since hours may repeat, we need to operate on the absolute time in milliseconds.\n      // This is done in hours from the Unix epoch so that cycleValue works correctly,\n      // and then converted back to milliseconds.\n      let ms = epochFromDate(dateTime) - dateTime.offset;\n      let hours = Math.floor(ms / ONE_HOUR);\n      let remainder = ms % ONE_HOUR;\n      ms = cycleValue(\n        hours,\n        amount,\n        Math.floor(minAbsolute / ONE_HOUR),\n        Math.floor(maxAbsolute / ONE_HOUR),\n        options?.round\n      ) * ONE_HOUR + remainder;\n\n      // Now compute the new timezone offset, and convert the absolute time back to local time.\n      return toCalendar(fromAbsolute(ms, dateTime.timeZone), dateTime.calendar);\n    }\n    case 'minute':\n    case 'second':\n    case 'millisecond':\n      // @ts-ignore\n      return cycleTime(dateTime, field, amount, options);\n    case 'era':\n    case 'year':\n    case 'month':\n    case 'day': {\n      let res = cycleDate(toCalendarDateTime(dateTime), field, amount, options);\n      let ms = toAbsolute(res, dateTime.timeZone);\n      return toCalendar(fromAbsolute(ms, dateTime.timeZone), dateTime.calendar);\n    }\n    default:\n      throw new Error('Unsupported field ' + field);\n  }\n}\n\nexport function setZoned(dateTime: ZonedDateTime, fields: DateFields & TimeFields, disambiguation?: Disambiguation): ZonedDateTime {\n  // Set the date/time fields, and recompute the UTC offset to account for DST changes.\n  // We also need to validate by converting back to a local time in case hours are skipped during forward DST transitions.\n  let plainDateTime = toCalendarDateTime(dateTime);\n  let res = setTime(set(plainDateTime, fields), fields);\n\n  // If the resulting plain date time values are equal, return the original time.\n  // We don't want to change the offset when setting the time to the same value.\n  if (res.compare(plainDateTime) === 0) {\n    return dateTime;\n  }\n\n  let ms = toAbsolute(res, dateTime.timeZone, disambiguation);\n  return toCalendar(fromAbsolute(ms, dateTime.timeZone), dateTime.calendar);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from the TC39 Temporal proposal.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, AnyDateTime, AnyTime, Calendar, DateFields, Disambiguation, TimeFields} from './types';\nimport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nimport {constrain} from './manipulation';\nimport {getExtendedYear, GregorianCalendar} from './calendars/GregorianCalendar';\nimport {getLocalTimeZone} from './queries';\nimport {Mutable} from './utils';\n\nexport function epochFromDate(date: AnyDateTime) {\n  date = toCalendar(date, new GregorianCalendar());\n  let year = getExtendedYear(date.era, date.year);\n  return epochFromParts(year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);\n}\n\nfunction epochFromParts(year: number, month: number, day: number, hour: number, minute: number, second: number, millisecond: number) {\n  // Note: Date.UTC() interprets one and two-digit years as being in the\n  // 20th century, so don't use it\n  let date = new Date();\n  date.setUTCHours(hour, minute, second, millisecond);\n  date.setUTCFullYear(year, month - 1, day);\n  return date.getTime();\n}\n\nexport function getTimeZoneOffset(ms: number, timeZone: string) {\n  // Fast path for UTC.\n  if (timeZone === 'UTC') {\n    return 0;\n  }\n\n  // Fast path: for local timezone after 1970, use native Date.\n  if (ms > 0 && timeZone === getLocalTimeZone()) {\n    return new Date(ms).getTimezoneOffset() * -60 * 1000;\n  }\n\n  let {year, month, day, hour, minute, second} = getTimeZoneParts(ms, timeZone);\n  let utc = epochFromParts(year, month, day, hour, minute, second, 0);\n  return utc - Math.floor(ms / 1000) * 1000;\n}\n\nconst formattersByTimeZone = new Map<string, Intl.DateTimeFormat>();\n\nfunction getTimeZoneParts(ms: number, timeZone: string) {\n  let formatter = formattersByTimeZone.get(timeZone);\n  if (!formatter) {\n    formatter = new Intl.DateTimeFormat('en-US', {\n      timeZone,\n      hour12: false,\n      era: 'short',\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric'\n    });\n\n    formattersByTimeZone.set(timeZone, formatter);\n  }\n\n  let parts = formatter.formatToParts(new Date(ms));\n  let namedParts: {[name: string]: string} = {};\n  for (let part of parts) {\n    if (part.type !== 'literal') {\n      namedParts[part.type] = part.value;\n    }\n  }\n\n\n  return {\n    // Firefox returns B instead of BC... https://bugzilla.mozilla.org/show_bug.cgi?id=1752253\n    year: namedParts.era === 'BC' || namedParts.era === 'B' ? -namedParts.year + 1 : +namedParts.year,\n    month: +namedParts.month,\n    day: +namedParts.day,\n    hour: namedParts.hour === '24' ? 0 : +namedParts.hour, // bugs.chromium.org/p/chromium/issues/detail?id=1045791\n    minute: +namedParts.minute,\n    second: +namedParts.second\n  };\n}\n\nconst DAYMILLIS = 86400000;\n\nexport function possibleAbsolutes(date: CalendarDateTime, timeZone: string): number[] {\n  let ms = epochFromDate(date);\n  let earlier = ms - getTimeZoneOffset(ms - DAYMILLIS, timeZone);\n  let later = ms - getTimeZoneOffset(ms + DAYMILLIS, timeZone);\n  return getValidWallTimes(date, timeZone, earlier, later);\n}\n\nfunction getValidWallTimes(date: CalendarDateTime, timeZone: string, earlier: number, later: number): number[] {\n  let found = earlier === later ? [earlier] : [earlier, later];\n  return found.filter(absolute => isValidWallTime(date, timeZone, absolute));\n}\n\nfunction isValidWallTime(date: CalendarDateTime, timeZone: string, absolute: number) {\n  let parts = getTimeZoneParts(absolute, timeZone);\n  return date.year === parts.year\n    && date.month === parts.month\n    && date.day === parts.day\n    && date.hour === parts.hour\n    && date.minute === parts.minute\n    && date.second === parts.second;\n}\n\nexport function toAbsolute(date: CalendarDate | CalendarDateTime, timeZone: string, disambiguation: Disambiguation = 'compatible'): number {\n  let dateTime = toCalendarDateTime(date);\n\n  // Fast path: if the time zone is UTC, use native Date.\n  if (timeZone === 'UTC') {\n    return epochFromDate(dateTime);\n  }\n\n  // Fast path: if the time zone is the local timezone and disambiguation is compatible, use native Date.\n  if (timeZone === getLocalTimeZone() && disambiguation === 'compatible') {\n    dateTime = toCalendar(dateTime, new GregorianCalendar());\n\n    // Don't use Date constructor here because two-digit years are interpreted in the 20th century.\n    let date = new Date();\n    let year = getExtendedYear(dateTime.era, dateTime.year);\n    date.setFullYear(year, dateTime.month - 1, dateTime.day);\n    date.setHours(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n    return date.getTime();\n  }\n\n  let ms = epochFromDate(dateTime);\n  let offsetBefore = getTimeZoneOffset(ms - DAYMILLIS, timeZone);\n  let offsetAfter = getTimeZoneOffset(ms + DAYMILLIS, timeZone);\n  let valid = getValidWallTimes(dateTime, timeZone, ms - offsetBefore, ms - offsetAfter);\n\n  if (valid.length === 1) {\n    return valid[0];\n  }\n\n  if (valid.length > 1) {\n    switch (disambiguation) {\n      // 'compatible' means 'earlier' for \"fall back\" transitions\n      case 'compatible':\n      case 'earlier':\n        return valid[0];\n      case 'later':\n        return valid[valid.length - 1];\n      case 'reject':\n        throw new RangeError('Multiple possible absolute times found');\n    }\n  }\n\n  switch (disambiguation) {\n    case 'earlier':\n      return Math.min(ms - offsetBefore, ms - offsetAfter);\n    // 'compatible' means 'later' for \"spring forward\" transitions\n    case 'compatible':\n    case 'later':\n      return Math.max(ms - offsetBefore, ms - offsetAfter);\n    case 'reject':\n      throw new RangeError('No such absolute time found');\n  }\n}\n\nexport function toDate(dateTime: CalendarDate | CalendarDateTime, timeZone: string, disambiguation: Disambiguation = 'compatible'): Date {\n  return new Date(toAbsolute(dateTime, timeZone, disambiguation));\n}\n\nexport function fromAbsolute(ms: number, timeZone: string): ZonedDateTime {\n  let offset = getTimeZoneOffset(ms, timeZone);\n  let date = new Date(ms + offset);\n  let year = date.getUTCFullYear();\n  let month = date.getUTCMonth() + 1;\n  let day = date.getUTCDate();\n  let hour = date.getUTCHours();\n  let minute = date.getUTCMinutes();\n  let second = date.getUTCSeconds();\n  let millisecond = date.getUTCMilliseconds();\n\n  return new ZonedDateTime(year, month, day, timeZone, offset, hour, minute, second, millisecond);\n}\n\nexport function fromDate(date: Date, timeZone: string): ZonedDateTime {\n  return fromAbsolute(date.getTime(), timeZone);\n}\n\nexport function fromDateToLocal(date: Date): ZonedDateTime {\n  return fromDate(date, getLocalTimeZone());\n}\n\n/** Converts a value with date components such as a `CalendarDateTime` or `ZonedDateTime` into a `CalendarDate`. */\nexport function toCalendarDate(dateTime: AnyCalendarDate): CalendarDate {\n  return new CalendarDate(dateTime.calendar, dateTime.era, dateTime.year, dateTime.month, dateTime.day);\n}\n\nexport function toDateFields(date: AnyCalendarDate): DateFields {\n  return {\n    era: date.era,\n    year: date.year,\n    month: date.month,\n    day: date.day\n  };\n}\n\nexport function toTimeFields(date: AnyTime): TimeFields {\n  return {\n    hour: date.hour,\n    minute: date.minute,\n    second: date.second,\n    millisecond: date.millisecond\n  };\n}\n\n/**\n * Converts a date value to a `CalendarDateTime`. An optional `Time` value can be passed to set the time\n * of the resulting value, otherwise it will default to midnight.\n */\nexport function toCalendarDateTime(date: CalendarDate | CalendarDateTime | ZonedDateTime, time?: AnyTime): CalendarDateTime {\n  let hour = 0, minute = 0, second = 0, millisecond = 0;\n  if ('timeZone' in date) {\n    ({hour, minute, second, millisecond} = date);\n  } else if ('hour' in date && !time) {\n    return date;\n  }\n\n  if (time) {\n    ({hour, minute, second, millisecond} = time);\n  }\n\n  return new CalendarDateTime(\n    date.calendar,\n    date.era,\n    date.year,\n    date.month,\n    date.day,\n    hour,\n    minute,\n    second,\n    millisecond\n  );\n}\n\n/** Extracts the time components from a value containing a date and time. */\nexport function toTime(dateTime: CalendarDateTime | ZonedDateTime): Time {\n  return new Time(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n}\n\n/** Converts a date from one calendar system to another. */\nexport function toCalendar<T extends AnyCalendarDate>(date: T, calendar: Calendar): T {\n  if (date.calendar.identifier === calendar.identifier) {\n    return date;\n  }\n\n  let calendarDate = calendar.fromJulianDay(date.calendar.toJulianDay(date));\n  let copy: Mutable<T> = date.copy();\n  copy.calendar = calendar;\n  copy.era = calendarDate.era;\n  copy.year = calendarDate.year;\n  copy.month = calendarDate.month;\n  copy.day = calendarDate.day;\n  constrain(copy);\n  return copy;\n}\n\n/**\n * Converts a date value to a `ZonedDateTime` in the provided time zone. The `disambiguation` option can be set\n * to control how values that fall on daylight saving time changes are interpreted.\n */\nexport function toZoned(date: CalendarDate | CalendarDateTime | ZonedDateTime, timeZone: string, disambiguation?: Disambiguation): ZonedDateTime {\n  if (date instanceof ZonedDateTime) {\n    if (date.timeZone === timeZone) {\n      return date;\n    }\n\n    return toTimeZone(date, timeZone);\n  }\n\n  let ms = toAbsolute(date, timeZone, disambiguation);\n  return fromAbsolute(ms, timeZone);\n}\n\nexport function zonedToDate(date: ZonedDateTime) {\n  let ms = epochFromDate(date) - date.offset;\n  return new Date(ms);\n}\n\n/** Converts a `ZonedDateTime` from one time zone to another. */\nexport function toTimeZone(date: ZonedDateTime, timeZone: string): ZonedDateTime {\n  let ms = epochFromDate(date) - date.offset;\n  return toCalendar(fromAbsolute(ms, timeZone), date.calendar);\n}\n\n/** Converts the given `ZonedDateTime` into the user's local time zone. */\nexport function toLocalTimeZone(date: ZonedDateTime): ZonedDateTime {\n  return toTimeZone(date, getLocalTimeZone());\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {mod, Mutable} from '../utils';\n\nconst EPOCH = 1721426; // 001/01/03 Julian C.E.\nexport function gregorianToJulianDay(era: string, year: number, month: number, day: number): number {\n  year = getExtendedYear(era, year);\n\n  let y1 = year - 1;\n  let monthOffset = -2;\n  if (month <= 2) {\n    monthOffset = 0;\n  } else if (isLeapYear(year)) {\n    monthOffset = -1;\n  }\n\n  return (\n    EPOCH -\n    1 +\n    365 * y1 +\n    Math.floor(y1 / 4) -\n    Math.floor(y1 / 100) +\n    Math.floor(y1 / 400) +\n    Math.floor((367 * month - 362) / 12 + monthOffset + day)\n  );\n}\n\nexport function isLeapYear(year: number): boolean {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\n\nexport function getExtendedYear(era: string, year: number): number {\n  return era === 'BC' ? 1 - year : year;\n}\n\nexport function fromExtendedYear(year: number): [string, number] {\n  let era = 'AD';\n  if (year <= 0) {\n    era = 'BC';\n    year = 1 - year;\n  }\n\n  return [era, year];\n}\n\nconst daysInMonth = {\n  standard: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n  leapyear: [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n};\n\n/**\n * The Gregorian calendar is the most commonly used calendar system in the world. It supports two eras: BC, and AD.\n * Years always contain 12 months, and 365 or 366 days depending on whether it is a leap year.\n */\nexport class GregorianCalendar implements Calendar {\n  identifier = 'gregory';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let jd0 = jd;\n    let depoch = jd0 - EPOCH;\n    let quadricent = Math.floor(depoch / 146097);\n    let dqc = mod(depoch, 146097);\n    let cent = Math.floor(dqc / 36524);\n    let dcent = mod(dqc, 36524);\n    let quad = Math.floor(dcent / 1461);\n    let dquad = mod(dcent, 1461);\n    let yindex = Math.floor(dquad / 365);\n\n    let extendedYear = quadricent * 400 + cent * 100 + quad * 4 + yindex + (cent !== 4 && yindex !== 4 ? 1 : 0);\n    let [era, year] = fromExtendedYear(extendedYear);\n    let yearDay = jd0 - gregorianToJulianDay(era, year, 1, 1);\n    let leapAdj = 2;\n    if (jd0 < gregorianToJulianDay(era, year, 3, 1)) {\n      leapAdj = 0;\n    } else if (isLeapYear(year)) {\n      leapAdj = 1;\n    }\n    let month = Math.floor(((yearDay + leapAdj) * 12 + 373) / 367);\n    let day = jd0 - gregorianToJulianDay(era, year, month, 1) + 1;\n\n    return new CalendarDate(era, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    return gregorianToJulianDay(date.era, date.year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return daysInMonth[isLeapYear(date.year) ? 'leapyear' : 'standard'][date.month - 1];\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getMonthsInYear(date: AnyCalendarDate): number {\n    return 12;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return isLeapYear(date.year) ? 366 : 365;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getYearsInEra(date: AnyCalendarDate): number {\n    return 9999;\n  }\n\n  getEras() {\n    return ['BC', 'AD'];\n  }\n\n  isInverseEra(date: AnyCalendarDate): boolean {\n    return date.era === 'BC';\n  }\n\n  balanceDate(date: Mutable<AnyCalendarDate>) {\n    if (date.year <= 0) {\n      date.era = date.era === 'BC' ? 'AD' : 'BC';\n      date.year = 1 - date.year;\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CalendarDate, CalendarDateTime} from './CalendarDate';\n\nexport type Mutable<T> = {\n  -readonly[P in keyof T]: T[P]\n};\n\nexport function mod(amount: number, numerator: number): number {\n  return amount - numerator * Math.floor(amount / numerator);\n}\n\nexport function copy(date: CalendarDate): Mutable<CalendarDate> {\n  if (date.era) {\n    return new CalendarDate(date.calendar, date.era, date.year, date.month, date.day);\n  } else {\n    return new CalendarDate(date.calendar, date.year, date.month, date.day);\n  }\n}\n\nexport function copyDateTime(date: CalendarDateTime): Mutable<CalendarDateTime> {\n  if (date.era) {\n    return new CalendarDateTime(date.calendar, date.era, date.year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);\n  } else {\n    return new CalendarDateTime(date.calendar, date.year, date.month, date.day, date.hour, date.minute, date.second);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AnyCalendarDate, AnyTime} from './types';\nimport {CalendarDate, CalendarDateTime, ZonedDateTime} from './CalendarDate';\nimport {fromAbsolute, toAbsolute, toCalendar, toCalendarDate} from './conversion';\nimport {weekStartData} from './weekStartData';\n\ntype DateValue = CalendarDate | CalendarDateTime | ZonedDateTime;\n\n/** Returns whether the given dates occur on the same day, regardless of the time or calendar system. */\nexport function isSameDay(a: DateValue, b: DateValue): boolean {\n  b = toCalendar(b, a.calendar);\n  return a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\n\n/** Returns whether the given dates occur in the same month, using the calendar system of the first date. */\nexport function isSameMonth(a: DateValue, b: DateValue): boolean {\n  b = toCalendar(b, a.calendar);\n  // In the Japanese calendar, months can span multiple eras/years, so only compare the first of the month.\n  a = startOfMonth(a);\n  b = startOfMonth(b);\n  return a.era === b.era && a.year === b.year && a.month === b.month;\n}\n\n/** Returns whether the given dates occur in the same year, using the calendar system of the first date. */\nexport function isSameYear(a: DateValue, b: DateValue): boolean {\n  b = toCalendar(b, a.calendar);\n  a = startOfYear(a);\n  b = startOfYear(b);\n  return a.era === b.era && a.year === b.year;\n}\n\n/** Returns whether the given dates occur on the same day, and are of the same calendar system. */\nexport function isEqualDay(a: DateValue, b: DateValue): boolean {\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\n\n/** Returns whether the given dates occur in the same month, and are of the same calendar system. */\nexport function isEqualMonth(a: DateValue, b: DateValue): boolean {\n  a = startOfMonth(a);\n  b = startOfMonth(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month;\n}\n\n/** Returns whether the given dates occur in the same year, and are of the same calendar system. */\nexport function isEqualYear(a: DateValue, b: DateValue): boolean {\n  a = startOfYear(a);\n  b = startOfYear(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year;\n}\n\n/** Returns whether the date is today in the given time zone. */\nexport function isToday(date: DateValue, timeZone: string): boolean {\n  return isSameDay(date, today(timeZone));\n}\n\n/**\n * Returns the day of week for the given date and locale. Days are numbered from zero to six,\n * where zero is the first day of the week in the given locale. For example, in the United States,\n * the first day of the week is Sunday, but in France it is Monday.\n */\nexport function getDayOfWeek(date: DateValue, locale: string): number {\n  let julian = date.calendar.toJulianDay(date);\n\n  // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n  let dayOfWeek = Math.ceil(julian + 1 - getWeekStart(locale)) % 7;\n  if (dayOfWeek < 0) {\n    dayOfWeek += 7;\n  }\n\n  return dayOfWeek;\n}\n\n/** Returns the current time in the given time zone. */\nexport function now(timeZone: string): ZonedDateTime {\n  return fromAbsolute(Date.now(), timeZone);\n}\n\n/** Returns today's date in the given time zone. */\nexport function today(timeZone: string): CalendarDate {\n  return toCalendarDate(now(timeZone));\n}\n\nexport function compareDate(a: AnyCalendarDate, b: AnyCalendarDate): number {\n  return a.calendar.toJulianDay(a) - b.calendar.toJulianDay(b);\n}\n\nexport function compareTime(a: AnyTime, b: AnyTime): number {\n  return timeToMs(a) - timeToMs(b);\n}\n\nfunction timeToMs(a: AnyTime): number {\n  return a.hour * 60 * 60 * 1000 + a.minute * 60 * 1000 + a.second * 1000 + a.millisecond;\n}\n\n/**\n * Returns the number of hours in the given date and time zone.\n * Usually this is 24, but it could be 23 or 25 if the date is on a daylight saving transition.\n */\nexport function getHoursInDay(a: CalendarDate, timeZone: string): number {\n  let ms = toAbsolute(a, timeZone);\n  let tomorrow = a.add({days: 1});\n  let tomorrowMs = toAbsolute(tomorrow, timeZone);\n  return (tomorrowMs - ms) / 3600000;\n}\n\nlet localTimeZone = null;\n\n/** Returns the time zone identifier for the current user. */\nexport function getLocalTimeZone(): string {\n  // TODO: invalidate this somehow?\n  if (localTimeZone == null) {\n    localTimeZone = new Intl.DateTimeFormat().resolvedOptions().timeZone;\n  }\n\n  return localTimeZone;\n}\n\n/** Returns the first date of the month for the given date. */\nexport function startOfMonth(date: ZonedDateTime): ZonedDateTime;\nexport function startOfMonth(date: CalendarDateTime): CalendarDateTime;\nexport function startOfMonth(date: CalendarDate): CalendarDate;\nexport function startOfMonth(date: DateValue): DateValue;\nexport function startOfMonth(date: DateValue): DateValue {\n  // Use `subtract` instead of `set` so we don't get constrained in an era.\n  return date.subtract({days: date.day - 1});\n}\n\n/** Returns the last date of the month for the given date. */\nexport function endOfMonth(date: ZonedDateTime): ZonedDateTime;\nexport function endOfMonth(date: CalendarDateTime): CalendarDateTime;\nexport function endOfMonth(date: CalendarDate): CalendarDate;\nexport function endOfMonth(date: DateValue): DateValue;\nexport function endOfMonth(date: DateValue): DateValue {\n  return date.add({days: date.calendar.getDaysInMonth(date) - date.day});\n}\n\n/** Returns the first day of the year for the given date. */\nexport function startOfYear(date: ZonedDateTime): ZonedDateTime;\nexport function startOfYear(date: CalendarDateTime): CalendarDateTime;\nexport function startOfYear(date: CalendarDate): CalendarDate;\nexport function startOfYear(date: DateValue): DateValue;\nexport function startOfYear(date: DateValue): DateValue {\n  return startOfMonth(date.subtract({months: date.month - 1}));\n}\n\n/** Returns the last day of the year for the given date. */\nexport function endOfYear(date: ZonedDateTime): ZonedDateTime;\nexport function endOfYear(date: CalendarDateTime): CalendarDateTime;\nexport function endOfYear(date: CalendarDate): CalendarDate;\nexport function endOfYear(date: DateValue): DateValue;\nexport function endOfYear(date: DateValue): DateValue {\n  return endOfMonth(date.add({months: date.calendar.getMonthsInYear(date) - date.month}));\n}\n\nexport function getMinimumMonthInYear(date: AnyCalendarDate) {\n  if (date.calendar.getMinimumMonthInYear) {\n    return date.calendar.getMinimumMonthInYear(date);\n  }\n\n  return 1;\n}\n\nexport function getMinimumDayInMonth(date: AnyCalendarDate) {\n  if (date.calendar.getMinimumDayInMonth) {\n    return date.calendar.getMinimumDayInMonth(date);\n  }\n\n  return 1;\n}\n\n/** Returns the first date of the week for the given date and locale. */\nexport function startOfWeek(date: ZonedDateTime, locale: string): ZonedDateTime;\nexport function startOfWeek(date: CalendarDateTime, locale: string): CalendarDateTime;\nexport function startOfWeek(date: CalendarDate, locale: string): CalendarDate;\nexport function startOfWeek(date: DateValue, locale: string): DateValue;\nexport function startOfWeek(date: DateValue, locale: string): DateValue {\n  let dayOfWeek = getDayOfWeek(date, locale);\n  return date.subtract({days: dayOfWeek});\n}\n\n/** Returns the last date of the week for the given date and locale. */\nexport function endOfWeek(date: ZonedDateTime, locale: string): ZonedDateTime;\nexport function endOfWeek(date: CalendarDateTime, locale: string): CalendarDateTime;\nexport function endOfWeek(date: CalendarDate, locale: string): CalendarDate;\nexport function endOfWeek(date: DateValue, locale: string): DateValue {\n  return startOfWeek(date, locale).add({days: 6});\n}\n\nconst cachedRegions = new Map<string, string>();\n\nfunction getRegion(locale: string) {\n  // If the Intl.Locale API is available, use it to get the region for the locale.\n  // @ts-ignore\n  if (Intl.Locale) {\n    // Constructing an Intl.Locale is expensive, so cache the result.\n    let region = cachedRegions.get(locale);\n    if (!region) {\n      // @ts-ignore\n      region = new Intl.Locale(locale).maximize().region;\n      cachedRegions.set(locale, region);\n    }\n    return region;\n  }\n\n  // If not, just try splitting the string.\n  // If the second part of the locale string is 'u',\n  // then this is a unicode extension, so ignore it.\n  // Otherwise, it should be the region.\n  let part = locale.split('-')[1];\n  return part === 'u' ? null : part;\n}\n\nfunction getWeekStart(locale: string) {\n  // TODO: use Intl.Locale for this once browsers support the weekInfo property\n  // https://github.com/tc39/proposal-intl-locale-info\n  let region = getRegion(locale);\n  return weekStartData[region] || 0;\n}\n\n/** Returns the number of weeks in the given month and locale. */\nexport function getWeeksInMonth(date: DateValue, locale: string): number {\n  let days = date.calendar.getDaysInMonth(date);\n  return Math.ceil((getDayOfWeek(startOfMonth(date), locale) + days) / 7);\n}\n\n/** Returns the lesser of the two provider dates. */\nexport function minDate<A extends DateValue, B extends DateValue>(a: A, b: B): A | B {\n  if (a && b) {\n    return a.compare(b) <= 0 ? a : b;\n  }\n\n  return a || b;\n}\n\n/** Returns the greater of the two provider dates. */\nexport function maxDate<A extends DateValue, B extends DateValue>(a: A, b: B): A | B {\n  if (a && b) {\n    return a.compare(b) >= 0 ? a : b;\n  }\n\n  return a || b;\n}\n\nconst WEEKEND_DATA = {\n  AF: [4, 5],\n  AE: [5, 6],\n  BH: [5, 6],\n  DZ: [5, 6],\n  EG: [5, 6],\n  IL: [5, 6],\n  IQ: [5, 6],\n  IR: [5, 5],\n  JO: [5, 6],\n  KW: [5, 6],\n  LY: [5, 6],\n  OM: [5, 6],\n  QA: [5, 6],\n  SA: [5, 6],\n  SD: [5, 6],\n  SY: [5, 6],\n  YE: [5, 6]\n};\n\n/** Returns whether the given date is on a weekend in the given locale. */\nexport function isWeekend(date: DateValue, locale: string): boolean {\n  let julian = date.calendar.toJulianDay(date);\n\n  // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n  let dayOfWeek = Math.ceil(julian + 1) % 7;\n  if (dayOfWeek < 0) {\n    dayOfWeek += 7;\n  }\n\n  let region = getRegion(locale);\n  // Use Intl.Locale for this once weekInfo is supported.\n  // https://github.com/tc39/proposal-intl-locale-info\n  let [start, end] = WEEKEND_DATA[region] || [6, 0];\n  return dayOfWeek === start || dayOfWeek === end;\n}\n\n/** Returns whether the given date is on a weekday in the given locale. */\nexport function isWeekday(date: DateValue, locale: string): boolean {\n  return !isWeekend(date, locale);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Data from https://github.com/unicode-cldr/cldr-core/blob/master/supplemental/weekData.json\n// Locales starting on Sunday have been removed for compression.\nexport const weekStartData = {\n  '001': 1,\n  AD: 1,\n  AE: 6,\n  AF: 6,\n  AI: 1,\n  AL: 1,\n  AM: 1,\n  AN: 1,\n  AT: 1,\n  AX: 1,\n  AZ: 1,\n  BA: 1,\n  BE: 1,\n  BG: 1,\n  BH: 6,\n  BM: 1,\n  BN: 1,\n  BY: 1,\n  CH: 1,\n  CL: 1,\n  CM: 1,\n  CR: 1,\n  CY: 1,\n  CZ: 1,\n  DE: 1,\n  DJ: 6,\n  DK: 1,\n  DZ: 6,\n  EC: 1,\n  EE: 1,\n  EG: 6,\n  ES: 1,\n  FI: 1,\n  FJ: 1,\n  FO: 1,\n  FR: 1,\n  GB: 1,\n  GE: 1,\n  GF: 1,\n  GP: 1,\n  GR: 1,\n  HR: 1,\n  HU: 1,\n  IE: 1,\n  IQ: 6,\n  IR: 6,\n  IS: 1,\n  IT: 1,\n  JO: 6,\n  KG: 1,\n  KW: 6,\n  KZ: 1,\n  LB: 1,\n  LI: 1,\n  LK: 1,\n  LT: 1,\n  LU: 1,\n  LV: 1,\n  LY: 6,\n  MC: 1,\n  MD: 1,\n  ME: 1,\n  MK: 1,\n  MN: 1,\n  MQ: 1,\n  MV: 5,\n  MY: 1,\n  NL: 1,\n  NO: 1,\n  NZ: 1,\n  OM: 6,\n  PL: 1,\n  QA: 6,\n  RE: 1,\n  RO: 1,\n  RS: 1,\n  RU: 1,\n  SD: 6,\n  SE: 1,\n  SI: 1,\n  SK: 1,\n  SM: 1,\n  SY: 6,\n  TJ: 1,\n  TM: 1,\n  TR: 1,\n  UA: 1,\n  UY: 1,\n  UZ: 1,\n  VA: 1,\n  VN: 1,\n  XK: 1\n};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AnyDateTime, DateTimeDuration, Disambiguation} from './types';\nimport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nimport {epochFromDate, fromAbsolute, possibleAbsolutes, toAbsolute, toCalendar, toCalendarDateTime, toTimeZone} from './conversion';\nimport {getLocalTimeZone} from './queries';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {Mutable} from './utils';\n\nconst TIME_RE = /^(\\d{2})(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nconst DATE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})$/;\nconst DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nconst ZONED_DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:([+-]\\d{2})(?::(\\d{2}))?)?\\[(.*?)\\]$/;\nconst ABSOLUTE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:(?:([+-]\\d{2})(?::(\\d{2}))?)|Z)$/;\nconst DATE_TIME_DURATION_RE =\n    /^((?<negative>-)|\\+)?P((?<years>\\d*)Y)?((?<months>\\d*)M)?((?<weeks>\\d*)W)?((?<days>\\d*)D)?((?<time>T)((?<hours>\\d*[.,]?\\d{1,9})H)?((?<minutes>\\d*[.,]?\\d{1,9})M)?((?<seconds>\\d*[.,]?\\d{1,9})S)?)?$/;\nconst requiredDurationTimeGroups = ['hours', 'minutes', 'seconds'];\nconst requiredDurationGroups = ['years', 'months', 'weeks', 'days', ...requiredDurationTimeGroups];\n\n/** Parses an ISO 8601 time string. */\nexport function parseTime(value: string): Time {\n  let m = value.match(TIME_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 time string: ' + value);\n  }\n\n  return new Time(\n    parseNumber(m[1], 0, 23),\n    m[2] ? parseNumber(m[2], 0, 59) : 0,\n    m[3] ? parseNumber(m[3], 0, 59) : 0,\n    m[4] ? parseNumber(m[4], 0, Infinity) * 1000 : 0\n  );\n}\n\n/** Parses an ISO 8601 date string, with no time components. */\nexport function parseDate(value: string): CalendarDate {\n  let m = value.match(DATE_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 date string: ' + value);\n  }\n\n  let date: Mutable<CalendarDate> = new CalendarDate(\n    parseNumber(m[1], 0, 9999),\n    parseNumber(m[2], 1, 12),\n    1\n  );\n\n  date.day = parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  return date as CalendarDate;\n}\n\n/** Parses an ISO 8601 date and time string, with no time zone. */\nexport function parseDateTime(value: string): CalendarDateTime {\n  let m = value.match(DATE_TIME_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 date time string: ' + value);\n  }\n\n  let date: Mutable<CalendarDateTime> = new CalendarDateTime(\n    parseNumber(m[1], 1, 9999),\n    parseNumber(m[2], 1, 12),\n    1,\n    m[4] ? parseNumber(m[4], 0, 23) : 0,\n    m[5] ? parseNumber(m[5], 0, 59) : 0,\n    m[6] ? parseNumber(m[6], 0, 59) : 0,\n    m[7] ? parseNumber(m[7], 0, Infinity) * 1000 : 0\n  );\n\n  date.day = parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  return date as CalendarDateTime;\n}\n\n/**\n * Parses an ISO 8601 date and time string with a time zone extension and optional UTC offset\n * (e.g. \"2021-11-07T00:45[America/Los_Angeles]\" or \"2021-11-07T00:45-07:00[America/Los_Angeles]\").\n * Ambiguous times due to daylight saving time transitions are resolved according to the `disambiguation`\n * parameter.\n */\nexport function parseZonedDateTime(value: string, disambiguation?: Disambiguation): ZonedDateTime {\n  let m = value.match(ZONED_DATE_TIME_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 date time string: ' + value);\n  }\n\n  let date: Mutable<ZonedDateTime> = new ZonedDateTime(\n    parseNumber(m[1], 1, 9999),\n    parseNumber(m[2], 1, 12),\n    1,\n    m[10],\n    0,\n    m[4] ? parseNumber(m[4], 0, 23) : 0,\n    m[5] ? parseNumber(m[5], 0, 59) : 0,\n    m[6] ? parseNumber(m[6], 0, 59) : 0,\n    m[7] ? parseNumber(m[7], 0, Infinity) * 1000 : 0\n  );\n\n  date.day = parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n\n  let plainDateTime = toCalendarDateTime(date as ZonedDateTime);\n\n  let ms: number;\n  if (m[8]) {\n    date.offset = parseNumber(m[8], -23, 23) * 60 * 60 * 1000 + parseNumber(m[9] ?? '0', 0, 59) * 60 * 1000;\n    ms = epochFromDate(date as ZonedDateTime) - date.offset;\n\n    // Validate offset against parsed date.\n    let absolutes = possibleAbsolutes(plainDateTime, date.timeZone);\n    if (!absolutes.includes(ms)) {\n      throw new Error(`Offset ${offsetToString(date.offset)} is invalid for ${dateTimeToString(date)} in ${date.timeZone}`);\n    }\n  } else {\n    // Convert to absolute and back to fix invalid times due to DST.\n    ms = toAbsolute(toCalendarDateTime(plainDateTime), date.timeZone, disambiguation);\n  }\n\n  return fromAbsolute(ms, date.timeZone);\n}\n\n/**\n * Parses an ISO 8601 date and time string with a UTC offset (e.g. \"2021-11-07T07:45:00Z\"\n * or \"2021-11-07T07:45:00-07:00\"). The result is converted to the provided time zone.\n */\nexport function parseAbsolute(value: string, timeZone: string): ZonedDateTime {\n  let m = value.match(ABSOLUTE_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 date time string: ' + value);\n  }\n\n  let date: Mutable<ZonedDateTime> = new ZonedDateTime(\n    parseNumber(m[1], 1, 9999),\n    parseNumber(m[2], 1, 12),\n    1,\n    timeZone,\n    0,\n    m[4] ? parseNumber(m[4], 0, 23) : 0,\n    m[5] ? parseNumber(m[5], 0, 59) : 0,\n    m[6] ? parseNumber(m[6], 0, 59) : 0,\n    m[7] ? parseNumber(m[7], 0, Infinity) * 1000 : 0\n  );\n\n  date.day = parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n\n  if (m[8]) {\n    date.offset = parseNumber(m[8], -23, 23) * 60 * 60 * 1000 + parseNumber(m[9] ?? '0', 0, 59) * 60 * 1000;\n  }\n\n  return toTimeZone(date as ZonedDateTime, timeZone);\n}\n\n/**\n * Parses an ISO 8601 date and time string with a UTC offset (e.g. \"2021-11-07T07:45:00Z\"\n * or \"2021-11-07T07:45:00-07:00\"). The result is converted to the user's local time zone.\n */\nexport function parseAbsoluteToLocal(value: string): ZonedDateTime {\n  return parseAbsolute(value, getLocalTimeZone());\n}\n\nfunction parseNumber(value: string, min: number, max: number) {\n  let val = Number(value);\n  if (val < min || val > max) {\n    throw new RangeError(`Value out of range: ${min} <= ${val} <= ${max}`);\n  }\n\n  return val;\n}\n\nexport function timeToString(time: Time): string {\n  return `${String(time.hour).padStart(2, '0')}:${String(time.minute).padStart(2, '0')}:${String(time.second).padStart(2, '0')}${time.millisecond ? String(time.millisecond / 1000).slice(1) : ''}`;\n}\n\nexport function dateToString(date: CalendarDate): string {\n  let gregorianDate = toCalendar(date, new GregorianCalendar());\n  return `${String(gregorianDate.year).padStart(4, '0')}-${String(gregorianDate.month).padStart(2, '0')}-${String(gregorianDate.day).padStart(2, '0')}`;\n}\n\nexport function dateTimeToString(date: AnyDateTime): string {\n  // @ts-ignore\n  return `${dateToString(date)}T${timeToString(date)}`;\n}\n\nfunction offsetToString(offset: number) {\n  let sign = Math.sign(offset) < 0 ? '-' : '+';\n  offset = Math.abs(offset);\n  let offsetHours = Math.floor(offset / (60 * 60 * 1000));\n  let offsetMinutes = (offset % (60 * 60 * 1000)) / (60 * 1000);\n  return `${sign}${String(offsetHours).padStart(2, '0')}:${String(offsetMinutes).padStart(2, '0')}`;\n}\n\nexport function zonedDateTimeToString(date: ZonedDateTime): string {\n  return `${dateTimeToString(date)}${offsetToString(date.offset)}[${date.timeZone}]`;\n}\n\n/**\n * Parses an ISO 8601 duration string (e.g. \"P3Y6M6W4DT12H30M5S\").\n * @param value An ISO 8601 duration string.\n * @returns A DateTimeDuration object.\n */\nexport function parseDuration(value: string): Required<DateTimeDuration> {\n  const match = value.match(DATE_TIME_DURATION_RE);\n\n  if (!match) {\n    throw new Error(`Invalid ISO 8601 Duration string: ${value}`);\n  }\n\n  const parseDurationGroup = (\n    group: string | undefined,\n    isNegative: boolean,\n    min: number,\n    max: number\n  ): number => {\n    if (!group) {\n      return 0;\n    }\n    try {\n      const sign = isNegative ? -1 : 1;\n      return sign * parseNumber(group.replace(',', '.'), min, max);\n    } catch {\n      throw new Error(`Invalid ISO 8601 Duration string: ${value}`);\n    }\n  };\n\n  const isNegative = !!match.groups?.negative;\n\n  const hasRequiredGroups = requiredDurationGroups.some(group => match.groups?.[group]);\n\n  if (!hasRequiredGroups) {\n    throw new Error(`Invalid ISO 8601 Duration string: ${value}`);\n  }\n\n  const durationStringIncludesTime = match.groups?.time;\n  \n  if (durationStringIncludesTime) {\n    const hasRequiredDurationTimeGroups = requiredDurationTimeGroups.some(group => match.groups?.[group]);\n    if (!hasRequiredDurationTimeGroups) {\n      throw new Error(`Invalid ISO 8601 Duration string: ${value}`);\n    }\n  }\n\n  const duration: Mutable<DateTimeDuration> = {\n    years: parseDurationGroup(match.groups?.years, isNegative, 0, 9999),\n    months: parseDurationGroup(match.groups?.months, isNegative, 0, 12),\n    weeks: parseDurationGroup(match.groups?.weeks, isNegative, 0, Infinity),\n    days: parseDurationGroup(match.groups?.days, isNegative, 0, 31),\n    hours: parseDurationGroup(match.groups?.hours, isNegative, 0, 23),\n    minutes: parseDurationGroup(match.groups?.minutes, isNegative, 0, 59),\n    seconds: parseDurationGroup(match.groups?.seconds, isNegative, 0, 59)\n  };\n\n  if (((duration.hours % 1) !== 0) && (duration.minutes || duration.seconds)) {\n    throw new Error(`Invalid ISO 8601 Duration string: ${value} - only the smallest unit can be fractional`);\n  }\n\n  if (((duration.minutes % 1) !== 0) && duration.seconds) {\n    throw new Error(`Invalid ISO 8601 Duration string: ${value} - only the smallest unit can be fractional`);\n  }\n\n  return duration as Required<DateTimeDuration>;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from the TC39 Temporal proposal.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {GregorianCalendar} from './GregorianCalendar';\nimport {Mutable} from '../utils';\n\nconst ERA_START_DATES = [[1868, 9, 8], [1912, 7, 30], [1926, 12, 25], [1989, 1, 8], [2019, 5, 1]];\nconst ERA_END_DATES = [[1912, 7, 29], [1926, 12, 24], [1989, 1, 7], [2019, 4, 30]];\nconst ERA_ADDENDS = [1867, 1911, 1925, 1988, 2018];\nconst ERA_NAMES = ['meiji', 'taisho', 'showa', 'heisei', 'reiwa'];\n\nfunction findEraFromGregorianDate(date: AnyCalendarDate) {\n  const idx = ERA_START_DATES.findIndex(([year, month, day]) => {\n    if (date.year < year) {\n      return true;\n    }\n\n    if (date.year === year && date.month < month) {\n      return true;\n    }\n\n    if (date.year === year && date.month === month && date.day < day) {\n      return true;\n    }\n\n    return false;\n  });\n\n  if (idx === -1) {\n    return ERA_START_DATES.length - 1;\n  }\n\n  if (idx === 0) {\n    return 0;\n  }\n\n  return idx - 1;\n}\n\nfunction toGregorian(date: AnyCalendarDate) {\n  let eraAddend = ERA_ADDENDS[ERA_NAMES.indexOf(date.era)];\n  if (!eraAddend) {\n    throw new Error('Unknown era: ' + date.era);\n  }\n\n  return new CalendarDate(\n    date.year + eraAddend,\n    date.month,\n    date.day\n  );\n}\n\n/**\n * The Japanese calendar is based on the Gregorian calendar, but with eras for the reign of each Japanese emperor.\n * Whenever a new emperor ascends to the throne, a new era begins and the year starts again from 1.\n * Note that eras before 1868 (Gregorian) are not currently supported by this implementation.\n */\nexport class JapaneseCalendar extends GregorianCalendar {\n  identifier = 'japanese';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let date = super.fromJulianDay(jd);\n    let era = findEraFromGregorianDate(date);\n\n    return new CalendarDate(\n      this,\n      ERA_NAMES[era],\n      date.year - ERA_ADDENDS[era],\n      date.month,\n      date.day\n    );\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return super.toJulianDay(toGregorian(date));\n  }\n\n  balanceDate(date: Mutable<AnyCalendarDate>) {\n    let gregorianDate = toGregorian(date);\n    let era = findEraFromGregorianDate(gregorianDate);\n\n    if (ERA_NAMES[era] !== date.era) {\n      date.era = ERA_NAMES[era];\n      date.year = gregorianDate.year - ERA_ADDENDS[era];\n    }\n\n    // Constrain in case we went before the first supported era.\n    this.constrainDate(date);\n  }\n\n  constrainDate(date: Mutable<AnyCalendarDate>) {\n    let idx = ERA_NAMES.indexOf(date.era);\n    let end = ERA_END_DATES[idx];\n    if (end != null) {\n      let [endYear, endMonth, endDay] = end;\n\n      // Constrain the year to the maximum possible value in the era.\n      // Then constrain the month and day fields within that.\n      let maxYear = endYear - ERA_ADDENDS[idx];\n      date.year = Math.max(1, Math.min(maxYear, date.year));\n      if (date.year === maxYear) {\n        date.month = Math.min(endMonth, date.month);\n\n        if (date.month === endMonth) {\n          date.day = Math.min(endDay, date.day);\n        }\n      }\n    }\n\n    if (date.year === 1 && idx >= 0) {\n      let [, startMonth, startDay] = ERA_START_DATES[idx];\n      date.month = Math.max(startMonth, date.month);\n\n      if (date.month === startMonth) {\n        date.day = Math.max(startDay, date.day);\n      }\n    }\n  }\n\n  getEras() {\n    return ERA_NAMES;\n  }\n\n  getYearsInEra(date: AnyCalendarDate): number {\n    // Get the number of years in the era, taking into account the date's month and day fields.\n    let era = ERA_NAMES.indexOf(date.era);\n    let cur = ERA_START_DATES[era];\n    let next = ERA_START_DATES[era + 1];\n    if (next == null) {\n      // 9999 gregorian is the maximum year allowed.\n      return 9999 - cur[0] + 1;\n    }\n\n    let years = next[0] - cur[0];\n\n    if (date.month < next[1] || (date.month === next[1] && date.day < next[2])) {\n      years++;\n    }\n\n    return years;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return super.getDaysInMonth(toGregorian(date));\n  }\n\n  getMinimumMonthInYear(date: AnyCalendarDate): number {\n    let start = getMinimums(date);\n    return start ? start[1] : 1;\n  }\n\n  getMinimumDayInMonth(date: AnyCalendarDate): number {\n    let start = getMinimums(date);\n    return start && date.month === start[1] ? start[2] : 1;\n  }\n}\n\nfunction getMinimums(date: AnyCalendarDate) {\n  if (date.year === 1) {\n    let idx = ERA_NAMES.indexOf(date.era);\n    return ERA_START_DATES[idx];\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {fromExtendedYear, getExtendedYear, GregorianCalendar} from './GregorianCalendar';\n\nconst BUDDHIST_ERA_START = -543;\n\n/**\n * The Buddhist calendar is the same as the Gregorian calendar, but counts years\n * starting from the birth of Buddha in 543 BC (Gregorian). It supports only one\n * era, identified as 'BE'.\n */\nexport class BuddhistCalendar extends GregorianCalendar {\n  identifier = 'buddhist';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let gregorianDate = super.fromJulianDay(jd);\n    let year = getExtendedYear(gregorianDate.era, gregorianDate.year);\n    return new CalendarDate(\n      this,\n      year - BUDDHIST_ERA_START,\n      gregorianDate.month,\n      gregorianDate.day\n    );\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return super.toJulianDay(toGregorian(date));\n  }\n\n  getEras() {\n    return ['BE'];\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return super.getDaysInMonth(toGregorian(date));\n  }\n\n  balanceDate() {}\n}\n\nfunction toGregorian(date: AnyCalendarDate) {\n  let [era, year] = fromExtendedYear(date.year + BUDDHIST_ERA_START);\n  return new CalendarDate(\n    era,\n    year,\n    date.month,\n    date.day\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {fromExtendedYear, getExtendedYear, GregorianCalendar} from './GregorianCalendar';\nimport {Mutable} from '../utils';\n\nconst TAIWAN_ERA_START = 1911;\n\nfunction gregorianYear(date: AnyCalendarDate) {\n  return date.era === 'minguo'\n    ? date.year + TAIWAN_ERA_START\n    : 1 - date.year + TAIWAN_ERA_START;\n}\n\nfunction gregorianToTaiwan(year: number): [string, number] {\n  let y = year - TAIWAN_ERA_START;\n  if (y > 0) {\n    return ['minguo', y];\n  } else {\n    return ['before_minguo', 1 - y];\n  }\n}\n\n/**\n * The Taiwanese calendar is the same as the Gregorian calendar, but years\n * are numbered starting from 1912 (Gregorian). Two eras are supported:\n * 'before_minguo' and 'minguo'.\n */\nexport class TaiwanCalendar extends GregorianCalendar {\n  identifier = 'roc'; // Republic of China\n\n  fromJulianDay(jd: number): CalendarDate {\n    let date = super.fromJulianDay(jd);\n    let extendedYear = getExtendedYear(date.era, date.year);\n    let [era, year] = gregorianToTaiwan(extendedYear);\n    return new CalendarDate(this, era, year, date.month, date.day);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return super.toJulianDay(toGregorian(date));\n  }\n\n  getEras() {\n    return ['before_minguo', 'minguo'];\n  }\n\n  balanceDate(date: Mutable<AnyCalendarDate>) {\n    let [era, year] = gregorianToTaiwan(gregorianYear(date));\n    date.era = era;\n    date.year = year;\n  }\n\n  isInverseEra(date: AnyCalendarDate): boolean {\n    return date.era === 'before_minguo';\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return super.getDaysInMonth(toGregorian(date));\n  }\n\n  getYearsInEra(date: AnyCalendarDate): number {\n    return date.era === 'before_minguo' ? 9999 : 9999 - TAIWAN_ERA_START;\n  }\n}\n\nfunction toGregorian(date: AnyCalendarDate) {\n  let [era, year] = fromExtendedYear(gregorianYear(date));\n  return new CalendarDate(\n    era,\n    year,\n    date.month,\n    date.day\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {mod} from '../utils';\n\nconst PERSIAN_EPOCH = 1948321; // 622/03/19 Julian C.E.\n\nfunction isLeapYear(year: number): boolean {\n  let y0 = year > 0 ? year - 474 : year - 473;\n  let y1 = mod(y0, 2820) + 474;\n\n  return mod((y1 + 38) * 31, 128) < 31;\n}\n\nfunction persianToJulianDay(year: number, month: number, day: number): number {\n  let y0 = year > 0 ? year - 474 : year - 473;\n  let y1 = mod(y0, 2820) + 474;\n  let offset = month <= 7 ? 31 * (month - 1) : 30 * (month - 1) + 6;\n\n  return (\n    PERSIAN_EPOCH -\n    1 +\n    1029983 * Math.floor(y0 / 2820) +\n    365 * (y1 - 1) +\n    Math.floor((31 * y1 - 5) / 128) +\n    offset +\n    day\n  );\n}\n\n/**\n * The Persian calendar is the main calendar used in Iran and Afghanistan. It has 12 months\n * in each year, the first 6 of which have 31 days, and the next 5 have 30 days. The 12th month\n * has either 29 or 30 days depending on whether it is a leap year. The Persian year starts\n * around the March equinox.\n */\nexport class PersianCalendar implements Calendar {\n  identifier = 'persian';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let d0 = jd - persianToJulianDay(475, 1, 1);\n    let n2820 = Math.floor(d0 / 1029983);\n    let d1 = mod(d0, 1029983);\n    let y2820 = d1 === 1029982 ? 2820 : Math.floor((128 * d1 + 46878) / 46751);\n    let year = 474 + 2820 * n2820 + y2820;\n    if (year <= 0) {\n      year--;\n    }\n\n    let yDay = jd - persianToJulianDay(year, 1, 1) + 1;\n    let month = yDay <= 186 ? Math.ceil(yDay / 31) : Math.ceil((yDay - 6) / 31);\n    let day = jd - persianToJulianDay(year, month, 1) + 1;\n\n    return new CalendarDate(this, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    return persianToJulianDay(date.year, date.month, date.day);\n  }\n\n  getMonthsInYear(): number {\n    return 12;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    if (date.month <= 6) {\n      return 31;\n    }\n\n    if (date.month <= 11) {\n      return 30;\n    }\n\n    return isLeapYear(date.year) ? 30 : 29;\n  }\n\n  getEras() {\n    return ['AP'];\n  }\n\n  getYearsInEra(): number {\n    // 9378-10-10 persian is 9999-12-31 gregorian.\n    // Round down to 9377 to set the maximum full year.\n    return 9377;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {fromExtendedYear, GregorianCalendar, gregorianToJulianDay, isLeapYear} from './GregorianCalendar';\n\n// Starts in 78 AD,\nconst INDIAN_ERA_START = 78;\n\n// The Indian year starts 80 days later than the Gregorian year.\nconst INDIAN_YEAR_START = 80;\n\n/**\n * The Indian National Calendar is similar to the Gregorian calendar, but with\n * years numbered since the Saka era in 78 AD (Gregorian). There are 12 months\n * in each year, with either 30 or 31 days. Only one era identifier is supported: 'saka'.\n */\nexport class IndianCalendar extends GregorianCalendar {\n  identifier = 'indian';\n\n  fromJulianDay(jd: number): CalendarDate {\n    // Gregorian date for Julian day\n    let date = super.fromJulianDay(jd);\n\n    // Year in Saka era\n    let indianYear = date.year - INDIAN_ERA_START;\n\n    // Day number in Gregorian year (starting from 0)\n    let yDay = jd - gregorianToJulianDay(date.era, date.year, 1, 1);\n\n    let leapMonth: number;\n    if (yDay < INDIAN_YEAR_START) {\n      //  Day is at the end of the preceding Saka year\n      indianYear--;\n\n      // Days in leapMonth this year, previous Gregorian year\n      leapMonth = isLeapYear(date.year - 1) ? 31 : 30;\n      yDay += leapMonth + (31 * 5) + (30 * 3) + 10;\n    } else {\n      // Days in leapMonth this year\n      leapMonth = isLeapYear(date.year) ? 31 : 30;\n      yDay -= INDIAN_YEAR_START;\n    }\n\n    let indianMonth: number;\n    let indianDay: number;\n    if (yDay < leapMonth) {\n      indianMonth = 1;\n      indianDay = yDay + 1;\n    } else {\n      let mDay = yDay - leapMonth;\n      if (mDay < (31 * 5)) {\n        indianMonth = Math.floor(mDay / 31) + 2;\n        indianDay = (mDay % 31) + 1;\n      } else {\n        mDay -= 31 * 5;\n        indianMonth = Math.floor(mDay / 30) + 7;\n        indianDay = (mDay % 30) + 1;\n      }\n    }\n\n    return new CalendarDate(this, indianYear, indianMonth, indianDay);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let extendedYear = date.year + INDIAN_ERA_START;\n    let [era, year] = fromExtendedYear(extendedYear);\n\n    let leapMonth: number;\n    let jd: number;\n    if (isLeapYear(year)) {\n      leapMonth = 31;\n      jd = gregorianToJulianDay(era, year, 3, 21);\n    } else {\n      leapMonth = 30;\n      jd = gregorianToJulianDay(era, year, 3, 22);\n    }\n\n    if (date.month === 1) {\n      return jd + date.day - 1;\n    }\n\n    jd += leapMonth + Math.min(date.month - 2, 5) * 31;\n\n    if (date.month >= 8) {\n      jd += (date.month - 7) * 30;\n    }\n\n    jd += date.day - 1;\n    return jd;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    if (date.month === 1 && isLeapYear(date.year + INDIAN_ERA_START)) {\n      return 31;\n    }\n\n    if (date.month >= 2 && date.month <= 6) {\n      return 31;\n    }\n\n    return 30;\n  }\n\n  getYearsInEra(): number {\n    // 9999-12-31 gregorian is 9920-10-10 indian.\n    // Round down to 9919 for the last full year.\n    return 9919;\n  }\n\n  getEras() {\n    return ['saka'];\n  }\n\n  balanceDate() {}\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\n\nconst CIVIL_EPOC = 1948440; // CE 622 July 16 Friday (Julian calendar) / CE 622 July 19 (Gregorian calendar)\nconst ASTRONOMICAL_EPOC = 1948439; // CE 622 July 15 Thursday (Julian calendar)\nconst UMALQURA_YEAR_START = 1300;\nconst UMALQURA_YEAR_END = 1600;\nconst UMALQURA_START_DAYS = 460322;\n\nfunction islamicToJulianDay(epoch: number, year: number, month: number, day: number): number {\n  return day +\n    Math.ceil(29.5 * (month - 1)) +\n    (year - 1) * 354 +\n    Math.floor((3 + 11 * year) / 30) +\n    epoch - 1;\n}\n\nfunction julianDayToIslamic(calendar: Calendar, epoch: number, jd: number) {\n  let year = Math.floor((30 * (jd - epoch) + 10646) / 10631);\n  let month = Math.min(12, Math.ceil((jd - (29 + islamicToJulianDay(epoch, year, 1, 1))) / 29.5) + 1);\n  let day = jd - islamicToJulianDay(epoch, year, month, 1) + 1;\n\n  return new CalendarDate(calendar, year, month, day);\n}\n\nfunction isLeapYear(year: number): boolean {\n  return (14 + 11 * year) % 30 < 11;\n}\n\n/**\n * The Islamic calendar, also known as the \"Hijri\" calendar, is used throughout much of the Arab world.\n * The civil variant uses simple arithmetic rules rather than astronomical calculations to approximate\n * the traditional calendar, which is based on sighting of the crescent moon. It uses Friday, July 16 622 CE (Julian) as the epoch.\n * Each year has 12 months, with either 354 or 355 days depending on whether it is a leap year.\n * Learn more about the available Islamic calendars [here](https://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types).\n */\nexport class IslamicCivilCalendar implements Calendar {\n  identifier = 'islamic-civil';\n\n  fromJulianDay(jd: number): CalendarDate {\n    return julianDayToIslamic(this, CIVIL_EPOC, jd);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return islamicToJulianDay(CIVIL_EPOC, date.year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    let length = 29 + date.month % 2;\n    if (date.month === 12 && isLeapYear(date.year)) {\n      length++;\n    }\n\n    return length;\n  }\n\n  getMonthsInYear(): number {\n    return 12;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return isLeapYear(date.year) ? 355 : 354;\n  }\n\n  getYearsInEra(): number {\n    // 9999 gregorian\n    return 9665;\n  }\n\n  getEras() {\n    return ['AH'];\n  }\n}\n\n/**\n * The Islamic calendar, also known as the \"Hijri\" calendar, is used throughout much of the Arab world.\n * The tabular variant uses simple arithmetic rules rather than astronomical calculations to approximate\n * the traditional calendar, which is based on sighting of the crescent moon. It uses Thursday, July 15 622 CE (Julian) as the epoch.\n * Each year has 12 months, with either 354 or 355 days depending on whether it is a leap year.\n * Learn more about the available Islamic calendars [here](https://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types).\n */\nexport class IslamicTabularCalendar extends IslamicCivilCalendar {\n  identifier = 'islamic-tbla';\n\n  fromJulianDay(jd: number): CalendarDate {\n    return julianDayToIslamic(this, ASTRONOMICAL_EPOC, jd);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return islamicToJulianDay(ASTRONOMICAL_EPOC, date.year, date.month, date.day);\n  }\n}\n\n// Generated by scripts/generate-umalqura.js\nconst UMALQURA_DATA = 'qgpUDckO1AbqBmwDrQpVBakGkgepC9QF2gpcBS0NlQZKB1QLagutBa4ETwoXBYsGpQbVCtYCWwmdBE0KJg2VDawFtgm6AlsKKwWVCsoG6Qr0AnYJtgJWCcoKpAvSC9kF3AJtCU0FpQpSC6ULtAW2CVcFlwJLBaMGUgdlC2oFqworBZUMSg2lDcoF1gpXCasESwmlClILagt1BXYCtwhbBFUFqQW0BdoJ3QRuAjYJqgpUDbIN1QXaAlsJqwRVCkkLZAtxC7QFtQpVCiUNkg7JDtQG6QprCasEkwpJDaQNsg25CroEWworBZUKKgtVC1wFvQQ9Ah0JlQpKC1oLbQW2AjsJmwRVBqkGVAdqC2wFrQpVBSkLkgupC9QF2gpaBasKlQVJB2QHqgu1BbYCVgpNDiULUgtqC60FrgIvCZcESwalBqwG1gpdBZ0ETQoWDZUNqgW1BdoCWwmtBJUFygbkBuoK9QS2AlYJqgpUC9IL2QXqAm0JrQSVCkoLpQuyBbUJ1gSXCkcFkwZJB1ULagVrCisFiwpGDaMNygXWCtsEawJLCaUKUgtpC3UFdgG3CFsCKwVlBbQF2gntBG0BtgimClINqQ3UBdoKWwmrBFMGKQdiB6kLsgW1ClUFJQuSDckO0gbpCmsFqwRVCikNVA2qDbUJugQ7CpsETQqqCtUK2gJdCV4ELgqaDFUNsga5BroEXQotBZUKUguoC7QLuQXaAloJSgukDdEO6AZqC20FNQWVBkoNqA3UDdoGWwWdAisGFQtKC5ULqgWuCi4JjwwnBZUGqgbWCl0FnQI=';\nlet UMALQURA_MONTHLENGTH: Uint16Array;\nlet UMALQURA_YEAR_START_TABLE: Uint32Array;\n\nfunction umalquraYearStart(year: number): number {\n  return UMALQURA_START_DAYS + UMALQURA_YEAR_START_TABLE[year - UMALQURA_YEAR_START];\n}\n\nfunction umalquraMonthLength(year: number, month: number): number {\n  let idx = (year - UMALQURA_YEAR_START);\n  let mask = (0x01 << (11 - (month - 1)));\n  if ((UMALQURA_MONTHLENGTH[idx] & mask) === 0) {\n    return 29;\n  } else {\n    return 30;\n  }\n}\n\nfunction umalquraMonthStart(year: number, month: number): number {\n  let day = umalquraYearStart(year);\n  for (let i = 1; i < month; i++) {\n    day += umalquraMonthLength(year, i);\n  }\n  return day;\n}\n\nfunction umalquraYearLength(year: number): number {\n  return UMALQURA_YEAR_START_TABLE[year + 1 - UMALQURA_YEAR_START] - UMALQURA_YEAR_START_TABLE[year - UMALQURA_YEAR_START];\n}\n\n/**\n * The Islamic calendar, also known as the \"Hijri\" calendar, is used throughout much of the Arab world.\n * The Umalqura variant is primarily used in Saudi Arabia. It is a lunar calendar, based on astronomical\n * calculations that predict the sighting of a crescent moon. Month and year lengths vary between years\n * depending on these calculations.\n * Learn more about the available Islamic calendars [here](https://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types).\n */\nexport class IslamicUmalquraCalendar extends IslamicCivilCalendar {\n  identifier = 'islamic-umalqura';\n\n  constructor() {\n    super();\n    if (!UMALQURA_MONTHLENGTH) {\n      UMALQURA_MONTHLENGTH = new Uint16Array(Uint8Array.from(atob(UMALQURA_DATA), c => c.charCodeAt(0)).buffer);\n    }\n\n    if (!UMALQURA_YEAR_START_TABLE) {\n      UMALQURA_YEAR_START_TABLE = new Uint32Array(UMALQURA_YEAR_END - UMALQURA_YEAR_START + 1);\n\n      let yearStart = 0;\n      for (let year = UMALQURA_YEAR_START; year <= UMALQURA_YEAR_END; year++) {\n        UMALQURA_YEAR_START_TABLE[year - UMALQURA_YEAR_START] = yearStart;\n        for (let i = 1; i <= 12; i++) {\n          yearStart += umalquraMonthLength(year, i);\n        }\n      }\n    }\n  }\n\n  fromJulianDay(jd: number): CalendarDate {\n    let days = jd - CIVIL_EPOC;\n    let startDays = umalquraYearStart(UMALQURA_YEAR_START);\n    let endDays = umalquraYearStart(UMALQURA_YEAR_END);\n    if (days < startDays || days > endDays) {\n      return super.fromJulianDay(jd);\n    } else {\n      let y = UMALQURA_YEAR_START - 1;\n      let m = 1;\n      let d = 1;\n      while (d > 0) {\n        y++;\n        d = days - umalquraYearStart(y) + 1;\n        let yearLength = umalquraYearLength(y);\n        if (d === yearLength) {\n          m = 12;\n          break;\n        } else if (d < yearLength) {\n          let monthLength = umalquraMonthLength(y, m);\n          m = 1;\n          while (d > monthLength) {\n            d -= monthLength;\n            m++;\n            monthLength = umalquraMonthLength(y, m);\n          }\n          break;\n        }\n      }\n\n      return new CalendarDate(this, y, m, (days - umalquraMonthStart(y, m) + 1));\n    }\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    if (date.year < UMALQURA_YEAR_START || date.year > UMALQURA_YEAR_END) {\n      return super.toJulianDay(date);\n    }\n\n    return CIVIL_EPOC + umalquraMonthStart(date.year, date.month) + (date.day - 1);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    if (date.year < UMALQURA_YEAR_START || date.year > UMALQURA_YEAR_END) {\n      return super.getDaysInMonth(date);\n    }\n\n    return umalquraMonthLength(date.year, date.month);\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    if (date.year < UMALQURA_YEAR_START || date.year > UMALQURA_YEAR_END) {\n      return super.getDaysInYear(date);\n    }\n\n    return umalquraYearLength(date.year);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {mod, Mutable} from '../utils';\n\nconst HEBREW_EPOCH = 347997;\n\n// Hebrew date calculations are performed in terms of days, hours, and\n// \"parts\" (or halakim), which are 1/1080 of an hour, or 3 1/3 seconds.\nconst HOUR_PARTS = 1080;\nconst DAY_PARTS  = 24 * HOUR_PARTS;\n\n// An approximate value for the length of a lunar month.\n// It is used to calculate the approximate year and month of a given\n// absolute date.\nconst MONTH_DAYS = 29;\nconst MONTH_FRACT = 12 * HOUR_PARTS + 793;\nconst MONTH_PARTS = MONTH_DAYS * DAY_PARTS + MONTH_FRACT;\n\nfunction isLeapYear(year: number) {\n  return mod(year * 7 + 1, 19) < 7;\n}\n\n// Test for delay of start of new year and to avoid\n// Sunday, Wednesday, and Friday as start of the new year.\nfunction hebrewDelay1(year: number) {\n  let months = Math.floor((235 * year - 234) / 19);\n  let parts = 12084 + 13753 * months;\n  let day = months * 29 + Math.floor(parts / 25920);\n\n  if (mod(3 * (day + 1), 7) < 3) {\n    day += 1;\n  }\n\n  return day;\n}\n\n// Check for delay in start of new year due to length of adjacent years\nfunction hebrewDelay2(year: number) {\n  let last = hebrewDelay1(year - 1);\n  let present = hebrewDelay1(year);\n  let next = hebrewDelay1(year + 1);\n\n  if (next - present === 356) {\n    return 2;\n  }\n\n  if (present - last === 382) {\n    return 1;\n  }\n\n  return 0;\n}\n\nfunction startOfYear(year: number) {\n  return hebrewDelay1(year) + hebrewDelay2(year);\n}\n\nfunction getDaysInYear(year: number) {\n  return startOfYear(year + 1) - startOfYear(year);\n}\n\nfunction getYearType(year: number) {\n  let yearLength = getDaysInYear(year);\n\n  if (yearLength > 380) {\n    yearLength -= 30; // Subtract length of leap month.\n  }\n\n  switch (yearLength) {\n    case 353:\n      return 0; // deficient\n    case 354:\n      return 1; // normal\n    case 355:\n      return 2; // complete\n  }\n}\n\nfunction getDaysInMonth(year: number, month: number): number {\n  // Normalize month numbers from 1 - 13, even on non-leap years\n  if (month >= 6 && !isLeapYear(year)) {\n    month++;\n  }\n\n  // First of all, dispose of fixed-length 29 day months\n  if (month === 4 || month === 7 || month === 9 || month === 11 || month === 13) {\n    return 29;\n  }\n\n  let yearType = getYearType(year);\n\n  // If it's Heshvan, days depend on length of year\n  if (month === 2) {\n    return yearType === 2 ? 30 : 29;\n  }\n\n  // Similarly, Kislev varies with the length of year\n  if (month === 3) {\n    return yearType === 0 ? 29 : 30;\n  }\n\n  // Adar I only exists in leap years\n  if (month === 6) {\n    return isLeapYear(year) ? 30 : 0;\n  }\n\n  return 30;\n}\n\n/**\n * The Hebrew calendar is used in Israel and around the world by the Jewish faith.\n * Years include either 12 or 13 months depending on whether it is a leap year.\n * In leap years, an extra month is inserted at month 6.\n */\nexport class HebrewCalendar implements Calendar {\n  identifier = 'hebrew';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let d = jd - HEBREW_EPOCH;\n    let m = (d * DAY_PARTS) / MONTH_PARTS;           // Months (approx)\n    let year = Math.floor((19 * m + 234) / 235) + 1; // Years (approx)\n    let ys = startOfYear(year);                      // 1st day of year\n    let dayOfYear = Math.floor(d - ys);\n\n    // Because of the postponement rules, it's possible to guess wrong.  Fix it.\n    while (dayOfYear < 1) {\n      year--;\n      ys = startOfYear(year);\n      dayOfYear = Math.floor(d - ys);\n    }\n\n    // Now figure out which month we're in, and the date within that month\n    let month = 1;\n    let monthStart = 0;\n    while (monthStart < dayOfYear) {\n      monthStart += getDaysInMonth(year, month);\n      month++;\n    }\n\n    month--;\n    monthStart -= getDaysInMonth(year, month);\n\n    let day = dayOfYear - monthStart;\n    return new CalendarDate(this, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let jd = startOfYear(date.year);\n    for (let month = 1; month < date.month; month++) {\n      jd += getDaysInMonth(date.year, month);\n    }\n\n    return jd + date.day + HEBREW_EPOCH;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return getDaysInMonth(date.year, date.month);\n  }\n\n  getMonthsInYear(date: AnyCalendarDate): number {\n    return isLeapYear(date.year) ? 13 : 12;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return getDaysInYear(date.year);\n  }\n\n  getYearsInEra(): number {\n    // 6239 gregorian\n    return 9999;\n  }\n\n  getEras() {\n    return ['AM'];\n  }\n\n  balanceYearMonth(date: Mutable<AnyCalendarDate>, previousDate: AnyCalendarDate) {\n    // Keep date in the same month when switching between leap years and non leap years\n    if (previousDate.year !== date.year) {\n      if (isLeapYear(previousDate.year) && !isLeapYear(date.year) && previousDate.month > 6) {\n        date.month--;\n      } else if (!isLeapYear(previousDate.year) && isLeapYear(date.year) && previousDate.month > 6) {\n        date.month++;\n      }\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {Mutable} from '../utils';\n\nconst ETHIOPIC_EPOCH = 1723856;\nconst COPTIC_EPOCH = 1824665;\n\n// The delta between Amete Alem 1 and Amete Mihret 1\n// AA 5501 = AM 1\nconst AMETE_MIHRET_DELTA = 5500;\n\nfunction ceToJulianDay(epoch: number, year: number, month: number, day: number): number {\n  return (\n    epoch                   // difference from Julian epoch to 1,1,1\n    + 365 * year            // number of days from years\n    + Math.floor(year / 4)  // extra day of leap year\n    + 30 * (month - 1)      // number of days from months (1 based)\n    + day - 1               // number of days for present month (1 based)\n  );\n}\n\nfunction julianDayToCE(epoch: number, jd: number) {\n  let year = Math.floor((4 * (jd - epoch)) / 1461);\n  let month = 1 + Math.floor((jd - ceToJulianDay(epoch, year, 1, 1)) / 30);\n  let day = jd + 1 - ceToJulianDay(epoch, year, month, 1);\n  return [year, month, day];\n}\n\nfunction getLeapDay(year: number) {\n  return Math.floor((year % 4) / 3);\n}\n\nfunction getDaysInMonth(year: number, month: number) {\n  // The Ethiopian and Coptic calendars have 13 months, 12 of 30 days each and\n  // an intercalary month at the end of the year of 5 or 6 days, depending whether\n  // the year is a leap year or not. The Leap Year follows the same rules as the\n  // Julian Calendar so that the extra month always has six days in the year before\n  // a Julian Leap Year.\n  if (month % 13 !== 0) {\n    // not intercalary month\n    return 30;\n  } else {\n    // intercalary month 5 days + possible leap day\n    return getLeapDay(year) + 5;\n  }\n}\n\n/**\n * The Ethiopic calendar system is the official calendar used in Ethiopia.\n * It includes 12 months of 30 days each, plus 5 or 6 intercalary days depending\n * on whether it is a leap year. Two eras are supported: 'AA' and 'AM'.\n */\nexport class EthiopicCalendar implements Calendar {\n  identifier = 'ethiopic';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let [year, month, day] = julianDayToCE(ETHIOPIC_EPOCH, jd);\n    let era = 'AM';\n    if (year <= 0) {\n      era = 'AA';\n      year += AMETE_MIHRET_DELTA;\n    }\n\n    return new CalendarDate(this, era, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let year = date.year;\n    if (date.era === 'AA') {\n      year -= AMETE_MIHRET_DELTA;\n    }\n\n    return ceToJulianDay(ETHIOPIC_EPOCH, year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return getDaysInMonth(date.year, date.month);\n  }\n\n  getMonthsInYear(): number {\n    return 13;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return 365 + getLeapDay(date.year);\n  }\n\n  getYearsInEra(date: AnyCalendarDate): number {\n    // 9999-12-31 gregorian is 9992-20-02 ethiopic.\n    // Round down to 9991 for the last full year.\n    // AA 9999-01-01 ethiopic is 4506-09-30 gregorian.\n    return date.era === 'AA' ? 9999 : 9991;\n  }\n\n  getEras() {\n    return ['AA', 'AM'];\n  }\n}\n\n/**\n * The Ethiopic (Amete Alem) calendar is the same as the modern Ethiopic calendar,\n * except years were measured from a different epoch. Only one era is supported: 'AA'.\n */\nexport class EthiopicAmeteAlemCalendar extends EthiopicCalendar {\n  identifier = 'ethioaa'; // also known as 'ethiopic-amete-alem' in ICU\n\n  fromJulianDay(jd: number): CalendarDate {\n    let [year, month, day] = julianDayToCE(ETHIOPIC_EPOCH, jd);\n    year += AMETE_MIHRET_DELTA;\n    return new CalendarDate(this, 'AA', year, month, day);\n  }\n\n  getEras() {\n    return ['AA'];\n  }\n\n  getYearsInEra(): number {\n    // 9999-13-04 ethioaa is the maximum date, which is equivalent to 4506-09-29 gregorian.\n    return 9999;\n  }\n}\n\n/**\n * The Coptic calendar is similar to the Ethiopic calendar.\n * It includes 12 months of 30 days each, plus 5 or 6 intercalary days depending\n * on whether it is a leap year. Two eras are supported: 'BCE' and 'CE'.\n */\nexport class CopticCalendar extends EthiopicCalendar {\n  identifier = 'coptic';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let [year, month, day] = julianDayToCE(COPTIC_EPOCH, jd);\n    let era = 'CE';\n    if (year <= 0) {\n      era = 'BCE';\n      year = 1 - year;\n    }\n\n    return new CalendarDate(this, era, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let year = date.year;\n    if (date.era === 'BCE') {\n      year = 1 - year;\n    }\n\n    return ceToJulianDay(COPTIC_EPOCH, year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    let year = date.year;\n    if (date.era === 'BCE') {\n      year = 1 - year;\n    }\n\n    return getDaysInMonth(year, date.month);\n  }\n\n  isInverseEra(date: AnyCalendarDate): boolean {\n    return date.era === 'BCE';\n  }\n\n  balanceDate(date: Mutable<AnyCalendarDate>) {\n    if (date.year <= 0) {\n      date.era = date.era === 'BCE' ? 'CE' : 'BCE';\n      date.year = 1 - date.year;\n    }\n  }\n\n  getEras() {\n    return ['BCE', 'CE'];\n  }\n\n  getYearsInEra(date: AnyCalendarDate): number {\n    // 9999-12-30 gregorian is 9716-02-20 coptic.\n    // Round down to 9715 for the last full year.\n    // BCE 9999-01-01 coptic is BC 9716-06-15 gregorian.\n    return date.era === 'BCE' ? 9999 : 9715;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {BuddhistCalendar} from './calendars/BuddhistCalendar';\nimport {Calendar} from './types';\nimport {CopticCalendar, EthiopicAmeteAlemCalendar, EthiopicCalendar} from './calendars/EthiopicCalendar';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {HebrewCalendar} from './calendars/HebrewCalendar';\nimport {IndianCalendar} from './calendars/IndianCalendar';\nimport {IslamicCivilCalendar, IslamicTabularCalendar, IslamicUmalquraCalendar} from './calendars/IslamicCalendar';\nimport {JapaneseCalendar} from './calendars/JapaneseCalendar';\nimport {PersianCalendar} from './calendars/PersianCalendar';\nimport {TaiwanCalendar} from './calendars/TaiwanCalendar';\n\n/** Creates a `Calendar` instance from a Unicode calendar identifier string. */\nexport function createCalendar(name: string): Calendar {\n  switch (name) {\n    case 'buddhist':\n      return new BuddhistCalendar();\n    case 'ethiopic':\n      return new EthiopicCalendar();\n    case 'ethioaa':\n      return new EthiopicAmeteAlemCalendar();\n    case 'coptic':\n      return new CopticCalendar();\n    case 'hebrew':\n      return new HebrewCalendar();\n    case 'indian':\n      return new IndianCalendar();\n    case 'islamic-civil':\n      return new IslamicCivilCalendar();\n    case 'islamic-tbla':\n      return new IslamicTabularCalendar();\n    case 'islamic-umalqura':\n      return new IslamicUmalquraCalendar();\n    case 'japanese':\n      return new JapaneseCalendar();\n    case 'persian':\n      return new PersianCalendar();\n    case 'roc':\n      return new TaiwanCalendar();\n    case 'gregory':\n    default:\n      return new GregorianCalendar();\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nlet formatterCache = new Map<string, Intl.DateTimeFormat>();\n\ninterface ResolvedDateTimeFormatOptions extends Intl.ResolvedDateTimeFormatOptions {\n  hourCycle?: Intl.DateTimeFormatOptions['hourCycle']\n}\n\ninterface DateRangeFormatPart extends Intl.DateTimeFormatPart {\n  source: 'startRange' | 'endRange' | 'shared'\n}\n\n/** A wrapper around Intl.DateTimeFormat that fixes various browser bugs, and polyfills new features. */\nexport class DateFormatter implements Intl.DateTimeFormat {\n  private formatter: Intl.DateTimeFormat;\n  private options: Intl.DateTimeFormatOptions;\n  private resolvedHourCycle: Intl.DateTimeFormatOptions['hourCycle'];\n\n  constructor(locale: string, options: Intl.DateTimeFormatOptions = {}) {\n    this.formatter = getCachedDateFormatter(locale, options);\n    this.options = options;\n  }\n\n  /** Formats a date as a string according to the locale and format options passed to the constructor. */\n  format(value: Date): string {\n    return this.formatter.format(value);\n  }\n\n  /** Formats a date to an array of parts such as separators, numbers, punctuation, and more. */\n  formatToParts(value: Date): Intl.DateTimeFormatPart[] {\n    return this.formatter.formatToParts(value);\n  }\n\n  /** Formats a date range as a string. */\n  formatRange(start: Date, end: Date): string {\n    // @ts-ignore\n    if (typeof this.formatter.formatRange === 'function') {\n      // @ts-ignore\n      return this.formatter.formatRange(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    // Very basic fallback for old browsers.\n    return `${this.formatter.format(start)} – ${this.formatter.format(end)}`;\n  }\n\n  /** Formats a date range as an array of parts. */\n  formatRangeToParts(start: Date, end: Date): DateRangeFormatPart[] {\n    // @ts-ignore\n    if (typeof this.formatter.formatRangeToParts === 'function') {\n      // @ts-ignore\n      return this.formatter.formatRangeToParts(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    let startParts = this.formatter.formatToParts(start);\n    let endParts = this.formatter.formatToParts(end);\n    return [\n      ...startParts.map(p => ({...p, source: 'startRange'} as DateRangeFormatPart)),\n      {type: 'literal', value: ' – ', source: 'shared'},\n      ...endParts.map(p => ({...p, source: 'endRange'} as DateRangeFormatPart))\n    ];\n  }\n\n  /** Returns the resolved formatting options based on the values passed to the constructor. */\n  resolvedOptions(): ResolvedDateTimeFormatOptions {\n    let resolvedOptions = this.formatter.resolvedOptions() as ResolvedDateTimeFormatOptions;\n    if (hasBuggyResolvedHourCycle()) {\n      if (!this.resolvedHourCycle) {\n        this.resolvedHourCycle = getResolvedHourCycle(resolvedOptions.locale, this.options);\n      }\n      resolvedOptions.hourCycle = this.resolvedHourCycle;\n      resolvedOptions.hour12 = this.resolvedHourCycle === 'h11' || this.resolvedHourCycle === 'h12';\n    }\n\n    // Safari uses a different name for the Ethiopic (Amete Alem) calendar.\n    // https://bugs.webkit.org/show_bug.cgi?id=241564\n    if (resolvedOptions.calendar === 'ethiopic-amete-alem') {\n      resolvedOptions.calendar = 'ethioaa';\n    }\n\n    return resolvedOptions;\n  }\n}\n\n// There are multiple bugs involving the hour12 and hourCycle options in various browser engines.\n//   - Chrome [1] (and the ECMA 402 spec [2]) resolve hour12: false in English and other locales to h24 (24:00 - 23:59)\n//     rather than h23 (00:00 - 23:59). Same can happen with hour12: true in French, which Chrome resolves to h11 (00:00 - 11:59)\n//     rather than h12 (12:00 - 11:59).\n//   - WebKit returns an incorrect hourCycle resolved option in the French locale due to incorrect parsing of 'h' literal\n//     in the resolved pattern. It also formats incorrectly when specifying the hourCycle option for the same reason. [3]\n// [1] https://bugs.chromium.org/p/chromium/issues/detail?id=1045791\n// [2] https://github.com/tc39/ecma402/issues/402\n// [3] https://bugs.webkit.org/show_bug.cgi?id=229313\n\n// https://github.com/unicode-org/cldr/blob/018b55eff7ceb389c7e3fc44e2f657eae3b10b38/common/supplemental/supplementalData.xml#L4774-L4802\nconst hour12Preferences = {\n  true: {\n    // Only Japanese uses the h11 style for 12 hour time. All others use h12.\n    ja: 'h11'\n  },\n  false: {\n    // All locales use h23 for 24 hour time. None use h24.\n  }\n};\n\nfunction getCachedDateFormatter(locale: string, options: Intl.DateTimeFormatOptions = {}): Intl.DateTimeFormat {\n  // Work around buggy hour12 behavior in Chrome / ECMA 402 spec by using hourCycle instead.\n  // Only apply the workaround if the issue is detected, because the hourCycle option is buggy in Safari.\n  if (typeof options.hour12 === 'boolean' && hasBuggyHour12Behavior()) {\n    options = {...options};\n    let pref = hour12Preferences[String(options.hour12)][locale.split('-')[0]];\n    let defaultHourCycle = options.hour12 ? 'h12' : 'h23';\n    options.hourCycle = pref ?? defaultHourCycle;\n    delete options.hour12;\n  }\n\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  if (formatterCache.has(cacheKey)) {\n    return formatterCache.get(cacheKey);\n  }\n\n  let numberFormatter = new Intl.DateTimeFormat(locale, options);\n  formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\n\nlet _hasBuggyHour12Behavior: boolean = null;\nfunction hasBuggyHour12Behavior() {\n  if (_hasBuggyHour12Behavior == null) {\n    _hasBuggyHour12Behavior = new Intl.DateTimeFormat('en-US', {\n      hour: 'numeric',\n      hour12: false\n    }).format(new Date(2020, 2, 3, 0)) === '24';\n  }\n\n  return _hasBuggyHour12Behavior;\n}\n\nlet _hasBuggyResolvedHourCycle: boolean = null;\nfunction hasBuggyResolvedHourCycle() {\n  if (_hasBuggyResolvedHourCycle == null) {\n    _hasBuggyResolvedHourCycle = (new Intl.DateTimeFormat('fr', {\n      hour: 'numeric',\n      hour12: false\n    }).resolvedOptions() as ResolvedDateTimeFormatOptions).hourCycle === 'h12';\n  }\n\n  return _hasBuggyResolvedHourCycle;\n}\n\nfunction getResolvedHourCycle(locale: string, options: Intl.DateTimeFormatOptions) {\n  if (!options.timeStyle && !options.hour) {\n    return undefined;\n  }\n\n  // Work around buggy results in resolved hourCycle and hour12 options in WebKit.\n  // Format the minimum possible hour and maximum possible hour in a day and parse the results.\n  locale = locale.replace(/(-u-)?-nu-[a-zA-Z0-9]+/, '');\n  locale += (locale.includes('-u-') ? '' : '-u') + '-nu-latn';\n  let formatter = getCachedDateFormatter(locale, {\n    ...options,\n    timeZone: undefined // use local timezone\n  });\n\n  let min = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 0)).find(p => p.type === 'hour').value, 10);\n  let max = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 23)).find(p => p.type === 'hour').value, 10);\n\n  if (min === 0 && max === 23) {\n    return 'h23';\n  }\n\n  if (min === 24 && max === 23) {\n    return 'h24';\n  }\n\n  if (min === 0 && max === 11) {\n    return 'h11';\n  }\n\n  if (min === 12 && max === 11) {\n    return 'h12';\n  }\n\n  throw new Error('Unexpected hour cycle result');\n}\n"]},"metadata":{},"sourceType":"module"}