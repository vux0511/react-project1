{"ast":null,"code":"import { useEffect as $cKEhs$useEffect } from \"react\";\nimport { useToggle as $cKEhs$useToggle } from \"@react-aria/toggle\";\nimport { filterDOMProps as $cKEhs$filterDOMProps, mergeProps as $cKEhs$mergeProps } from \"@react-aria/utils\";\nimport { useField as $cKEhs$useField } from \"@react-aria/label\";\nimport { useToggleState as $cKEhs$useToggleState } from \"@react-stately/toggle\";\n\nfunction $406796ff087fe49b$export$e375f10ce42261c5(props, state, inputRef) {\n  let {\n    inputProps: inputProps\n  } = $cKEhs$useToggle(props, state, inputRef);\n  let {\n    isSelected: isSelected\n  } = state;\n  let {\n    isIndeterminate: isIndeterminate\n  } = props;\n  $cKEhs$useEffect(() => {\n    // indeterminate is a property, but it can only be set via javascript\n    // https://css-tricks.com/indeterminate-checkboxes/\n    if (inputRef.current) inputRef.current.indeterminate = isIndeterminate;\n  });\n  return {\n    inputProps: { ...inputProps,\n      checked: isSelected,\n      'aria-checked': isIndeterminate ? 'mixed' : isSelected\n    }\n  };\n}\n\nconst $1ae600c947479353$export$31440636951aa68c = new WeakMap();\nconst $1ae600c947479353$export$a3077e9c93f7360f = new WeakMap();\nconst $1ae600c947479353$export$d5679492e2864181 = new WeakMap();\n\nfunction $1e9fce0cfacc738b$export$49ff6f28c54f1cbe(props, state) {\n  let {\n    isDisabled: isDisabled,\n    name: name\n  } = props;\n  let {\n    labelProps: labelProps,\n    fieldProps: fieldProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps\n  } = $cKEhs$useField({ ...props,\n    // Checkbox group is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n  $1ae600c947479353$export$a3077e9c93f7360f.set(state, descriptionProps.id);\n  $1ae600c947479353$export$d5679492e2864181.set(state, errorMessageProps.id);\n  let domProps = $cKEhs$filterDOMProps(props, {\n    labelable: true\n  }); // Pass name prop from group to all items by attaching to the state.\n\n  $1ae600c947479353$export$31440636951aa68c.set(state, name);\n  return {\n    groupProps: $cKEhs$mergeProps(domProps, {\n      role: 'group',\n      'aria-disabled': isDisabled || undefined,\n      ...fieldProps\n    }),\n    labelProps: labelProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps\n  };\n}\n\nfunction $fba3e38d5ca8983f$export$353b32fc6898d37d(props, state, inputRef) {\n  const toggleState = $cKEhs$useToggleState({\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isSelected: state.isSelected(props.value),\n\n    onChange(isSelected) {\n      if (isSelected) state.addValue(props.value);else state.removeValue(props.value);\n      if (props.onChange) props.onChange(isSelected);\n    }\n\n  });\n  let {\n    inputProps: inputProps\n  } = $406796ff087fe49b$export$e375f10ce42261c5({ ...props,\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isDisabled: props.isDisabled || state.isDisabled,\n    name: props.name || $1ae600c947479353$export$31440636951aa68c.get(state)\n  }, toggleState, inputRef);\n  return {\n    inputProps: { ...inputProps,\n      'aria-describedby': [state.validationState === 'invalid' ? $1ae600c947479353$export$d5679492e2864181.get(state) : null, $1ae600c947479353$export$a3077e9c93f7360f.get(state)].filter(Boolean).join(' ') || undefined\n    }\n  };\n}\n\nexport { $406796ff087fe49b$export$e375f10ce42261c5 as useCheckbox, $1e9fce0cfacc738b$export$49ff6f28c54f1cbe as useCheckboxGroup, $fba3e38d5ca8983f$export$353b32fc6898d37d as useCheckboxGroupItem };","map":{"version":3,"mappings":"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","names":["$406796ff087fe49b$export$e375f10ce42261c5","props","state","inputRef","inputProps","$cKEhs$useToggle","isSelected","isIndeterminate","$cKEhs$useEffect","current","indeterminate","checked","$1ae600c947479353$export$31440636951aa68c","WeakMap","$1ae600c947479353$export$a3077e9c93f7360f","$1ae600c947479353$export$d5679492e2864181","$1e9fce0cfacc738b$export$49ff6f28c54f1cbe","isDisabled","name","labelProps","fieldProps","descriptionProps","errorMessageProps","$cKEhs$useField","labelElementType","set","id","domProps","$cKEhs$filterDOMProps","labelable","groupProps","$cKEhs$mergeProps","role","undefined","$fba3e38d5ca8983f$export$353b32fc6898d37d","toggleState","$cKEhs$useToggleState","isReadOnly","value","onChange","addValue","removeValue","get","validationState","filter","Boolean","join"],"sources":["/Users/vux/dev/react-project1/node_modules/@react-aria/checkbox/dist/packages/@react-aria/checkbox/src/useCheckbox.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/checkbox/dist/packages/@react-aria/checkbox/src/utils.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/checkbox/dist/packages/@react-aria/checkbox/src/useCheckboxGroup.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/checkbox/dist/packages/@react-aria/checkbox/src/useCheckboxGroupItem.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxProps} from '@react-types/checkbox';\nimport {InputHTMLAttributes, RefObject, useEffect} from 'react';\nimport {ToggleState} from '@react-stately/toggle';\nimport {useToggle} from '@react-aria/toggle';\n\nexport interface CheckboxAria {\n  /** Props for the input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox component.\n * Checkboxes allow users to select multiple items from a list of individual items, or\n * to mark one individual item as selected.\n * @param props - Props for the checkbox.\n * @param state - State for the checkbox, as returned by `useToggleState`.\n * @param inputRef - A ref for the HTML input element.\n */\nexport function useCheckbox(props: AriaCheckboxProps, state: ToggleState, inputRef: RefObject<HTMLInputElement>): CheckboxAria {\n  let {inputProps} = useToggle(props, state, inputRef);\n  let {isSelected} = state;\n\n  let {isIndeterminate} = props;\n  useEffect(() => {\n    // indeterminate is a property, but it can only be set via javascript\n    // https://css-tricks.com/indeterminate-checkboxes/\n    if (inputRef.current) {\n      inputRef.current.indeterminate = isIndeterminate;\n    }\n  });\n\n  return {\n    inputProps: {\n      ...inputProps,\n      checked: isSelected,\n      'aria-checked': isIndeterminate ? 'mixed' : isSelected\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CheckboxGroupState} from '@react-stately/checkbox';\n\nexport const checkboxGroupNames = new WeakMap<CheckboxGroupState, string>();\nexport const checkboxGroupDescriptionIds = new WeakMap<CheckboxGroupState, string>();\nexport const checkboxGroupErrorMessageIds = new WeakMap<CheckboxGroupState, string>();\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxGroupProps} from '@react-types/checkbox';\nimport {checkboxGroupDescriptionIds, checkboxGroupErrorMessageIds, checkboxGroupNames} from './utils';\nimport {CheckboxGroupState} from '@react-stately/checkbox';\nimport {DOMAttributes} from '@react-types/shared';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {useField} from '@react-aria/label';\n\nexport interface CheckboxGroupAria {\n  /** Props for the checkbox group wrapper element. */\n  groupProps: DOMAttributes,\n  /** Props for the checkbox group's visible label (if any). */\n  labelProps: DOMAttributes,\n  /** Props for the checkbox group description element, if any. */\n  descriptionProps: DOMAttributes,\n  /** Props for the checkbox group error message element, if any. */\n  errorMessageProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox group component.\n * Checkbox groups allow users to select multiple items from a list of options.\n * @param props - Props for the checkbox group.\n * @param state - State for the checkbox group, as returned by `useCheckboxGroupState`.\n */\nexport function useCheckboxGroup(props: AriaCheckboxGroupProps, state: CheckboxGroupState): CheckboxGroupAria {\n  let {isDisabled, name} = props;\n\n  let {labelProps, fieldProps, descriptionProps, errorMessageProps} = useField({\n    ...props,\n    // Checkbox group is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n  checkboxGroupDescriptionIds.set(state, descriptionProps.id);\n  checkboxGroupErrorMessageIds.set(state, errorMessageProps.id);\n\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  // Pass name prop from group to all items by attaching to the state.\n  checkboxGroupNames.set(state, name);\n\n  return {\n    groupProps: mergeProps(domProps, {\n      role: 'group',\n      'aria-disabled': isDisabled || undefined,\n      ...fieldProps\n    }),\n    labelProps,\n    descriptionProps,\n    errorMessageProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxGroupItemProps} from '@react-types/checkbox';\nimport {CheckboxAria, useCheckbox} from './useCheckbox';\nimport {checkboxGroupDescriptionIds, checkboxGroupErrorMessageIds, checkboxGroupNames} from './utils';\nimport {CheckboxGroupState} from '@react-stately/checkbox';\nimport {RefObject} from 'react';\nimport {useToggleState} from '@react-stately/toggle';\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox component contained within a checkbox group.\n * Checkbox groups allow users to select multiple items from a list of options.\n * @param props - Props for the checkbox.\n * @param state - State for the checkbox, as returned by `useCheckboxGroupState`.\n * @param inputRef - A ref for the HTML input element.\n */\nexport function useCheckboxGroupItem(props: AriaCheckboxGroupItemProps, state: CheckboxGroupState, inputRef: RefObject<HTMLInputElement>): CheckboxAria {\n  const toggleState = useToggleState({\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isSelected: state.isSelected(props.value),\n    onChange(isSelected) {\n      if (isSelected) {\n        state.addValue(props.value);\n      } else {\n        state.removeValue(props.value);\n      }\n\n      if (props.onChange) {\n        props.onChange(isSelected);\n      }\n    }\n  });\n\n  let {inputProps} = useCheckbox({\n    ...props,\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isDisabled: props.isDisabled || state.isDisabled,\n    name: props.name || checkboxGroupNames.get(state)\n  }, toggleState, inputRef);\n\n  return {\n    inputProps: {\n      ...inputProps,\n      'aria-describedby': [\n        state.validationState === 'invalid' ? checkboxGroupErrorMessageIds.get(state) : null,\n        checkboxGroupDescriptionIds.get(state)\n      ].filter(Boolean).join(' ') || undefined\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}