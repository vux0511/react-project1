{"ast":null,"code":"import { mergeProps as $7CUUz$mergeProps, filterDOMProps as $7CUUz$filterDOMProps } from \"@react-aria/utils\";\nimport { useFocusable as $7CUUz$useFocusable } from \"@react-aria/focus\";\nimport { usePress as $7CUUz$usePress } from \"@react-aria/interactions\";\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/*\n* Copyright 2020 Adobe. All rights reserved.\n* This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License. You may obtain a copy\n* of the License at http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software distributed under\n* the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n* OF ANY KIND, either express or implied. See the License for the specific language\n* governing permissions and limitations under the License.\n*/\n\nfunction $d2c8e2b0480f3f34$export$cbe85ee05b554577(props, state, ref) {\n  let {\n    isDisabled = false,\n    isRequired = false,\n    isReadOnly = false,\n    value: value,\n    name: name,\n    children: children,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledby,\n    validationState = \"valid\"\n  } = props;\n\n  let onChange = e => {\n    // since we spread props on label, onChange will end up there as well as in here.\n    // so we have to stop propagation at the lowest level that we care about\n    e.stopPropagation();\n    state.setSelected(e.target.checked);\n  };\n\n  let hasChildren = children != null;\n  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel) console.warn(\"If you do not provide children, you must specify an aria-label for accessibility\"); // This handles focusing the input on pointer down, which Safari does not do by default.\n\n  let {\n    pressProps: pressProps,\n    isPressed: isPressed\n  } = (0, $7CUUz$usePress)({\n    isDisabled: isDisabled\n  });\n  let {\n    focusableProps: focusableProps\n  } = (0, $7CUUz$useFocusable)(props, ref);\n  let interactions = (0, $7CUUz$mergeProps)(pressProps, focusableProps);\n  let domProps = (0, $7CUUz$filterDOMProps)(props, {\n    labelable: true\n  });\n  return {\n    inputProps: (0, $7CUUz$mergeProps)(domProps, {\n      \"aria-invalid\": validationState === \"invalid\" || undefined,\n      \"aria-errormessage\": props[\"aria-errormessage\"],\n      \"aria-controls\": props[\"aria-controls\"],\n      \"aria-readonly\": isReadOnly || undefined,\n      \"aria-required\": isRequired || undefined,\n      onChange: onChange,\n      disabled: isDisabled,\n      ...(value == null ? {} : {\n        value: value\n      }),\n      name: name,\n      type: \"checkbox\",\n      ...interactions\n    }),\n    isSelected: state.isSelected,\n    isPressed: isPressed,\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly\n  };\n}\n\nexport { $d2c8e2b0480f3f34$export$cbe85ee05b554577 as useToggle };","map":{"version":3,"mappings":";;;AAAA;;;;;;;;;;ACAA;;AAAA;;;;;;;;;;;;AAqCO,SAASA,yCAAT,CAAmBC,KAAnB,EAA2CC,KAA3C,EAA+DC,GAA/D,EAA6G;AAClH,MAAI;AACFC,iBAAa,KADX;AAEFC,iBAAa,KAFX;AAGFC,iBAAa,KAHX;AAGgBC,WAClBA,KAJE;AAIGC,UACLA,IALE;AAKEC,cACJA,QANE;AAOF,kBAAcC,SAPZ;AAQF,uBAAmBC,cARjB;AASFC,sBAAkB;AAThB,MAUAX,KAVJ;;AAYA,MAAIY,WAAYC,CAAD,IAAO;AACpB;AACA;AACAA,MAAEC,eAAF;AACAb,UAAMc,WAAN,CAAkBF,EAAEG,MAAF,CAASC,OAA3B;AACF,GALA;;AAOA,MAAIC,cAAcV,YAAY,IAA9B;AACA,MAAIW,eAAeV,aAAa,IAAb,IAAqBC,kBAAkB,IAA1D;AACA,MAAI,CAACQ,WAAD,IAAgB,CAACC,YAArB,EACEC,QAAQC,IAAR,CAAa,kFAAb,EAvBgH,CA0BlH;;AACA,MAAI;AAAAC,gBAACA,UAAD;AAAWC,eAAEA;AAAb,MAA0B,qBAAS;gBACrCpB;AADqC,GAAT,CAA9B;AAIA,MAAI;AAAAqB,oBAACA;AAAD,MAAmB,yBAAaxB,KAAb,EAAoBE,GAApB,CAAvB;AACA,MAAIuB,eAAe,uBAAWH,UAAX,EAAuBE,cAAvB,CAAnB;AACA,MAAIE,WAAW,2BAAe1B,KAAf,EAAsB;AAAC2B,eAAW;AAAZ,GAAtB,CAAf;AAEA,SAAO;AACLC,gBAAY,uBAAWF,QAAX,EAAqB;AAC/B,sBAAgBf,oBAAoB,SAApB,IAAiCkB,SADlB;AAE/B,2BAAqB7B,KAAK,CAAC,mBAAD,CAFK;AAG/B,uBAAiBA,KAAK,CAAC,eAAD,CAHS;AAI/B,uBAAiBK,cAAcwB,SAJA;AAK/B,uBAAiBzB,cAAcyB,SALA;gBAM/BjB,QAN+B;AAO/BkB,gBAAU3B,UAPqB;AAQ/B,UAAIG,SAAS,IAAT,GAAgB,EAAhB,GAAqB;eAACA;AAAD,OAAzB,CAR+B;YAS/BC,IAT+B;AAU/BwB,YAAM,UAVyB;AAW/B,SAAGN;AAX4B,KAArB,CADP;AAcLO,gBAAY/B,MAAM+B,UAdb;eAeLT,SAfK;gBAgBLpB,UAhBK;gBAiBLE;AAjBK,GAAP;AAmBF","names":["$d2c8e2b0480f3f34$export$cbe85ee05b554577","props","state","ref","isDisabled","isRequired","isReadOnly","value","name","children","ariaLabel","ariaLabelledby","validationState","onChange","e","stopPropagation","setSelected","target","checked","hasChildren","hasAriaLabel","console","warn","pressProps","isPressed","focusableProps","interactions","domProps","labelable","inputProps","undefined","disabled","type","isSelected"],"sources":["/Users/vux/dev/react-project1/node_modules/@react-aria/toggle/dist/packages/@react-aria/toggle/src/index.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/toggle/dist/packages/@react-aria/toggle/src/useToggle.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {useToggle} from './useToggle';\nexport type {AriaToggleProps} from '@react-types/checkbox';\nexport type {ToggleAria} from './useToggle';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaToggleProps} from '@react-types/checkbox';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {InputHTMLAttributes, RefObject} from 'react';\nimport {ToggleState} from '@react-stately/toggle';\nimport {useFocusable} from '@react-aria/focus';\nimport {usePress} from '@react-aria/interactions';\n\nexport interface ToggleAria {\n  /**\n   * Props to be spread on the input element.\n   */\n  inputProps: InputHTMLAttributes<HTMLInputElement>,\n  /** Whether the toggle is selected. */\n  isSelected: boolean,\n  /** Whether the toggle is in a pressed state. */\n  isPressed: boolean,\n  /** Whether the toggle is disabled. */\n  isDisabled: boolean,\n  /** Whether the toggle is read only. */\n  isReadOnly: boolean\n}\n\n/**\n * Handles interactions for toggle elements, e.g. Checkboxes and Switches.\n */\nexport function useToggle(props: AriaToggleProps, state: ToggleState, ref: RefObject<HTMLInputElement>): ToggleAria {\n  let {\n    isDisabled = false,\n    isRequired = false,\n    isReadOnly = false,\n    value,\n    name,\n    children,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    validationState = 'valid'\n  } = props;\n\n  let onChange = (e) => {\n    // since we spread props on label, onChange will end up there as well as in here.\n    // so we have to stop propagation at the lowest level that we care about\n    e.stopPropagation();\n    state.setSelected(e.target.checked);\n  };\n\n  let hasChildren = children != null;\n  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel) {\n    console.warn('If you do not provide children, you must specify an aria-label for accessibility');\n  }\n\n  // This handles focusing the input on pointer down, which Safari does not do by default.\n  let {pressProps, isPressed} = usePress({\n    isDisabled\n  });\n\n  let {focusableProps} = useFocusable(props, ref);\n  let interactions = mergeProps(pressProps, focusableProps);\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  return {\n    inputProps: mergeProps(domProps, {\n      'aria-invalid': validationState === 'invalid' || undefined,\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-controls': props['aria-controls'],\n      'aria-readonly': isReadOnly || undefined,\n      'aria-required': isRequired || undefined,\n      onChange,\n      disabled: isDisabled,\n      ...(value == null ? {} : {value}),\n      name,\n      type: 'checkbox',\n      ...interactions\n    }),\n    isSelected: state.isSelected,\n    isPressed,\n    isDisabled,\n    isReadOnly\n  };\n}\n"]},"metadata":{},"sourceType":"module"}