{"ast":null,"code":"import { mergeProps as $bx7SL$mergeProps, useSyncRef as $bx7SL$useSyncRef, useGlobalListeners as $bx7SL$useGlobalListeners, isVirtualClick as $bx7SL$isVirtualClick, focusWithoutScrolling as $bx7SL$focusWithoutScrolling, isVirtualPointerEvent as $bx7SL$isVirtualPointerEvent, isIOS as $bx7SL$isIOS, runAfterTransition as $bx7SL$runAfterTransition, useLayoutEffect as $bx7SL$useLayoutEffect, isMac as $bx7SL$isMac, useEvent as $bx7SL$useEvent, useDescription as $bx7SL$useDescription } from \"@react-aria/utils\";\nimport $bx7SL$react, { useRef as $bx7SL$useRef, useContext as $bx7SL$useContext, useState as $bx7SL$useState, useMemo as $bx7SL$useMemo, useEffect as $bx7SL$useEffect, useCallback as $bx7SL$useCallback } from \"react\"; // Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element\n// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually\n\nlet $14c0b72509d70225$var$state = 'default';\nlet $14c0b72509d70225$var$savedUserSelect = '';\nlet $14c0b72509d70225$var$modifiedElementMap = new WeakMap();\n\nfunction $14c0b72509d70225$export$16a4697467175487(target) {\n  if ($bx7SL$isIOS()) {\n    if ($14c0b72509d70225$var$state === 'default') {\n      $14c0b72509d70225$var$savedUserSelect = document.documentElement.style.webkitUserSelect;\n      document.documentElement.style.webkitUserSelect = 'none';\n    }\n\n    $14c0b72509d70225$var$state = 'disabled';\n  } else if (target instanceof HTMLElement || target instanceof SVGElement) {\n    // If not iOS, store the target's original user-select and change to user-select: none\n    // Ignore state since it doesn't apply for non iOS\n    $14c0b72509d70225$var$modifiedElementMap.set(target, target.style.userSelect);\n    target.style.userSelect = 'none';\n  }\n}\n\nfunction $14c0b72509d70225$export$b0d6fa1ab32e3295(target) {\n  if ($bx7SL$isIOS()) {\n    // If the state is already default, there's nothing to do.\n    // If it is restoring, then there's no need to queue a second restore.\n    if ($14c0b72509d70225$var$state !== 'disabled') return;\n    $14c0b72509d70225$var$state = 'restoring'; // There appears to be a delay on iOS where selection still might occur\n    // after pointer up, so wait a bit before removing user-select.\n\n    setTimeout(() => {\n      // Wait for any CSS transitions to complete so we don't recompute style\n      // for the whole page in the middle of the animation and cause jank.\n      $bx7SL$runAfterTransition(() => {\n        // Avoid race conditions\n        if ($14c0b72509d70225$var$state === 'restoring') {\n          if (document.documentElement.style.webkitUserSelect === 'none') document.documentElement.style.webkitUserSelect = $14c0b72509d70225$var$savedUserSelect || '';\n          $14c0b72509d70225$var$savedUserSelect = '';\n          $14c0b72509d70225$var$state = 'default';\n        }\n      });\n    }, 300);\n  } else if (target instanceof HTMLElement || target instanceof SVGElement) // If not iOS, restore the target's original user-select if any\n    // Ignore state since it doesn't apply for non iOS\n    {\n      if (target && $14c0b72509d70225$var$modifiedElementMap.has(target)) {\n        let targetOldUserSelect = $14c0b72509d70225$var$modifiedElementMap.get(target);\n        if (target.style.userSelect === 'none') target.style.userSelect = targetOldUserSelect;\n        if (target.getAttribute('style') === '') target.removeAttribute('style');\n        $14c0b72509d70225$var$modifiedElementMap.delete(target);\n      }\n    }\n}\n\nconst $ae1eeba8b9eafd08$export$5165eccb35aaadb5 = $bx7SL$react.createContext(null);\n$ae1eeba8b9eafd08$export$5165eccb35aaadb5.displayName = 'PressResponderContext';\n\nfunction $f6c31cce2adf654f$var$usePressResponderContext(props) {\n  // Consume context from <PressResponder> and merge with props.\n  let context = $bx7SL$useContext($ae1eeba8b9eafd08$export$5165eccb35aaadb5);\n\n  if (context) {\n    let {\n      register: register,\n      ...contextProps\n    } = context;\n    props = $bx7SL$mergeProps(contextProps, props);\n    register();\n  }\n\n  $bx7SL$useSyncRef(context, props.ref);\n  return props;\n}\n\nfunction $f6c31cce2adf654f$export$45712eceda6fad21(props) {\n  let {\n    onPress: onPress1,\n    onPressChange: onPressChange1,\n    onPressStart: onPressStart1,\n    onPressEnd: onPressEnd1,\n    onPressUp: onPressUp1,\n    isDisabled: isDisabled1,\n    isPressed: isPressedProp,\n    preventFocusOnPress: preventFocusOnPress,\n    shouldCancelOnPointerExit: shouldCancelOnPointerExit,\n    allowTextSelectionOnPress: allowTextSelectionOnPress,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref: _,\n    ...domProps\n  } = $f6c31cce2adf654f$var$usePressResponderContext(props);\n  let propsRef = $bx7SL$useRef(null);\n  propsRef.current = {\n    onPress: onPress1,\n    onPressChange: onPressChange1,\n    onPressStart: onPressStart1,\n    onPressEnd: onPressEnd1,\n    onPressUp: onPressUp1,\n    isDisabled: isDisabled1,\n    shouldCancelOnPointerExit: shouldCancelOnPointerExit\n  };\n  let [isPressed, setPressed] = $bx7SL$useState(false);\n  let ref = $bx7SL$useRef({\n    isPressed: false,\n    ignoreEmulatedMouseEvents: false,\n    ignoreClickAfterPress: false,\n    didFirePressStart: false,\n    activePointerId: null,\n    target: null,\n    isOverTarget: false,\n    pointerType: null\n  });\n  let {\n    addGlobalListener: addGlobalListener,\n    removeAllGlobalListeners: removeAllGlobalListeners\n  } = $bx7SL$useGlobalListeners();\n  let pressProps1 = $bx7SL$useMemo(() => {\n    let state = ref.current;\n\n    let triggerPressStart = (originalEvent, pointerType) => {\n      let {\n        onPressStart: onPressStart,\n        onPressChange: onPressChange,\n        isDisabled: isDisabled\n      } = propsRef.current;\n      if (isDisabled || state.didFirePressStart) return;\n      if (onPressStart) onPressStart({\n        type: 'pressstart',\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n      if (onPressChange) onPressChange(true);\n      state.didFirePressStart = true;\n      setPressed(true);\n    };\n\n    let triggerPressEnd = function (originalEvent, pointerType) {\n      let wasPressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      let {\n        onPressEnd: onPressEnd,\n        onPressChange: onPressChange,\n        onPress: onPress,\n        isDisabled: isDisabled\n      } = propsRef.current;\n      if (!state.didFirePressStart) return;\n      state.ignoreClickAfterPress = true;\n      state.didFirePressStart = false;\n      if (onPressEnd) onPressEnd({\n        type: 'pressend',\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n      if (onPressChange) onPressChange(false);\n      setPressed(false);\n      if (onPress && wasPressed && !isDisabled) onPress({\n        type: 'press',\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n\n    let triggerPressUp = (originalEvent, pointerType) => {\n      let {\n        onPressUp: onPressUp,\n        isDisabled: isDisabled\n      } = propsRef.current;\n      if (isDisabled) return;\n      if (onPressUp) onPressUp({\n        type: 'pressup',\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n\n    let cancel = e => {\n      if (state.isPressed) {\n        if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n        state.isPressed = false;\n        state.isOverTarget = false;\n        state.activePointerId = null;\n        state.pointerType = null;\n        removeAllGlobalListeners();\n        if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);\n      }\n    };\n\n    let pressProps = {\n      onKeyDown(e) {\n        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target)) {\n          if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();\n          e.stopPropagation(); // If the event is repeating, it may have started on a different element\n          // after which focus moved to the current element. Ignore these events and\n          // only handle the first key down event.\n\n          if (!state.isPressed && !e.repeat) {\n            state.target = e.currentTarget;\n            state.isPressed = true;\n            triggerPressStart(e, 'keyboard'); // Focus may move before the key up event, so register the event on the document\n            // instead of the same element where the key down event occurred.\n\n            addGlobalListener(document, 'keyup', onKeyUp, false);\n          }\n        } else if (e.key === 'Enter' && $f6c31cce2adf654f$var$isHTMLAnchorLink(e.currentTarget)) // If the target is a link, we won't have handled this above because we want the default\n          // browser behavior to open the link when pressing Enter. But we still need to prevent\n          // default so that elements above do not also handle it (e.g. table row).\n          e.stopPropagation();\n      },\n\n      onKeyUp(e) {\n        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && !e.repeat && e.currentTarget.contains(e.target)) triggerPressUp($f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard');\n      },\n\n      onClick(e) {\n        if (e && !e.currentTarget.contains(e.target)) return;\n\n        if (e && e.button === 0) {\n          e.stopPropagation();\n          if (isDisabled1) e.preventDefault(); // If triggered from a screen reader or by using element.click(),\n          // trigger as if it were a keyboard click.\n\n          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === 'virtual' || $bx7SL$isVirtualClick(e.nativeEvent))) {\n            // Ensure the element receives focus (VoiceOver on iOS does not do this)\n            if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n            triggerPressStart(e, 'virtual');\n            triggerPressUp(e, 'virtual');\n            triggerPressEnd(e, 'virtual');\n          }\n\n          state.ignoreEmulatedMouseEvents = false;\n          state.ignoreClickAfterPress = false;\n        }\n      }\n\n    };\n\n    let onKeyUp = e => {\n      if (state.isPressed && $f6c31cce2adf654f$var$isValidKeyboardEvent(e, state.target)) {\n        if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();\n        e.stopPropagation();\n        state.isPressed = false;\n        let target = e.target;\n        triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard', state.target.contains(target));\n        removeAllGlobalListeners(); // If the target is a link, trigger the click method to open the URL,\n        // but defer triggering pressEnd until onClick event handler.\n\n        if (state.target instanceof HTMLElement && state.target.contains(target) && ($f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) || state.target.getAttribute('role') === 'link')) state.target.click();\n      }\n    };\n\n    if (typeof PointerEvent !== 'undefined') {\n      pressProps.onPointerDown = e => {\n        // Only handle left clicks, and ignore events that bubbled through portals.\n        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return; // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.\n        // Ignore and let the onClick handler take care of it instead.\n        // https://bugs.webkit.org/show_bug.cgi?id=222627\n        // https://bugs.webkit.org/show_bug.cgi?id=223202\n\n        if ($bx7SL$isVirtualPointerEvent(e.nativeEvent)) {\n          state.pointerType = 'virtual';\n          return;\n        } // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on pointer down and handle focusing the pressable element ourselves.\n\n\n        if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n        state.pointerType = e.pointerType;\n        e.stopPropagation();\n\n        if (!state.isPressed) {\n          state.isPressed = true;\n          state.isOverTarget = true;\n          state.activePointerId = e.pointerId;\n          state.target = e.currentTarget;\n          if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n          if (!allowTextSelectionOnPress) $14c0b72509d70225$export$16a4697467175487(state.target);\n          triggerPressStart(e, state.pointerType);\n          addGlobalListener(document, 'pointermove', onPointerMove, false);\n          addGlobalListener(document, 'pointerup', onPointerUp, false);\n          addGlobalListener(document, 'pointercancel', onPointerCancel, false);\n        }\n      };\n\n      pressProps.onMouseDown = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n\n        if (e.button === 0) {\n          // Chrome and Firefox on touch Windows devices require mouse down events\n          // to be canceled in addition to pointer events, or an extra asynchronous\n          // focus event will be fired.\n          if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onPointerUp = e => {\n        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.\n        if (!e.currentTarget.contains(e.target) || state.pointerType === 'virtual') return; // Only handle left clicks\n        // Safari on iOS sometimes fires pointerup events, even\n        // when the touch isn't over the target, so double check.\n\n        if (e.button === 0 && $f6c31cce2adf654f$var$isOverTarget(e, e.currentTarget)) triggerPressUp(e, state.pointerType || e.pointerType);\n      }; // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.\n      // Use pointer move events instead to implement our own hit testing.\n      // See https://bugs.webkit.org/show_bug.cgi?id=199803\n\n\n      let onPointerMove = e => {\n        if (e.pointerId !== state.activePointerId) return;\n\n        if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n        }\n      };\n\n      let onPointerUp = e => {\n        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {\n          if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n          state.isPressed = false;\n          state.isOverTarget = false;\n          state.activePointerId = null;\n          state.pointerType = null;\n          removeAllGlobalListeners();\n          if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);\n        }\n      };\n\n      let onPointerCancel = e => {\n        cancel(e);\n      };\n\n      pressProps.onDragStart = e => {\n        if (!e.currentTarget.contains(e.target)) return; // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.\n\n        cancel(e);\n      };\n    } else {\n      pressProps.onMouseDown = e => {\n        // Only handle left clicks\n        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return; // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on mouse down and handle focusing the pressable element ourselves.\n\n        if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n        e.stopPropagation();\n        if (state.ignoreEmulatedMouseEvents) return;\n        state.isPressed = true;\n        state.isOverTarget = true;\n        state.target = e.currentTarget;\n        state.pointerType = $bx7SL$isVirtualClick(e.nativeEvent) ? 'virtual' : 'mouse';\n        if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n        triggerPressStart(e, state.pointerType);\n        addGlobalListener(document, 'mouseup', onMouseUp, false);\n      };\n\n      pressProps.onMouseEnter = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = true;\n          triggerPressStart(e, state.pointerType);\n        }\n      };\n\n      pressProps.onMouseLeave = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n        }\n      };\n\n      pressProps.onMouseUp = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        if (!state.ignoreEmulatedMouseEvents && e.button === 0) triggerPressUp(e, state.pointerType);\n      };\n\n      let onMouseUp = e => {\n        // Only handle left clicks\n        if (e.button !== 0) return;\n        state.isPressed = false;\n        removeAllGlobalListeners();\n\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n          return;\n        }\n\n        if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n        state.isOverTarget = false;\n      };\n\n      pressProps.onTouchStart = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        let touch = $f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);\n        if (!touch) return;\n        state.activePointerId = touch.identifier;\n        state.ignoreEmulatedMouseEvents = true;\n        state.isOverTarget = true;\n        state.isPressed = true;\n        state.target = e.currentTarget;\n        state.pointerType = 'touch'; // Due to browser inconsistencies, especially on mobile browsers, we prevent default\n        // on the emulated mouse event and handle focusing the pressable element ourselves.\n\n        if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n        if (!allowTextSelectionOnPress) $14c0b72509d70225$export$16a4697467175487(state.target);\n        triggerPressStart(e, state.pointerType);\n        addGlobalListener(window, 'scroll', onScroll, true);\n      };\n\n      pressProps.onTouchMove = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (!state.isPressed) return;\n        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n\n        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(e, state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n        }\n      };\n\n      pressProps.onTouchEnd = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (!state.isPressed) return;\n        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n\n        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType);\n          triggerPressEnd(e, state.pointerType);\n        } else if (state.isOverTarget) triggerPressEnd(e, state.pointerType, false);\n\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        state.ignoreEmulatedMouseEvents = true;\n        if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);\n        removeAllGlobalListeners();\n      };\n\n      pressProps.onTouchCancel = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (state.isPressed) cancel(e);\n      };\n\n      let onScroll = e => {\n        if (state.isPressed && e.target.contains(state.target)) cancel({\n          currentTarget: state.target,\n          shiftKey: false,\n          ctrlKey: false,\n          metaKey: false,\n          altKey: false\n        });\n      };\n\n      pressProps.onDragStart = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        cancel(e);\n      };\n    }\n\n    return pressProps;\n  }, [addGlobalListener, isDisabled1, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress]); // Remove user-select: none in case component unmounts immediately after pressStart\n  // eslint-disable-next-line arrow-body-style\n\n  $bx7SL$useEffect(() => {\n    return () => {\n      if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(ref.current.target);\n    };\n  }, [allowTextSelectionOnPress]);\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: $bx7SL$mergeProps(domProps, pressProps1)\n  };\n}\n\nfunction $f6c31cce2adf654f$var$isHTMLAnchorLink(target) {\n  return target.tagName === 'A' && target.hasAttribute('href');\n}\n\nfunction $f6c31cce2adf654f$var$isValidKeyboardEvent(event, currentTarget) {\n  const {\n    key: key,\n    code: code\n  } = event;\n  const element = currentTarget;\n  const role = element.getAttribute('role'); // Accessibility for keyboards. Space and Enter only.\n  // \"Spacebar\" is for IE 11\n\n  return (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') && !(element instanceof HTMLInputElement && !$f6c31cce2adf654f$var$isValidInputKey(element, key) || element instanceof HTMLTextAreaElement || element.isContentEditable) && (!$f6c31cce2adf654f$var$isHTMLAnchorLink(element) || role === 'button' && key !== 'Enter') && // An element with role='link' should only trigger with Enter key\n  !(role === 'link' && key !== 'Enter');\n}\n\nfunction $f6c31cce2adf654f$var$getTouchFromEvent(event) {\n  const {\n    targetTouches: targetTouches\n  } = event;\n  if (targetTouches.length > 0) return targetTouches[0];\n  return null;\n}\n\nfunction $f6c31cce2adf654f$var$getTouchById(event, pointerId) {\n  const changedTouches = event.changedTouches;\n\n  for (let i = 0; i < changedTouches.length; i++) {\n    const touch = changedTouches[i];\n    if (touch.identifier === pointerId) return touch;\n  }\n\n  return null;\n}\n\nfunction $f6c31cce2adf654f$var$createEvent(target, e) {\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey\n  };\n}\n\nfunction $f6c31cce2adf654f$var$getPointClientRect(point) {\n  let offsetX = point.width / 2 || point.radiusX || 0;\n  let offsetY = point.height / 2 || point.radiusY || 0;\n  return {\n    top: point.clientY - offsetY,\n    right: point.clientX + offsetX,\n    bottom: point.clientY + offsetY,\n    left: point.clientX - offsetX\n  };\n}\n\nfunction $f6c31cce2adf654f$var$areRectanglesOverlapping(a, b) {\n  // check if they cannot overlap on x axis\n  if (a.left > b.right || b.left > a.right) return false; // check if they cannot overlap on y axis\n\n  if (a.top > b.bottom || b.top > a.bottom) return false;\n  return true;\n}\n\nfunction $f6c31cce2adf654f$var$isOverTarget(point, target) {\n  let rect = target.getBoundingClientRect();\n  let pointRect = $f6c31cce2adf654f$var$getPointClientRect(point);\n  return $f6c31cce2adf654f$var$areRectanglesOverlapping(rect, pointRect);\n}\n\nfunction $f6c31cce2adf654f$var$shouldPreventDefault(target) {\n  // We cannot prevent default if the target is a draggable element.\n  return !(target instanceof HTMLElement) || !target.draggable;\n}\n\nfunction $f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target, key) {\n  if (target instanceof HTMLInputElement) return !$f6c31cce2adf654f$var$isValidInputKey(target, key);\n  if (target instanceof HTMLButtonElement) return target.type !== 'submit';\n  return true;\n}\n\nconst $f6c31cce2adf654f$var$nonTextInputTypes = new Set(['checkbox', 'radio', 'range', 'color', 'file', 'image', 'button', 'submit', 'reset']);\n\nfunction $f6c31cce2adf654f$var$isValidInputKey(target, key) {\n  // Only space should toggle checkboxes and radios, not enter.\n  return target.type === 'checkbox' || target.type === 'radio' ? key === ' ' : $f6c31cce2adf654f$var$nonTextInputTypes.has(target.type);\n}\n\nconst $3b117e43dc0ca95d$export$27c701ed9e449e99 = /*#__PURE__*/$bx7SL$react.forwardRef((_ref, ref) => {\n  let {\n    children: children,\n    ...props\n  } = _ref;\n  let newRef = $bx7SL$useRef();\n  ref = ref !== null && ref !== void 0 ? ref : newRef;\n  let {\n    pressProps: pressProps\n  } = $f6c31cce2adf654f$export$45712eceda6fad21({ ...props,\n    ref: ref\n  });\n  let child = $bx7SL$react.Children.only(children);\n  return /*#__PURE__*/$bx7SL$react.cloneElement(child, // @ts-ignore\n  {\n    ref: ref,\n    ...$bx7SL$mergeProps(child.props, pressProps)\n  });\n});\nconst $f1ab8c75478c6f73$export$3351871ee4b288b8 = /*#__PURE__*/$bx7SL$react.forwardRef((_ref2, ref) => {\n  let {\n    children: children,\n    ...props\n  } = _ref2;\n  let isRegistered = $bx7SL$useRef(false);\n  let prevContext = $bx7SL$useContext($ae1eeba8b9eafd08$export$5165eccb35aaadb5);\n  let context = $bx7SL$mergeProps(prevContext || {}, { ...props,\n    ref: ref || (prevContext === null || prevContext === void 0 ? void 0 : prevContext.ref),\n\n    register() {\n      isRegistered.current = true;\n      if (prevContext) prevContext.register();\n    }\n\n  });\n  $bx7SL$useSyncRef(prevContext, ref);\n  $bx7SL$useEffect(() => {\n    if (!isRegistered.current) console.warn(\"A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.\");\n  }, []);\n  return /*#__PURE__*/$bx7SL$react.createElement($ae1eeba8b9eafd08$export$5165eccb35aaadb5.Provider, {\n    value: context\n  }, children);\n});\n\nclass $8a9cb279dc87e130$export$905e7fc544a71f36 {\n  isDefaultPrevented() {\n    return this.nativeEvent.defaultPrevented;\n  }\n\n  preventDefault() {\n    this.defaultPrevented = true;\n    this.nativeEvent.preventDefault();\n  }\n\n  stopPropagation() {\n    this.nativeEvent.stopPropagation();\n\n    this.isPropagationStopped = () => true;\n  }\n\n  isPropagationStopped() {\n    return false;\n  }\n\n  persist() {}\n\n  constructor(type, nativeEvent) {\n    this.nativeEvent = nativeEvent;\n    this.target = nativeEvent.target;\n    this.currentTarget = nativeEvent.currentTarget;\n    this.relatedTarget = nativeEvent.relatedTarget;\n    this.bubbles = nativeEvent.bubbles;\n    this.cancelable = nativeEvent.cancelable;\n    this.defaultPrevented = nativeEvent.defaultPrevented;\n    this.eventPhase = nativeEvent.eventPhase;\n    this.isTrusted = nativeEvent.isTrusted;\n    this.timeStamp = nativeEvent.timeStamp;\n    this.type = type;\n  }\n\n}\n\nfunction $8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {\n  let stateRef = $bx7SL$useRef({\n    isFocused: false,\n    onBlur: onBlur,\n    observer: null\n  });\n  stateRef.current.onBlur = onBlur; // Clean up MutationObserver on unmount. See below.\n  // eslint-disable-next-line arrow-body-style\n\n  $bx7SL$useLayoutEffect(() => {\n    const state = stateRef.current;\n    return () => {\n      if (state.observer) {\n        state.observer.disconnect();\n        state.observer = null;\n      }\n    };\n  }, []); // This function is called during a React onFocus event.\n\n  return $bx7SL$useCallback(e1 => {\n    // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142\n    // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a\n    // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.\n    // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.\n    if (e1.target instanceof HTMLButtonElement || e1.target instanceof HTMLInputElement || e1.target instanceof HTMLTextAreaElement || e1.target instanceof HTMLSelectElement) {\n      stateRef.current.isFocused = true;\n      let target = e1.target;\n\n      let onBlurHandler = e => {\n        var // For backward compatibility, dispatch a (fake) React synthetic event.\n        _current, ref;\n\n        stateRef.current.isFocused = false;\n        if (target.disabled) (ref = (_current = stateRef.current).onBlur) === null || ref === void 0 ? void 0 : ref.call(_current, new $8a9cb279dc87e130$export$905e7fc544a71f36('blur', e)); // We no longer need the MutationObserver once the target is blurred.\n\n        if (stateRef.current.observer) {\n          stateRef.current.observer.disconnect();\n          stateRef.current.observer = null;\n        }\n      };\n\n      target.addEventListener('focusout', onBlurHandler, {\n        once: true\n      });\n      stateRef.current.observer = new MutationObserver(() => {\n        if (stateRef.current.isFocused && target.disabled) {\n          stateRef.current.observer.disconnect();\n          target.dispatchEvent(new FocusEvent('blur'));\n          target.dispatchEvent(new FocusEvent('focusout', {\n            bubbles: true\n          }));\n        }\n      });\n      stateRef.current.observer.observe(target, {\n        attributes: true,\n        attributeFilter: ['disabled']\n      });\n    }\n  }, []);\n}\n\nfunction $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {\n  let {\n    isDisabled: isDisabled,\n    onFocus: onFocusProp,\n    onBlur: onBlurProp,\n    onFocusChange: onFocusChange\n  } = props;\n  const onBlur = $bx7SL$useCallback(e => {\n    if (e.target === e.currentTarget) {\n      if (onBlurProp) onBlurProp(e);\n      if (onFocusChange) onFocusChange(false);\n      return true;\n    }\n  }, [onBlurProp, onFocusChange]);\n  const onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur);\n  const onFocus = $bx7SL$useCallback(e => {\n    if (e.target === e.currentTarget) {\n      if (onFocusProp) onFocusProp(e);\n      if (onFocusChange) onFocusChange(true);\n      onSyntheticFocus(e);\n    }\n  }, [onFocusChange, onFocusProp, onSyntheticFocus]);\n  return {\n    focusProps: {\n      onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : undefined,\n      onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : null\n    }\n  };\n}\n\nlet $507fabe10e71c6fb$var$currentModality = null;\nlet $507fabe10e71c6fb$var$changeHandlers = new Set();\nlet $507fabe10e71c6fb$var$hasSetupGlobalListeners = false;\nlet $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\nlet $507fabe10e71c6fb$var$hasBlurredWindowRecently = false; // Only Tab or Esc keys will make focus visible on text input elements\n\nconst $507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS = {\n  Tab: true,\n  Escape: true\n};\n\nfunction $507fabe10e71c6fb$var$triggerChangeHandlers(modality, e) {\n  for (let handler of $507fabe10e71c6fb$var$changeHandlers) handler(modality, e);\n}\n/**\n * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.\n */\n\n\nfunction $507fabe10e71c6fb$var$isValidKey(e) {\n  // Control and Shift keys trigger when navigating back to the tab with keyboard.\n  return !(e.metaKey || !$bx7SL$isMac() && e.altKey || e.ctrlKey || e.key === 'Control' || e.key === 'Shift' || e.key === 'Meta');\n}\n\nfunction $507fabe10e71c6fb$var$handleKeyboardEvent(e) {\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n\n  if ($507fabe10e71c6fb$var$isValidKey(e)) {\n    $507fabe10e71c6fb$var$currentModality = 'keyboard';\n    $507fabe10e71c6fb$var$triggerChangeHandlers('keyboard', e);\n  }\n}\n\nfunction $507fabe10e71c6fb$var$handlePointerEvent(e) {\n  $507fabe10e71c6fb$var$currentModality = 'pointer';\n\n  if (e.type === 'mousedown' || e.type === 'pointerdown') {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    $507fabe10e71c6fb$var$triggerChangeHandlers('pointer', e);\n  }\n}\n\nfunction $507fabe10e71c6fb$var$handleClickEvent(e) {\n  if ($bx7SL$isVirtualClick(e)) {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    $507fabe10e71c6fb$var$currentModality = 'virtual';\n  }\n}\n\nfunction $507fabe10e71c6fb$var$handleFocusEvent(e) {\n  // Firefox fires two extra focus events when the user first clicks into an iframe:\n  // first on the window, then on the document. We ignore these events so they don't\n  // cause keyboard focus rings to appear.\n  if (e.target === window || e.target === document) return; // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.\n  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n\n  if (!$507fabe10e71c6fb$var$hasEventBeforeFocus && !$507fabe10e71c6fb$var$hasBlurredWindowRecently) {\n    $507fabe10e71c6fb$var$currentModality = 'virtual';\n    $507fabe10e71c6fb$var$triggerChangeHandlers('virtual', e);\n  }\n\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\n  $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;\n}\n\nfunction $507fabe10e71c6fb$var$handleWindowBlur() {\n  // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n  // for example, since a subsequent focus event won't be fired.\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\n  $507fabe10e71c6fb$var$hasBlurredWindowRecently = true;\n}\n/**\n * Setup global event listeners to control when keyboard focus style should be visible.\n */\n\n\nfunction $507fabe10e71c6fb$var$setupGlobalFocusEvents() {\n  if (typeof window === 'undefined' || $507fabe10e71c6fb$var$hasSetupGlobalListeners) return; // Programmatic focus() calls shouldn't affect the current input modality.\n  // However, we need to detect other cases when a focus event occurs without\n  // a preceding user event (e.g. screen reader focus). Overriding the focus\n  // method on HTMLElement.prototype is a bit hacky, but works.\n\n  let focus = HTMLElement.prototype.focus;\n\n  HTMLElement.prototype.focus = function () {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    focus.apply(this, arguments);\n  };\n\n  document.addEventListener('keydown', $507fabe10e71c6fb$var$handleKeyboardEvent, true);\n  document.addEventListener('keyup', $507fabe10e71c6fb$var$handleKeyboardEvent, true);\n  document.addEventListener('click', $507fabe10e71c6fb$var$handleClickEvent, true); // Register focus events on the window so they are sure to happen\n  // before React's event listeners (registered on the document).\n\n  window.addEventListener('focus', $507fabe10e71c6fb$var$handleFocusEvent, true);\n  window.addEventListener('blur', $507fabe10e71c6fb$var$handleWindowBlur, false);\n\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerdown', $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener('pointermove', $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener('pointerup', $507fabe10e71c6fb$var$handlePointerEvent, true);\n  } else {\n    document.addEventListener('mousedown', $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener('mousemove', $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener('mouseup', $507fabe10e71c6fb$var$handlePointerEvent, true);\n  }\n\n  $507fabe10e71c6fb$var$hasSetupGlobalListeners = true;\n}\n\nif (typeof document !== 'undefined') {\n  if (document.readyState !== 'loading') $507fabe10e71c6fb$var$setupGlobalFocusEvents();else document.addEventListener('DOMContentLoaded', $507fabe10e71c6fb$var$setupGlobalFocusEvents);\n}\n\nfunction $507fabe10e71c6fb$export$b9b3dfddab17db27() {\n  return $507fabe10e71c6fb$var$currentModality !== 'pointer';\n}\n\nfunction $507fabe10e71c6fb$export$630ff653c5ada6a9() {\n  return $507fabe10e71c6fb$var$currentModality;\n}\n\nfunction $507fabe10e71c6fb$export$8397ddfc504fdb9a(modality) {\n  $507fabe10e71c6fb$var$currentModality = modality;\n  $507fabe10e71c6fb$var$triggerChangeHandlers(modality, null);\n}\n\nfunction $507fabe10e71c6fb$export$98e20ec92f614cfe() {\n  $507fabe10e71c6fb$var$setupGlobalFocusEvents();\n  let [modality, setModality] = $bx7SL$useState($507fabe10e71c6fb$var$currentModality);\n  $bx7SL$useEffect(() => {\n    let handler = () => {\n      setModality($507fabe10e71c6fb$var$currentModality);\n    };\n\n    $507fabe10e71c6fb$var$changeHandlers.add(handler);\n    return () => {\n      $507fabe10e71c6fb$var$changeHandlers.delete(handler);\n    };\n  }, []);\n  return modality;\n}\n/**\n * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that\n * focus visible style can be properly set.\n */\n\n\nfunction $507fabe10e71c6fb$var$isKeyboardFocusEvent(isTextInput, modality, e) {\n  return !(isTextInput && modality === 'keyboard' && e instanceof KeyboardEvent && !$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]);\n}\n\nfunction $507fabe10e71c6fb$export$ffd9e5021c1fb2d6() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let {\n    isTextInput: isTextInput,\n    autoFocus: autoFocus\n  } = props;\n  let [isFocusVisibleState, setFocusVisible] = $bx7SL$useState(autoFocus || $507fabe10e71c6fb$export$b9b3dfddab17db27());\n  $507fabe10e71c6fb$export$ec71b4b83ac08ec3($507fabe10e71c6fb$export$b9b3dfddab17db27 => {\n    setFocusVisible($507fabe10e71c6fb$export$b9b3dfddab17db27);\n  }, [isTextInput], {\n    isTextInput: isTextInput\n  });\n  return {\n    isFocusVisible: isFocusVisibleState\n  };\n}\n\nfunction $507fabe10e71c6fb$export$ec71b4b83ac08ec3(fn, deps, opts) {\n  $507fabe10e71c6fb$var$setupGlobalFocusEvents();\n  $bx7SL$useEffect(() => {\n    let handler = (modality, e) => {\n      if (!$507fabe10e71c6fb$var$isKeyboardFocusEvent(opts === null || opts === void 0 ? void 0 : opts.isTextInput, modality, e)) return;\n      fn($507fabe10e71c6fb$export$b9b3dfddab17db27());\n    };\n\n    $507fabe10e71c6fb$var$changeHandlers.add(handler);\n    return () => {\n      $507fabe10e71c6fb$var$changeHandlers.delete(handler);\n    };\n  }, deps);\n}\n\nfunction $9ab94262bd0047c7$export$420e68273165f4ec(props) {\n  let {\n    isDisabled: isDisabled,\n    onBlurWithin: onBlurWithin,\n    onFocusWithin: onFocusWithin,\n    onFocusWithinChange: onFocusWithinChange\n  } = props;\n  let state = $bx7SL$useRef({\n    isFocusWithin: false\n  });\n  let onBlur = $bx7SL$useCallback(e => {\n    // We don't want to trigger onBlurWithin and then immediately onFocusWithin again\n    // when moving focus inside the element. Only trigger if the currentTarget doesn't\n    // include the relatedTarget (where focus is moving).\n    if (state.current.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {\n      state.current.isFocusWithin = false;\n      if (onBlurWithin) onBlurWithin(e);\n      if (onFocusWithinChange) onFocusWithinChange(false);\n    }\n  }, [onBlurWithin, onFocusWithinChange, state]);\n  let onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur);\n  let onFocus = $bx7SL$useCallback(e => {\n    if (!state.current.isFocusWithin) {\n      if (onFocusWithin) onFocusWithin(e);\n      if (onFocusWithinChange) onFocusWithinChange(true);\n      state.current.isFocusWithin = true;\n      onSyntheticFocus(e);\n    }\n  }, [onFocusWithin, onFocusWithinChange, onSyntheticFocus]);\n  if (isDisabled) return {\n    focusWithinProps: {\n      onFocus: null,\n      onBlur: null\n    }\n  };\n  return {\n    focusWithinProps: {\n      onFocus: onFocus,\n      onBlur: onBlur\n    }\n  };\n} // iOS fires onPointerEnter twice: once with pointerType=\"touch\" and again with pointerType=\"mouse\".\n// We want to ignore these emulated events so they do not trigger hover behavior.\n// See https://bugs.webkit.org/show_bug.cgi?id=214609.\n\n\nlet $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;\nlet $6179b936705e76d3$var$hoverCount = 0;\n\nfunction $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents() {\n  $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = true; // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter\n  // with pointerType=\"mouse\" immediately after onPointerUp and before onFocus. On other\n  // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in\n  // the distant future because a user previously touched the element.\n\n  setTimeout(() => {\n    $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;\n  }, 50);\n}\n\nfunction $6179b936705e76d3$var$handleGlobalPointerEvent(e) {\n  if (e.pointerType === 'touch') $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents();\n}\n\nfunction $6179b936705e76d3$var$setupGlobalTouchEvents() {\n  if (typeof document === 'undefined') return;\n  if (typeof PointerEvent !== 'undefined') document.addEventListener('pointerup', $6179b936705e76d3$var$handleGlobalPointerEvent);else document.addEventListener('touchend', $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);\n  $6179b936705e76d3$var$hoverCount++;\n  return () => {\n    $6179b936705e76d3$var$hoverCount--;\n    if ($6179b936705e76d3$var$hoverCount > 0) return;\n    if (typeof PointerEvent !== 'undefined') document.removeEventListener('pointerup', $6179b936705e76d3$var$handleGlobalPointerEvent);else document.removeEventListener('touchend', $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);\n  };\n}\n\nfunction $6179b936705e76d3$export$ae780daf29e6d456(props) {\n  let {\n    onHoverStart: onHoverStart,\n    onHoverChange: onHoverChange,\n    onHoverEnd: onHoverEnd,\n    isDisabled: isDisabled\n  } = props;\n  let [isHovered, setHovered] = $bx7SL$useState(false);\n  let state = $bx7SL$useRef({\n    isHovered: false,\n    ignoreEmulatedMouseEvents: false,\n    pointerType: '',\n    target: null\n  }).current;\n  $bx7SL$useEffect($6179b936705e76d3$var$setupGlobalTouchEvents, []);\n  let {\n    hoverProps: hoverProps1,\n    triggerHoverEnd: triggerHoverEnd1\n  } = $bx7SL$useMemo(() => {\n    let triggerHoverStart = (event, pointerType) => {\n      state.pointerType = pointerType;\n      if (isDisabled || pointerType === 'touch' || state.isHovered || !event.currentTarget.contains(event.target)) return;\n      state.isHovered = true;\n      let target = event.currentTarget;\n      state.target = target;\n      if (onHoverStart) onHoverStart({\n        type: 'hoverstart',\n        target: target,\n        pointerType: pointerType\n      });\n      if (onHoverChange) onHoverChange(true);\n      setHovered(true);\n    };\n\n    let triggerHoverEnd = (event, pointerType) => {\n      state.pointerType = '';\n      state.target = null;\n      if (pointerType === 'touch' || !state.isHovered) return;\n      state.isHovered = false;\n      let target = event.currentTarget;\n      if (onHoverEnd) onHoverEnd({\n        type: 'hoverend',\n        target: target,\n        pointerType: pointerType\n      });\n      if (onHoverChange) onHoverChange(false);\n      setHovered(false);\n    };\n\n    let hoverProps = {};\n\n    if (typeof PointerEvent !== 'undefined') {\n      hoverProps.onPointerEnter = e => {\n        if ($6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents && e.pointerType === 'mouse') return;\n        triggerHoverStart(e, e.pointerType);\n      };\n\n      hoverProps.onPointerLeave = e => {\n        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, e.pointerType);\n      };\n    } else {\n      hoverProps.onTouchStart = () => {\n        state.ignoreEmulatedMouseEvents = true;\n      };\n\n      hoverProps.onMouseEnter = e => {\n        if (!state.ignoreEmulatedMouseEvents && !$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents) triggerHoverStart(e, 'mouse');\n        state.ignoreEmulatedMouseEvents = false;\n      };\n\n      hoverProps.onMouseLeave = e => {\n        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, 'mouse');\n      };\n    }\n\n    return {\n      hoverProps: hoverProps,\n      triggerHoverEnd: triggerHoverEnd\n    };\n  }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state]);\n  $bx7SL$useEffect(() => {\n    // Call the triggerHoverEnd as soon as isDisabled changes to true\n    // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering\n    if (isDisabled) triggerHoverEnd1({\n      currentTarget: state.target\n    }, state.pointerType);\n  }, [isDisabled]);\n  return {\n    hoverProps: hoverProps1,\n    isHovered: isHovered\n  };\n}\n\nfunction $e0b6e0b68ec7f50f$export$872b660ac5a1ff98(props) {\n  let {\n    ref: ref,\n    onInteractOutside: onInteractOutside,\n    isDisabled: isDisabled,\n    onInteractOutsideStart: onInteractOutsideStart\n  } = props;\n  let stateRef = $bx7SL$useRef({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false,\n    onInteractOutside: onInteractOutside,\n    onInteractOutsideStart: onInteractOutsideStart\n  });\n  let state = stateRef.current;\n  state.onInteractOutside = onInteractOutside;\n  state.onInteractOutsideStart = onInteractOutsideStart;\n  $bx7SL$useEffect(() => {\n    if (isDisabled) return;\n\n    let onPointerDown = e => {\n      if ($e0b6e0b68ec7f50f$var$isValidEvent(e, ref) && state.onInteractOutside) {\n        if (state.onInteractOutsideStart) state.onInteractOutsideStart(e);\n        state.isPointerDown = true;\n      }\n    }; // Use pointer events if available. Otherwise, fall back to mouse and touch events.\n\n\n    if (typeof PointerEvent !== 'undefined') {\n      let onPointerUp = e => {\n        if (state.isPointerDown && state.onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      }; // changing these to capture phase fixed combobox\n\n\n      document.addEventListener('pointerdown', onPointerDown, true);\n      document.addEventListener('pointerup', onPointerUp, true);\n      return () => {\n        document.removeEventListener('pointerdown', onPointerDown, true);\n        document.removeEventListener('pointerup', onPointerUp, true);\n      };\n    } else {\n      let onMouseUp = e => {\n        if (state.ignoreEmulatedMouseEvents) state.ignoreEmulatedMouseEvents = false;else if (state.isPointerDown && state.onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n\n      let onTouchEnd = e => {\n        state.ignoreEmulatedMouseEvents = true;\n\n        if (state.onInteractOutside && state.isPointerDown && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n\n      document.addEventListener('mousedown', onPointerDown, true);\n      document.addEventListener('mouseup', onMouseUp, true);\n      document.addEventListener('touchstart', onPointerDown, true);\n      document.addEventListener('touchend', onTouchEnd, true);\n      return () => {\n        document.removeEventListener('mousedown', onPointerDown, true);\n        document.removeEventListener('mouseup', onMouseUp, true);\n        document.removeEventListener('touchstart', onPointerDown, true);\n        document.removeEventListener('touchend', onTouchEnd, true);\n      };\n    }\n  }, [ref, state, isDisabled]);\n}\n\nfunction $e0b6e0b68ec7f50f$var$isValidEvent(event, ref) {\n  if (event.button > 0) return false; // if the event target is no longer in the document\n\n  if (event.target) {\n    const ownerDocument = event.target.ownerDocument;\n    if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) return false;\n  }\n\n  return ref.current && !ref.current.contains(event.target);\n}\n\nfunction $93925083ecbb358c$export$48d1ea6320830260(handler) {\n  if (!handler) return;\n  let shouldStopPropagation = true;\n  return e => {\n    let event = { ...e,\n\n      preventDefault() {\n        e.preventDefault();\n      },\n\n      isDefaultPrevented() {\n        return e.isDefaultPrevented();\n      },\n\n      stopPropagation() {\n        console.error('stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.');\n      },\n\n      continuePropagation() {\n        shouldStopPropagation = false;\n      }\n\n    };\n    handler(event);\n    if (shouldStopPropagation) e.stopPropagation();\n  };\n}\n\nfunction $46d819fcbaf35654$export$8f71654801c2f7cd(props) {\n  return {\n    keyboardProps: props.isDisabled ? {} : {\n      onKeyDown: $93925083ecbb358c$export$48d1ea6320830260(props.onKeyDown),\n      onKeyUp: $93925083ecbb358c$export$48d1ea6320830260(props.onKeyUp)\n    }\n  };\n}\n\nfunction $e8a7022cf87cba2a$export$36da96379f79f245(props) {\n  let {\n    onMoveStart: onMoveStart,\n    onMove: onMove,\n    onMoveEnd: onMoveEnd\n  } = props;\n  let state = $bx7SL$useRef({\n    didMove: false,\n    lastPosition: null,\n    id: null\n  });\n  let {\n    addGlobalListener: addGlobalListener,\n    removeGlobalListener: removeGlobalListener\n  } = $bx7SL$useGlobalListeners();\n  let moveProps1 = $bx7SL$useMemo(() => {\n    let moveProps = {};\n\n    let start = () => {\n      $14c0b72509d70225$export$16a4697467175487();\n      state.current.didMove = false;\n    };\n\n    let move = (originalEvent, pointerType, deltaX, deltaY) => {\n      if (deltaX === 0 && deltaY === 0) return;\n\n      if (!state.current.didMove) {\n        state.current.didMove = true;\n        onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({\n          type: 'movestart',\n          pointerType: pointerType,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n\n      onMove({\n        type: 'move',\n        pointerType: pointerType,\n        deltaX: deltaX,\n        deltaY: deltaY,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n\n    let end = (originalEvent, pointerType) => {\n      $14c0b72509d70225$export$b0d6fa1ab32e3295();\n      if (state.current.didMove) onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({\n        type: 'moveend',\n        pointerType: pointerType,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n\n    if (typeof PointerEvent === 'undefined') {\n      let onMouseMove = e => {\n        if (e.button === 0) {\n          move(e, 'mouse', e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n        }\n      };\n\n      let onMouseUp = e => {\n        if (e.button === 0) {\n          end(e, 'mouse');\n          removeGlobalListener(window, 'mousemove', onMouseMove, false);\n          removeGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n\n      moveProps.onMouseDown = e => {\n        if (e.button === 0) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n          addGlobalListener(window, 'mousemove', onMouseMove, false);\n          addGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n\n      let onTouchMove = e => {\n        let touch = [...e.changedTouches].findIndex(_ref3 => {\n          let {\n            identifier: identifier\n          } = _ref3;\n          return identifier === state.current.id;\n        });\n\n        if (touch >= 0) {\n          let {\n            pageX: pageX,\n            pageY: pageY\n          } = e.changedTouches[touch];\n          move(e, 'touch', pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: pageX,\n            pageY: pageY\n          };\n        }\n      };\n\n      let onTouchEnd = e => {\n        let touch = [...e.changedTouches].findIndex(_ref4 => {\n          let {\n            identifier: identifier\n          } = _ref4;\n          return identifier === state.current.id;\n        });\n\n        if (touch >= 0) {\n          end(e, 'touch');\n          state.current.id = null;\n          removeGlobalListener(window, 'touchmove', onTouchMove);\n          removeGlobalListener(window, 'touchend', onTouchEnd);\n          removeGlobalListener(window, 'touchcancel', onTouchEnd);\n        }\n      };\n\n      moveProps.onTouchStart = e => {\n        if (e.changedTouches.length === 0 || state.current.id != null) return;\n        let {\n          pageX: pageX,\n          pageY: pageY,\n          identifier: identifier\n        } = e.changedTouches[0];\n        start();\n        e.stopPropagation();\n        e.preventDefault();\n        state.current.lastPosition = {\n          pageX: pageX,\n          pageY: pageY\n        };\n        state.current.id = identifier;\n        addGlobalListener(window, 'touchmove', onTouchMove, false);\n        addGlobalListener(window, 'touchend', onTouchEnd, false);\n        addGlobalListener(window, 'touchcancel', onTouchEnd, false);\n      };\n    } else {\n      let onPointerMove = e => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = e.pointerType || 'mouse'; // Problems with PointerEvent#movementX/movementY:\n          // 1. it is always 0 on macOS Safari.\n          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS\n\n          move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n        }\n      };\n\n      let onPointerUp = e => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = e.pointerType || 'mouse';\n          end(e, pointerType);\n          state.current.id = null;\n          removeGlobalListener(window, 'pointermove', onPointerMove, false);\n          removeGlobalListener(window, 'pointerup', onPointerUp, false);\n          removeGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n\n      moveProps.onPointerDown = e => {\n        if (e.button === 0 && state.current.id == null) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n          state.current.id = e.pointerId;\n          addGlobalListener(window, 'pointermove', onPointerMove, false);\n          addGlobalListener(window, 'pointerup', onPointerUp, false);\n          addGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n    }\n\n    let triggerKeyboardMove = (e, deltaX, deltaY) => {\n      start();\n      move(e, 'keyboard', deltaX, deltaY);\n      end(e, 'keyboard');\n    };\n\n    moveProps.onKeyDown = e => {\n      switch (e.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, -1, 0);\n          break;\n\n        case 'Right':\n        case 'ArrowRight':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 1, 0);\n          break;\n\n        case 'Up':\n        case 'ArrowUp':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, -1);\n          break;\n\n        case 'Down':\n        case 'ArrowDown':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, 1);\n          break;\n      }\n    };\n\n    return moveProps;\n  }, [state, onMoveStart, onMove, onMoveEnd, addGlobalListener, removeGlobalListener]);\n  return {\n    moveProps: moveProps1\n  };\n}\n\nfunction $7d0a636d7a4dcefd$export$2123ff2b87c81ca(props, ref) {\n  let {\n    onScroll: onScroll,\n    isDisabled: isDisabled\n  } = props;\n  let onScrollHandler = $bx7SL$useCallback(e => {\n    // If the ctrlKey is pressed, this is a zoom event, do nothing.\n    if (e.ctrlKey) return; // stop scrolling the page\n\n    e.preventDefault();\n    e.stopPropagation();\n    if (onScroll) onScroll({\n      deltaX: e.deltaX,\n      deltaY: e.deltaY\n    });\n  }, [onScroll]);\n  $bx7SL$useEvent(ref, 'wheel', isDisabled ? null : onScrollHandler);\n}\n\nconst $8a26561d2877236e$var$DEFAULT_THRESHOLD = 500;\n\nfunction $8a26561d2877236e$export$c24ed0104d07eab9(props) {\n  let {\n    isDisabled: isDisabled,\n    onLongPressStart: onLongPressStart,\n    onLongPressEnd: onLongPressEnd,\n    onLongPress: onLongPress,\n    threshold = $8a26561d2877236e$var$DEFAULT_THRESHOLD,\n    accessibilityDescription: accessibilityDescription\n  } = props;\n  const timeRef = $bx7SL$useRef(null);\n  let {\n    addGlobalListener: addGlobalListener,\n    removeGlobalListener: removeGlobalListener\n  } = $bx7SL$useGlobalListeners();\n  let {\n    pressProps: pressProps\n  } = $f6c31cce2adf654f$export$45712eceda6fad21({\n    isDisabled: isDisabled,\n\n    onPressStart(e1) {\n      if (e1.pointerType === 'mouse' || e1.pointerType === 'touch') {\n        if (onLongPressStart) onLongPressStart({ ...e1,\n          type: 'longpressstart'\n        });\n        timeRef.current = setTimeout(() => {\n          // Prevent other usePress handlers from also handling this event.\n          e1.target.dispatchEvent(new PointerEvent('pointercancel', {\n            bubbles: true\n          }));\n          if (onLongPress) onLongPress({ ...e1,\n            type: 'longpress'\n          });\n          timeRef.current = null;\n        }, threshold); // Prevent context menu, which may be opened on long press on touch devices\n\n        if (e1.pointerType === 'touch') {\n          let onContextMenu = e => {\n            e.preventDefault();\n          };\n\n          addGlobalListener(e1.target, 'contextmenu', onContextMenu, {\n            once: true\n          });\n          addGlobalListener(window, 'pointerup', () => {\n            // If no contextmenu event is fired quickly after pointerup, remove the handler\n            // so future context menu events outside a long press are not prevented.\n            setTimeout(() => {\n              removeGlobalListener(e1.target, 'contextmenu', onContextMenu);\n            }, 30);\n          }, {\n            once: true\n          });\n        }\n      }\n    },\n\n    onPressEnd(e) {\n      if (timeRef.current) clearTimeout(timeRef.current);\n      if (onLongPressEnd && (e.pointerType === 'mouse' || e.pointerType === 'touch')) onLongPressEnd({ ...e,\n        type: 'longpressend'\n      });\n    }\n\n  });\n  let descriptionProps = $bx7SL$useDescription(onLongPress && !isDisabled ? accessibilityDescription : null);\n  return {\n    longPressProps: $bx7SL$mergeProps(pressProps, descriptionProps)\n  };\n}\n\nexport { $3b117e43dc0ca95d$export$27c701ed9e449e99 as Pressable, $f1ab8c75478c6f73$export$3351871ee4b288b8 as PressResponder, $a1ea59d68270f0dd$export$f8168d8dd8fd66e6 as useFocus, $507fabe10e71c6fb$export$b9b3dfddab17db27 as isFocusVisible, $507fabe10e71c6fb$export$630ff653c5ada6a9 as getInteractionModality, $507fabe10e71c6fb$export$8397ddfc504fdb9a as setInteractionModality, $507fabe10e71c6fb$export$98e20ec92f614cfe as useInteractionModality, $507fabe10e71c6fb$export$ffd9e5021c1fb2d6 as useFocusVisible, $507fabe10e71c6fb$export$ec71b4b83ac08ec3 as useFocusVisibleListener, $9ab94262bd0047c7$export$420e68273165f4ec as useFocusWithin, $6179b936705e76d3$export$ae780daf29e6d456 as useHover, $e0b6e0b68ec7f50f$export$872b660ac5a1ff98 as useInteractOutside, $46d819fcbaf35654$export$8f71654801c2f7cd as useKeyboard, $e8a7022cf87cba2a$export$36da96379f79f245 as useMove, $f6c31cce2adf654f$export$45712eceda6fad21 as usePress, $7d0a636d7a4dcefd$export$2123ff2b87c81ca as useScrollWheel, $8a26561d2877236e$export$c24ed0104d07eab9 as useLongPress };","map":{"version":3,"mappings":";0NA6BA;AACA;;AACA,IAAIA,2BAAK,GAAU,SAAnB;AACA,IAAIC,qCAAe,GAAG,EAAtB;AACA,IAAIC,wCAAkB,GAAG,IAAIC,OAAJ,EAAzB;;SAEgBC,0CAAqBC,QAAkB;AACrD,MAAIC,YAAK,EAAT,EAAa;AACX,QAAIN,2BAAK,KAAK,SAAd,EAAyB;AACvBC,2CAAe,GAAGM,QAAQ,CAACC,eAAT,CAAyBC,KAAzB,CAA+BC,gBAAjD;AACAH,cAAQ,CAACC,eAAT,CAAyBC,KAAzB,CAA+BC,gBAA/B,GAAkD,MAAlD;AACD;;AAEDV,+BAAK,GAAG,UAAR;AACD,GAPD,MAOO,IAAIK,MAAM,YAAYM,WAAlB,IAAiCN,MAAM,YAAYO,UAAvD,EAAmE;AACxE;AACA;AACAV,4CAAkB,CAACW,GAAnB,CAAuBR,MAAvB,EAA+BA,MAAM,CAACI,KAAP,CAAaK,UAA5C;AACAT,UAAM,CAACI,KAAP,CAAaK,UAAb,GAA0B,MAA1B;AACD;AACF;;SAEeC,0CAAqBV,QAAkB;AACrD,MAAIC,YAAK,EAAT,EAAa;AACX;AACA;AACA,QAAIN,2BAAK,KAAK,UAAd,EACE;AAGFA,+BAAK,GAAG,WAAR,CAPW,CASX;AACA;;AACAgB,cAAU,OAAO;AACf;AACA;AACAC,+BAAkB,OAAO;AACvB;AACA,YAAIjB,2BAAK,KAAK,WAAd,EAA2B;AACzB,cAAIO,QAAQ,CAACC,eAAT,CAAyBC,KAAzB,CAA+BC,gBAA/B,KAAoD,MAAxD,EACEH,QAAQ,CAACC,eAAT,CAAyBC,KAAzB,CAA+BC,gBAA/B,GAAkDT,qCAAe,IAAI,EAArE;AAGFA,+CAAe,GAAG,EAAlB;AACAD,qCAAK,GAAG,SAAR;AACD;AACF,OAViB,CAAlB;AAWD,KAdS,EAcP,GAdO,CAAV;AAeD,GA1BD,MA0BO,IAAIK,MAAM,YAAYM,WAAlB,IAAiCN,MAAM,YAAYO,UAAvD,EACL;AACA;AACA;AAAA,UAAIP,MAAM,IAAIH,wCAAkB,CAACgB,GAAnB,CAAuBb,MAAvB,CAAd,EAA8C;AAC5C,YAAIc,mBAAmB,GAAGjB,wCAAkB,CAACkB,GAAnB,CAAuBf,MAAvB,CAA1B;AAEA,YAAIA,MAAM,CAACI,KAAP,CAAaK,UAAb,KAA4B,MAAhC,EACET,MAAM,CAACI,KAAP,CAAaK,UAAb,GAA0BK,mBAA1B;AAGF,YAAId,MAAM,CAACgB,YAAP,CAAoB,OAApB,MAAiC,EAArC,EACEhB,MAAM,CAACiB,eAAP,CAAuB,OAAvB;AAEFpB,gDAAkB,CAACqB,MAAnB,CAA0BlB,MAA1B;AACD;AAAA;AAEJ;;ACzEM,MAAMmB,yCAAqB,GAAGC,YAAK,CAACC,aAAN,CAA4C,IAA5C,CAA9B;AACPF,yCAAqB,CAACG,WAAtB,GAAoC,uBAApC;;SCmDSC,+CAAyBC,OAAuC;AACvE;AACA,MAAIC,OAAO,GAAGC,iBAAU,CAACP,yCAAD,CAAxB;;AACA,MAAIM,OAAJ,EAAa;AACX,QAAI;AAACE,wBAAD;AAAS,SAAKC;AAAd,QAA8BH,OAAlC;AACAD,SAAK,GAAGK,iBAAU,CAACD,YAAD,EAAeJ,KAAf,CAAlB;AACAG,YAAQ;AACT;;AACDG,mBAAU,CAACL,OAAD,EAAUD,KAAK,CAACO,GAAhB,CAAV;AAEA,SAAOP,KAAP;AACD;;SAOeQ,0CAASR,OAAoC;AAC3D,MAAI;AAACS,aACHC,QADE;AACKC,mBACPC,cAFE;AAEWC,kBACbC,aAHE;AAGUC,gBACZC,WAJE;AAIQC,eACVC,UALE;AAKOC,gBACTC,WANE;AAOFC,aAAS,EAAEC,aAPT;AAOsBC,yBACxBA,mBARE;AAQiBC,+BACnBA,yBATE;AASuBC,+BACzBA,yBAVE;AAWF;AACAlB,OAAG,EAAEmB,CAZH;AAYI,OACHC;AAbD,MAcA5B,8CAAwB,CAACC,KAAD,CAd5B;AAeA,MAAI4B,QAAQ,GAAGC,aAAM,CAAiB,IAAjB,CAArB;AACAD,UAAQ,CAACE,OAAT,GAAmB;aAACpB,QAAD;mBAAUE,cAAV;kBAAyBE,aAAzB;gBAAuCE,WAAvC;eAAmDE,UAAnD;gBAA8DE,WAA9D;+BAA0EI;AAA1E,GAAnB;AAEA,MAAG,CAAEH,SAAF,EAAaU,UAAb,IAA2BC,eAAQ,CAAC,KAAD,CAAtC;AACA,MAAIzB,GAAG,GAAGsB,aAAM,CAAa;AAC3BR,aAAS,EAAE,KADgB;AAE3BY,6BAAyB,EAAE,KAFA;AAG3BC,yBAAqB,EAAE,KAHI;AAI3BC,qBAAiB,EAAE,KAJQ;AAK3BC,mBAAe,EAAE,IALU;AAM3B5D,UAAM,EAAE,IANmB;AAO3B6D,gBAAY,EAAE,KAPa;AAQ3BC,eAAW,EAAE;AARc,GAAb,CAAhB;AAWA,MAAI;AAACC,wCAAD;AAAkBC,8BAAEA;AAApB,MAAgDC,yBAAkB,EAAtE;AAEA,MAAIC,WAAU,GAAGC,cAAO,OAAO;AAC7B,QAAIC,KAAK,GAAGrC,GAAG,CAACuB,OAAhB;;AACA,QAAIe,iBAAiB,IAAIC,aAAJ,EAA8BR,WAA9B,KAA2D;AAC9E,UAAI;AAACzB,kCAAD;AAAaF,uBAAEA,aAAf;AAA4BQ,oBAAEA;AAA9B,UAA4CS,QAAQ,CAACE,OAAzD;AACA,UAAIX,UAAU,IAAIyB,KAAK,CAACT,iBAAxB,EACE;AAGF,UAAItB,YAAJ,EACEA,YAAY,CAAC;AACXkC,YAAI,EAAE,YADK;qBAEXT,WAFW;AAGX9D,cAAM,EAAEsE,aAAa,CAACE,aAHX;AAIXC,gBAAQ,EAAEH,aAAa,CAACG,QAJb;AAKXC,eAAO,EAAEJ,aAAa,CAACI,OALZ;AAMXC,eAAO,EAAEL,aAAa,CAACK,OANZ;AAOXC,cAAM,EAAEN,aAAa,CAACM;AAPX,OAAD,CAAZ;AAWF,UAAIzC,aAAJ,EACEA,aAAa,CAAC,IAAD,CAAb;AAGFiC,WAAK,CAACT,iBAAN,GAA0B,IAA1B;AACAJ,gBAAU,CAAC,IAAD,CAAV;AACD,KAxBD;;AA0BA,QAAIsB,eAAe,aAAIP,aAAJ,EAA8BR,WAA9B,EAA8E;AAAA,UAAtBgB,UAAsB,uEAAT,IAAS;AAC/F,UAAI;AAACvC,8BAAD;AAAWJ,uBAAEA,aAAb;AAA0BF,iBAAEA,OAA5B;AAAmCU,oBAAEA;AAArC,UAAmDS,QAAQ,CAACE,OAAhE;AACA,UAAE,CAAGc,KAAK,CAACT,iBAAX,EACE;AAGFS,WAAK,CAACV,qBAAN,GAA8B,IAA9B;AACAU,WAAK,CAACT,iBAAN,GAA0B,KAA1B;AAEA,UAAIpB,UAAJ,EACEA,UAAU,CAAC;AACTgC,YAAI,EAAE,UADG;qBAETT,WAFS;AAGT9D,cAAM,EAAEsE,aAAa,CAACE,aAHb;AAITC,gBAAQ,EAAEH,aAAa,CAACG,QAJf;AAKTC,eAAO,EAAEJ,aAAa,CAACI,OALd;AAMTC,eAAO,EAAEL,aAAa,CAACK,OANd;AAOTC,cAAM,EAAEN,aAAa,CAACM;AAPb,OAAD,CAAV;AAWF,UAAIzC,aAAJ,EACEA,aAAa,CAAC,KAAD,CAAb;AAGFoB,gBAAU,CAAC,KAAD,CAAV;AAEA,UAAItB,OAAO,IAAI6C,UAAX,IAAqB,CAAKnC,UAA9B,EACEV,OAAO,CAAC;AACNsC,YAAI,EAAE,OADA;qBAENT,WAFM;AAGN9D,cAAM,EAAEsE,aAAa,CAACE,aAHhB;AAINC,gBAAQ,EAAEH,aAAa,CAACG,QAJlB;AAKNC,eAAO,EAAEJ,aAAa,CAACI,OALjB;AAMNC,eAAO,EAAEL,aAAa,CAACK,OANjB;AAONC,cAAM,EAAEN,aAAa,CAACM;AAPhB,OAAD,CAAP;AAUH,KAtCD;;AAwCA,QAAIG,cAAc,IAAIT,aAAJ,EAA8BR,WAA9B,KAA2D;AAC3E,UAAI;AAACrB,4BAAD;AAAUE,oBAAEA;AAAZ,UAA0BS,QAAQ,CAACE,OAAvC;AACA,UAAIX,UAAJ,EACE;AAGF,UAAIF,SAAJ,EACEA,SAAS,CAAC;AACR8B,YAAI,EAAE,SADE;qBAERT,WAFQ;AAGR9D,cAAM,EAAEsE,aAAa,CAACE,aAHd;AAIRC,gBAAQ,EAAEH,aAAa,CAACG,QAJhB;AAKRC,eAAO,EAAEJ,aAAa,CAACI,OALf;AAMRC,eAAO,EAAEL,aAAa,CAACK,OANf;AAORC,cAAM,EAAEN,aAAa,CAACM;AAPd,OAAD,CAAT;AAUH,KAjBD;;AAmBA,QAAII,MAAM,GAAIC,CAAJ,IAAqB;AAC7B,UAAIb,KAAK,CAACvB,SAAV,EAAqB;AACnB,YAAIuB,KAAK,CAACP,YAAV,EACEgB,eAAe,CAACK,iCAAW,CAACd,KAAK,CAACpE,MAAP,EAAeiF,CAAf,CAAZ,EAA+Bb,KAAK,CAACN,WAArC,EAAkD,KAAlD,CAAf;AAEFM,aAAK,CAACvB,SAAN,GAAkB,KAAlB;AACAuB,aAAK,CAACP,YAAN,GAAqB,KAArB;AACAO,aAAK,CAACR,eAAN,GAAwB,IAAxB;AACAQ,aAAK,CAACN,WAAN,GAAoB,IAApB;AACAE,gCAAwB;AACxB,YAAE,CAAGf,yBAAL,EACEvC,yCAAoB,CAAC0D,KAAK,CAACpE,MAAP,CAApB;AAEH;AACF,KAdD;;AAgBA,QAAImF,UAAU,GAAkB;AAC9BC,eAAS,CAACH,CAAD,EAAI;AACX,YAAII,0CAAoB,CAACJ,CAAC,CAACK,WAAH,EAAgBL,CAAC,CAACT,aAAlB,CAApB,IAAwDS,CAAC,CAACT,aAAF,CAAgBe,QAAhB,CAAyBN,CAAC,CAACjF,MAA3B,CAA5D,EAA2G;AACzG,cAAIwF,kDAA4B,CAACP,CAAC,CAACjF,MAAH,EAAsBiF,CAAC,CAACQ,GAAxB,CAAhC,EACER,CAAC,CAACS,cAAF;AAEFT,WAAC,CAACU,eAAF,GAJyG,CAMzG;AACA;AACA;;AACA,cAAE,CAAGvB,KAAK,CAACvB,SAAT,IAAkB,CAAKoC,CAAC,CAACW,MAA3B,EAAmC;AACjCxB,iBAAK,CAACpE,MAAN,GAAeiF,CAAC,CAACT,aAAjB;AACAJ,iBAAK,CAACvB,SAAN,GAAkB,IAAlB;AACAwB,6BAAiB,CAACY,CAAD,EAAI,UAAJ,CAAjB,CAHiC,CAKjC;AACA;;AACAlB,6BAAiB,CAAC7D,QAAD,EAAW,OAAX,EAAoB2F,OAApB,EAA6B,KAA7B,CAAjB;AACD;AACF,SAlBD,MAkBO,IAAIZ,CAAC,CAACQ,GAAF,KAAU,OAAV,IAAqBK,sCAAgB,CAACb,CAAC,CAACT,aAAH,CAAzC,EACL;AACA;AACA;AACAS,WAAC,CAACU,eAAF;AAEH,OA1B6B;;AA2B9BE,aAAO,CAACZ,CAAD,EAAI;AACT,YAAII,0CAAoB,CAACJ,CAAC,CAACK,WAAH,EAAgBL,CAAC,CAACT,aAAlB,CAApB,IAAmD,CAAMS,CAAC,CAACW,MAA3D,IAAqEX,CAAC,CAACT,aAAF,CAAgBe,QAAhB,CAAyBN,CAAC,CAACjF,MAA3B,CAAzE,EACE+E,cAAc,CAACG,iCAAW,CAACd,KAAK,CAACpE,MAAP,EAAeiF,CAAf,CAAZ,EAA+B,UAA/B,CAAd;AAEH,OA/B6B;;AAgC9Bc,aAAO,CAACd,CAAD,EAAI;AACT,YAAIA,CAAC,KAAKA,CAAC,CAACT,aAAF,CAAgBe,QAAhB,CAAyBN,CAAC,CAACjF,MAA3B,CAAV,EACE;;AAGF,YAAIiF,CAAC,IAAIA,CAAC,CAACe,MAAF,KAAa,CAAtB,EAAyB;AACvBf,WAAC,CAACU,eAAF;AACA,cAAI/C,WAAJ,EACEqC,CAAC,CAACS,cAAF,GAHqB,CAMvB;AACA;;AACA,cAAE,CAAGtB,KAAK,CAACV,qBAAT,IAA8B,CAAKU,KAAK,CAACX,yBAAzC,KAAuEW,KAAK,CAACN,WAAN,KAAsB,SAAtB,IAAmCmC,qBAAc,CAAChB,CAAC,CAACK,WAAH,CAAxH,CAAF,EAA4I;AAC1I;AACA,gBAAE,CAAG1C,WAAH,IAAa,CAAKG,mBAApB,EACEmD,4BAAqB,CAACjB,CAAC,CAACT,aAAH,CAArB;AAGFH,6BAAiB,CAACY,CAAD,EAAI,SAAJ,CAAjB;AACAF,0BAAc,CAACE,CAAD,EAAI,SAAJ,CAAd;AACAJ,2BAAe,CAACI,CAAD,EAAI,SAAJ,CAAf;AACD;;AAEDb,eAAK,CAACX,yBAAN,GAAkC,KAAlC;AACAW,eAAK,CAACV,qBAAN,GAA8B,KAA9B;AACD;AACF;;AA3D6B,KAAhC;;AA8DA,QAAImC,OAAO,GAAIZ,CAAJ,IAAyB;AAClC,UAAIb,KAAK,CAACvB,SAAN,IAAmBwC,0CAAoB,CAACJ,CAAD,EAAIb,KAAK,CAACpE,MAAV,CAA3C,EAA8D;AAC5D,YAAIwF,kDAA4B,CAACP,CAAC,CAACjF,MAAH,EAAsBiF,CAAC,CAACQ,GAAxB,CAAhC,EACER,CAAC,CAACS,cAAF;AAEFT,SAAC,CAACU,eAAF;AAEAvB,aAAK,CAACvB,SAAN,GAAkB,KAAlB;AACA,YAAI7C,MAAM,GAAGiF,CAAC,CAACjF,MAAf;AACA6E,uBAAe,CAACK,iCAAW,CAACd,KAAK,CAACpE,MAAP,EAAeiF,CAAf,CAAZ,EAA+B,UAA/B,EAA2Cb,KAAK,CAACpE,MAAN,CAAauF,QAAb,CAAsBvF,MAAtB,CAA3C,CAAf;AACAgE,gCAAwB,GAToC,CAW5D;AACA;;AACA,YAAII,KAAK,CAACpE,MAAN,YAAwBM,WAAxB,IAAuC8D,KAAK,CAACpE,MAAN,CAAauF,QAAb,CAAsBvF,MAAtB,CAAvC,KAAyE8F,sCAAgB,CAAC1B,KAAK,CAACpE,MAAP,CAAhB,IAAkCoE,KAAK,CAACpE,MAAN,CAAagB,YAAb,CAA0B,MAA1B,MAAsC,MAAjJ,CAAJ,EACEoD,KAAK,CAACpE,MAAN,CAAamG,KAAb;AAEH;AACF,KAlBD;;AAoBA,QAAI,OAAOC,YAAP,KAAwB,WAA5B,EAAyC;AACvCjB,gBAAU,CAACkB,aAAX,GAA4BpB,CAAJ,IAAU;AAChC;AACA,YAAIA,CAAC,CAACe,MAAF,KAAa,CAAb,IAAc,CAAKf,CAAC,CAACT,aAAF,CAAgBe,QAAhB,CAAyBN,CAAC,CAACjF,MAA3B,CAAvB,EACE,OAH8B,CAMhC;AACA;AACA;AACA;;AACA,YAAIsG,4BAAqB,CAACrB,CAAC,CAACK,WAAH,CAAzB,EAA0C;AACxClB,eAAK,CAACN,WAAN,GAAoB,SAApB;AACA;AACD,SAb+B,CAehC;AACA;;;AACA,YAAIyC,0CAAoB,CAACtB,CAAC,CAACT,aAAH,CAAxB,EACES,CAAC,CAACS,cAAF;AAGFtB,aAAK,CAACN,WAAN,GAAoBmB,CAAC,CAACnB,WAAtB;AAEAmB,SAAC,CAACU,eAAF;;AACA,YAAE,CAAGvB,KAAK,CAACvB,SAAX,EAAsB;AACpBuB,eAAK,CAACvB,SAAN,GAAkB,IAAlB;AACAuB,eAAK,CAACP,YAAN,GAAqB,IAArB;AACAO,eAAK,CAACR,eAAN,GAAwBqB,CAAC,CAACuB,SAA1B;AACApC,eAAK,CAACpE,MAAN,GAAeiF,CAAC,CAACT,aAAjB;AAEA,cAAE,CAAG5B,WAAH,IAAa,CAAKG,mBAApB,EACEmD,4BAAqB,CAACjB,CAAC,CAACT,aAAH,CAArB;AAGF,cAAE,CAAGvB,yBAAL,EACElD,yCAAoB,CAACqE,KAAK,CAACpE,MAAP,CAApB;AAGFqE,2BAAiB,CAACY,CAAD,EAAIb,KAAK,CAACN,WAAV,CAAjB;AAEAC,2BAAiB,CAAC7D,QAAD,EAAW,aAAX,EAA0BuG,aAA1B,EAAyC,KAAzC,CAAjB;AACA1C,2BAAiB,CAAC7D,QAAD,EAAW,WAAX,EAAwBwG,WAAxB,EAAqC,KAArC,CAAjB;AACA3C,2BAAiB,CAAC7D,QAAD,EAAW,eAAX,EAA4ByG,eAA5B,EAA6C,KAA7C,CAAjB;AACD;AACF,OA5CD;;AA8CAxB,gBAAU,CAACyB,WAAX,GAA0B3B,CAAJ,IAAU;AAC9B,YAAE,CAAGA,CAAC,CAACT,aAAF,CAAgBe,QAAhB,CAAyBN,CAAC,CAACjF,MAA3B,CAAL,EACE;;AAGF,YAAIiF,CAAC,CAACe,MAAF,KAAa,CAAjB,EAAoB;AAClB;AACA;AACA;AACA,cAAIO,0CAAoB,CAACtB,CAAC,CAACT,aAAH,CAAxB,EACES,CAAC,CAACS,cAAF;AAGFT,WAAC,CAACU,eAAF;AACD;AACF,OAfD;;AAiBAR,gBAAU,CAACuB,WAAX,GAA0BzB,CAAJ,IAAU;AAC9B;AACA,YAAE,CAAGA,CAAC,CAACT,aAAF,CAAgBe,QAAhB,CAAyBN,CAAC,CAACjF,MAA3B,CAAH,IAAoDoE,KAAK,CAACN,WAAN,KAAsB,SAA5E,EACE,OAH4B,CAM9B;AACA;AACA;;AACA,YAAImB,CAAC,CAACe,MAAF,KAAa,CAAb,IAAkBa,kCAAY,CAAC5B,CAAD,EAAIA,CAAC,CAACT,aAAN,CAAlC,EACEO,cAAc,CAACE,CAAD,EAAIb,KAAK,CAACN,WAAN,IAAqBmB,CAAC,CAACnB,WAA3B,CAAd;AAEH,OAZD,CAhEuC,CA8EvC;AACA;AACA;;;AACA,UAAI2C,aAAa,GAAIxB,CAAJ,IAAwB;AACvC,YAAIA,CAAC,CAACuB,SAAF,KAAgBpC,KAAK,CAACR,eAA1B,EACE;;AAGF,YAAIiD,kCAAY,CAAC5B,CAAD,EAAIb,KAAK,CAACpE,MAAV,CAAhB,EACE;AAAA,cAAE,CAAGoE,KAAK,CAACP,YAAX,EAAyB;AACvBO,iBAAK,CAACP,YAAN,GAAqB,IAArB;AACAQ,6BAAiB,CAACa,iCAAW,CAACd,KAAK,CAACpE,MAAP,EAAeiF,CAAf,CAAZ,EAA+Bb,KAAK,CAACN,WAArC,CAAjB;AACD;AAAA,SAJH,MAKO,IAAIM,KAAK,CAACP,YAAV,EAAwB;AAC7BO,eAAK,CAACP,YAAN,GAAqB,KAArB;AACAgB,yBAAe,CAACK,iCAAW,CAACd,KAAK,CAACpE,MAAP,EAAeiF,CAAf,CAAZ,EAA+Bb,KAAK,CAACN,WAArC,EAAkD,KAAlD,CAAf;AACA,cAAIV,QAAQ,CAACE,OAAT,CAAiBN,yBAArB,EACEgC,MAAM,CAACC,CAAD,CAAN;AAEH;AACF,OAjBD;;AAmBA,UAAIyB,WAAW,GAAIzB,CAAJ,IAAwB;AACrC,YAAIA,CAAC,CAACuB,SAAF,KAAgBpC,KAAK,CAACR,eAAtB,IAAyCQ,KAAK,CAACvB,SAA/C,IAA4DoC,CAAC,CAACe,MAAF,KAAa,CAA7E,EAAgF;AAC9E,cAAIa,kCAAY,CAAC5B,CAAD,EAAIb,KAAK,CAACpE,MAAV,CAAhB,EACE6E,eAAe,CAACK,iCAAW,CAACd,KAAK,CAACpE,MAAP,EAAeiF,CAAf,CAAZ,EAA+Bb,KAAK,CAACN,WAArC,CAAf,CADF,KAEO,IAAIM,KAAK,CAACP,YAAV,EACLgB,eAAe,CAACK,iCAAW,CAACd,KAAK,CAACpE,MAAP,EAAeiF,CAAf,CAAZ,EAA+Bb,KAAK,CAACN,WAArC,EAAkD,KAAlD,CAAf;AAGFM,eAAK,CAACvB,SAAN,GAAkB,KAAlB;AACAuB,eAAK,CAACP,YAAN,GAAqB,KAArB;AACAO,eAAK,CAACR,eAAN,GAAwB,IAAxB;AACAQ,eAAK,CAACN,WAAN,GAAoB,IAApB;AACAE,kCAAwB;AACxB,cAAE,CAAGf,yBAAL,EACEvC,yCAAoB,CAAC0D,KAAK,CAACpE,MAAP,CAApB;AAEH;AACF,OAjBD;;AAmBA,UAAI2G,eAAe,GAAI1B,CAAJ,IAAwB;AACzCD,cAAM,CAACC,CAAD,CAAN;AACD,OAFD;;AAIAE,gBAAU,CAAC2B,WAAX,GAA0B7B,CAAJ,IAAU;AAC9B,YAAE,CAAGA,CAAC,CAACT,aAAF,CAAgBe,QAAhB,CAAyBN,CAAC,CAACjF,MAA3B,CAAL,EACE,OAF4B,CAK9B;;AACAgF,cAAM,CAACC,CAAD,CAAN;AACD,OAPD;AAQD,KAnID,MAmIO;AACLE,gBAAU,CAACyB,WAAX,GAA0B3B,CAAJ,IAAU;AAC9B;AACA,YAAIA,CAAC,CAACe,MAAF,KAAa,CAAb,IAAc,CAAKf,CAAC,CAACT,aAAF,CAAgBe,QAAhB,CAAyBN,CAAC,CAACjF,MAA3B,CAAvB,EACE,OAH4B,CAM9B;AACA;;AACA,YAAIuG,0CAAoB,CAACtB,CAAC,CAACT,aAAH,CAAxB,EACES,CAAC,CAACS,cAAF;AAGFT,SAAC,CAACU,eAAF;AACA,YAAIvB,KAAK,CAACX,yBAAV,EACE;AAGFW,aAAK,CAACvB,SAAN,GAAkB,IAAlB;AACAuB,aAAK,CAACP,YAAN,GAAqB,IAArB;AACAO,aAAK,CAACpE,MAAN,GAAeiF,CAAC,CAACT,aAAjB;AACAJ,aAAK,CAACN,WAAN,GAAoBmC,qBAAc,CAAChB,CAAC,CAACK,WAAH,CAAd,GAAgC,SAAhC,GAA4C,OAAhE;AAEA,YAAE,CAAG1C,WAAH,IAAa,CAAKG,mBAApB,EACEmD,4BAAqB,CAACjB,CAAC,CAACT,aAAH,CAArB;AAGFH,yBAAiB,CAACY,CAAD,EAAIb,KAAK,CAACN,WAAV,CAAjB;AAEAC,yBAAiB,CAAC7D,QAAD,EAAW,SAAX,EAAsB6G,SAAtB,EAAiC,KAAjC,CAAjB;AACD,OA7BD;;AA+BA5B,gBAAU,CAAC6B,YAAX,GAA2B/B,CAAJ,IAAU;AAC/B,YAAE,CAAGA,CAAC,CAACT,aAAF,CAAgBe,QAAhB,CAAyBN,CAAC,CAACjF,MAA3B,CAAL,EACE;AAGFiF,SAAC,CAACU,eAAF;;AACA,YAAIvB,KAAK,CAACvB,SAAN,IAAe,CAAKuB,KAAK,CAACX,yBAA9B,EAAyD;AACvDW,eAAK,CAACP,YAAN,GAAqB,IAArB;AACAQ,2BAAiB,CAACY,CAAD,EAAIb,KAAK,CAACN,WAAV,CAAjB;AACD;AACF,OAVD;;AAYAqB,gBAAU,CAAC8B,YAAX,GAA2BhC,CAAJ,IAAU;AAC/B,YAAE,CAAGA,CAAC,CAACT,aAAF,CAAgBe,QAAhB,CAAyBN,CAAC,CAACjF,MAA3B,CAAL,EACE;AAGFiF,SAAC,CAACU,eAAF;;AACA,YAAIvB,KAAK,CAACvB,SAAN,IAAe,CAAKuB,KAAK,CAACX,yBAA9B,EAAyD;AACvDW,eAAK,CAACP,YAAN,GAAqB,KAArB;AACAgB,yBAAe,CAACI,CAAD,EAAIb,KAAK,CAACN,WAAV,EAAuB,KAAvB,CAAf;AACA,cAAIV,QAAQ,CAACE,OAAT,CAAiBN,yBAArB,EACEgC,MAAM,CAACC,CAAD,CAAN;AAEH;AACF,OAbD;;AAeAE,gBAAU,CAAC4B,SAAX,GAAwB9B,CAAJ,IAAU;AAC5B,YAAE,CAAGA,CAAC,CAACT,aAAF,CAAgBe,QAAhB,CAAyBN,CAAC,CAACjF,MAA3B,CAAL,EACE;AAGF,YAAE,CAAGoE,KAAK,CAACX,yBAAT,IAAsCwB,CAAC,CAACe,MAAF,KAAa,CAArD,EACEjB,cAAc,CAACE,CAAD,EAAIb,KAAK,CAACN,WAAV,CAAd;AAEH,OARD;;AAUA,UAAIiD,SAAS,GAAI9B,CAAJ,IAAsB;AACjC;AACA,YAAIA,CAAC,CAACe,MAAF,KAAa,CAAjB,EACE;AAGF5B,aAAK,CAACvB,SAAN,GAAkB,KAAlB;AACAmB,gCAAwB;;AAExB,YAAII,KAAK,CAACX,yBAAV,EAAqC;AACnCW,eAAK,CAACX,yBAAN,GAAkC,KAAlC;AACA;AACD;;AAED,YAAIoD,kCAAY,CAAC5B,CAAD,EAAIb,KAAK,CAACpE,MAAV,CAAhB,EACE6E,eAAe,CAACK,iCAAW,CAACd,KAAK,CAACpE,MAAP,EAAeiF,CAAf,CAAZ,EAA+Bb,KAAK,CAACN,WAArC,CAAf,CADF,KAEO,IAAIM,KAAK,CAACP,YAAV,EACLgB,eAAe,CAACK,iCAAW,CAACd,KAAK,CAACpE,MAAP,EAAeiF,CAAf,CAAZ,EAA+Bb,KAAK,CAACN,WAArC,EAAkD,KAAlD,CAAf;AAGFM,aAAK,CAACP,YAAN,GAAqB,KAArB;AACD,OArBD;;AAuBAsB,gBAAU,CAAC+B,YAAX,GAA2BjC,CAAJ,IAAU;AAC/B,YAAE,CAAGA,CAAC,CAACT,aAAF,CAAgBe,QAAhB,CAAyBN,CAAC,CAACjF,MAA3B,CAAL,EACE;AAGFiF,SAAC,CAACU,eAAF;AACA,YAAIwB,KAAK,GAAGC,uCAAiB,CAACnC,CAAC,CAACK,WAAH,CAA7B;AACA,YAAE,CAAG6B,KAAL,EACE;AAEF/C,aAAK,CAACR,eAAN,GAAwBuD,KAAK,CAACE,UAA9B;AACAjD,aAAK,CAACX,yBAAN,GAAkC,IAAlC;AACAW,aAAK,CAACP,YAAN,GAAqB,IAArB;AACAO,aAAK,CAACvB,SAAN,GAAkB,IAAlB;AACAuB,aAAK,CAACpE,MAAN,GAAeiF,CAAC,CAACT,aAAjB;AACAJ,aAAK,CAACN,WAAN,GAAoB,OAApB,CAf+B,CAiB/B;AACA;;AACA,YAAE,CAAGlB,WAAH,IAAa,CAAKG,mBAApB,EACEmD,4BAAqB,CAACjB,CAAC,CAACT,aAAH,CAArB;AAGF,YAAE,CAAGvB,yBAAL,EACElD,yCAAoB,CAACqE,KAAK,CAACpE,MAAP,CAApB;AAGFqE,yBAAiB,CAACY,CAAD,EAAIb,KAAK,CAACN,WAAV,CAAjB;AAEAC,yBAAiB,CAACuD,MAAD,EAAS,QAAT,EAAmBC,QAAnB,EAA6B,IAA7B,CAAjB;AACD,OA9BD;;AAgCApC,gBAAU,CAACqC,WAAX,GAA0BvC,CAAJ,IAAU;AAC9B,YAAE,CAAGA,CAAC,CAACT,aAAF,CAAgBe,QAAhB,CAAyBN,CAAC,CAACjF,MAA3B,CAAL,EACE;AAGFiF,SAAC,CAACU,eAAF;AACA,YAAE,CAAGvB,KAAK,CAACvB,SAAX,EACE;AAGF,YAAIsE,KAAK,GAAGM,kCAAY,CAACxC,CAAC,CAACK,WAAH,EAAgBlB,KAAK,CAACR,eAAtB,CAAxB;;AACA,YAAIuD,KAAK,IAAIN,kCAAY,CAACM,KAAD,EAAQlC,CAAC,CAACT,aAAV,CAAzB,EACE;AAAA,cAAE,CAAGJ,KAAK,CAACP,YAAX,EAAyB;AACvBO,iBAAK,CAACP,YAAN,GAAqB,IAArB;AACAQ,6BAAiB,CAACY,CAAD,EAAIb,KAAK,CAACN,WAAV,CAAjB;AACD;AAAA,SAJH,MAKO,IAAIM,KAAK,CAACP,YAAV,EAAwB;AAC7BO,eAAK,CAACP,YAAN,GAAqB,KAArB;AACAgB,yBAAe,CAACI,CAAD,EAAIb,KAAK,CAACN,WAAV,EAAuB,KAAvB,CAAf;AACA,cAAIV,QAAQ,CAACE,OAAT,CAAiBN,yBAArB,EACEgC,MAAM,CAACC,CAAD,CAAN;AAEH;AACF,OAvBD;;AAyBAE,gBAAU,CAACuC,UAAX,GAAyBzC,CAAJ,IAAU;AAC7B,YAAE,CAAGA,CAAC,CAACT,aAAF,CAAgBe,QAAhB,CAAyBN,CAAC,CAACjF,MAA3B,CAAL,EACE;AAGFiF,SAAC,CAACU,eAAF;AACA,YAAE,CAAGvB,KAAK,CAACvB,SAAX,EACE;AAGF,YAAIsE,KAAK,GAAGM,kCAAY,CAACxC,CAAC,CAACK,WAAH,EAAgBlB,KAAK,CAACR,eAAtB,CAAxB;;AACA,YAAIuD,KAAK,IAAIN,kCAAY,CAACM,KAAD,EAAQlC,CAAC,CAACT,aAAV,CAAzB,EAAmD;AACjDO,wBAAc,CAACE,CAAD,EAAIb,KAAK,CAACN,WAAV,CAAd;AACAe,yBAAe,CAACI,CAAD,EAAIb,KAAK,CAACN,WAAV,CAAf;AACD,SAHD,MAGO,IAAIM,KAAK,CAACP,YAAV,EACLgB,eAAe,CAACI,CAAD,EAAIb,KAAK,CAACN,WAAV,EAAuB,KAAvB,CAAf;;AAGFM,aAAK,CAACvB,SAAN,GAAkB,KAAlB;AACAuB,aAAK,CAACR,eAAN,GAAwB,IAAxB;AACAQ,aAAK,CAACP,YAAN,GAAqB,KAArB;AACAO,aAAK,CAACX,yBAAN,GAAkC,IAAlC;AACA,YAAE,CAAGR,yBAAL,EACEvC,yCAAoB,CAAC0D,KAAK,CAACpE,MAAP,CAApB;AAEFgE,gCAAwB;AACzB,OA1BD;;AA4BAmB,gBAAU,CAACwC,aAAX,GAA4B1C,CAAJ,IAAU;AAChC,YAAE,CAAGA,CAAC,CAACT,aAAF,CAAgBe,QAAhB,CAAyBN,CAAC,CAACjF,MAA3B,CAAL,EACE;AAGFiF,SAAC,CAACU,eAAF;AACA,YAAIvB,KAAK,CAACvB,SAAV,EACEmC,MAAM,CAACC,CAAD,CAAN;AAEH,OATD;;AAWA,UAAIsC,QAAQ,GAAItC,CAAJ,IAAiB;AAC3B,YAAIb,KAAK,CAACvB,SAAN,IAAoBoC,CAAC,CAACjF,MAAF,CAAqBuF,QAArB,CAA8BnB,KAAK,CAACpE,MAApC,CAAxB,EACEgF,MAAM,CAAC;AACLR,uBAAa,EAAEJ,KAAK,CAACpE,MADhB;AAELyE,kBAAQ,EAAE,KAFL;AAGLE,iBAAO,EAAE,KAHJ;AAILD,iBAAO,EAAE,KAJJ;AAKLE,gBAAM,EAAE;AALH,SAAD,CAAN;AAQH,OAVD;;AAYAO,gBAAU,CAAC2B,WAAX,GAA0B7B,CAAJ,IAAU;AAC9B,YAAE,CAAGA,CAAC,CAACT,aAAF,CAAgBe,QAAhB,CAAyBN,CAAC,CAACjF,MAA3B,CAAL,EACE;AAGFgF,cAAM,CAACC,CAAD,CAAN;AACD,OAND;AAOD;;AAED,WAAOE,UAAP;AACD,GA9gBuB,EA8gBrB,CAACpB,iBAAD,EAAoBnB,WAApB,EAAgCG,mBAAhC,EAAqDiB,wBAArD,EAA+Ef,yBAA/E,CA9gBqB,CAAxB,CAjC2D,CAijB3D;AACA;;AACA2E,kBAAS,OAAO;AACd,WAAM,MAAO;AACX,UAAE,CAAG3E,yBAAL,EACEvC,yCAAoB,CAACqB,GAAG,CAACuB,OAAJ,CAAYtD,MAAb,CAApB;AAEH,KAJD;AAKD,GANQ,EAMN,CAACiD,yBAAD,CANM,CAAT;AAQA,SAAO;AACLJ,aAAS,EAAEC,aAAa,IAAID,SADvB;AAELsC,cAAU,EAAEtD,iBAAU,CAACsB,QAAD,EAAWe,WAAX;AAFjB,GAAP;AAID;;SAEQ4B,uCAAiB9F,QAA0B;AAClD,SAAOA,MAAM,CAAC6H,OAAP,KAAmB,GAAnB,IAA0B7H,MAAM,CAAC8H,YAAP,CAAoB,MAApB,CAAjC;AACD;;SAEQzC,2CAAqB0C,OAAsBvD,eAAiC;AACnF,QAAM;AAACiB,YAAD;AAAIuC,UAAEA;AAAN,MAAcD,KAApB;AACA,QAAME,OAAO,GAAGzD,aAAhB;AACA,QAAM0D,IAAI,GAAGD,OAAO,CAACjH,YAAR,CAAqB,MAArB,CAAb,CAHmF,CAInF;AACA;;AACA,SAAM,CACHyE,GAAG,KAAK,OAAR,IAAmBA,GAAG,KAAK,GAA3B,IAAkCA,GAAG,KAAK,UAA1C,IAAwDuC,IAAI,KAAK,OAD9D,KACqE,EACtEC,OAAO,YAAYE,gBAAnB,IAAmC,CAAKC,qCAAe,CAACH,OAAD,EAAUxC,GAAV,CAAvD,IACDwC,OAAO,YAAYI,mBADlB,IAEDJ,OAAO,CAACK,iBAH+D,CADrE,KAIuB,CAGzBxC,sCAAgB,CAACmC,OAAD,CAHS,IAGKC,IAAI,KAAK,QAAT,IAAqBzC,GAAG,KAAK,OAPzD,KAQJ;IACEyC,IAAI,KAAK,MAAT,IAAmBzC,GAAG,KAAK,QAT/B;AAWD;;SAEQ2B,wCAAkBW,OAAiC;AAC1D,QAAM;AAACQ;AAAD,MAAkBR,KAAxB;AACA,MAAIQ,aAAa,CAACC,MAAd,GAAuB,CAA3B,EACE,OAAOD,aAAa,CAAC,CAAD,CAApB;AAEF,SAAO,IAAP;AACD;;SAEQd,mCACPM,OACAvB,WACc;AACd,QAAMiC,cAAc,GAAGV,KAAK,CAACU,cAA7B;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,cAAc,CAACD,MAAnC,EAA2CE,CAAC,EAA5C,EAAgD;AAC9C,UAAMvB,KAAK,GAAGsB,cAAc,CAACC,CAAD,CAA5B;AACA,QAAIvB,KAAK,CAACE,UAAN,KAAqBb,SAAzB,EACE,OAAOW,KAAP;AAEH;;AACD,SAAO,IAAP;AACD;;SAEQjC,kCAAYlF,QAA0BiF,GAAyB;AACtE,SAAO;AACLT,iBAAa,EAAExE,MADV;AAELyE,YAAQ,EAAEQ,CAAC,CAACR,QAFP;AAGLE,WAAO,EAAEM,CAAC,CAACN,OAHN;AAILD,WAAO,EAAEO,CAAC,CAACP,OAJN;AAKLE,UAAM,EAAEK,CAAC,CAACL;AALL,GAAP;AAOD;;SAkBQ+D,yCAAmBC,OAAyB;AACnD,MAAIC,OAAO,GAAID,KAAK,CAACE,KAAN,GAAc,CAAd,IAAoBF,KAAK,CAACG,OAA1B,IAAqC,CAApD;AACA,MAAIC,OAAO,GAAIJ,KAAK,CAACK,MAAN,GAAe,CAAf,IAAqBL,KAAK,CAACM,OAA3B,IAAsC,CAArD;AAEA,SAAO;AACLC,OAAG,EAAEP,KAAK,CAACQ,OAAN,GAAgBJ,OADhB;AAELK,SAAK,EAAET,KAAK,CAACU,OAAN,GAAgBT,OAFlB;AAGLU,UAAM,EAAEX,KAAK,CAACQ,OAAN,GAAgBJ,OAHnB;AAILQ,QAAI,EAAEZ,KAAK,CAACU,OAAN,GAAgBT;AAJjB,GAAP;AAMD;;SAEQY,+CAAyBC,GAASC,GAAS;AAClD;AACA,MAAID,CAAC,CAACF,IAAF,GAASG,CAAC,CAACN,KAAX,IAAoBM,CAAC,CAACH,IAAF,GAASE,CAAC,CAACL,KAAnC,EACE,OAAO,KAAP,CAHgD,CAKlD;;AACA,MAAIK,CAAC,CAACP,GAAF,GAAQQ,CAAC,CAACJ,MAAV,IAAoBI,CAAC,CAACR,GAAF,GAAQO,CAAC,CAACH,MAAlC,EACE,OAAO,KAAP;AAEF,SAAO,IAAP;AACD;;SAEQ1C,mCAAa+B,OAAmB5I,QAAiB;AACxD,MAAI4J,IAAI,GAAG5J,MAAM,CAAC6J,qBAAP,EAAX;AACA,MAAIC,SAAS,GAAGnB,wCAAkB,CAACC,KAAD,CAAlC;AACA,SAAOa,8CAAwB,CAACG,IAAD,EAAOE,SAAP,CAA/B;AACD;;SAEQvD,2CAAqBvG,QAAiB;AAC7C;AACA,SAAM,EAAGA,MAAM,YAAYM,WAArB,KAAgC,CAAMN,MAAM,CAAC+J,SAAnD;AACD;;SAEQvE,mDAA6BxF,QAAiByF,KAAa;AAClE,MAAIzF,MAAM,YAAYmI,gBAAtB,EACE,OAAM,CAAEC,qCAAe,CAACpI,MAAD,EAASyF,GAAT,CAAvB;AAGF,MAAIzF,MAAM,YAAYgK,iBAAtB,EACE,OAAOhK,MAAM,CAACuE,IAAP,KAAgB,QAAvB;AAGF,SAAO,IAAP;AACD;;AAED,MAAM0F,uCAAiB,GAAG,IAAIC,GAAJ,CAAQ,CAChC,UADgC,EAEhC,OAFgC,EAGhC,OAHgC,EAIhC,OAJgC,EAKhC,MALgC,EAMhC,OANgC,EAOhC,QAPgC,EAQhC,QARgC,EAShC,OATgC,CAAR,CAA1B;;SAYS9B,sCAAgBpI,QAA0ByF,KAAa;AAC9D;AACA,SAAOzF,MAAM,CAACuE,IAAP,KAAgB,UAAhB,IAA8BvE,MAAM,CAACuE,IAAP,KAAgB,OAA9C,GACHkB,GAAG,KAAK,GADL,GAEHwE,uCAAiB,CAACpJ,GAAlB,CAAsBb,MAAM,CAACuE,IAA7B,CAFJ;AAGD;;AC9wBM,MAAM4F,yCAAS,gBAAG/I,YAAK,CAACgJ,UAAN,CAAgB,OAAwCrI,GAAxC,KAAoE;AAAA,MAAlE;AAACsI,sBAAD;AAAS,OAAK7I;AAAd,GAAkE;AAC3G,MAAI8I,MAAM,GAAGjH,aAAM,EAAnB;AACAtB,KAAG,GAAGA,GAAG,SAAH,OAAG,WAAH,SAAOuI,MAAb;AACA,MAAI;AAACnF;AAAD,MAAenD,yCAAQ,CAAC,KAAIR,KAAJ;SAAWO;AAAX,GAAD,CAA3B;AACA,MAAIwI,KAAK,GAAGnJ,YAAK,CAACoJ,QAAN,CAAeC,IAAf,CAAoBJ,QAApB,CAAZ;AACA,SAAM,aAACjJ,YAAK,CAACsJ,YAAN,CACLH,KADK,EAEL;AACA;SAACxI,GAAD;OAASF,iBAAU,CAAC0I,KAAK,CAAC/I,KAAP,EAAc2D,UAAd;AAAnB,GAHK,CAAP;AAKD,CAVwB,CAAlB;ACCA,MAAMwF,yCAAc,gBAAGvJ,YAAK,CAACgJ,UAAN,CAAgB,QAA6CrI,GAA7C,KAAkF;AAAA,MAAhF;AAACsI,sBAAD;AAAS,OAAK7I;AAAd,GAAgF;AAC9H,MAAIoJ,YAAY,GAAGvH,aAAM,CAAC,KAAD,CAAzB;AACA,MAAIwH,WAAW,GAAGnJ,iBAAU,CAACP,yCAAD,CAA5B;AACA,MAAIM,OAAO,GAAGI,iBAAU,CAACgJ,WAAW,IAAI,EAAhB,EAAoB,KACvCrJ,KADuC;AAE1CO,OAAG,EAAEA,GAAG,KAAI8I,WAAW,SAAX,eAAW,KAAX,6BAAW,CAAE9I,GAAjB,CAFkC;;AAG1CJ,YAAQ,GAAG;AACTiJ,kBAAY,CAACtH,OAAb,GAAuB,IAAvB;AACA,UAAIuH,WAAJ,EACEA,WAAW,CAAClJ,QAAZ;AAEH;;AARyC,GAApB,CAAxB;AAWAG,mBAAU,CAAC+I,WAAD,EAAc9I,GAAd,CAAV;AAEA6F,kBAAS,OAAO;AACd,QAAE,CAAGgD,YAAY,CAACtH,OAAlB,EACEwH,OAAO,CAACC,IAAR,CACE,2IADF;AAKH,GAPQ,EAON,EAPM,CAAT;AASA,SAAM,wCACH5J,yCAAqB,CAAC6J,QADnB,EAC2B;AAACC,SAAK,EAAExJ;AAAR,GAD3B,EAED4I,QAFC,CAAN;AAKD,CA9B6B,CAAvB;;MCPMa,0CAAmB;AA2B9BC,oBAAkB,GAAY;AAC5B,WAAO,KAAK7F,WAAL,CAAiB8F,gBAAxB;AACD;;AAED1F,gBAAc,GAAS;AACrB,SAAK0F,gBAAL,GAAwB,IAAxB;AACA,SAAK9F,WAAL,CAAiBI,cAAjB;AACD;;AAEDC,iBAAe,GAAS;AACtB,SAAKL,WAAL,CAAiBK,eAAjB;;AACA,SAAK0F,oBAAL,GAAyB,MAAS,IAAlC;AACD;;AAEDA,sBAAoB,GAAY;AAC9B,WAAO,KAAP;AACD;;AAEDC,SAAO,GAAG,CAAE;;cAhCA/G,MAAce,aAAyB;AACjD,SAAKA,WAAL,GAAmBA,WAAnB;AACA,SAAKtF,MAAL,GAAcsF,WAAW,CAACtF,MAA1B;AACA,SAAKwE,aAAL,GAAqBc,WAAW,CAACd,aAAjC;AACA,SAAK+G,aAAL,GAAqBjG,WAAW,CAACiG,aAAjC;AACA,SAAKC,OAAL,GAAelG,WAAW,CAACkG,OAA3B;AACA,SAAKC,UAAL,GAAkBnG,WAAW,CAACmG,UAA9B;AACA,SAAKL,gBAAL,GAAwB9F,WAAW,CAAC8F,gBAApC;AACA,SAAKM,UAAL,GAAkBpG,WAAW,CAACoG,UAA9B;AACA,SAAKC,SAAL,GAAiBrG,WAAW,CAACqG,SAA7B;AACA,SAAKC,SAAL,GAAiBtG,WAAW,CAACsG,SAA7B;AACA,SAAKrH,IAAL,GAAYA,IAAZ;AACD;;AAzB6B;;SAgDhBsH,0CAAsBC,QAAsC;AAC1E,MAAIC,QAAQ,GAAG1I,aAAM,CAAC;AACpB2I,aAAS,EAAE,KADS;YAEpBF,MAFoB;AAGpBG,YAAQ,EAAE;AAHU,GAAD,CAArB;AAKAF,UAAQ,CAACzI,OAAT,CAAiBwI,MAAjB,GAA0BA,MAA1B,CAN0E,CAQ1E;AACA;;AACAI,wBAAe,OAAO;AACpB,UAAM9H,KAAK,GAAG2H,QAAQ,CAACzI,OAAvB;AACA,WAAM,MAAO;AACX,UAAIc,KAAK,CAAC6H,QAAV,EAAoB;AAClB7H,aAAK,CAAC6H,QAAN,CAAeE,UAAf;AACA/H,aAAK,CAAC6H,QAAN,GAAiB,IAAjB;AACD;AACF,KALD;AAMD,GARc,EAQZ,EARY,CAAf,CAV0E,CAoB1E;;AACA,SAAOG,kBAAW,CAAEC,EAAF,IAAyB;AACzC;AACA;AACA;AACA;AACA,QACEA,EAAC,CAACrM,MAAF,YAAoBgK,iBAApB,IACAqC,EAAC,CAACrM,MAAF,YAAoBmI,gBADpB,IAEAkE,EAAC,CAACrM,MAAF,YAAoBqI,mBAFpB,IAGAgE,EAAC,CAACrM,MAAF,YAAoBsM,iBAJtB,EAKE;AACAP,cAAQ,CAACzI,OAAT,CAAiB0I,SAAjB,GAA6B,IAA7B;AAEA,UAAIhM,MAAM,GAAGqM,EAAC,CAACrM,MAAf;;AACA,UAAIuM,aAAa,GAAItH,CAAJ,IAAsB;YAInC;AACAuH;;AAJFT,gBAAQ,CAACzI,OAAT,CAAiB0I,SAAjB,GAA6B,KAA7B;AAEA,YAAIhM,MAAM,CAACyM,QAAX,EAAmB,CAEjB1K,GAAuB,IAAvByK,QAAgB,GAAhBT,QAAQ,CAACzI,OAAc,EAANwI,MAFA,MAEM,IAFN,IAEjB/J,GAAuB,KAAvB,MAFiB,GAEjB,MAFiB,GAEjBA,GAAuB,CAAvB2K,eAA0B,IAAIxB,yCAAJ,CAAwB,MAAxB,EAAgCjG,CAAhC,CAA1B,CAFiB,CAHkB,CAQrC;;AACA,YAAI8G,QAAQ,CAACzI,OAAT,CAAiB2I,QAArB,EAA+B;AAC7BF,kBAAQ,CAACzI,OAAT,CAAiB2I,QAAjB,CAA0BE,UAA1B;AACAJ,kBAAQ,CAACzI,OAAT,CAAiB2I,QAAjB,GAA4B,IAA5B;AACD;AACF,OAbD;;AAeAjM,YAAM,CAAC2M,gBAAP,CAAwB,UAAxB,EAAoCJ,aAApC,EAAmD;AAACK,YAAI,EAAE;AAAP,OAAnD;AAEAb,cAAQ,CAACzI,OAAT,CAAiB2I,QAAjB,GAA4B,IAAIY,gBAAJ,CAAoB,MAAO;AACrD,YAAId,QAAQ,CAACzI,OAAT,CAAiB0I,SAAjB,IAA8BhM,MAAM,CAACyM,QAAzC,EAAmD;AACjDV,kBAAQ,CAACzI,OAAT,CAAiB2I,QAAjB,CAA0BE,UAA1B;AACAnM,gBAAM,CAAC8M,aAAP,CAAqB,IAAIC,UAAJ,CAAe,MAAf,CAArB;AACA/M,gBAAM,CAAC8M,aAAP,CAAqB,IAAIC,UAAJ,CAAe,UAAf,EAA2B;AAACvB,mBAAO,EAAE;AAAV,WAA3B,CAArB;AACD;AACF,OAN2B,CAA5B;AAQAO,cAAQ,CAACzI,OAAT,CAAiB2I,QAAjB,CAA0Be,OAA1B,CAAkChN,MAAlC,EAA0C;AAACiN,kBAAU,EAAE,IAAb;AAAmBC,uBAAe,EAAE,CAAC,UAAD;AAApC,OAA1C;AACD;AACF,GAzCiB,EAyCf,EAzCe,CAAlB;AA0CD;;SC3FeC,0CAAS3L,OAAgC;AACvD,MAAI;AAACmB,gBACHA,UADE;AAEFyK,WAAO,EAAEC,WAFP;AAGFvB,UAAM,EAAEwB,UAHN;AAGgBC,mBAClBA;AAJE,MAKA/L,KALJ;AAOA,QAAMsK,MAAM,GAAyBM,kBAAW,CAAEnH,CAAF,IAAoB;AAClE,QAAIA,CAAC,CAACjF,MAAF,KAAaiF,CAAC,CAACT,aAAnB,EAAkC;AAChC,UAAI8I,UAAJ,EACEA,UAAU,CAACrI,CAAD,CAAV;AAGF,UAAIsI,aAAJ,EACEA,aAAa,CAAC,KAAD,CAAb;AAGF,aAAO,IAAP;AACD;AACF,GAZ+C,EAY7C,CAACD,UAAD,EAAaC,aAAb,CAZ6C,CAAhD;AAeA,QAAMC,gBAAgB,GAAG3B,yCAAqB,CAACC,MAAD,CAA9C;AAEA,QAAMsB,OAAO,GAA0BhB,kBAAW,CAAEnH,CAAF,IAAoB;AACpE,QAAIA,CAAC,CAACjF,MAAF,KAAaiF,CAAC,CAACT,aAAnB,EAAkC;AAChC,UAAI6I,WAAJ,EACEA,WAAW,CAACpI,CAAD,CAAX;AAGF,UAAIsI,aAAJ,EACEA,aAAa,CAAC,IAAD,CAAb;AAGFC,sBAAgB,CAACvI,CAAD,CAAhB;AACD;AACF,GAZiD,EAY/C,CAACsI,aAAD,EAAgBF,WAAhB,EAA6BG,gBAA7B,CAZ+C,CAAlD;AAcA,SAAO;AACLC,cAAU,EAAE;AACVL,aAAO,GAAIzK,UAAJ,KAAmB0K,WAAW,IAAIE,aAAf,IAAgCD,UAAnD,IAAkEF,OAAlE,GAA4EM,SADzE;AAEV5B,YAAM,GAAInJ,UAAJ,KAAmB2K,UAAU,IAAIC,aAAjC,IAAmDzB,MAAnD,GAA4D;AAFxD;AADP,GAAP;AAMD;;AC5CD,IAAI6B,qCAAe,GAAG,IAAtB;AACA,IAAIC,oCAAc,GAAG,IAAI1D,GAAJ,EAArB;AACA,IAAI2D,6CAAuB,GAAG,KAA9B;AACA,IAAIC,yCAAmB,GAAG,KAA1B;AACA,IAAIC,8CAAwB,GAAG,KAA/B,C,CAEA;;AACA,MAAMC,8CAAwB,GAAG;AAC/BC,KAAG,EAAE,IAD0B;AAE/BC,QAAM,EAAE;AAFuB,CAAjC;;SAKSC,4CAAsBC,UAAoBnJ,GAAiB;AAClE,OAAK,IAAIoJ,OAAT,IAAoBT,oCAApB,EACES,OAAO,CAACD,QAAD,EAAWnJ,CAAX,CAAP;AAEH;AAED;;;;;AAEG,SACMqJ,gCADN,CACiBrJ,CADjB,EACmC;AACpC;AACA,SAAM,EAAGA,CAAC,CAACP,OAAF,IAAS,CAAM6J,YAAK,EAAX,IAAiBtJ,CAAC,CAACL,MAA5B,IAAuCK,CAAC,CAACN,OAAzC,IAAoDM,CAAC,CAACQ,GAAF,KAAU,SAA9D,IAA2ER,CAAC,CAACQ,GAAF,KAAU,OAArF,IAAgGR,CAAC,CAACQ,GAAF,KAAU,MAA7G,CAAN;AACD;;SAGQ+I,0CAAoBvJ,GAAkB;AAC7C6I,2CAAmB,GAAG,IAAtB;;AACA,MAAIQ,gCAAU,CAACrJ,CAAD,CAAd,EAAmB;AACjB0I,yCAAe,GAAG,UAAlB;AACAQ,+CAAqB,CAAC,UAAD,EAAalJ,CAAb,CAArB;AACD;AACF;;SAEQwJ,yCAAmBxJ,GAA8B;AACxD0I,uCAAe,GAAG,SAAlB;;AACA,MAAI1I,CAAC,CAACV,IAAF,KAAW,WAAX,IAA0BU,CAAC,CAACV,IAAF,KAAW,aAAzC,EAAwD;AACtDuJ,6CAAmB,GAAG,IAAtB;AACAK,+CAAqB,CAAC,SAAD,EAAYlJ,CAAZ,CAArB;AACD;AACF;;SAEQyJ,uCAAiBzJ,GAAe;AACvC,MAAIgB,qBAAc,CAAChB,CAAD,CAAlB,EAAuB;AACrB6I,6CAAmB,GAAG,IAAtB;AACAH,yCAAe,GAAG,SAAlB;AACD;AACF;;SAEQgB,uCAAiB1J,GAAe;AACvC;AACA;AACA;AACA,MAAIA,CAAC,CAACjF,MAAF,KAAasH,MAAb,IAAuBrC,CAAC,CAACjF,MAAF,KAAaE,QAAxC,EACE,OALqC,CAQvC;AACA;;AACA,MAAE,CAAG4N,yCAAH,IAAsB,CAAKC,8CAA7B,EAAuD;AACrDJ,yCAAe,GAAG,SAAlB;AACAQ,+CAAqB,CAAC,SAAD,EAAYlJ,CAAZ,CAArB;AACD;;AAED6I,2CAAmB,GAAG,KAAtB;AACAC,gDAAwB,GAAG,KAA3B;AACD;;SAEQa,yCAAmB;AAC1B;AACA;AACAd,2CAAmB,GAAG,KAAtB;AACAC,gDAAwB,GAAG,IAA3B;AACD;AAED;;;;;AAEG,SACMc,4CADN,GAC+B;AAChC,MAAI,OAAOvH,MAAP,KAAkB,WAAlB,IAAiCuG,6CAArC,EACE,OAF8B,CAKhC;AACA;AACA;AACA;;AACA,MAAIiB,KAAK,GAAGxO,WAAW,CAACyO,SAAZ,CAAsBD,KAAlC;;AACAxO,aAAW,CAACyO,SAAZ,CAAsBD,KAAtB,GAA8B,YAAY;AACxChB,6CAAmB,GAAG,IAAtB;AACAgB,SAAK,CAACE,KAAN,CAAY,IAAZ,EAAkBC,SAAlB;AACD,GAHD;;AAKA/O,UAAQ,CAACyM,gBAAT,CAA0B,SAA1B,EAAqC6B,yCAArC,EAA0D,IAA1D;AACAtO,UAAQ,CAACyM,gBAAT,CAA0B,OAA1B,EAAmC6B,yCAAnC,EAAwD,IAAxD;AACAtO,UAAQ,CAACyM,gBAAT,CAA0B,OAA1B,EAAmC+B,sCAAnC,EAAqD,IAArD,EAjBgC,CAmBhC;AACA;;AACApH,QAAM,CAACqF,gBAAP,CAAwB,OAAxB,EAAiCgC,sCAAjC,EAAmD,IAAnD;AACArH,QAAM,CAACqF,gBAAP,CAAwB,MAAxB,EAAgCiC,sCAAhC,EAAkD,KAAlD;;AAEA,MAAI,OAAOxI,YAAP,KAAwB,WAA5B,EAAyC;AACvClG,YAAQ,CAACyM,gBAAT,CAA0B,aAA1B,EAAyC8B,wCAAzC,EAA6D,IAA7D;AACAvO,YAAQ,CAACyM,gBAAT,CAA0B,aAA1B,EAAyC8B,wCAAzC,EAA6D,IAA7D;AACAvO,YAAQ,CAACyM,gBAAT,CAA0B,WAA1B,EAAuC8B,wCAAvC,EAA2D,IAA3D;AACD,GAJD,MAIO;AACLvO,YAAQ,CAACyM,gBAAT,CAA0B,WAA1B,EAAuC8B,wCAAvC,EAA2D,IAA3D;AACAvO,YAAQ,CAACyM,gBAAT,CAA0B,WAA1B,EAAuC8B,wCAAvC,EAA2D,IAA3D;AACAvO,YAAQ,CAACyM,gBAAT,CAA0B,SAA1B,EAAqC8B,wCAArC,EAAyD,IAAzD;AACD;;AAEDZ,+CAAuB,GAAG,IAA1B;AACD;;AAED,IAAI,OAAO3N,QAAP,KAAoB,WAAxB,EAAmC;AACjC,MAAIA,QAAQ,CAACgP,UAAT,KAAwB,SAA5B,EACEL,4CAAsB,GADxB,KAGE3O,QAAQ,CAACyM,gBAAT,CAA0B,kBAA1B,EAA8CkC,4CAA9C;;;SAOYM,4CAA0B;AACxC,SAAOxB,qCAAe,KAAK,SAA3B;AACD;;SAEeyB,4CAAmC;AACjD,SAAOzB,qCAAP;AACD;;SAEe0B,0CAAuBjB,UAAoB;AACzDT,uCAAe,GAAGS,QAAlB;AACAD,6CAAqB,CAACC,QAAD,EAAW,IAAX,CAArB;AACD;;SAKekB,4CAAmC;AACjDT,8CAAsB;AAEtB,MAAG,CAAET,QAAF,EAAYmB,WAAZ,IAA2B/L,eAAQ,CAACmK,qCAAD,CAAtC;AACA/F,kBAAS,OAAO;AACd,QAAIyG,OAAO,SAAS;AAClBkB,iBAAW,CAAC5B,qCAAD,CAAX;AACD,KAFD;;AAIAC,wCAAc,CAAC4B,GAAf,CAAmBnB,OAAnB;AACA,WAAM,MAAO;AACXT,0CAAc,CAAC1M,MAAf,CAAsBmN,OAAtB;AACD,KAFD;AAGD,GATQ,EASN,EATM,CAAT;AAWA,SAAOD,QAAP;AACD;AAED;;;;;;AAGG,SACMqB,0CADN,CAC2BC,WAD3B,EACiDtB,QADjD,EACqEnJ,CADrE,EACsF;AACvF,SAAM,EAAGyK,WAAW,IAAItB,QAAQ,KAAK,UAA5B,IAA0CnJ,CAAC,YAAY0K,aAAvD,IAAoE,CAAK3B,8CAAwB,CAAC/I,CAAC,CAACQ,GAAH,CAApG,CAAN;AACD;;SAKemK,4CAAmE;AAAA,MAAnDpO,KAAmD,uEAAxB,EAAwB;AACjF,MAAI;AAACkO,4BAAD;AAAYG,eAAEA;AAAd,MAA2BrO,KAA/B;AACA,MAAG,CAAEsO,mBAAF,EAAuBC,eAAvB,IAA0CvM,eAAQ,CAACqM,SAAS,IAAIV,yCAAc,EAA5B,CAArD;AACAa,2CAAuB,CAAEb,yCAAF,IAAqB;AAC1CY,mBAAe,CAACZ,yCAAD,CAAf;AACD,GAFsB,EAEpB,CAACO,WAAD,CAFoB,EAEL;iBAACA;AAAD,GAFK,CAAvB;AAIA,SAAO;AAACO,kBAAc,EAAEH;AAAjB,GAAP;AACD;;SAKeE,0CAAwBE,IAAyBC,MAA0BC,MAAsC;AAC/HvB,8CAAsB;AAEtBjH,kBAAS,OAAO;AACd,QAAIyG,OAAO,IAAID,QAAJ,EAAwBnJ,CAAxB,KAA4C;AACrD,UAAE,CAAGwK,0CAAoB,CAACW,IAAI,SAAJ,QAAI,KAAJ,sBAAI,CAAEV,WAAP,EAAoBtB,QAApB,EAA8BnJ,CAA9B,CAAzB,EACE;AAEFiL,QAAE,CAACf,yCAAc,EAAf,CAAF;AACD,KALD;;AAMAvB,wCAAc,CAAC4B,GAAf,CAAmBnB,OAAnB;AACA,WAAM,MAAO;AACXT,0CAAc,CAAC1M,MAAf,CAAsBmN,OAAtB;AACD,KAFD;AAGD,GAXQ,EAWN8B,IAXM,CAAT;AAYD;;SCpMeE,0CAAe7O,OAA4C;AACzE,MAAI;AAACmB,gBACHA,UADE;AACQ2N,kBACVA,YAFE;AAEUC,mBACZA,aAHE;AAGWC,yBACbA;AAJE,MAKAhP,KALJ;AAMA,MAAI4C,KAAK,GAAGf,aAAM,CAAC;AACjBoN,iBAAa,EAAE;AADE,GAAD,CAAlB;AAIA,MAAI3E,MAAM,GAAGM,kBAAW,CAAEnH,CAAF,IAAoB;AAC1C;AACA;AACA;AACA,QAAIb,KAAK,CAACd,OAAN,CAAcmN,aAAd,IAA2B,CAAMxL,CAAC,CAACT,aAAF,CAA4Be,QAA5B,CAAqCN,CAAC,CAACsG,aAAvC,CAArC,EAAuG;AACrGnH,WAAK,CAACd,OAAN,CAAcmN,aAAd,GAA8B,KAA9B;AAEA,UAAIH,YAAJ,EACEA,YAAY,CAACrL,CAAD,CAAZ;AAGF,UAAIuL,mBAAJ,EACEA,mBAAmB,CAAC,KAAD,CAAnB;AAEH;AACF,GAfuB,EAerB,CAACF,YAAD,EAAeE,mBAAf,EAAoCpM,KAApC,CAfqB,CAAxB;AAiBA,MAAIoJ,gBAAgB,GAAG3B,yCAAqB,CAACC,MAAD,CAA5C;AACA,MAAIsB,OAAO,GAAGhB,kBAAW,CAAEnH,CAAF,IAAoB;AAC3C,QAAE,CAAGb,KAAK,CAACd,OAAN,CAAcmN,aAAnB,EAAkC;AAChC,UAAIF,aAAJ,EACEA,aAAa,CAACtL,CAAD,CAAb;AAGF,UAAIuL,mBAAJ,EACEA,mBAAmB,CAAC,IAAD,CAAnB;AAGFpM,WAAK,CAACd,OAAN,CAAcmN,aAAd,GAA8B,IAA9B;AACAjD,sBAAgB,CAACvI,CAAD,CAAhB;AACD;AACF,GAbwB,EAatB,CAACsL,aAAD,EAAgBC,mBAAhB,EAAqChD,gBAArC,CAbsB,CAAzB;AAeA,MAAI7K,UAAJ,EACE,OAAO;AACL+N,oBAAgB,EAAE;AAChBtD,aAAO,EAAE,IADO;AAEhBtB,YAAM,EAAE;AAFQ;AADb,GAAP;AAQF,SAAO;AACL4E,oBAAgB,EAAE;eAChBtD,OADgB;cAEhBtB;AAFgB;AADb,GAAP;AAMD,C,CCnED;AACA;AACA;;;AACA,IAAI6E,qDAA+B,GAAG,KAAtC;AACA,IAAIC,gCAAU,GAAG,CAAjB;;SAESC,2DAAqC;AAC5CF,uDAA+B,GAAG,IAAlC,CAD4C,CAG5C;AACA;AACA;AACA;;AACAhQ,YAAU,OAAO;AACfgQ,yDAA+B,GAAG,KAAlC;AACD,GAFS,EAEP,EAFO,CAAV;AAGD;;SAEQG,+CAAyB7L,GAAG;AACnC,MAAIA,CAAC,CAACnB,WAAF,KAAkB,OAAtB,EACE+M,wDAAkC;AAErC;;SAEQE,+CAAyB;AAChC,MAAI,OAAO7Q,QAAP,KAAoB,WAAxB,EACE;AAGF,MAAI,OAAOkG,YAAP,KAAwB,WAA5B,EACElG,QAAQ,CAACyM,gBAAT,CAA0B,WAA1B,EAAuCmE,8CAAvC,EADF,KAGE5Q,QAAQ,CAACyM,gBAAT,CAA0B,UAA1B,EAAsCkE,wDAAtC;AAGFD,kCAAU;AACV,SAAM,MAAO;AACXA,oCAAU;AACV,QAAIA,gCAAU,GAAG,CAAjB,EACE;AAGF,QAAI,OAAOxK,YAAP,KAAwB,WAA5B,EACElG,QAAQ,CAAC8Q,mBAAT,CAA6B,WAA7B,EAA0CF,8CAA1C,EADF,KAGE5Q,QAAQ,CAAC8Q,mBAAT,CAA6B,UAA7B,EAAyCH,wDAAzC;AAEH,GAXD;AAYD;;SAMeI,0CAASzP,OAAgC;AACvD,MAAI;AAAC0P,kBACHA,YADE;AACUC,mBACZA,aAFE;AAEWC,gBACbA,UAHE;AAGQzO,gBACVA;AAJE,MAKAnB,KALJ;AAOA,MAAG,CAAE6P,SAAF,EAAaC,UAAb,IAA2B9N,eAAQ,CAAC,KAAD,CAAtC;AACA,MAAIY,KAAK,GAAGf,aAAM,CAAC;AACjBgO,aAAS,EAAE,KADM;AAEjB5N,6BAAyB,EAAE,KAFV;AAGjBK,eAAW,EAAE,EAHI;AAIjB9D,UAAM,EAAE;AAJS,GAAD,CAAN,CAKTsD,OALH;AAOAsE,kBAAS,CAACmJ,4CAAD,EAAyB,EAAzB,CAAT;AAEA,MAAI;AAACQ,2BAAD;AAAWC,qBAAEC;AAAb,MAAgCtN,cAAO,OAAO;AAChD,QAAIuN,iBAAiB,IAAI3J,KAAJ,EAAWjE,WAAX,KAA2B;AAC9CM,WAAK,CAACN,WAAN,GAAoBA,WAApB;AACA,UAAInB,UAAU,IAAImB,WAAW,KAAK,OAA9B,IAAyCM,KAAK,CAACiN,SAA/C,IAAwD,CAAKtJ,KAAK,CAACvD,aAAN,CAAoBe,QAApB,CAA6BwC,KAAK,CAAC/H,MAAnC,CAAjE,EACE;AAGFoE,WAAK,CAACiN,SAAN,GAAkB,IAAlB;AACA,UAAIrR,MAAM,GAAG+H,KAAK,CAACvD,aAAnB;AACAJ,WAAK,CAACpE,MAAN,GAAeA,MAAf;AAEA,UAAIkR,YAAJ,EACEA,YAAY,CAAC;AACX3M,YAAI,EAAE,YADK;gBAEXvE,MAFW;qBAGX8D;AAHW,OAAD,CAAZ;AAOF,UAAIqN,aAAJ,EACEA,aAAa,CAAC,IAAD,CAAb;AAGFG,gBAAU,CAAC,IAAD,CAAV;AACD,KAvBD;;AAyBA,QAAIE,eAAe,IAAIzJ,KAAJ,EAAWjE,WAAX,KAA2B;AAC5CM,WAAK,CAACN,WAAN,GAAoB,EAApB;AACAM,WAAK,CAACpE,MAAN,GAAe,IAAf;AAEA,UAAI8D,WAAW,KAAK,OAAhB,IAAuB,CAAKM,KAAK,CAACiN,SAAtC,EACE;AAGFjN,WAAK,CAACiN,SAAN,GAAkB,KAAlB;AACA,UAAIrR,MAAM,GAAG+H,KAAK,CAACvD,aAAnB;AACA,UAAI4M,UAAJ,EACEA,UAAU,CAAC;AACT7M,YAAI,EAAE,UADG;gBAETvE,MAFS;qBAGT8D;AAHS,OAAD,CAAV;AAOF,UAAIqN,aAAJ,EACEA,aAAa,CAAC,KAAD,CAAb;AAGFG,gBAAU,CAAC,KAAD,CAAV;AACD,KAvBD;;AAyBA,QAAIC,UAAU,GAAkB,EAAhC;;AAEA,QAAI,OAAOnL,YAAP,KAAwB,WAA5B,EAAyC;AACvCmL,gBAAU,CAACI,cAAX,GAA6B1M,CAAJ,IAAU;AACjC,YAAI0L,qDAA+B,IAAI1L,CAAC,CAACnB,WAAF,KAAkB,OAAzD,EACE;AAGF4N,yBAAiB,CAACzM,CAAD,EAAIA,CAAC,CAACnB,WAAN,CAAjB;AACD,OAND;;AAQAyN,gBAAU,CAACK,cAAX,GAA6B3M,CAAJ,IAAU;AACjC,YAAE,CAAGtC,UAAH,IAAiBsC,CAAC,CAACT,aAAF,CAAgBe,QAAhB,CAAyBN,CAAC,CAACjF,MAA3B,CAAnB,EACEwR,eAAe,CAACvM,CAAD,EAAIA,CAAC,CAACnB,WAAN,CAAf;AAEH,OAJD;AAKD,KAdD,MAcO;AACLyN,gBAAU,CAACrK,YAAX,GAAuB,MAAS;AAC9B9C,aAAK,CAACX,yBAAN,GAAkC,IAAlC;AACD,OAFD;;AAIA8N,gBAAU,CAACvK,YAAX,GAA2B/B,CAAJ,IAAU;AAC/B,YAAE,CAAGb,KAAK,CAACX,yBAAT,IAAkC,CAAKkN,qDAAzC,EACEe,iBAAiB,CAACzM,CAAD,EAAI,OAAJ,CAAjB;AAGFb,aAAK,CAACX,yBAAN,GAAkC,KAAlC;AACD,OAND;;AAQA8N,gBAAU,CAACtK,YAAX,GAA2BhC,CAAJ,IAAU;AAC/B,YAAE,CAAGtC,UAAH,IAAiBsC,CAAC,CAACT,aAAF,CAAgBe,QAAhB,CAAyBN,CAAC,CAACjF,MAA3B,CAAnB,EACEwR,eAAe,CAACvM,CAAD,EAAI,OAAJ,CAAf;AAEH,OAJD;AAKD;;AACD,WAAO;kBAACsM,UAAD;uBAAaC;AAAb,KAAP;AACD,GAvF0C,EAuFxC,CAACN,YAAD,EAAeC,aAAf,EAA8BC,UAA9B,EAA0CzO,UAA1C,EAAsDyB,KAAtD,CAvFwC,CAA3C;AAyFAwD,kBAAS,OAAO;AACd;AACA;AACA,QAAIjF,UAAJ,EACE8O,gBAAe,CAAC;AAACjN,mBAAa,EAAEJ,KAAK,CAACpE;AAAtB,KAAD,EAAgCoE,KAAK,CAACN,WAAtC,CAAf;AAEH,GANQ,EAMN,CAACnB,UAAD,CANM,CAAT;AAQA,SAAO;gBACLkP,WADK;eAELR;AAFK,GAAP;AAID;;SC9KeS,0CAAmBtQ,OAA6B;AAC9D,MAAI;AAACO,YAAD;AAAIgQ,uBAAEA,iBAAN;AAAuBpP,gBAAEA,UAAzB;AAAmCqP,4BAAEA;AAArC,MAA+DxQ,KAAnE;AACA,MAAIuK,QAAQ,GAAG1I,aAAM,CAAC;AACpB4O,iBAAa,EAAE,KADK;AAEpBxO,6BAAyB,EAAE,KAFP;uBAGpBsO,iBAHoB;4BAIpBC;AAJoB,GAAD,CAArB;AAMA,MAAI5N,KAAK,GAAG2H,QAAQ,CAACzI,OAArB;AACAc,OAAK,CAAC2N,iBAAN,GAA0BA,iBAA1B;AACA3N,OAAK,CAAC4N,sBAAN,GAA+BA,sBAA/B;AAEApK,kBAAS,OAAO;AACd,QAAIjF,UAAJ,EACE;;AAGF,QAAI0D,aAAa,GAAIpB,CAAJ,IAAU;AACzB,UAAIiN,kCAAY,CAACjN,CAAD,EAAIlD,GAAJ,CAAZ,IAAwBqC,KAAK,CAAC2N,iBAAlC,EAAqD;AACnD,YAAI3N,KAAK,CAAC4N,sBAAV,EACE5N,KAAK,CAAC4N,sBAAN,CAA6B/M,CAA7B;AAEFb,aAAK,CAAC6N,aAAN,GAAsB,IAAtB;AACD;AACF,KAPD,CALc,CAcd;;;AACA,QAAI,OAAO7L,YAAP,KAAwB,WAA5B,EAAyC;AACvC,UAAIM,WAAW,GAAIzB,CAAJ,IAAU;AACvB,YAAIb,KAAK,CAAC6N,aAAN,IAAuB7N,KAAK,CAAC2N,iBAA7B,IAAkDG,kCAAY,CAACjN,CAAD,EAAIlD,GAAJ,CAAlE,EAA4E;AAC1EqC,eAAK,CAAC6N,aAAN,GAAsB,KAAtB;AACA7N,eAAK,CAAC2N,iBAAN,CAAwB9M,CAAxB;AACD;AACF,OALD,CADuC,CAQvC;;;AACA/E,cAAQ,CAACyM,gBAAT,CAA0B,aAA1B,EAAyCtG,aAAzC,EAAwD,IAAxD;AACAnG,cAAQ,CAACyM,gBAAT,CAA0B,WAA1B,EAAuCjG,WAAvC,EAAoD,IAApD;AAEA,aAAM,MAAO;AACXxG,gBAAQ,CAAC8Q,mBAAT,CAA6B,aAA7B,EAA4C3K,aAA5C,EAA2D,IAA3D;AACAnG,gBAAQ,CAAC8Q,mBAAT,CAA6B,WAA7B,EAA0CtK,WAA1C,EAAuD,IAAvD;AACD,OAHD;AAID,KAhBD,MAgBO;AACL,UAAIK,SAAS,GAAI9B,CAAJ,IAAU;AACrB,YAAIb,KAAK,CAACX,yBAAV,EACEW,KAAK,CAACX,yBAAN,GAAkC,KAAlC,CADF,KAEO,IAAIW,KAAK,CAAC6N,aAAN,IAAuB7N,KAAK,CAAC2N,iBAA7B,IAAkDG,kCAAY,CAACjN,CAAD,EAAIlD,GAAJ,CAAlE,EAA4E;AACjFqC,eAAK,CAAC6N,aAAN,GAAsB,KAAtB;AACA7N,eAAK,CAAC2N,iBAAN,CAAwB9M,CAAxB;AACD;AACF,OAPD;;AASA,UAAIyC,UAAU,GAAIzC,CAAJ,IAAU;AACtBb,aAAK,CAACX,yBAAN,GAAkC,IAAlC;;AACA,YAAIW,KAAK,CAAC2N,iBAAN,IAA2B3N,KAAK,CAAC6N,aAAjC,IAAkDC,kCAAY,CAACjN,CAAD,EAAIlD,GAAJ,CAAlE,EAA4E;AAC1EqC,eAAK,CAAC6N,aAAN,GAAsB,KAAtB;AACA7N,eAAK,CAAC2N,iBAAN,CAAwB9M,CAAxB;AACD;AACF,OAND;;AAQA/E,cAAQ,CAACyM,gBAAT,CAA0B,WAA1B,EAAuCtG,aAAvC,EAAsD,IAAtD;AACAnG,cAAQ,CAACyM,gBAAT,CAA0B,SAA1B,EAAqC5F,SAArC,EAAgD,IAAhD;AACA7G,cAAQ,CAACyM,gBAAT,CAA0B,YAA1B,EAAwCtG,aAAxC,EAAuD,IAAvD;AACAnG,cAAQ,CAACyM,gBAAT,CAA0B,UAA1B,EAAsCjF,UAAtC,EAAkD,IAAlD;AAEA,aAAM,MAAO;AACXxH,gBAAQ,CAAC8Q,mBAAT,CAA6B,WAA7B,EAA0C3K,aAA1C,EAAyD,IAAzD;AACAnG,gBAAQ,CAAC8Q,mBAAT,CAA6B,SAA7B,EAAwCjK,SAAxC,EAAmD,IAAnD;AACA7G,gBAAQ,CAAC8Q,mBAAT,CAA6B,YAA7B,EAA2C3K,aAA3C,EAA0D,IAA1D;AACAnG,gBAAQ,CAAC8Q,mBAAT,CAA6B,UAA7B,EAAyCtJ,UAAzC,EAAqD,IAArD;AACD,OALD;AAMD;AACF,GA7DQ,EA6DN,CAAC3F,GAAD,EAAMqC,KAAN,EAAazB,UAAb,CA7DM,CAAT;AA8DD;;SAEQuP,mCAAanK,OAAOhG,KAAK;AAChC,MAAIgG,KAAK,CAAC/B,MAAN,GAAe,CAAnB,EACE,OAAO,KAAP,CAF8B,CAKhC;;AACA,MAAI+B,KAAK,CAAC/H,MAAV,EAAkB;AAChB,UAAMmS,aAAa,GAAGpK,KAAK,CAAC/H,MAAN,CAAamS,aAAnC;AACA,QAAE,CAAGA,aAAH,IAAgB,CAAKA,aAAa,CAAChS,eAAd,CAA8BoF,QAA9B,CAAuCwC,KAAK,CAAC/H,MAA7C,CAAvB,EACE,OAAO,KAAP;AAEH;;AAED,SAAO+B,GAAG,CAACuB,OAAJ,IAAW,CAAKvB,GAAG,CAACuB,OAAJ,CAAYiC,QAAZ,CAAqBwC,KAAK,CAAC/H,MAA3B,CAAvB;AACD;;SCvGeoS,0CAA6C/D,SAAoD;AAC/G,MAAE,CAAGA,OAAL,EACE;AAGF,MAAIgE,qBAAqB,GAAG,IAA5B;AACA,SAAQpN,CAAF,IAAW;AACf,QAAI8C,KAAK,GAAiB,KACrB9C,CADqB;;AAExBS,oBAAc,GAAG;AACfT,SAAC,CAACS,cAAF;AACD,OAJuB;;AAKxByF,wBAAkB,GAAG;AACnB,eAAOlG,CAAC,CAACkG,kBAAF,EAAP;AACD,OAPuB;;AAQxBxF,qBAAe,GAAG;AAChBmF,eAAO,CAACwH,KAAR,CAAc,sIAAd;AACD,OAVuB;;AAWxBC,yBAAmB,GAAG;AACpBF,6BAAqB,GAAG,KAAxB;AACD;;AAbuB,KAA1B;AAgBAhE,WAAO,CAACtG,KAAD,CAAP;AAEA,QAAIsK,qBAAJ,EACEpN,CAAC,CAACU,eAAF;AAEH,GAtBD;AAuBD;;SCnBe6M,0CAAYhR,OAAsC;AAChE,SAAO;AACLiR,iBAAa,EAAEjR,KAAK,CAACmB,UAAN,GAAmB,EAAnB,GAAwB;AACrCyC,eAAS,EAAEgN,yCAAkB,CAAC5Q,KAAK,CAAC4D,SAAP,CADQ;AAErCS,aAAO,EAAEuM,yCAAkB,CAAC5Q,KAAK,CAACqE,OAAP;AAFU;AADlC,GAAP;AAMD;;SCDe6M,0CAAQlR,OAA+B;AACrD,MAAI;AAACmR,4BAAD;AAAYC,YAAEA,MAAd;AAAoBC,eAAEA;AAAtB,MAAmCrR,KAAvC;AAEA,MAAI4C,KAAK,GAAGf,aAAM,CAIf;AAACyP,WAAO,EAAE,KAAV;AAAiBC,gBAAY,EAAE,IAA/B;AAAqCC,MAAE,EAAE;AAAzC,GAJe,CAAlB;AAMA,MAAI;AAACjP,wCAAD;AAAkBkP,0BAAEA;AAApB,MAA4ChP,yBAAkB,EAAlE;AAEA,MAAIiP,UAAS,GAAG/O,cAAO,OAAO;AAC5B,QAAIgP,SAAS,GAAkB,EAA/B;;AAEA,QAAIC,KAAK,SAAS;AAChBrT,+CAAoB;AACpBqE,WAAK,CAACd,OAAN,CAAcwP,OAAd,GAAwB,KAAxB;AACD,KAHD;;AAIA,QAAIO,IAAI,IAAI/O,aAAJ,EAA8BR,WAA9B,EAAwDwP,MAAxD,EAAwEC,MAAxE,KAA2F;AACjG,UAAID,MAAM,KAAK,CAAX,IAAgBC,MAAM,KAAK,CAA/B,EACE;;AAGF,UAAE,CAAGnP,KAAK,CAACd,OAAN,CAAcwP,OAAnB,EAA4B;AAC1B1O,aAAK,CAACd,OAAN,CAAcwP,OAAd,GAAwB,IAAxB;AACAH,mBAAW,SAAX,eAAW,KAAX,6BAAW,CAAG;AACZpO,cAAI,EAAE,WADM;uBAEZT,WAFY;AAGZW,kBAAQ,EAAEH,aAAa,CAACG,QAHZ;AAIZC,iBAAO,EAAEJ,aAAa,CAACI,OAJX;AAKZC,iBAAO,EAAEL,aAAa,CAACK,OALX;AAMZC,gBAAM,EAAEN,aAAa,CAACM;AANV,SAAH,CAAX;AAQD;;AACDgO,YAAM,CAAC;AACLrO,YAAI,EAAE,MADD;qBAELT,WAFK;AAGLwP,cAAM,EAAEA,MAHH;AAILC,cAAM,EAAEA,MAJH;AAKL9O,gBAAQ,EAAEH,aAAa,CAACG,QALnB;AAMLC,eAAO,EAAEJ,aAAa,CAACI,OANlB;AAOLC,eAAO,EAAEL,aAAa,CAACK,OAPlB;AAQLC,cAAM,EAAEN,aAAa,CAACM;AARjB,OAAD,CAAN;AAUD,KA1BD;;AA2BA,QAAI4O,GAAG,IAAIlP,aAAJ,EAA8BR,WAA9B,KAA2D;AAChEpD,+CAAoB;AACpB,UAAI0D,KAAK,CAACd,OAAN,CAAcwP,OAAlB,EACED,SAAS,SAAT,aAAS,KAAT,2BAAS,CAAG;AACVtO,YAAI,EAAE,SADI;qBAEVT,WAFU;AAGVW,gBAAQ,EAAEH,aAAa,CAACG,QAHd;AAIVC,eAAO,EAAEJ,aAAa,CAACI,OAJb;AAKVC,eAAO,EAAEL,aAAa,CAACK,OALb;AAMVC,cAAM,EAAEN,aAAa,CAACM;AANZ,OAAH,CAAT;AASH,KAZD;;AAcA,QAAI,OAAOwB,YAAP,KAAwB,WAA5B,EAAyC;AACvC,UAAIqN,WAAW,GAAIxO,CAAJ,IAAsB;AACnC,YAAIA,CAAC,CAACe,MAAF,KAAa,CAAjB,EAAoB;AAClBqN,cAAI,CAACpO,CAAD,EAAI,OAAJ,EAAaA,CAAC,CAACyO,KAAF,GAAUtP,KAAK,CAACd,OAAN,CAAcyP,YAAd,CAA2BW,KAAlD,EAAyDzO,CAAC,CAAC0O,KAAF,GAAUvP,KAAK,CAACd,OAAN,CAAcyP,YAAd,CAA2BY,KAA9F,CAAJ;AACAvP,eAAK,CAACd,OAAN,CAAcyP,YAAd,GAA6B;AAACW,iBAAK,EAAEzO,CAAC,CAACyO,KAAV;AAAiBC,iBAAK,EAAE1O,CAAC,CAAC0O;AAA1B,WAA7B;AACD;AACF,OALD;;AAMA,UAAI5M,SAAS,GAAI9B,CAAJ,IAAsB;AACjC,YAAIA,CAAC,CAACe,MAAF,KAAa,CAAjB,EAAoB;AAClBwN,aAAG,CAACvO,CAAD,EAAI,OAAJ,CAAH;AACAgO,8BAAoB,CAAC3L,MAAD,EAAS,WAAT,EAAsBmM,WAAtB,EAAmC,KAAnC,CAApB;AACAR,8BAAoB,CAAC3L,MAAD,EAAS,SAAT,EAAoBP,SAApB,EAA+B,KAA/B,CAApB;AACD;AACF,OAND;;AAOAoM,eAAS,CAACvM,WAAV,GAAyB3B,CAAJ,IAA4B;AAC/C,YAAIA,CAAC,CAACe,MAAF,KAAa,CAAjB,EAAoB;AAClBoN,eAAK;AACLnO,WAAC,CAACU,eAAF;AACAV,WAAC,CAACS,cAAF;AACAtB,eAAK,CAACd,OAAN,CAAcyP,YAAd,GAA6B;AAACW,iBAAK,EAAEzO,CAAC,CAACyO,KAAV;AAAiBC,iBAAK,EAAE1O,CAAC,CAAC0O;AAA1B,WAA7B;AACA5P,2BAAiB,CAACuD,MAAD,EAAS,WAAT,EAAsBmM,WAAtB,EAAmC,KAAnC,CAAjB;AACA1P,2BAAiB,CAACuD,MAAD,EAAS,SAAT,EAAoBP,SAApB,EAA+B,KAA/B,CAAjB;AACD;AACF,OATD;;AAWA,UAAIS,WAAW,GAAIvC,CAAJ,IAAsB;AACnC,YAAIkC,KAAK,GAAG,IAAIlC,CAAC,CAACwD,cAAN,EAAsBmL,SAAtB,CAA+B;AAAA,cAAE;AAACvM;AAAD,WAAF;AAAA,iBAAmBA,UAAU,KAAKjD,KAAK,CAACd,OAAN,CAAc0P,EAAhD;AAAA,SAA/B,CAAZ;;AACA,YAAI7L,KAAK,IAAI,CAAb,EAAgB;AACd,cAAI;AAACuM,wBAAD;AAAMC,mBAAEA;AAAR,cAAiB1O,CAAC,CAACwD,cAAF,CAAiBtB,KAAjB,CAArB;AACAkM,cAAI,CAACpO,CAAD,EAAI,OAAJ,EAAayO,KAAK,GAAGtP,KAAK,CAACd,OAAN,CAAcyP,YAAd,CAA2BW,KAAhD,EAAuDC,KAAK,GAAGvP,KAAK,CAACd,OAAN,CAAcyP,YAAd,CAA2BY,KAA1F,CAAJ;AACAvP,eAAK,CAACd,OAAN,CAAcyP,YAAd,GAA6B;mBAACW,KAAD;mBAAQC;AAAR,WAA7B;AACD;AACF,OAPD;;AAQA,UAAIjM,UAAU,GAAIzC,CAAJ,IAAsB;AAClC,YAAIkC,KAAK,GAAG,IAAIlC,CAAC,CAACwD,cAAN,EAAsBmL,SAAtB,CAA+B;AAAA,cAAE;AAACvM;AAAD,WAAF;AAAA,iBAAmBA,UAAU,KAAKjD,KAAK,CAACd,OAAN,CAAc0P,EAAhD;AAAA,SAA/B,CAAZ;;AACA,YAAI7L,KAAK,IAAI,CAAb,EAAgB;AACdqM,aAAG,CAACvO,CAAD,EAAI,OAAJ,CAAH;AACAb,eAAK,CAACd,OAAN,CAAc0P,EAAd,GAAmB,IAAnB;AACAC,8BAAoB,CAAC3L,MAAD,EAAS,WAAT,EAAsBE,WAAtB,CAApB;AACAyL,8BAAoB,CAAC3L,MAAD,EAAS,UAAT,EAAqBI,UAArB,CAApB;AACAuL,8BAAoB,CAAC3L,MAAD,EAAS,aAAT,EAAwBI,UAAxB,CAApB;AACD;AACF,OATD;;AAUAyL,eAAS,CAACjM,YAAV,GAA0BjC,CAAJ,IAA4B;AAChD,YAAIA,CAAC,CAACwD,cAAF,CAAiBD,MAAjB,KAA4B,CAA5B,IAAiCpE,KAAK,CAACd,OAAN,CAAc0P,EAAd,IAAoB,IAAzD,EACE;AAGF,YAAI;AAACU,sBAAD;AAAMC,iBAAEA,KAAR;AAAatM,sBAAEA;AAAf,YAA6BpC,CAAC,CAACwD,cAAF,CAAiB,CAAjB,CAAjC;AACA2K,aAAK;AACLnO,SAAC,CAACU,eAAF;AACAV,SAAC,CAACS,cAAF;AACAtB,aAAK,CAACd,OAAN,CAAcyP,YAAd,GAA6B;iBAACW,KAAD;iBAAQC;AAAR,SAA7B;AACAvP,aAAK,CAACd,OAAN,CAAc0P,EAAd,GAAmB3L,UAAnB;AACAtD,yBAAiB,CAACuD,MAAD,EAAS,WAAT,EAAsBE,WAAtB,EAAmC,KAAnC,CAAjB;AACAzD,yBAAiB,CAACuD,MAAD,EAAS,UAAT,EAAqBI,UAArB,EAAiC,KAAjC,CAAjB;AACA3D,yBAAiB,CAACuD,MAAD,EAAS,aAAT,EAAwBI,UAAxB,EAAoC,KAApC,CAAjB;AACD,OAdD;AAeD,KA1DD,MA0DO;AACL,UAAIjB,aAAa,GAAIxB,CAAJ,IAAwB;AACvC,YAAIA,CAAC,CAACuB,SAAF,KAAgBpC,KAAK,CAACd,OAAN,CAAc0P,EAAlC,EAAsC;AACpC,cAAIlP,WAAW,GAAImB,CAAC,CAACnB,WAAF,IAAiB,OAApC,CADoC,CAGpC;AACA;AACA;;AACAuP,cAAI,CAACpO,CAAD,EAAInB,WAAJ,EAAiBmB,CAAC,CAACyO,KAAF,GAAUtP,KAAK,CAACd,OAAN,CAAcyP,YAAd,CAA2BW,KAAtD,EAA6DzO,CAAC,CAAC0O,KAAF,GAAUvP,KAAK,CAACd,OAAN,CAAcyP,YAAd,CAA2BY,KAAlG,CAAJ;AACAvP,eAAK,CAACd,OAAN,CAAcyP,YAAd,GAA6B;AAACW,iBAAK,EAAEzO,CAAC,CAACyO,KAAV;AAAiBC,iBAAK,EAAE1O,CAAC,CAAC0O;AAA1B,WAA7B;AACD;AACF,OAVD;;AAYA,UAAIjN,WAAW,GAAIzB,CAAJ,IAAwB;AACrC,YAAIA,CAAC,CAACuB,SAAF,KAAgBpC,KAAK,CAACd,OAAN,CAAc0P,EAAlC,EAAsC;AACpC,cAAIlP,WAAW,GAAImB,CAAC,CAACnB,WAAF,IAAiB,OAApC;AACA0P,aAAG,CAACvO,CAAD,EAAInB,WAAJ,CAAH;AACAM,eAAK,CAACd,OAAN,CAAc0P,EAAd,GAAmB,IAAnB;AACAC,8BAAoB,CAAC3L,MAAD,EAAS,aAAT,EAAwBb,aAAxB,EAAuC,KAAvC,CAApB;AACAwM,8BAAoB,CAAC3L,MAAD,EAAS,WAAT,EAAsBZ,WAAtB,EAAmC,KAAnC,CAApB;AACAuM,8BAAoB,CAAC3L,MAAD,EAAS,eAAT,EAA0BZ,WAA1B,EAAuC,KAAvC,CAApB;AACD;AACF,OATD;;AAWAyM,eAAS,CAAC9M,aAAV,GAA2BpB,CAAJ,IAA8B;AACnD,YAAIA,CAAC,CAACe,MAAF,KAAa,CAAb,IAAkB5B,KAAK,CAACd,OAAN,CAAc0P,EAAd,IAAoB,IAA1C,EAAgD;AAC9CI,eAAK;AACLnO,WAAC,CAACU,eAAF;AACAV,WAAC,CAACS,cAAF;AACAtB,eAAK,CAACd,OAAN,CAAcyP,YAAd,GAA6B;AAACW,iBAAK,EAAEzO,CAAC,CAACyO,KAAV;AAAiBC,iBAAK,EAAE1O,CAAC,CAAC0O;AAA1B,WAA7B;AACAvP,eAAK,CAACd,OAAN,CAAc0P,EAAd,GAAmB/N,CAAC,CAACuB,SAArB;AACAzC,2BAAiB,CAACuD,MAAD,EAAS,aAAT,EAAwBb,aAAxB,EAAuC,KAAvC,CAAjB;AACA1C,2BAAiB,CAACuD,MAAD,EAAS,WAAT,EAAsBZ,WAAtB,EAAmC,KAAnC,CAAjB;AACA3C,2BAAiB,CAACuD,MAAD,EAAS,eAAT,EAA0BZ,WAA1B,EAAuC,KAAvC,CAAjB;AACD;AACF,OAXD;AAYD;;AAED,QAAImN,mBAAmB,IAAI5O,CAAJ,EAAkBqO,MAAlB,EAAkCC,MAAlC,KAAqD;AAC1EH,WAAK;AACLC,UAAI,CAACpO,CAAD,EAAI,UAAJ,EAAgBqO,MAAhB,EAAwBC,MAAxB,CAAJ;AACAC,SAAG,CAACvO,CAAD,EAAI,UAAJ,CAAH;AACD,KAJD;;AAMAkO,aAAS,CAAC/N,SAAV,GAAuBH,CAAJ,IAAU;AAC3B,cAAQA,CAAC,CAACQ,GAAV;AACE,aAAK,MAAL;AACA,aAAK,WAAL;AACER,WAAC,CAACS,cAAF;AACAT,WAAC,CAACU,eAAF;AACAkO,6BAAmB,CAAC5O,CAAD,EAAI,EAAJ,EAAQ,CAAR,CAAnB;AACA;;AACF,aAAK,OAAL;AACA,aAAK,YAAL;AACEA,WAAC,CAACS,cAAF;AACAT,WAAC,CAACU,eAAF;AACAkO,6BAAmB,CAAC5O,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAnB;AACA;;AACF,aAAK,IAAL;AACA,aAAK,SAAL;AACEA,WAAC,CAACS,cAAF;AACAT,WAAC,CAACU,eAAF;AACAkO,6BAAmB,CAAC5O,CAAD,EAAI,CAAJ,EAAO,EAAP,CAAnB;AACA;;AACF,aAAK,MAAL;AACA,aAAK,WAAL;AACEA,WAAC,CAACS,cAAF;AACAT,WAAC,CAACU,eAAF;AACAkO,6BAAmB,CAAC5O,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAnB;AACA;AAxBJ;AA0BD,KA3BD;;AA6BA,WAAOkO,SAAP;AACD,GApLsB,EAoLpB,CAAC/O,KAAD,EAAQuO,WAAR,EAAqBC,MAArB,EAA6BC,SAA7B,EAAwC9O,iBAAxC,EAA2DkP,oBAA3D,CApLoB,CAAvB;AAsLA,SAAO;eAACC;AAAD,GAAP;AACD;;SC9MeY,yCAAetS,OAAyBO,KAAmC;AACzF,MAAI;AAACwF,sBAAD;AAAS5E,gBAAEA;AAAX,MAAyBnB,KAA7B;AACA,MAAIuS,eAAe,GAAG3H,kBAAW,CAAEnH,CAAF,IAAQ;AACvC;AACA,QAAIA,CAAC,CAACN,OAAN,EACE,OAHqC,CAMvC;;AACAM,KAAC,CAACS,cAAF;AACAT,KAAC,CAACU,eAAF;AAEA,QAAI4B,QAAJ,EACEA,QAAQ,CAAC;AAAC+L,YAAM,EAAErO,CAAC,CAACqO,MAAX;AAAmBC,YAAM,EAAEtO,CAAC,CAACsO;AAA7B,KAAD,CAAR;AAEH,GAbgC,EAa9B,CAAChM,QAAD,CAb8B,CAAjC;AAeAyM,iBAAQ,CAACjS,GAAD,EAAM,OAAN,EAAeY,UAAU,GAAG,IAAH,GAAUoR,eAAnC,CAAR;AACD;;ACSD,MAAME,uCAAiB,GAAG,GAA1B;;SAMgBC,0CAAa1S,OAAwC;AACnE,MAAI;AAACmB,gBACHA,UADE;AACQwR,sBACVA,gBAFE;AAEcC,oBAChBA,cAHE;AAGYC,iBACdA,WAJE;AAKFC,aAAS,GAAGL,uCALV;AAK2BM,8BAC7BA;AANE,MAOA/S,KAPJ;AASA,QAAMgT,OAAO,GAAGnR,aAAM,CAAC,IAAD,CAAtB;AACA,MAAI;AAACU,wCAAD;AAAkBkP,0BAAEA;AAApB,MAA4ChP,yBAAkB,EAAlE;AAEA,MAAI;AAACkB;AAAD,MAAenD,yCAAQ,CAAC;gBAC1BW,UAD0B;;AAE1BN,gBAAY,CAACgK,EAAD,EAAI;AACd,UAAIA,EAAC,CAACvI,WAAF,KAAkB,OAAlB,IAA6BuI,EAAC,CAACvI,WAAF,KAAkB,OAAnD,EAA4D;AAC1D,YAAIqQ,gBAAJ,EACEA,gBAAgB,CAAC,KACZ9H,EADY;AAEf9H,cAAI,EAAE;AAFS,SAAD,CAAhB;AAMFiQ,eAAO,CAAClR,OAAR,GAAkB3C,UAAU,OAAO;AACjC;AACA0L,YAAC,CAACrM,MAAF,CAAS8M,aAAT,CAAuB,IAAI1G,YAAJ,CAAiB,eAAjB,EAAkC;AAACoF,mBAAO,EAAE;AAAV,WAAlC,CAAvB;AACA,cAAI6I,WAAJ,EACEA,WAAW,CAAC,KACPhI,EADO;AAEV9H,gBAAI,EAAE;AAFI,WAAD,CAAX;AAKFiQ,iBAAO,CAAClR,OAAR,GAAkB,IAAlB;AACD,SAV2B,EAUzBgR,SAVyB,CAA5B,CAR0D,CAoB1D;;AACA,YAAIjI,EAAC,CAACvI,WAAF,KAAkB,OAAtB,EAA+B;AAC7B,cAAI2Q,aAAa,GAAGxP,CAAH,IAAQ;AACvBA,aAAC,CAACS,cAAF;AACD,WAFD;;AAIA3B,2BAAiB,CAACsI,EAAC,CAACrM,MAAH,EAAW,aAAX,EAA0ByU,aAA1B,EAAyC;AAAC7H,gBAAI,EAAE;AAAP,WAAzC,CAAjB;AACA7I,2BAAiB,CAACuD,MAAD,EAAS,WAAT,EAAoB,MAAQ;AAC3C;AACA;AACA3G,sBAAU,OAAO;AACfsS,kCAAoB,CAAC5G,EAAC,CAACrM,MAAH,EAAW,aAAX,EAA0ByU,aAA1B,CAApB;AACD,aAFS,EAEP,EAFO,CAAV;AAGD,WANgB,EAMd;AAAC7H,gBAAI,EAAE;AAAP,WANc,CAAjB;AAOD;AACF;AACF,KAvCyB;;AAwC1BrK,cAAU,CAAC0C,CAAD,EAAI;AACZ,UAAIuP,OAAO,CAAClR,OAAZ,EACEoR,YAAY,CAACF,OAAO,CAAClR,OAAT,CAAZ;AAGF,UAAI8Q,cAAc,KAAKnP,CAAC,CAACnB,WAAF,KAAkB,OAAlB,IAA6BmB,CAAC,CAACnB,WAAF,KAAkB,OAApD,CAAlB,EACEsQ,cAAc,CAAC,KACVnP,CADU;AAEbV,YAAI,EAAE;AAFO,OAAD,CAAd;AAKH;;AAnDyB,GAAD,CAA3B;AAsDA,MAAIoQ,gBAAgB,GAAGC,qBAAc,CAACP,WAAW,KAAK1R,UAAhB,GAA6B4R,wBAA7B,GAAwD,IAAzD,CAArC;AAEA,SAAO;AACLM,kBAAc,EAAEhT,iBAAU,CAACsD,UAAD,EAAawP,gBAAb;AADrB,GAAP;AAGD","names":["$14c0b72509d70225$var$state","$14c0b72509d70225$var$savedUserSelect","$14c0b72509d70225$var$modifiedElementMap","WeakMap","$14c0b72509d70225$export$16a4697467175487","target","$bx7SL$isIOS","document","documentElement","style","webkitUserSelect","HTMLElement","SVGElement","set","userSelect","$14c0b72509d70225$export$b0d6fa1ab32e3295","setTimeout","$bx7SL$runAfterTransition","has","targetOldUserSelect","get","getAttribute","removeAttribute","delete","$ae1eeba8b9eafd08$export$5165eccb35aaadb5","$bx7SL$react","createContext","displayName","$f6c31cce2adf654f$var$usePressResponderContext","props","context","$bx7SL$useContext","register","contextProps","$bx7SL$mergeProps","$bx7SL$useSyncRef","ref","$f6c31cce2adf654f$export$45712eceda6fad21","onPress","onPress1","onPressChange","onPressChange1","onPressStart","onPressStart1","onPressEnd","onPressEnd1","onPressUp","onPressUp1","isDisabled","isDisabled1","isPressed","isPressedProp","preventFocusOnPress","shouldCancelOnPointerExit","allowTextSelectionOnPress","_","domProps","propsRef","$bx7SL$useRef","current","setPressed","$bx7SL$useState","ignoreEmulatedMouseEvents","ignoreClickAfterPress","didFirePressStart","activePointerId","isOverTarget","pointerType","addGlobalListener","removeAllGlobalListeners","$bx7SL$useGlobalListeners","pressProps1","$bx7SL$useMemo","state","triggerPressStart","originalEvent","type","currentTarget","shiftKey","metaKey","ctrlKey","altKey","triggerPressEnd","wasPressed","triggerPressUp","cancel","e","$f6c31cce2adf654f$var$createEvent","pressProps","onKeyDown","$f6c31cce2adf654f$var$isValidKeyboardEvent","nativeEvent","contains","$f6c31cce2adf654f$var$shouldPreventDefaultKeyboard","key","preventDefault","stopPropagation","repeat","onKeyUp","$f6c31cce2adf654f$var$isHTMLAnchorLink","onClick","button","$bx7SL$isVirtualClick","$bx7SL$focusWithoutScrolling","click","PointerEvent","onPointerDown","$bx7SL$isVirtualPointerEvent","$f6c31cce2adf654f$var$shouldPreventDefault","pointerId","onPointerMove","onPointerUp","onPointerCancel","onMouseDown","$f6c31cce2adf654f$var$isOverTarget","onDragStart","onMouseUp","onMouseEnter","onMouseLeave","onTouchStart","touch","$f6c31cce2adf654f$var$getTouchFromEvent","identifier","window","onScroll","onTouchMove","$f6c31cce2adf654f$var$getTouchById","onTouchEnd","onTouchCancel","$bx7SL$useEffect","tagName","hasAttribute","event","code","element","role","HTMLInputElement","$f6c31cce2adf654f$var$isValidInputKey","HTMLTextAreaElement","isContentEditable","targetTouches","length","changedTouches","i","$f6c31cce2adf654f$var$getPointClientRect","point","offsetX","width","radiusX","offsetY","height","radiusY","top","clientY","right","clientX","bottom","left","$f6c31cce2adf654f$var$areRectanglesOverlapping","a","b","rect","getBoundingClientRect","pointRect","draggable","HTMLButtonElement","$f6c31cce2adf654f$var$nonTextInputTypes","Set","$3b117e43dc0ca95d$export$27c701ed9e449e99","forwardRef","children","newRef","child","Children","only","cloneElement","$f1ab8c75478c6f73$export$3351871ee4b288b8","isRegistered","prevContext","console","warn","Provider","value","$8a9cb279dc87e130$export$905e7fc544a71f36","isDefaultPrevented","defaultPrevented","isPropagationStopped","persist","relatedTarget","bubbles","cancelable","eventPhase","isTrusted","timeStamp","$8a9cb279dc87e130$export$715c682d09d639cc","onBlur","stateRef","isFocused","observer","$bx7SL$useLayoutEffect","disconnect","$bx7SL$useCallback","e1","HTMLSelectElement","onBlurHandler","_current","disabled","call","addEventListener","once","MutationObserver","dispatchEvent","FocusEvent","observe","attributes","attributeFilter","$a1ea59d68270f0dd$export$f8168d8dd8fd66e6","onFocus","onFocusProp","onBlurProp","onFocusChange","onSyntheticFocus","focusProps","undefined","$507fabe10e71c6fb$var$currentModality","$507fabe10e71c6fb$var$changeHandlers","$507fabe10e71c6fb$var$hasSetupGlobalListeners","$507fabe10e71c6fb$var$hasEventBeforeFocus","$507fabe10e71c6fb$var$hasBlurredWindowRecently","$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS","Tab","Escape","$507fabe10e71c6fb$var$triggerChangeHandlers","modality","handler","$507fabe10e71c6fb$var$isValidKey","$bx7SL$isMac","$507fabe10e71c6fb$var$handleKeyboardEvent","$507fabe10e71c6fb$var$handlePointerEvent","$507fabe10e71c6fb$var$handleClickEvent","$507fabe10e71c6fb$var$handleFocusEvent","$507fabe10e71c6fb$var$handleWindowBlur","$507fabe10e71c6fb$var$setupGlobalFocusEvents","focus","prototype","apply","arguments","readyState","$507fabe10e71c6fb$export$b9b3dfddab17db27","$507fabe10e71c6fb$export$630ff653c5ada6a9","$507fabe10e71c6fb$export$8397ddfc504fdb9a","$507fabe10e71c6fb$export$98e20ec92f614cfe","setModality","add","$507fabe10e71c6fb$var$isKeyboardFocusEvent","isTextInput","KeyboardEvent","$507fabe10e71c6fb$export$ffd9e5021c1fb2d6","autoFocus","isFocusVisibleState","setFocusVisible","$507fabe10e71c6fb$export$ec71b4b83ac08ec3","isFocusVisible","fn","deps","opts","$9ab94262bd0047c7$export$420e68273165f4ec","onBlurWithin","onFocusWithin","onFocusWithinChange","isFocusWithin","focusWithinProps","$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents","$6179b936705e76d3$var$hoverCount","$6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents","$6179b936705e76d3$var$handleGlobalPointerEvent","$6179b936705e76d3$var$setupGlobalTouchEvents","removeEventListener","$6179b936705e76d3$export$ae780daf29e6d456","onHoverStart","onHoverChange","onHoverEnd","isHovered","setHovered","hoverProps","triggerHoverEnd","triggerHoverEnd1","triggerHoverStart","onPointerEnter","onPointerLeave","hoverProps1","$e0b6e0b68ec7f50f$export$872b660ac5a1ff98","onInteractOutside","onInteractOutsideStart","isPointerDown","$e0b6e0b68ec7f50f$var$isValidEvent","ownerDocument","$93925083ecbb358c$export$48d1ea6320830260","shouldStopPropagation","error","continuePropagation","$46d819fcbaf35654$export$8f71654801c2f7cd","keyboardProps","$e8a7022cf87cba2a$export$36da96379f79f245","onMoveStart","onMove","onMoveEnd","didMove","lastPosition","id","removeGlobalListener","moveProps1","moveProps","start","move","deltaX","deltaY","end","onMouseMove","pageX","pageY","findIndex","triggerKeyboardMove","$7d0a636d7a4dcefd$export$2123ff2b87c81ca","onScrollHandler","$bx7SL$useEvent","$8a26561d2877236e$var$DEFAULT_THRESHOLD","$8a26561d2877236e$export$c24ed0104d07eab9","onLongPressStart","onLongPressEnd","onLongPress","threshold","accessibilityDescription","timeRef","onContextMenu","clearTimeout","descriptionProps","$bx7SL$useDescription","longPressProps"],"sources":["/Users/vux/dev/react-project1/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/textSelection.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/context.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/usePress.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/Pressable.tsx","/Users/vux/dev/react-project1/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/PressResponder.tsx","/Users/vux/dev/react-project1/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/utils.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useFocus.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useFocusVisible.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useFocusWithin.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useHover.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useInteractOutside.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/createEventHandler.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useKeyboard.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useMove.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useScrollWheel.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useLongPress.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {isIOS, runAfterTransition} from '@react-aria/utils';\n\n// Safari on iOS starts selecting text on long press. The only way to avoid this, it seems,\n// is to add user-select: none to the entire page. Adding it to the pressable element prevents\n// that element from being selected, but nearby elements may still receive selection. We add\n// user-select: none on touch start, and remove it again on touch end to prevent this.\n// This must be implemented using global state to avoid race conditions between multiple elements.\n\n// There are three possible states due to the delay before removing user-select: none after\n// pointer up. The 'default' state always transitions to the 'disabled' state, which transitions\n// to 'restoring'. The 'restoring' state can either transition back to 'disabled' or 'default'.\n\n// For non-iOS devices, we apply user-select: none to the pressed element instead to avoid possible\n// performance issues that arise from applying and removing user-select: none to the entire page\n// (see https://github.com/adobe/react-spectrum/issues/1609).\ntype State = 'default' | 'disabled' | 'restoring';\n\n// Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element\n// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually\nlet state: State = 'default';\nlet savedUserSelect = '';\nlet modifiedElementMap = new WeakMap<Element, string>();\n\nexport function disableTextSelection(target?: Element) {\n  if (isIOS()) {\n    if (state === 'default') {\n      savedUserSelect = document.documentElement.style.webkitUserSelect;\n      document.documentElement.style.webkitUserSelect = 'none';\n    }\n\n    state = 'disabled';\n  } else if (target instanceof HTMLElement || target instanceof SVGElement) {\n    // If not iOS, store the target's original user-select and change to user-select: none\n    // Ignore state since it doesn't apply for non iOS\n    modifiedElementMap.set(target, target.style.userSelect);\n    target.style.userSelect = 'none';\n  }\n}\n\nexport function restoreTextSelection(target?: Element) {\n  if (isIOS()) {\n    // If the state is already default, there's nothing to do.\n    // If it is restoring, then there's no need to queue a second restore.\n    if (state !== 'disabled') {\n      return;\n    }\n\n    state = 'restoring';\n\n    // There appears to be a delay on iOS where selection still might occur\n    // after pointer up, so wait a bit before removing user-select.\n    setTimeout(() => {\n      // Wait for any CSS transitions to complete so we don't recompute style\n      // for the whole page in the middle of the animation and cause jank.\n      runAfterTransition(() => {\n        // Avoid race conditions\n        if (state === 'restoring') {\n          if (document.documentElement.style.webkitUserSelect === 'none') {\n            document.documentElement.style.webkitUserSelect = savedUserSelect || '';\n          }\n\n          savedUserSelect = '';\n          state = 'default';\n        }\n      });\n    }, 300);\n  } else if (target instanceof HTMLElement || target instanceof SVGElement) {\n    // If not iOS, restore the target's original user-select if any\n    // Ignore state since it doesn't apply for non iOS\n    if (target && modifiedElementMap.has(target)) {\n      let targetOldUserSelect = modifiedElementMap.get(target);\n\n      if (target.style.userSelect === 'none') {\n        target.style.userSelect = targetOldUserSelect;\n      }\n\n      if (target.getAttribute('style') === '') {\n        target.removeAttribute('style');\n      }\n      modifiedElementMap.delete(target);\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\nimport {PressProps} from './usePress';\nimport React, {MutableRefObject} from 'react';\n\ninterface IPressResponderContext extends PressProps {\n  register(): void,\n  ref?: MutableRefObject<FocusableElement>\n}\n\nexport const PressResponderContext = React.createContext<IPressResponderContext>(null);\nPressResponderContext.displayName = 'PressResponderContext';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {disableTextSelection, restoreTextSelection} from './textSelection';\nimport {DOMAttributes, FocusableElement, PointerType, PressEvents} from '@react-types/shared';\nimport {focusWithoutScrolling, isVirtualClick, isVirtualPointerEvent, mergeProps, useGlobalListeners, useSyncRef} from '@react-aria/utils';\nimport {PressResponderContext} from './context';\nimport {RefObject, useContext, useEffect, useMemo, useRef, useState} from 'react';\n\nexport interface PressProps extends PressEvents {\n  /** Whether the target is in a controlled press state (e.g. an overlay it triggers is open). */\n  isPressed?: boolean,\n  /** Whether the press events should be disabled. */\n  isDisabled?: boolean,\n  /** Whether the target should not receive focus on press. */\n  preventFocusOnPress?: boolean,\n  /**\n   * Whether press events should be canceled when the pointer leaves the target while pressed.\n   * By default, this is `false`, which means if the pointer returns back over the target while\n   * still pressed, onPressStart will be fired again. If set to `true`, the press is canceled\n   * when the pointer leaves the target and onPressStart will not be fired if the pointer returns.\n   */\n  shouldCancelOnPointerExit?: boolean,\n  /** Whether text selection should be enabled on the pressable element. */\n  allowTextSelectionOnPress?: boolean\n}\n\nexport interface PressHookProps extends PressProps {\n  /** A ref to the target element. */\n  ref?: RefObject<Element>\n}\n\ninterface PressState {\n  isPressed: boolean,\n  ignoreEmulatedMouseEvents: boolean,\n  ignoreClickAfterPress: boolean,\n  didFirePressStart: boolean,\n  activePointerId: any,\n  target: FocusableElement | null,\n  isOverTarget: boolean,\n  pointerType: PointerType,\n  userSelect?: string\n}\n\ninterface EventBase {\n  currentTarget: EventTarget,\n  shiftKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean,\n  altKey: boolean\n}\n\nexport interface PressResult {\n  /** Whether the target is currently pressed. */\n  isPressed: boolean,\n  /** Props to spread on the target element. */\n  pressProps: DOMAttributes\n}\n\nfunction usePressResponderContext(props: PressHookProps): PressHookProps {\n  // Consume context from <PressResponder> and merge with props.\n  let context = useContext(PressResponderContext);\n  if (context) {\n    let {register, ...contextProps} = context;\n    props = mergeProps(contextProps, props) as PressHookProps;\n    register();\n  }\n  useSyncRef(context, props.ref);\n\n  return props;\n}\n\n/**\n * Handles press interactions across mouse, touch, keyboard, and screen readers.\n * It normalizes behavior across browsers and platforms, and handles many nuances\n * of dealing with pointer and keyboard events.\n */\nexport function usePress(props: PressHookProps): PressResult {\n  let {\n    onPress,\n    onPressChange,\n    onPressStart,\n    onPressEnd,\n    onPressUp,\n    isDisabled,\n    isPressed: isPressedProp,\n    preventFocusOnPress,\n    shouldCancelOnPointerExit,\n    allowTextSelectionOnPress,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref: _, // Removing `ref` from `domProps` because TypeScript is dumb\n    ...domProps\n  } = usePressResponderContext(props);\n  let propsRef = useRef<PressHookProps>(null);\n  propsRef.current = {onPress, onPressChange, onPressStart, onPressEnd, onPressUp, isDisabled, shouldCancelOnPointerExit};\n\n  let [isPressed, setPressed] = useState(false);\n  let ref = useRef<PressState>({\n    isPressed: false,\n    ignoreEmulatedMouseEvents: false,\n    ignoreClickAfterPress: false,\n    didFirePressStart: false,\n    activePointerId: null,\n    target: null,\n    isOverTarget: false,\n    pointerType: null\n  });\n\n  let {addGlobalListener, removeAllGlobalListeners} = useGlobalListeners();\n\n  let pressProps = useMemo(() => {\n    let state = ref.current;\n    let triggerPressStart = (originalEvent: EventBase, pointerType: PointerType) => {\n      let {onPressStart, onPressChange, isDisabled} = propsRef.current;\n      if (isDisabled || state.didFirePressStart) {\n        return;\n      }\n\n      if (onPressStart) {\n        onPressStart({\n          type: 'pressstart',\n          pointerType,\n          target: originalEvent.currentTarget as Element,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n\n      if (onPressChange) {\n        onPressChange(true);\n      }\n\n      state.didFirePressStart = true;\n      setPressed(true);\n    };\n\n    let triggerPressEnd = (originalEvent: EventBase, pointerType: PointerType, wasPressed = true) => {\n      let {onPressEnd, onPressChange, onPress, isDisabled} = propsRef.current;\n      if (!state.didFirePressStart) {\n        return;\n      }\n\n      state.ignoreClickAfterPress = true;\n      state.didFirePressStart = false;\n\n      if (onPressEnd) {\n        onPressEnd({\n          type: 'pressend',\n          pointerType,\n          target: originalEvent.currentTarget as Element,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n\n      if (onPressChange) {\n        onPressChange(false);\n      }\n\n      setPressed(false);\n\n      if (onPress && wasPressed && !isDisabled) {\n        onPress({\n          type: 'press',\n          pointerType,\n          target: originalEvent.currentTarget as Element,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n    };\n\n    let triggerPressUp = (originalEvent: EventBase, pointerType: PointerType) => {\n      let {onPressUp, isDisabled} = propsRef.current;\n      if (isDisabled) {\n        return;\n      }\n\n      if (onPressUp) {\n        onPressUp({\n          type: 'pressup',\n          pointerType,\n          target: originalEvent.currentTarget as Element,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n    };\n\n    let cancel = (e: EventBase) => {\n      if (state.isPressed) {\n        if (state.isOverTarget) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n        }\n        state.isPressed = false;\n        state.isOverTarget = false;\n        state.activePointerId = null;\n        state.pointerType = null;\n        removeAllGlobalListeners();\n        if (!allowTextSelectionOnPress) {\n          restoreTextSelection(state.target);\n        }\n      }\n    };\n\n    let pressProps: DOMAttributes = {\n      onKeyDown(e) {\n        if (isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target as Element)) {\n          if (shouldPreventDefaultKeyboard(e.target as Element, e.key)) {\n            e.preventDefault();\n          }\n          e.stopPropagation();\n\n          // If the event is repeating, it may have started on a different element\n          // after which focus moved to the current element. Ignore these events and\n          // only handle the first key down event.\n          if (!state.isPressed && !e.repeat) {\n            state.target = e.currentTarget;\n            state.isPressed = true;\n            triggerPressStart(e, 'keyboard');\n\n            // Focus may move before the key up event, so register the event on the document\n            // instead of the same element where the key down event occurred.\n            addGlobalListener(document, 'keyup', onKeyUp, false);\n          }\n        } else if (e.key === 'Enter' && isHTMLAnchorLink(e.currentTarget)) {\n          // If the target is a link, we won't have handled this above because we want the default\n          // browser behavior to open the link when pressing Enter. But we still need to prevent\n          // default so that elements above do not also handle it (e.g. table row).\n          e.stopPropagation();\n        }\n      },\n      onKeyUp(e) {\n        if (isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && !e.repeat && e.currentTarget.contains(e.target as Element)) {\n          triggerPressUp(createEvent(state.target, e), 'keyboard');\n        }\n      },\n      onClick(e) {\n        if (e && !e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (e && e.button === 0) {\n          e.stopPropagation();\n          if (isDisabled) {\n            e.preventDefault();\n          }\n\n          // If triggered from a screen reader or by using element.click(),\n          // trigger as if it were a keyboard click.\n          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === 'virtual' || isVirtualClick(e.nativeEvent))) {\n            // Ensure the element receives focus (VoiceOver on iOS does not do this)\n            if (!isDisabled && !preventFocusOnPress) {\n              focusWithoutScrolling(e.currentTarget);\n            }\n\n            triggerPressStart(e, 'virtual');\n            triggerPressUp(e, 'virtual');\n            triggerPressEnd(e, 'virtual');\n          }\n\n          state.ignoreEmulatedMouseEvents = false;\n          state.ignoreClickAfterPress = false;\n        }\n      }\n    };\n\n    let onKeyUp = (e: KeyboardEvent) => {\n      if (state.isPressed && isValidKeyboardEvent(e, state.target)) {\n        if (shouldPreventDefaultKeyboard(e.target as Element, e.key)) {\n          e.preventDefault();\n        }\n        e.stopPropagation();\n\n        state.isPressed = false;\n        let target = e.target as Element;\n        triggerPressEnd(createEvent(state.target, e), 'keyboard', state.target.contains(target));\n        removeAllGlobalListeners();\n\n        // If the target is a link, trigger the click method to open the URL,\n        // but defer triggering pressEnd until onClick event handler.\n        if (state.target instanceof HTMLElement && state.target.contains(target) && (isHTMLAnchorLink(state.target) || state.target.getAttribute('role') === 'link')) {\n          state.target.click();\n        }\n      }\n    };\n\n    if (typeof PointerEvent !== 'undefined') {\n      pressProps.onPointerDown = (e) => {\n        // Only handle left clicks, and ignore events that bubbled through portals.\n        if (e.button !== 0 || !e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.\n        // Ignore and let the onClick handler take care of it instead.\n        // https://bugs.webkit.org/show_bug.cgi?id=222627\n        // https://bugs.webkit.org/show_bug.cgi?id=223202\n        if (isVirtualPointerEvent(e.nativeEvent)) {\n          state.pointerType = 'virtual';\n          return;\n        }\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on pointer down and handle focusing the pressable element ourselves.\n        if (shouldPreventDefault(e.currentTarget as Element)) {\n          e.preventDefault();\n        }\n\n        state.pointerType = e.pointerType;\n\n        e.stopPropagation();\n        if (!state.isPressed) {\n          state.isPressed = true;\n          state.isOverTarget = true;\n          state.activePointerId = e.pointerId;\n          state.target = e.currentTarget;\n\n          if (!isDisabled && !preventFocusOnPress) {\n            focusWithoutScrolling(e.currentTarget);\n          }\n\n          if (!allowTextSelectionOnPress) {\n            disableTextSelection(state.target);\n          }\n\n          triggerPressStart(e, state.pointerType);\n\n          addGlobalListener(document, 'pointermove', onPointerMove, false);\n          addGlobalListener(document, 'pointerup', onPointerUp, false);\n          addGlobalListener(document, 'pointercancel', onPointerCancel, false);\n        }\n      };\n\n      pressProps.onMouseDown = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (e.button === 0) {\n          // Chrome and Firefox on touch Windows devices require mouse down events\n          // to be canceled in addition to pointer events, or an extra asynchronous\n          // focus event will be fired.\n          if (shouldPreventDefault(e.currentTarget as Element)) {\n            e.preventDefault();\n          }\n\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onPointerUp = (e) => {\n        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.\n        if (!e.currentTarget.contains(e.target as Element) || state.pointerType === 'virtual') {\n          return;\n        }\n\n        // Only handle left clicks\n        // Safari on iOS sometimes fires pointerup events, even\n        // when the touch isn't over the target, so double check.\n        if (e.button === 0 && isOverTarget(e, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType || e.pointerType);\n        }\n      };\n\n      // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.\n      // Use pointer move events instead to implement our own hit testing.\n      // See https://bugs.webkit.org/show_bug.cgi?id=199803\n      let onPointerMove = (e: PointerEvent) => {\n        if (e.pointerId !== state.activePointerId) {\n          return;\n        }\n\n        if (isOverTarget(e, state.target)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(createEvent(state.target, e), state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) {\n            cancel(e);\n          }\n        }\n      };\n\n      let onPointerUp = (e: PointerEvent) => {\n        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {\n          if (isOverTarget(e, state.target)) {\n            triggerPressEnd(createEvent(state.target, e), state.pointerType);\n          } else if (state.isOverTarget) {\n            triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n          }\n\n          state.isPressed = false;\n          state.isOverTarget = false;\n          state.activePointerId = null;\n          state.pointerType = null;\n          removeAllGlobalListeners();\n          if (!allowTextSelectionOnPress) {\n            restoreTextSelection(state.target);\n          }\n        }\n      };\n\n      let onPointerCancel = (e: PointerEvent) => {\n        cancel(e);\n      };\n\n      pressProps.onDragStart = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.\n        cancel(e);\n      };\n    } else {\n      pressProps.onMouseDown = (e) => {\n        // Only handle left clicks\n        if (e.button !== 0 || !e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on mouse down and handle focusing the pressable element ourselves.\n        if (shouldPreventDefault(e.currentTarget)) {\n          e.preventDefault();\n        }\n\n        e.stopPropagation();\n        if (state.ignoreEmulatedMouseEvents) {\n          return;\n        }\n\n        state.isPressed = true;\n        state.isOverTarget = true;\n        state.target = e.currentTarget;\n        state.pointerType = isVirtualClick(e.nativeEvent) ? 'virtual' : 'mouse';\n\n        if (!isDisabled && !preventFocusOnPress) {\n          focusWithoutScrolling(e.currentTarget);\n        }\n\n        triggerPressStart(e, state.pointerType);\n\n        addGlobalListener(document, 'mouseup', onMouseUp, false);\n      };\n\n      pressProps.onMouseEnter = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = true;\n          triggerPressStart(e, state.pointerType);\n        }\n      };\n\n      pressProps.onMouseLeave = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) {\n            cancel(e);\n          }\n        }\n      };\n\n      pressProps.onMouseUp = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (!state.ignoreEmulatedMouseEvents && e.button === 0) {\n          triggerPressUp(e, state.pointerType);\n        }\n      };\n\n      let onMouseUp = (e: MouseEvent) => {\n        // Only handle left clicks\n        if (e.button !== 0) {\n          return;\n        }\n\n        state.isPressed = false;\n        removeAllGlobalListeners();\n\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n          return;\n        }\n\n        if (isOverTarget(e, state.target)) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType);\n        } else if (state.isOverTarget) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n        }\n\n        state.isOverTarget = false;\n      };\n\n      pressProps.onTouchStart = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        let touch = getTouchFromEvent(e.nativeEvent);\n        if (!touch) {\n          return;\n        }\n        state.activePointerId = touch.identifier;\n        state.ignoreEmulatedMouseEvents = true;\n        state.isOverTarget = true;\n        state.isPressed = true;\n        state.target = e.currentTarget;\n        state.pointerType = 'touch';\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent default\n        // on the emulated mouse event and handle focusing the pressable element ourselves.\n        if (!isDisabled && !preventFocusOnPress) {\n          focusWithoutScrolling(e.currentTarget);\n        }\n\n        if (!allowTextSelectionOnPress) {\n          disableTextSelection(state.target);\n        }\n\n        triggerPressStart(e, state.pointerType);\n\n        addGlobalListener(window, 'scroll', onScroll, true);\n      };\n\n      pressProps.onTouchMove = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (!state.isPressed) {\n          return;\n        }\n\n        let touch = getTouchById(e.nativeEvent, state.activePointerId);\n        if (touch && isOverTarget(touch, e.currentTarget)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(e, state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) {\n            cancel(e);\n          }\n        }\n      };\n\n      pressProps.onTouchEnd = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (!state.isPressed) {\n          return;\n        }\n\n        let touch = getTouchById(e.nativeEvent, state.activePointerId);\n        if (touch && isOverTarget(touch, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType);\n          triggerPressEnd(e, state.pointerType);\n        } else if (state.isOverTarget) {\n          triggerPressEnd(e, state.pointerType, false);\n        }\n\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        state.ignoreEmulatedMouseEvents = true;\n        if (!allowTextSelectionOnPress) {\n          restoreTextSelection(state.target);\n        }\n        removeAllGlobalListeners();\n      };\n\n      pressProps.onTouchCancel = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed) {\n          cancel(e);\n        }\n      };\n\n      let onScroll = (e: Event) => {\n        if (state.isPressed && (e.target as Element).contains(state.target)) {\n          cancel({\n            currentTarget: state.target,\n            shiftKey: false,\n            ctrlKey: false,\n            metaKey: false,\n            altKey: false\n          });\n        }\n      };\n\n      pressProps.onDragStart = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        cancel(e);\n      };\n    }\n\n    return pressProps;\n  }, [addGlobalListener, isDisabled, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress]);\n\n  // Remove user-select: none in case component unmounts immediately after pressStart\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => {\n      if (!allowTextSelectionOnPress) {\n        restoreTextSelection(ref.current.target);\n      }\n    };\n  }, [allowTextSelectionOnPress]);\n\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: mergeProps(domProps, pressProps)\n  };\n}\n\nfunction isHTMLAnchorLink(target: Element): boolean {\n  return target.tagName === 'A' && target.hasAttribute('href');\n}\n\nfunction isValidKeyboardEvent(event: KeyboardEvent, currentTarget: Element): boolean {\n  const {key, code} = event;\n  const element = currentTarget as HTMLElement;\n  const role = element.getAttribute('role');\n  // Accessibility for keyboards. Space and Enter only.\n  // \"Spacebar\" is for IE 11\n  return (\n    (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') &&\n    !((element instanceof HTMLInputElement && !isValidInputKey(element, key)) ||\n      element instanceof HTMLTextAreaElement ||\n      element.isContentEditable) &&\n    // A link with a valid href should be handled natively,\n    // unless it also has role='button' and was triggered using Space.\n    (!isHTMLAnchorLink(element) || (role === 'button' && key !== 'Enter')) &&\n    // An element with role='link' should only trigger with Enter key\n    !(role === 'link' && key !== 'Enter')\n  );\n}\n\nfunction getTouchFromEvent(event: TouchEvent): Touch | null {\n  const {targetTouches} = event;\n  if (targetTouches.length > 0) {\n    return targetTouches[0];\n  }\n  return null;\n}\n\nfunction getTouchById(\n  event: TouchEvent,\n  pointerId: null | number\n): null | Touch {\n  const changedTouches = event.changedTouches;\n  for (let i = 0; i < changedTouches.length; i++) {\n    const touch = changedTouches[i];\n    if (touch.identifier === pointerId) {\n      return touch;\n    }\n  }\n  return null;\n}\n\nfunction createEvent(target: FocusableElement, e: EventBase): EventBase {\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey\n  };\n}\n\ninterface Rect {\n  top: number,\n  right: number,\n  bottom: number,\n  left: number\n}\n\ninterface EventPoint {\n  clientX: number,\n  clientY: number,\n  width?: number,\n  height?: number,\n  radiusX?: number,\n  radiusY?: number\n}\n\nfunction getPointClientRect(point: EventPoint): Rect {\n  let offsetX = (point.width / 2) || point.radiusX || 0;\n  let offsetY = (point.height / 2) || point.radiusY || 0;\n\n  return {\n    top: point.clientY - offsetY,\n    right: point.clientX + offsetX,\n    bottom: point.clientY + offsetY,\n    left: point.clientX - offsetX\n  };\n}\n\nfunction areRectanglesOverlapping(a: Rect, b: Rect) {\n  // check if they cannot overlap on x axis\n  if (a.left > b.right || b.left > a.right) {\n    return false;\n  }\n  // check if they cannot overlap on y axis\n  if (a.top > b.bottom || b.top > a.bottom) {\n    return false;\n  }\n  return true;\n}\n\nfunction isOverTarget(point: EventPoint, target: Element) {\n  let rect = target.getBoundingClientRect();\n  let pointRect = getPointClientRect(point);\n  return areRectanglesOverlapping(rect, pointRect);\n}\n\nfunction shouldPreventDefault(target: Element) {\n  // We cannot prevent default if the target is a draggable element.\n  return !(target instanceof HTMLElement) || !target.draggable;\n}\n\nfunction shouldPreventDefaultKeyboard(target: Element, key: string) {\n  if (target instanceof HTMLInputElement) {\n    return !isValidInputKey(target, key);\n  }\n\n  if (target instanceof HTMLButtonElement) {\n    return target.type !== 'submit';\n  }\n\n  return true;\n}\n\nconst nonTextInputTypes = new Set([\n  'checkbox',\n  'radio',\n  'range',\n  'color',\n  'file',\n  'image',\n  'button',\n  'submit',\n  'reset'\n]);\n\nfunction isValidInputKey(target: HTMLInputElement, key: string) {\n  // Only space should toggle checkboxes and radios, not enter.\n  return target.type === 'checkbox' || target.type === 'radio'\n    ? key === ' '\n    : nonTextInputTypes.has(target.type);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes} from '@react-types/shared';\nimport {mergeProps} from '@react-aria/utils';\nimport {PressProps, usePress} from './usePress';\nimport React, {ReactElement, RefObject, useRef} from 'react';\n\ninterface PressableProps extends PressProps {\n  children: ReactElement<DOMAttributes, string>\n}\n\nexport const Pressable = React.forwardRef(({children, ...props}: PressableProps, ref: RefObject<Element>) => {\n  let newRef = useRef();\n  ref = ref ?? newRef;\n  let {pressProps} = usePress({...props, ref});\n  let child = React.Children.only(children);\n  return React.cloneElement(\n    child,\n    // @ts-ignore\n    {ref, ...mergeProps(child.props, pressProps)}\n  );\n});\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\nimport {mergeProps, useSyncRef} from '@react-aria/utils';\nimport {PressProps} from './usePress';\nimport {PressResponderContext} from './context';\nimport React, {ReactNode, RefObject, useContext, useEffect, useRef} from 'react';\n\ninterface PressResponderProps extends PressProps {\n  children: ReactNode\n}\n\nexport const PressResponder = React.forwardRef(({children, ...props}: PressResponderProps, ref: RefObject<FocusableElement>) => {\n  let isRegistered = useRef(false);\n  let prevContext = useContext(PressResponderContext);\n  let context = mergeProps(prevContext || {}, {\n    ...props,\n    ref: ref || prevContext?.ref,\n    register() {\n      isRegistered.current = true;\n      if (prevContext) {\n        prevContext.register();\n      }\n    }\n  });\n\n  useSyncRef(prevContext, ref);\n\n  useEffect(() => {\n    if (!isRegistered.current) {\n      console.warn(\n        'A PressResponder was rendered without a pressable child. ' +\n        'Either call the usePress hook, or wrap your DOM node with <Pressable> component.'\n      );\n    }\n  }, []);\n\n  return (\n    <PressResponderContext.Provider value={context}>\n      {children}\n    </PressResponderContext.Provider>\n  );\n});\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusEvent as ReactFocusEvent, useCallback, useRef} from 'react';\nimport {useLayoutEffect} from '@react-aria/utils';\n\nexport class SyntheticFocusEvent implements ReactFocusEvent {\n  nativeEvent: FocusEvent;\n  target: Element;\n  currentTarget: Element;\n  relatedTarget: Element;\n  bubbles: boolean;\n  cancelable: boolean;\n  defaultPrevented: boolean;\n  eventPhase: number;\n  isTrusted: boolean;\n  timeStamp: number;\n  type: string;\n\n  constructor(type: string, nativeEvent: FocusEvent) {\n    this.nativeEvent = nativeEvent;\n    this.target = nativeEvent.target as Element;\n    this.currentTarget = nativeEvent.currentTarget as Element;\n    this.relatedTarget = nativeEvent.relatedTarget as Element;\n    this.bubbles = nativeEvent.bubbles;\n    this.cancelable = nativeEvent.cancelable;\n    this.defaultPrevented = nativeEvent.defaultPrevented;\n    this.eventPhase = nativeEvent.eventPhase;\n    this.isTrusted = nativeEvent.isTrusted;\n    this.timeStamp = nativeEvent.timeStamp;\n    this.type = type;\n  }\n\n  isDefaultPrevented(): boolean {\n    return this.nativeEvent.defaultPrevented;\n  }\n\n  preventDefault(): void {\n    this.defaultPrevented = true;\n    this.nativeEvent.preventDefault();\n  }\n\n  stopPropagation(): void {\n    this.nativeEvent.stopPropagation();\n    this.isPropagationStopped = () => true;\n  }\n\n  isPropagationStopped(): boolean {\n    return false;\n  }\n\n  persist() {}\n}\n\nexport function useSyntheticBlurEvent(onBlur: (e: ReactFocusEvent) => void) {\n  let stateRef = useRef({\n    isFocused: false,\n    onBlur,\n    observer: null as MutationObserver\n  });\n  stateRef.current.onBlur = onBlur;\n\n  // Clean up MutationObserver on unmount. See below.\n  // eslint-disable-next-line arrow-body-style\n  useLayoutEffect(() => {\n    const state = stateRef.current;\n    return () => {\n      if (state.observer) {\n        state.observer.disconnect();\n        state.observer = null;\n      }\n    };\n  }, []);\n\n  // This function is called during a React onFocus event.\n  return useCallback((e: ReactFocusEvent) => {\n    // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142\n    // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a\n    // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.\n    // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.\n    if (\n      e.target instanceof HTMLButtonElement ||\n      e.target instanceof HTMLInputElement ||\n      e.target instanceof HTMLTextAreaElement ||\n      e.target instanceof HTMLSelectElement\n    ) {\n      stateRef.current.isFocused = true;\n\n      let target = e.target;\n      let onBlurHandler = (e: FocusEvent) => {\n        stateRef.current.isFocused = false;\n\n        if (target.disabled) {\n          // For backward compatibility, dispatch a (fake) React synthetic event.\n          stateRef.current.onBlur?.(new SyntheticFocusEvent('blur', e));\n        }\n\n        // We no longer need the MutationObserver once the target is blurred.\n        if (stateRef.current.observer) {\n          stateRef.current.observer.disconnect();\n          stateRef.current.observer = null;\n        }\n      };\n\n      target.addEventListener('focusout', onBlurHandler, {once: true});\n\n      stateRef.current.observer = new MutationObserver(() => {\n        if (stateRef.current.isFocused && target.disabled) {\n          stateRef.current.observer.disconnect();\n          target.dispatchEvent(new FocusEvent('blur'));\n          target.dispatchEvent(new FocusEvent('focusout', {bubbles: true}));\n        }\n      });\n\n      stateRef.current.observer.observe(target, {attributes: true, attributeFilter: ['disabled']});\n    }\n  }, []);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {DOMAttributes, FocusEvents} from '@react-types/shared';\nimport {FocusEvent, useCallback} from 'react';\nimport {useSyntheticBlurEvent} from './utils';\n\nexport interface FocusProps extends FocusEvents {\n  /** Whether the focus events should be disabled. */\n  isDisabled?: boolean\n}\n\nexport interface FocusResult {\n  /** Props to spread onto the target element. */\n  focusProps: DOMAttributes\n}\n\n/**\n * Handles focus events for the immediate target.\n * Focus events on child elements will be ignored.\n */\nexport function useFocus(props: FocusProps): FocusResult {\n  let {\n    isDisabled,\n    onFocus: onFocusProp,\n    onBlur: onBlurProp,\n    onFocusChange\n  } = props;\n\n  const onBlur: FocusProps['onBlur'] = useCallback((e: FocusEvent) => {\n    if (e.target === e.currentTarget) {\n      if (onBlurProp) {\n        onBlurProp(e);\n      }\n\n      if (onFocusChange) {\n        onFocusChange(false);\n      }\n\n      return true;\n    }\n  }, [onBlurProp, onFocusChange]);\n\n\n  const onSyntheticFocus = useSyntheticBlurEvent(onBlur);\n\n  const onFocus: FocusProps['onFocus'] = useCallback((e: FocusEvent) => {\n    if (e.target === e.currentTarget) {\n      if (onFocusProp) {\n        onFocusProp(e);\n      }\n\n      if (onFocusChange) {\n        onFocusChange(true);\n      }\n\n      onSyntheticFocus(e);\n    }\n  }, [onFocusChange, onFocusProp, onSyntheticFocus]);\n\n  return {\n    focusProps: {\n      onFocus: (!isDisabled && (onFocusProp || onFocusChange || onBlurProp)) ? onFocus : undefined,\n      onBlur: (!isDisabled && (onBlurProp || onFocusChange)) ? onBlur : null\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {isMac, isVirtualClick} from '@react-aria/utils';\nimport {useEffect, useState} from 'react';\n\nexport type Modality = 'keyboard' | 'pointer' | 'virtual';\ntype HandlerEvent = PointerEvent | MouseEvent | KeyboardEvent | FocusEvent;\ntype Handler = (modality: Modality, e: HandlerEvent) => void;\nexport type FocusVisibleHandler = (isFocusVisible: boolean) => void;\ninterface FocusVisibleProps {\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\nexport interface FocusVisibleResult {\n  /** Whether keyboard focus is visible globally. */\n  isFocusVisible: boolean\n}\n\nlet currentModality = null;\nlet changeHandlers = new Set<Handler>();\nlet hasSetupGlobalListeners = false;\nlet hasEventBeforeFocus = false;\nlet hasBlurredWindowRecently = false;\n\n// Only Tab or Esc keys will make focus visible on text input elements\nconst FOCUS_VISIBLE_INPUT_KEYS = {\n  Tab: true,\n  Escape: true\n};\n\nfunction triggerChangeHandlers(modality: Modality, e: HandlerEvent) {\n  for (let handler of changeHandlers) {\n    handler(modality, e);\n  }\n}\n\n/**\n * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.\n */\nfunction isValidKey(e: KeyboardEvent) {\n  // Control and Shift keys trigger when navigating back to the tab with keyboard.\n  return !(e.metaKey || (!isMac() && e.altKey) || e.ctrlKey || e.key === 'Control' || e.key === 'Shift' || e.key === 'Meta');\n}\n\n\nfunction handleKeyboardEvent(e: KeyboardEvent) {\n  hasEventBeforeFocus = true;\n  if (isValidKey(e)) {\n    currentModality = 'keyboard';\n    triggerChangeHandlers('keyboard', e);\n  }\n}\n\nfunction handlePointerEvent(e: PointerEvent | MouseEvent) {\n  currentModality = 'pointer';\n  if (e.type === 'mousedown' || e.type === 'pointerdown') {\n    hasEventBeforeFocus = true;\n    triggerChangeHandlers('pointer', e);\n  }\n}\n\nfunction handleClickEvent(e: MouseEvent) {\n  if (isVirtualClick(e)) {\n    hasEventBeforeFocus = true;\n    currentModality = 'virtual';\n  }\n}\n\nfunction handleFocusEvent(e: FocusEvent) {\n  // Firefox fires two extra focus events when the user first clicks into an iframe:\n  // first on the window, then on the document. We ignore these events so they don't\n  // cause keyboard focus rings to appear.\n  if (e.target === window || e.target === document) {\n    return;\n  }\n\n  // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.\n  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n  if (!hasEventBeforeFocus && !hasBlurredWindowRecently) {\n    currentModality = 'virtual';\n    triggerChangeHandlers('virtual', e);\n  }\n\n  hasEventBeforeFocus = false;\n  hasBlurredWindowRecently = false;\n}\n\nfunction handleWindowBlur() {\n  // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n  // for example, since a subsequent focus event won't be fired.\n  hasEventBeforeFocus = false;\n  hasBlurredWindowRecently = true;\n}\n\n/**\n * Setup global event listeners to control when keyboard focus style should be visible.\n */\nfunction setupGlobalFocusEvents() {\n  if (typeof window === 'undefined' || hasSetupGlobalListeners) {\n    return;\n  }\n\n  // Programmatic focus() calls shouldn't affect the current input modality.\n  // However, we need to detect other cases when a focus event occurs without\n  // a preceding user event (e.g. screen reader focus). Overriding the focus\n  // method on HTMLElement.prototype is a bit hacky, but works.\n  let focus = HTMLElement.prototype.focus;\n  HTMLElement.prototype.focus = function () {\n    hasEventBeforeFocus = true;\n    focus.apply(this, arguments);\n  };\n\n  document.addEventListener('keydown', handleKeyboardEvent, true);\n  document.addEventListener('keyup', handleKeyboardEvent, true);\n  document.addEventListener('click', handleClickEvent, true);\n\n  // Register focus events on the window so they are sure to happen\n  // before React's event listeners (registered on the document).\n  window.addEventListener('focus', handleFocusEvent, true);\n  window.addEventListener('blur', handleWindowBlur, false);\n\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerdown', handlePointerEvent, true);\n    document.addEventListener('pointermove', handlePointerEvent, true);\n    document.addEventListener('pointerup', handlePointerEvent, true);\n  } else {\n    document.addEventListener('mousedown', handlePointerEvent, true);\n    document.addEventListener('mousemove', handlePointerEvent, true);\n    document.addEventListener('mouseup', handlePointerEvent, true);\n  }\n\n  hasSetupGlobalListeners = true;\n}\n\nif (typeof document !== 'undefined') {\n  if (document.readyState !== 'loading') {\n    setupGlobalFocusEvents();\n  } else {\n    document.addEventListener('DOMContentLoaded', setupGlobalFocusEvents);\n  }\n}\n\n/**\n * If true, keyboard focus is visible.\n */\nexport function isFocusVisible(): boolean {\n  return currentModality !== 'pointer';\n}\n\nexport function getInteractionModality(): Modality {\n  return currentModality;\n}\n\nexport function setInteractionModality(modality: Modality) {\n  currentModality = modality;\n  triggerChangeHandlers(modality, null);\n}\n\n/**\n * Keeps state of the current modality.\n */\nexport function useInteractionModality(): Modality {\n  setupGlobalFocusEvents();\n\n  let [modality, setModality] = useState(currentModality);\n  useEffect(() => {\n    let handler = () => {\n      setModality(currentModality);\n    };\n\n    changeHandlers.add(handler);\n    return () => {\n      changeHandlers.delete(handler);\n    };\n  }, []);\n\n  return modality;\n}\n\n/**\n * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that\n * focus visible style can be properly set.\n */\nfunction isKeyboardFocusEvent(isTextInput: boolean, modality: Modality, e: HandlerEvent) {\n  return !(isTextInput && modality === 'keyboard' && e instanceof KeyboardEvent && !FOCUS_VISIBLE_INPUT_KEYS[e.key]);\n}\n\n/**\n * Manages focus visible state for the page, and subscribes individual components for updates.\n */\nexport function useFocusVisible(props: FocusVisibleProps = {}): FocusVisibleResult {\n  let {isTextInput, autoFocus} = props;\n  let [isFocusVisibleState, setFocusVisible] = useState(autoFocus || isFocusVisible());\n  useFocusVisibleListener((isFocusVisible) => {\n    setFocusVisible(isFocusVisible);\n  }, [isTextInput], {isTextInput});\n\n  return {isFocusVisible: isFocusVisibleState};\n}\n\n/**\n * Listens for trigger change and reports if focus is visible (i.e., modality is not pointer).\n */\nexport function useFocusVisibleListener(fn: FocusVisibleHandler, deps: ReadonlyArray<any>, opts?: {isTextInput?: boolean}): void {\n  setupGlobalFocusEvents();\n\n  useEffect(() => {\n    let handler = (modality: Modality, e: HandlerEvent) => {\n      if (!isKeyboardFocusEvent(opts?.isTextInput, modality, e)) {\n        return;\n      }\n      fn(isFocusVisible());\n    };\n    changeHandlers.add(handler);\n    return () => {\n      changeHandlers.delete(handler);\n    };\n  }, deps);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {DOMAttributes} from '@react-types/shared';\nimport {FocusEvent, useCallback, useRef} from 'react';\nimport {useSyntheticBlurEvent} from './utils';\n\nexport interface FocusWithinProps {\n  /** Whether the focus within events should be disabled. */\n  isDisabled?: boolean,\n  /** Handler that is called when the target element or a descendant receives focus. */\n  onFocusWithin?: (e: FocusEvent) => void,\n  /** Handler that is called when the target element and all descendants lose focus. */\n  onBlurWithin?: (e: FocusEvent) => void,\n  /** Handler that is called when the the focus within state changes. */\n  onFocusWithinChange?: (isFocusWithin: boolean) => void\n}\n\nexport interface FocusWithinResult {\n  /** Props to spread onto the target element. */\n  focusWithinProps: DOMAttributes\n}\n\n/**\n * Handles focus events for the target and its descendants.\n */\nexport function useFocusWithin(props: FocusWithinProps): FocusWithinResult {\n  let {\n    isDisabled,\n    onBlurWithin,\n    onFocusWithin,\n    onFocusWithinChange\n  } = props;\n  let state = useRef({\n    isFocusWithin: false\n  });\n\n  let onBlur = useCallback((e: FocusEvent) => {\n    // We don't want to trigger onBlurWithin and then immediately onFocusWithin again\n    // when moving focus inside the element. Only trigger if the currentTarget doesn't\n    // include the relatedTarget (where focus is moving).\n    if (state.current.isFocusWithin && !(e.currentTarget as Element).contains(e.relatedTarget as Element)) {\n      state.current.isFocusWithin = false;\n\n      if (onBlurWithin) {\n        onBlurWithin(e);\n      }\n\n      if (onFocusWithinChange) {\n        onFocusWithinChange(false);\n      }\n    }\n  }, [onBlurWithin, onFocusWithinChange, state]);\n\n  let onSyntheticFocus = useSyntheticBlurEvent(onBlur);\n  let onFocus = useCallback((e: FocusEvent) => {\n    if (!state.current.isFocusWithin) {\n      if (onFocusWithin) {\n        onFocusWithin(e);\n      }\n\n      if (onFocusWithinChange) {\n        onFocusWithinChange(true);\n      }\n\n      state.current.isFocusWithin = true;\n      onSyntheticFocus(e);\n    }\n  }, [onFocusWithin, onFocusWithinChange, onSyntheticFocus]);\n\n  if (isDisabled) {\n    return {\n      focusWithinProps: {\n        onFocus: null,\n        onBlur: null\n      }\n    };\n  }\n\n  return {\n    focusWithinProps: {\n      onFocus,\n      onBlur\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {DOMAttributes} from '@react-types/shared';\nimport {HoverEvents} from '@react-types/shared';\nimport {useEffect, useMemo, useRef, useState} from 'react';\n\nexport interface HoverProps extends HoverEvents {\n  /** Whether the hover events should be disabled. */\n  isDisabled?: boolean\n}\n\nexport interface HoverResult {\n  /** Props to spread on the target element. */\n  hoverProps: DOMAttributes,\n  isHovered: boolean\n}\n\n// iOS fires onPointerEnter twice: once with pointerType=\"touch\" and again with pointerType=\"mouse\".\n// We want to ignore these emulated events so they do not trigger hover behavior.\n// See https://bugs.webkit.org/show_bug.cgi?id=214609.\nlet globalIgnoreEmulatedMouseEvents = false;\nlet hoverCount = 0;\n\nfunction setGlobalIgnoreEmulatedMouseEvents() {\n  globalIgnoreEmulatedMouseEvents = true;\n\n  // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter\n  // with pointerType=\"mouse\" immediately after onPointerUp and before onFocus. On other\n  // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in\n  // the distant future because a user previously touched the element.\n  setTimeout(() => {\n    globalIgnoreEmulatedMouseEvents = false;\n  }, 50);\n}\n\nfunction handleGlobalPointerEvent(e) {\n  if (e.pointerType === 'touch') {\n    setGlobalIgnoreEmulatedMouseEvents();\n  }\n}\n\nfunction setupGlobalTouchEvents() {\n  if (typeof document === 'undefined') {\n    return;\n  }\n\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerup', handleGlobalPointerEvent);\n  } else {\n    document.addEventListener('touchend', setGlobalIgnoreEmulatedMouseEvents);\n  }\n\n  hoverCount++;\n  return () => {\n    hoverCount--;\n    if (hoverCount > 0) {\n      return;\n    }\n\n    if (typeof PointerEvent !== 'undefined') {\n      document.removeEventListener('pointerup', handleGlobalPointerEvent);\n    } else {\n      document.removeEventListener('touchend', setGlobalIgnoreEmulatedMouseEvents);\n    }\n  };\n}\n\n/**\n * Handles pointer hover interactions for an element. Normalizes behavior\n * across browsers and platforms, and ignores emulated mouse events on touch devices.\n */\nexport function useHover(props: HoverProps): HoverResult {\n  let {\n    onHoverStart,\n    onHoverChange,\n    onHoverEnd,\n    isDisabled\n  } = props;\n\n  let [isHovered, setHovered] = useState(false);\n  let state = useRef({\n    isHovered: false,\n    ignoreEmulatedMouseEvents: false,\n    pointerType: '',\n    target: null\n  }).current;\n\n  useEffect(setupGlobalTouchEvents, []);\n\n  let {hoverProps, triggerHoverEnd} = useMemo(() => {\n    let triggerHoverStart = (event, pointerType) => {\n      state.pointerType = pointerType;\n      if (isDisabled || pointerType === 'touch' || state.isHovered || !event.currentTarget.contains(event.target)) {\n        return;\n      }\n\n      state.isHovered = true;\n      let target = event.currentTarget;\n      state.target = target;\n\n      if (onHoverStart) {\n        onHoverStart({\n          type: 'hoverstart',\n          target,\n          pointerType\n        });\n      }\n\n      if (onHoverChange) {\n        onHoverChange(true);\n      }\n\n      setHovered(true);\n    };\n\n    let triggerHoverEnd = (event, pointerType) => {\n      state.pointerType = '';\n      state.target = null;\n\n      if (pointerType === 'touch' || !state.isHovered) {\n        return;\n      }\n\n      state.isHovered = false;\n      let target = event.currentTarget;\n      if (onHoverEnd) {\n        onHoverEnd({\n          type: 'hoverend',\n          target,\n          pointerType\n        });\n      }\n\n      if (onHoverChange) {\n        onHoverChange(false);\n      }\n\n      setHovered(false);\n    };\n\n    let hoverProps: DOMAttributes = {};\n\n    if (typeof PointerEvent !== 'undefined') {\n      hoverProps.onPointerEnter = (e) => {\n        if (globalIgnoreEmulatedMouseEvents && e.pointerType === 'mouse') {\n          return;\n        }\n\n        triggerHoverStart(e, e.pointerType);\n      };\n\n      hoverProps.onPointerLeave = (e) => {\n        if (!isDisabled && e.currentTarget.contains(e.target as Element)) {\n          triggerHoverEnd(e, e.pointerType);\n        }\n      };\n    } else {\n      hoverProps.onTouchStart = () => {\n        state.ignoreEmulatedMouseEvents = true;\n      };\n\n      hoverProps.onMouseEnter = (e) => {\n        if (!state.ignoreEmulatedMouseEvents && !globalIgnoreEmulatedMouseEvents) {\n          triggerHoverStart(e, 'mouse');\n        }\n\n        state.ignoreEmulatedMouseEvents = false;\n      };\n\n      hoverProps.onMouseLeave = (e) => {\n        if (!isDisabled && e.currentTarget.contains(e.target as Element)) {\n          triggerHoverEnd(e, 'mouse');\n        }\n      };\n    }\n    return {hoverProps, triggerHoverEnd};\n  }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state]);\n\n  useEffect(() => {\n    // Call the triggerHoverEnd as soon as isDisabled changes to true\n    // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering\n    if (isDisabled) {\n      triggerHoverEnd({currentTarget: state.target}, state.pointerType);\n    }\n  }, [isDisabled]);\n\n  return {\n    hoverProps,\n    isHovered\n  };\n}\n\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {RefObject, SyntheticEvent, useEffect, useRef} from 'react';\n\nexport interface InteractOutsideProps {\n  ref: RefObject<Element>,\n  onInteractOutside?: (e: SyntheticEvent) => void,\n  onInteractOutsideStart?: (e: SyntheticEvent) => void,\n  /** Whether the interact outside events should be disabled. */\n  isDisabled?: boolean\n}\n\n/**\n * Example, used in components like Dialogs and Popovers so they can close\n * when a user clicks outside them.\n */\nexport function useInteractOutside(props: InteractOutsideProps) {\n  let {ref, onInteractOutside, isDisabled, onInteractOutsideStart} = props;\n  let stateRef = useRef({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false,\n    onInteractOutside,\n    onInteractOutsideStart\n  });\n  let state = stateRef.current;\n  state.onInteractOutside = onInteractOutside;\n  state.onInteractOutsideStart = onInteractOutsideStart;\n\n  useEffect(() => {\n    if (isDisabled) {\n      return;\n    }\n\n    let onPointerDown = (e) => {\n      if (isValidEvent(e, ref) && state.onInteractOutside) {\n        if (state.onInteractOutsideStart) {\n          state.onInteractOutsideStart(e);\n        }\n        state.isPointerDown = true;\n      }\n    };\n\n    // Use pointer events if available. Otherwise, fall back to mouse and touch events.\n    if (typeof PointerEvent !== 'undefined') {\n      let onPointerUp = (e) => {\n        if (state.isPointerDown && state.onInteractOutside && isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n\n      // changing these to capture phase fixed combobox\n      document.addEventListener('pointerdown', onPointerDown, true);\n      document.addEventListener('pointerup', onPointerUp, true);\n\n      return () => {\n        document.removeEventListener('pointerdown', onPointerDown, true);\n        document.removeEventListener('pointerup', onPointerUp, true);\n      };\n    } else {\n      let onMouseUp = (e) => {\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n        } else if (state.isPointerDown && state.onInteractOutside && isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n\n      let onTouchEnd = (e) => {\n        state.ignoreEmulatedMouseEvents = true;\n        if (state.onInteractOutside && state.isPointerDown && isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n\n      document.addEventListener('mousedown', onPointerDown, true);\n      document.addEventListener('mouseup', onMouseUp, true);\n      document.addEventListener('touchstart', onPointerDown, true);\n      document.addEventListener('touchend', onTouchEnd, true);\n\n      return () => {\n        document.removeEventListener('mousedown', onPointerDown, true);\n        document.removeEventListener('mouseup', onMouseUp, true);\n        document.removeEventListener('touchstart', onPointerDown, true);\n        document.removeEventListener('touchend', onTouchEnd, true);\n      };\n    }\n  }, [ref, state, isDisabled]);\n}\n\nfunction isValidEvent(event, ref) {\n  if (event.button > 0) {\n    return false;\n  }\n\n  // if the event target is no longer in the document\n  if (event.target) {\n    const ownerDocument = event.target.ownerDocument;\n    if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) {\n      return false;\n    }\n  }\n\n  return ref.current && !ref.current.contains(event.target);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {BaseEvent} from '@react-types/shared';\nimport {SyntheticEvent} from 'react';\n\n/**\n * This function wraps a React event handler to make stopPropagation the default, and support continuePropagation instead.\n */\nexport function createEventHandler<T extends SyntheticEvent>(handler: (e: BaseEvent<T>) => void): (e: T) => void {\n  if (!handler) {\n    return;\n  }\n\n  let shouldStopPropagation = true;\n  return (e: T) => {\n    let event: BaseEvent<T> = {\n      ...e,\n      preventDefault() {\n        e.preventDefault();\n      },\n      isDefaultPrevented() {\n        return e.isDefaultPrevented();\n      },\n      stopPropagation() {\n        console.error('stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.');\n      },\n      continuePropagation() {\n        shouldStopPropagation = false;\n      }\n    };\n\n    handler(event);\n\n    if (shouldStopPropagation) {\n      e.stopPropagation();\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {createEventHandler} from './createEventHandler';\nimport {DOMAttributes, KeyboardEvents} from '@react-types/shared';\n\nexport interface KeyboardProps extends KeyboardEvents {\n  /** Whether the keyboard events should be disabled. */\n  isDisabled?: boolean\n}\n\nexport interface KeyboardResult {\n  /** Props to spread onto the target element. */\n  keyboardProps: DOMAttributes\n}\n\n/**\n * Handles keyboard interactions for a focusable element.\n */\nexport function useKeyboard(props: KeyboardProps): KeyboardResult {\n  return {\n    keyboardProps: props.isDisabled ? {} : {\n      onKeyDown: createEventHandler(props.onKeyDown),\n      onKeyUp: createEventHandler(props.onKeyUp)\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {disableTextSelection, restoreTextSelection}  from './textSelection';\nimport {DOMAttributes, MoveEvents, PointerType} from '@react-types/shared';\nimport React, {useMemo, useRef} from 'react';\nimport {useGlobalListeners} from '@react-aria/utils';\n\nexport interface MoveResult {\n  /** Props to spread on the target element. */\n  moveProps: DOMAttributes\n}\n\ninterface EventBase {\n  shiftKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean,\n  altKey: boolean\n}\n\n/**\n * Handles move interactions across mouse, touch, and keyboard, including dragging with\n * the mouse or touch, and using the arrow keys. Normalizes behavior across browsers and\n * platforms, and ignores emulated mouse events on touch devices.\n */\nexport function useMove(props: MoveEvents): MoveResult {\n  let {onMoveStart, onMove, onMoveEnd} = props;\n\n  let state = useRef<{\n    didMove: boolean,\n    lastPosition: {pageX: number, pageY: number} | null,\n    id: number | null\n  }>({didMove: false, lastPosition: null, id: null});\n\n  let {addGlobalListener, removeGlobalListener} = useGlobalListeners();\n\n  let moveProps = useMemo(() => {\n    let moveProps: DOMAttributes = {};\n\n    let start = () => {\n      disableTextSelection();\n      state.current.didMove = false;\n    };\n    let move = (originalEvent: EventBase, pointerType: PointerType, deltaX: number, deltaY: number) => {\n      if (deltaX === 0 && deltaY === 0) {\n        return;\n      }\n\n      if (!state.current.didMove) {\n        state.current.didMove = true;\n        onMoveStart?.({\n          type: 'movestart',\n          pointerType,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n      onMove({\n        type: 'move',\n        pointerType,\n        deltaX: deltaX,\n        deltaY: deltaY,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n    let end = (originalEvent: EventBase, pointerType: PointerType) => {\n      restoreTextSelection();\n      if (state.current.didMove) {\n        onMoveEnd?.({\n          type: 'moveend',\n          pointerType,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n    };\n\n    if (typeof PointerEvent === 'undefined') {\n      let onMouseMove = (e: MouseEvent) => {\n        if (e.button === 0) {\n          move(e, 'mouse', e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n        }\n      };\n      let onMouseUp = (e: MouseEvent) => {\n        if (e.button === 0) {\n          end(e, 'mouse');\n          removeGlobalListener(window, 'mousemove', onMouseMove, false);\n          removeGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n      moveProps.onMouseDown = (e: React.MouseEvent) => {\n        if (e.button === 0) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n          addGlobalListener(window, 'mousemove', onMouseMove, false);\n          addGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n\n      let onTouchMove = (e: TouchEvent) => {\n        let touch = [...e.changedTouches].findIndex(({identifier}) => identifier === state.current.id);\n        if (touch >= 0) {\n          let {pageX, pageY} = e.changedTouches[touch];\n          move(e, 'touch', pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {pageX, pageY};\n        }\n      };\n      let onTouchEnd = (e: TouchEvent) => {\n        let touch = [...e.changedTouches].findIndex(({identifier}) => identifier === state.current.id);\n        if (touch >= 0) {\n          end(e, 'touch');\n          state.current.id = null;\n          removeGlobalListener(window, 'touchmove', onTouchMove);\n          removeGlobalListener(window, 'touchend', onTouchEnd);\n          removeGlobalListener(window, 'touchcancel', onTouchEnd);\n        }\n      };\n      moveProps.onTouchStart = (e: React.TouchEvent) => {\n        if (e.changedTouches.length === 0 || state.current.id != null) {\n          return;\n        }\n\n        let {pageX, pageY, identifier} = e.changedTouches[0];\n        start();\n        e.stopPropagation();\n        e.preventDefault();\n        state.current.lastPosition = {pageX, pageY};\n        state.current.id = identifier;\n        addGlobalListener(window, 'touchmove', onTouchMove, false);\n        addGlobalListener(window, 'touchend', onTouchEnd, false);\n        addGlobalListener(window, 'touchcancel', onTouchEnd, false);\n      };\n    } else {\n      let onPointerMove = (e: PointerEvent) => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = (e.pointerType || 'mouse') as PointerType;\n\n          // Problems with PointerEvent#movementX/movementY:\n          // 1. it is always 0 on macOS Safari.\n          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS\n          move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n        }\n      };\n\n      let onPointerUp = (e: PointerEvent) => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = (e.pointerType || 'mouse') as PointerType;\n          end(e, pointerType);\n          state.current.id = null;\n          removeGlobalListener(window, 'pointermove', onPointerMove, false);\n          removeGlobalListener(window, 'pointerup', onPointerUp, false);\n          removeGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n\n      moveProps.onPointerDown = (e: React.PointerEvent) => {\n        if (e.button === 0 && state.current.id == null) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n          state.current.id = e.pointerId;\n          addGlobalListener(window, 'pointermove', onPointerMove, false);\n          addGlobalListener(window, 'pointerup', onPointerUp, false);\n          addGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n    }\n\n    let triggerKeyboardMove = (e: EventBase, deltaX: number, deltaY: number) => {\n      start();\n      move(e, 'keyboard', deltaX, deltaY);\n      end(e, 'keyboard');\n    };\n\n    moveProps.onKeyDown = (e) => {\n      switch (e.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, -1, 0);\n          break;\n        case 'Right':\n        case 'ArrowRight':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 1, 0);\n          break;\n        case 'Up':\n        case 'ArrowUp':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, -1);\n          break;\n        case 'Down':\n        case 'ArrowDown':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, 1);\n          break;\n      }\n    };\n\n    return moveProps;\n  }, [state, onMoveStart, onMove, onMoveEnd, addGlobalListener, removeGlobalListener]);\n\n  return {moveProps};\n}\n","/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {RefObject, useCallback} from 'react';\nimport {ScrollEvents} from '@react-types/shared';\nimport {useEvent} from '@react-aria/utils';\n\nexport interface ScrollWheelProps extends ScrollEvents {\n  /** Whether the scroll listener should be disabled. */\n  isDisabled?: boolean\n}\n\n// scroll wheel needs to be added not passively so it's cancelable, small helper hook to remember that\nexport function useScrollWheel(props: ScrollWheelProps, ref: RefObject<HTMLElement>): void {\n  let {onScroll, isDisabled} = props;\n  let onScrollHandler = useCallback((e) => {\n    // If the ctrlKey is pressed, this is a zoom event, do nothing.\n    if (e.ctrlKey) {\n      return;\n    }\n\n    // stop scrolling the page\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (onScroll) {\n      onScroll({deltaX: e.deltaX, deltaY: e.deltaY});\n    }\n  }, [onScroll]);\n\n  useEvent(ref, 'wheel', isDisabled ? null : onScrollHandler);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, LongPressEvent} from '@react-types/shared';\nimport {mergeProps, useDescription, useGlobalListeners} from '@react-aria/utils';\nimport {usePress} from './usePress';\nimport {useRef} from 'react';\n\nexport interface LongPressProps {\n  /** Whether long press events should be disabled. */\n  isDisabled?: boolean,\n  /** Handler that is called when a long press interaction starts. */\n  onLongPressStart?: (e: LongPressEvent) => void,\n  /**\n   * Handler that is called when a long press interaction ends, either\n   * over the target or when the pointer leaves the target.\n   */\n  onLongPressEnd?: (e: LongPressEvent) => void,\n  /**\n   * Handler that is called when the threshold time is met while\n   * the press is over the target.\n   */\n  onLongPress?: (e: LongPressEvent) => void,\n  /**\n   * The amount of time in milliseconds to wait before triggering a long press.\n   * @default 500ms\n   */\n  threshold?: number,\n  /**\n   * A description for assistive techology users indicating that a long press\n   * action is available, e.g. \"Long press to open menu\".\n   */\n  accessibilityDescription?: string\n}\n\nexport interface LongPressResult {\n  /** Props to spread on the target element. */\n  longPressProps: DOMAttributes\n}\n\nconst DEFAULT_THRESHOLD = 500;\n\n/**\n * Handles long press interactions across mouse and touch devices. Supports a customizable time threshold,\n * accessibility description, and normalizes behavior across browsers and devices.\n */\nexport function useLongPress(props: LongPressProps): LongPressResult {\n  let {\n    isDisabled,\n    onLongPressStart,\n    onLongPressEnd,\n    onLongPress,\n    threshold = DEFAULT_THRESHOLD,\n    accessibilityDescription\n  } = props;\n\n  const timeRef = useRef(null);\n  let {addGlobalListener, removeGlobalListener} = useGlobalListeners();\n\n  let {pressProps} = usePress({\n    isDisabled,\n    onPressStart(e) {\n      if (e.pointerType === 'mouse' || e.pointerType === 'touch') {\n        if (onLongPressStart) {\n          onLongPressStart({\n            ...e,\n            type: 'longpressstart'\n          });\n        }\n\n        timeRef.current = setTimeout(() => {\n          // Prevent other usePress handlers from also handling this event.\n          e.target.dispatchEvent(new PointerEvent('pointercancel', {bubbles: true}));\n          if (onLongPress) {\n            onLongPress({\n              ...e,\n              type: 'longpress'\n            });\n          }\n          timeRef.current = null;\n        }, threshold);\n\n        // Prevent context menu, which may be opened on long press on touch devices\n        if (e.pointerType === 'touch') {\n          let onContextMenu = e => {\n            e.preventDefault();\n          };\n\n          addGlobalListener(e.target, 'contextmenu', onContextMenu, {once: true});\n          addGlobalListener(window, 'pointerup', () => {\n            // If no contextmenu event is fired quickly after pointerup, remove the handler\n            // so future context menu events outside a long press are not prevented.\n            setTimeout(() => {\n              removeGlobalListener(e.target, 'contextmenu', onContextMenu);\n            }, 30);\n          }, {once: true});\n        }\n      }\n    },\n    onPressEnd(e) {\n      if (timeRef.current) {\n        clearTimeout(timeRef.current);\n      }\n\n      if (onLongPressEnd && (e.pointerType === 'mouse' || e.pointerType === 'touch')) {\n        onLongPressEnd({\n          ...e,\n          type: 'longpressend'\n        });\n      }\n    }\n  });\n\n  let descriptionProps = useDescription(onLongPress && !isDisabled ? accessibilityDescription : null);\n\n  return {\n    longPressProps: mergeProps(pressProps, descriptionProps)\n  };\n}\n"]},"metadata":{},"sourceType":"module"}