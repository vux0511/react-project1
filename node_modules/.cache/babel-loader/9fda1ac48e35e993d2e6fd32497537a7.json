{"ast":null,"code":"import { useSlotId as $iD7q0$useSlotId, mergeProps as $iD7q0$mergeProps, useId as $iD7q0$useId, useLabels as $iD7q0$useLabels } from \"@react-aria/utils\";\n\nfunction $d191a55c9702f145$export$8467354a121f1b9f(props) {\n  let {\n    id: id,\n    label: label,\n    'aria-labelledby': ariaLabelledby,\n    'aria-label': ariaLabel,\n    labelElementType = 'label'\n  } = props;\n  id = $iD7q0$useId(id);\n  let labelId = $iD7q0$useId();\n  let labelProps = {};\n\n  if (label) {\n    ariaLabelledby = ariaLabelledby ? `${ariaLabelledby} ${labelId}` : labelId;\n    labelProps = {\n      id: labelId,\n      htmlFor: labelElementType === 'label' ? id : undefined\n    };\n  } else if (!ariaLabelledby && !ariaLabel) console.warn('If you do not provide a visible label, you must specify an aria-label or aria-labelledby attribute for accessibility');\n\n  let fieldProps = $iD7q0$useLabels({\n    id: id,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby\n  });\n  return {\n    labelProps: labelProps,\n    fieldProps: fieldProps\n  };\n}\n\nfunction $2baaea4c71418dea$export$294aa081a6c6f55d(props) {\n  let {\n    description: description,\n    errorMessage: errorMessage,\n    validationState: validationState\n  } = props;\n  let {\n    labelProps: labelProps,\n    fieldProps: fieldProps\n  } = $d191a55c9702f145$export$8467354a121f1b9f(props);\n  let descriptionId = $iD7q0$useSlotId([Boolean(description), Boolean(errorMessage), validationState]);\n  let errorMessageId = $iD7q0$useSlotId([Boolean(description), Boolean(errorMessage), validationState]);\n  fieldProps = $iD7q0$mergeProps(fieldProps, {\n    'aria-describedby': [descriptionId, // Use aria-describedby for error message because aria-errormessage is unsupported using VoiceOver or NVDA. See https://github.com/adobe/react-spectrum/issues/1346#issuecomment-740136268\n    errorMessageId, props['aria-describedby']].filter(Boolean).join(' ') || undefined\n  });\n  return {\n    labelProps: labelProps,\n    fieldProps: fieldProps,\n    descriptionProps: {\n      id: descriptionId\n    },\n    errorMessageProps: {\n      id: errorMessageId\n    }\n  };\n}\n\nexport { $2baaea4c71418dea$export$294aa081a6c6f55d as useField, $d191a55c9702f145$export$8467354a121f1b9f as useLabel };","map":{"version":3,"mappings":";;SAoCgBA,0CAASC,OAAkC;AACzD,MAAI;AAACC,QACHA,EADE;AACAC,WACFA,KAFE;AAGF,uBAAmBC,cAHjB;AAIF,kBAAcC,SAJZ;AAKFC,oBAAgB,GAAG;AALjB,MAMAL,KANJ;AAQAC,IAAE,GAAGK,YAAK,CAACL,EAAD,CAAV;AACA,MAAIM,OAAO,GAAGD,YAAK,EAAnB;AACA,MAAIE,UAAU,GAAG,EAAjB;;AACA,MAAIN,KAAJ,EAAW;AACTC,kBAAc,GAAGA,cAAc,MAAMA,cAAe,IAAGI,OAAO,EAA/B,GAAoCA,OAAnE;AACAC,cAAU,GAAG;AACXP,QAAE,EAAEM,OADO;AAEXE,aAAO,EAAEJ,gBAAgB,KAAK,OAArB,GAA+BJ,EAA/B,GAAoCS;AAFlC,KAAb;AAID,GAND,MAMO,IAAE,CAAGP,cAAH,IAAiB,CAAKC,SAAxB,EACLO,OAAO,CAACC,IAAR,CAAa,sHAAb;;AAGF,MAAIC,UAAU,GAAGC,gBAAS,CAAC;QACzBb,EADyB;AAEzB,kBAAcG,SAFW;AAGzB,uBAAmBD;AAHM,GAAD,CAA1B;AAMA,SAAO;gBACLK,UADK;gBAELK;AAFK,GAAP;AAID;;SCtCeE,0CAASf,OAAkC;AACzD,MAAI;AAACgB,4BAAD;AAAYC,kBAAEA,YAAd;AAA0BC,qBAAEA;AAA5B,MAA+ClB,KAAnD;AACA,MAAI;AAACQ,0BAAD;AAAWK,gBAAEA;AAAb,MAA2Bd,yCAAQ,CAACC,KAAD,CAAvC;AAEA,MAAImB,aAAa,GAAGC,gBAAS,CAAC,CAACC,OAAO,CAACL,WAAD,CAAR,EAAuBK,OAAO,CAACJ,YAAD,CAA9B,EAA8CC,eAA9C,CAAD,CAA7B;AACA,MAAII,cAAc,GAAGF,gBAAS,CAAC,CAACC,OAAO,CAACL,WAAD,CAAR,EAAuBK,OAAO,CAACJ,YAAD,CAA9B,EAA8CC,eAA9C,CAAD,CAA9B;AAEAL,YAAU,GAAGU,iBAAU,CAACV,UAAD,EAAa;AAClC,wBAAoB,CAClBM,aADkB,EAElB;AACAG,kBAHkB,EAIlBtB,KAAK,CAAC,kBAAD,CAJa,EAKlBwB,MALkB,CAKXH,OALW,EAKFI,IALE,CAKG,GALH,KAKWf;AANG,GAAb,CAAvB;AASA,SAAO;gBACLF,UADK;gBAELK,UAFK;AAGLa,oBAAgB,EAAE;AAChBzB,QAAE,EAAEkB;AADY,KAHb;AAMLQ,qBAAiB,EAAE;AACjB1B,QAAE,EAAEqB;AADa;AANd,GAAP;AAUD","names":["$d191a55c9702f145$export$8467354a121f1b9f","props","id","label","ariaLabelledby","ariaLabel","labelElementType","$iD7q0$useId","labelId","labelProps","htmlFor","undefined","console","warn","fieldProps","$iD7q0$useLabels","$2baaea4c71418dea$export$294aa081a6c6f55d","description","errorMessage","validationState","descriptionId","$iD7q0$useSlotId","Boolean","errorMessageId","$iD7q0$mergeProps","filter","join","descriptionProps","errorMessageProps"],"sources":["/Users/vux/dev/react-project1/node_modules/@react-aria/label/dist/packages/@react-aria/label/src/useLabel.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/label/dist/packages/@react-aria/label/src/useField.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLabelingProps, DOMAttributes, DOMProps, LabelableProps} from '@react-types/shared';\nimport {ElementType, LabelHTMLAttributes} from 'react';\nimport {useId, useLabels} from '@react-aria/utils';\n\nexport interface LabelAriaProps extends LabelableProps, DOMProps, AriaLabelingProps {\n  /**\n   * The HTML element used to render the label, e.g. 'label', or 'span'.\n   * @default 'label'\n   */\n  labelElementType?: ElementType\n}\n\nexport interface LabelAria {\n  /** Props to apply to the label container element. */\n  labelProps: DOMAttributes | LabelHTMLAttributes<HTMLLabelElement>,\n  /** Props to apply to the field container element being labeled. */\n  fieldProps: AriaLabelingProps & DOMProps\n}\n\n/**\n * Provides the accessibility implementation for labels and their associated elements.\n * Labels provide context for user inputs.\n * @param props - The props for labels and fields.\n */\nexport function useLabel(props: LabelAriaProps): LabelAria {\n  let {\n    id,\n    label,\n    'aria-labelledby': ariaLabelledby,\n    'aria-label': ariaLabel,\n    labelElementType = 'label'\n  } = props;\n\n  id = useId(id);\n  let labelId = useId();\n  let labelProps = {};\n  if (label) {\n    ariaLabelledby = ariaLabelledby ? `${ariaLabelledby} ${labelId}` : labelId;\n    labelProps = {\n      id: labelId,\n      htmlFor: labelElementType === 'label' ? id : undefined\n    };\n  } else if (!ariaLabelledby && !ariaLabel) {\n    console.warn('If you do not provide a visible label, you must specify an aria-label or aria-labelledby attribute for accessibility');\n  }\n\n  let fieldProps = useLabels({\n    id,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby\n  });\n\n  return {\n    labelProps,\n    fieldProps\n  };\n}\n","/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, HelpTextProps, Validation} from '@react-types/shared';\nimport {LabelAria, LabelAriaProps, useLabel} from './useLabel';\nimport {mergeProps, useSlotId} from '@react-aria/utils';\n\nexport interface AriaFieldProps extends LabelAriaProps, HelpTextProps, Omit<Validation, 'isRequired'> {}\n\nexport interface FieldAria extends LabelAria {\n  /** Props for the description element, if any. */\n  descriptionProps: DOMAttributes,\n  /** Props for the error message element, if any. */\n  errorMessageProps: DOMAttributes\n}\n\n/**\n * Provides the accessibility implementation for input fields.\n * Fields accept user input, gain context from their label, and may display a description or error message.\n * @param props - Props for the Field.\n */\nexport function useField(props: AriaFieldProps): FieldAria {\n  let {description, errorMessage, validationState} = props;\n  let {labelProps, fieldProps} = useLabel(props);\n\n  let descriptionId = useSlotId([Boolean(description), Boolean(errorMessage), validationState]);\n  let errorMessageId = useSlotId([Boolean(description), Boolean(errorMessage), validationState]);\n\n  fieldProps = mergeProps(fieldProps, {\n    'aria-describedby': [\n      descriptionId,\n      // Use aria-describedby for error message because aria-errormessage is unsupported using VoiceOver or NVDA. See https://github.com/adobe/react-spectrum/issues/1346#issuecomment-740136268\n      errorMessageId,\n      props['aria-describedby']\n    ].filter(Boolean).join(' ') || undefined\n  });\n\n  return {\n    labelProps,\n    fieldProps,\n    descriptionProps: {\n      id: descriptionId\n    },\n    errorMessageProps: {\n      id: errorMessageId\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}