{"ast":null,"code":"import $1DoQa$intlmessageformat from \"intl-messageformat\";\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/*\n* Copyright 2020 Adobe. All rights reserved.\n* This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License. You may obtain a copy\n* of the License at http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software distributed under\n* the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n* OF ANY KIND, either express or implied. See the License for the specific language\n* governing permissions and limitations under the License.\n*/\n\nclass $d6fd23bc337660df$export$64839e615120df17 {\n  getStringForLocale(key, locale) {\n    let strings = this.messages[locale];\n\n    if (!strings) {\n      strings = $d6fd23bc337660df$var$getStringsForLocale(locale, this.messages, this.defaultLocale);\n      this.messages[locale] = strings;\n    }\n\n    let string = strings[key];\n    if (!string) throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n    return string;\n  }\n\n  constructor(messages) {\n    let defaultLocale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"en-US\";\n    // Clone messages so we don't modify the original object.\n    this.messages = { ...messages\n    };\n    this.defaultLocale = defaultLocale;\n  }\n\n}\n\nfunction $d6fd23bc337660df$var$getStringsForLocale(locale, strings) {\n  let defaultLocale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"en-US\";\n  // If there is an exact match, use it.\n  if (strings[locale]) return strings[locale]; // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n\n  let language = $d6fd23bc337660df$var$getLanguage(locale);\n  if (strings[language]) return strings[language];\n\n  for (let key in strings) {\n    if (key.startsWith(language + \"-\")) return strings[key];\n  } // Nothing close, use english.\n\n\n  return strings[defaultLocale];\n}\n\nfunction $d6fd23bc337660df$var$getLanguage(locale) {\n  // @ts-ignore\n  if (Intl.Locale) // @ts-ignore\n    return new Intl.Locale(locale).language;\n  return locale.split(\"-\")[0];\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n\nclass $972eb555d604f491$export$526ebc05ff964723 {\n  format(key, variables) {\n    let message = this.cache[key];\n\n    if (!message) {\n      let msg = this.messages.getStringForLocale(key, this.locale);\n      if (!msg) throw new Error(`Could not find intl message ${key} in ${this.locale} locale`);\n      message = new (0, $1DoQa$intlmessageformat)(msg, this.locale);\n      this.cache[key] = message;\n    }\n\n    let varCopy;\n    if (variables) varCopy = Object.keys(variables).reduce((acc, key) => {\n      acc[key] = variables[key] == null ? false : variables[key];\n      return acc;\n    }, {});\n    return message.format(varCopy);\n  }\n\n  constructor(locale, messages) {\n    this.locale = locale;\n    this.messages = messages;\n    this.cache = {};\n  }\n\n}\n\nexport { $d6fd23bc337660df$export$64839e615120df17 as MessageDictionary, $972eb555d604f491$export$526ebc05ff964723 as MessageFormatter };","map":{"version":3,"mappings":"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","names":["$d6fd23bc337660df$export$64839e615120df17","getStringForLocale","key","locale","strings","messages","$d6fd23bc337660df$var$getStringsForLocale","defaultLocale","string","Error","constructor","language","$d6fd23bc337660df$var$getLanguage","startsWith","Intl","Locale","split","$972eb555d604f491$export$526ebc05ff964723","format","variables","message","cache","msg","varCopy","Object","keys","reduce","acc"],"sources":["/Users/vux/dev/react-project1/node_modules/@internationalized/message/dist/packages/@internationalized/message/src/index.ts","/Users/vux/dev/react-project1/node_modules/@internationalized/message/dist/packages/@internationalized/message/src/MessageDictionary.ts","/Users/vux/dev/react-project1/node_modules/@internationalized/message/dist/packages/@internationalized/message/src/MessageFormatter.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {LocalizedStrings} from './MessageDictionary';\nexport {MessageDictionary} from './MessageDictionary';\nexport {MessageFormatter} from './MessageFormatter';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type LocalizedStrings = {\n  [lang: string]: {\n    [key: string]: string\n  }\n};\n\n/**\n * Stores a mapping of localized strings. Can be used to find the\n * closest available string for a given locale.\n */\nexport class MessageDictionary {\n  private messages: LocalizedStrings;\n  private defaultLocale: string;\n\n  constructor(messages: LocalizedStrings, defaultLocale: string = 'en-US') {\n    // Clone messages so we don't modify the original object.\n    this.messages = {...messages};\n    this.defaultLocale = defaultLocale;\n  }\n\n  getStringForLocale(key: string, locale: string) {\n    let strings = this.messages[locale];\n    if (!strings) {\n      strings = getStringsForLocale(locale, this.messages, this.defaultLocale);\n      this.messages[locale] = strings;\n    }\n\n    let string = strings[key];\n    if (!string) {\n      throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n    }\n\n    return string;\n  }\n}\n\nfunction getStringsForLocale(locale: string, strings: LocalizedStrings, defaultLocale = 'en-US') {\n  // If there is an exact match, use it.\n  if (strings[locale]) {\n    return strings[locale];\n  }\n\n  // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n  let language = getLanguage(locale);\n  if (strings[language]) {\n    return strings[language];\n  }\n\n  for (let key in strings) {\n    if (key.startsWith(language + '-')) {\n      return strings[key];\n    }\n  }\n\n  // Nothing close, use english.\n  return strings[defaultLocale];\n}\n\nfunction getLanguage(locale: string) {\n  // @ts-ignore\n  if (Intl.Locale) {\n    // @ts-ignore\n    return new Intl.Locale(locale).language;\n  }\n\n  return locale.split('-')[0];\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FormatXMLElementFn, PrimitiveType} from 'intl-messageformat/src/formatters';\nimport IntlMessageFormat from 'intl-messageformat';\nimport {MessageDictionary} from './MessageDictionary';\n\n/**\n * Formats ICU Message strings to create localized strings from a MessageDictionary.\n */\nexport class MessageFormatter {\n  private locale: string;\n  private messages: MessageDictionary;\n  private cache: {[key: string]: IntlMessageFormat};\n\n  constructor(locale: string, messages: MessageDictionary) {\n    this.locale = locale;\n    this.messages = messages;\n    this.cache = {};\n  }\n\n  format<T = void>(key: string, variables: Record<string, PrimitiveType | T | FormatXMLElementFn<T, string | T | (string | T)[]>> | undefined) {\n    let message = this.cache[key];\n    if (!message) {\n      let msg = this.messages.getStringForLocale(key, this.locale);\n      if (!msg) {\n        throw new Error(`Could not find intl message ${key} in ${this.locale} locale`);\n      }\n\n      message = new IntlMessageFormat(msg, this.locale);\n      this.cache[key] = message;\n    }\n    let varCopy: Record<string, PrimitiveType | T | FormatXMLElementFn<T, string | T | (string | T)[]>> | undefined;\n    if (variables) {\n      varCopy = Object.keys(variables).reduce((acc, key) => {\n        acc[key] = variables[key] == null ? false : variables[key];\n        return acc;\n      }, {});\n    }\n\n    return message.format(varCopy);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}