{"ast":null,"code":"/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/*\n* Copyright 2022 Adobe. All rights reserved.\n* This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License. You may obtain a copy\n* of the License at http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software distributed under\n* the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n* OF ANY KIND, either express or implied. See the License for the specific language\n* governing permissions and limitations under the License.\n*/\nclass $5b160d28a433310d$export$c17fa47878dc55b6 {\n  /** Returns a localized string for the given key and locale. */\n  getStringForLocale(key, locale) {\n    let strings = this.strings[locale];\n\n    if (!strings) {\n      strings = $5b160d28a433310d$var$getStringsForLocale(locale, this.strings, this.defaultLocale);\n      this.strings[locale] = strings;\n    }\n\n    let string = strings[key];\n    if (!string) throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n    return string;\n  }\n\n  constructor(messages) {\n    let defaultLocale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"en-US\";\n    // Clone messages so we don't modify the original object.\n    this.strings = { ...messages\n    };\n    this.defaultLocale = defaultLocale;\n  }\n\n}\n\nfunction $5b160d28a433310d$var$getStringsForLocale(locale, strings) {\n  let defaultLocale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"en-US\";\n  // If there is an exact match, use it.\n  if (strings[locale]) return strings[locale]; // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n\n  let language = $5b160d28a433310d$var$getLanguage(locale);\n  if (strings[language]) return strings[language];\n\n  for (let key in strings) {\n    if (key.startsWith(language + \"-\")) return strings[key];\n  } // Nothing close, use english.\n\n\n  return strings[defaultLocale];\n}\n\nfunction $5b160d28a433310d$var$getLanguage(locale) {\n  // @ts-ignore\n  if (Intl.Locale) // @ts-ignore\n    return new Intl.Locale(locale).language;\n  return locale.split(\"-\")[0];\n}\n/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n\nconst $6db58dc88e78b024$var$pluralRulesCache = new Map();\nconst $6db58dc88e78b024$var$numberFormatCache = new Map();\n\nclass $6db58dc88e78b024$export$2f817fcdc4b89ae0 {\n  /** Formats a localized string for the given key with the provided variables. */\n  format(key, variables) {\n    let message = this.strings.getStringForLocale(key, this.locale);\n    return typeof message === \"function\" ? message(variables, this) : message;\n  }\n\n  plural(count, options) {\n    let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"cardinal\";\n    let opt = options[\"=\" + count];\n    if (opt) return typeof opt === \"function\" ? opt() : opt;\n    let key = this.locale + \":\" + type;\n    let pluralRules = $6db58dc88e78b024$var$pluralRulesCache.get(key);\n\n    if (!pluralRules) {\n      pluralRules = new Intl.PluralRules(this.locale, {\n        type: type\n      });\n      $6db58dc88e78b024$var$pluralRulesCache.set(key, pluralRules);\n    }\n\n    let selected = pluralRules.select(count);\n    opt = options[selected] || options.other;\n    return typeof opt === \"function\" ? opt() : opt;\n  }\n\n  number(value) {\n    let numberFormat = $6db58dc88e78b024$var$numberFormatCache.get(this.locale);\n\n    if (!numberFormat) {\n      numberFormat = new Intl.NumberFormat(this.locale);\n      $6db58dc88e78b024$var$numberFormatCache.set(this.locale, numberFormat);\n    }\n\n    return numberFormat.format(value);\n  }\n\n  select(options, value) {\n    let opt = options[value] || options.other;\n    return typeof opt === \"function\" ? opt() : opt;\n  }\n\n  constructor(locale, strings) {\n    this.locale = locale;\n    this.strings = strings;\n  }\n\n}\n\nexport { $5b160d28a433310d$export$c17fa47878dc55b6 as LocalizedStringDictionary, $6db58dc88e78b024$export$2f817fcdc4b89ae0 as LocalizedStringFormatter };","map":{"version":3,"mappings":"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","names":["$5b160d28a433310d$export$c17fa47878dc55b6","getStringForLocale","key","locale","strings","$5b160d28a433310d$var$getStringsForLocale","defaultLocale","string","Error","constructor","messages","language","$5b160d28a433310d$var$getLanguage","startsWith","Intl","Locale","split","$6db58dc88e78b024$var$pluralRulesCache","Map","$6db58dc88e78b024$var$numberFormatCache","$6db58dc88e78b024$export$2f817fcdc4b89ae0","format","variables","message","plural","count","options","type","opt","pluralRules","get","PluralRules","set","selected","select","other","number","value","numberFormat","NumberFormat"],"sources":["/Users/vux/dev/react-project1/node_modules/@internationalized/string/dist/packages/@internationalized/string/src/index.ts","/Users/vux/dev/react-project1/node_modules/@internationalized/string/dist/packages/@internationalized/string/src/LocalizedStringDictionary.ts","/Users/vux/dev/react-project1/node_modules/@internationalized/string/dist/packages/@internationalized/string/src/LocalizedStringFormatter.ts"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {Variables, LocalizedString} from './LocalizedStringFormatter';\nexport type {LocalizedStrings} from './LocalizedStringDictionary';\nexport {LocalizedStringDictionary} from './LocalizedStringDictionary';\nexport {LocalizedStringFormatter} from './LocalizedStringFormatter';\n","/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport type {LocalizedString} from './LocalizedStringFormatter';\n\nexport type LocalizedStrings<K extends string, T extends LocalizedString> = {\n  [lang: string]: Record<K, T>\n};\n\n/**\n * Stores a mapping of localized strings. Can be used to find the\n * closest available string for a given locale.\n */\nexport class LocalizedStringDictionary<K extends string = string, T extends LocalizedString = string> {\n  private strings: LocalizedStrings<K, T>;\n  private defaultLocale: string;\n\n  constructor(messages: LocalizedStrings<K, T>, defaultLocale: string = 'en-US') {\n    // Clone messages so we don't modify the original object.\n    this.strings = {...messages};\n    this.defaultLocale = defaultLocale;\n  }\n\n  /** Returns a localized string for the given key and locale. */\n  getStringForLocale(key: K, locale: string): T {\n    let strings = this.strings[locale];\n    if (!strings) {\n      strings = getStringsForLocale(locale, this.strings, this.defaultLocale);\n      this.strings[locale] = strings;\n    }\n\n    let string = strings[key];\n    if (!string) {\n      throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n    }\n\n    return string;\n  }\n}\n\nfunction getStringsForLocale<K extends string, T extends LocalizedString>(locale: string, strings: LocalizedStrings<K, T>, defaultLocale = 'en-US') {\n  // If there is an exact match, use it.\n  if (strings[locale]) {\n    return strings[locale];\n  }\n\n  // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n  let language = getLanguage(locale);\n  if (strings[language]) {\n    return strings[language];\n  }\n\n  for (let key in strings) {\n    if (key.startsWith(language + '-')) {\n      return strings[key];\n    }\n  }\n\n  // Nothing close, use english.\n  return strings[defaultLocale];\n}\n\nfunction getLanguage(locale: string) {\n  // @ts-ignore\n  if (Intl.Locale) {\n    // @ts-ignore\n    return new Intl.Locale(locale).language;\n  }\n\n  return locale.split('-')[0];\n}\n","/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport type {LocalizedStringDictionary} from './LocalizedStringDictionary';\n\nexport type Variables = Record<string, string | number | boolean> | undefined;\nexport type LocalizedString = string | ((args: Variables, formatter?: LocalizedStringFormatter<any, any>) => string);\ntype InternalString = string | (() => string);\n\nconst pluralRulesCache = new Map<string, Intl.PluralRules>();\nconst numberFormatCache = new Map<string, Intl.NumberFormat>();\n\n/**\n * Formats localized strings from a LocalizedStringDictionary. Supports interpolating variables,\n * selecting the correct pluralization, and formatting numbers for the locale.\n */\nexport class LocalizedStringFormatter<K extends string = string, T extends LocalizedString = string> {\n  private locale: string;\n  private strings: LocalizedStringDictionary<K, T>;\n\n  constructor(locale: string, strings: LocalizedStringDictionary<K, T>) {\n    this.locale = locale;\n    this.strings = strings;\n  }\n\n  /** Formats a localized string for the given key with the provided variables. */\n  format(key: K, variables?: Variables): string {\n    let message = this.strings.getStringForLocale(key, this.locale);\n    return typeof message === 'function' ? message(variables, this) : message;\n  }\n\n  protected plural(count: number, options: Record<string, InternalString>, type: Intl.PluralRuleType = 'cardinal') {\n    let opt = options['=' + count];\n    if (opt) {\n      return typeof opt === 'function' ? opt() : opt;\n    }\n\n    let key = this.locale + ':' + type;\n    let pluralRules = pluralRulesCache.get(key);\n    if (!pluralRules) {\n      pluralRules = new Intl.PluralRules(this.locale, {type});\n      pluralRulesCache.set(key, pluralRules);\n    }\n\n    let selected = pluralRules.select(count);\n    opt = options[selected] || options.other;\n    return typeof opt === 'function' ? opt() : opt;\n  }\n\n  protected number(value: number) {\n    let numberFormat = numberFormatCache.get(this.locale);\n    if (!numberFormat) {\n      numberFormat = new Intl.NumberFormat(this.locale);\n      numberFormatCache.set(this.locale, numberFormat);\n    }\n    return numberFormat.format(value);\n  }\n\n  protected select(options: Record<string, InternalString>, value: string) {\n    let opt = options[value] || options.other;\n    return typeof opt === 'function' ? opt() : opt;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}