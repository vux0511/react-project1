{"ast":null,"code":"/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/*\n* Copyright 2020 Adobe. All rights reserved.\n* This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License. You may obtain a copy\n* of the License at http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software distributed under\n* the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n* OF ANY KIND, either express or implied. See the License for the specific language\n* governing permissions and limitations under the License.\n*/\nlet $488c6ddbf4ef74c2$var$formatterCache = new Map();\nlet $488c6ddbf4ef74c2$var$supportsSignDisplay = false;\n\ntry {\n  // @ts-ignore\n  $488c6ddbf4ef74c2$var$supportsSignDisplay = new Intl.NumberFormat(\"de-DE\", {\n    signDisplay: \"exceptZero\"\n  }).resolvedOptions().signDisplay === \"exceptZero\"; // eslint-disable-next-line no-empty\n} catch (e) {}\n\nlet $488c6ddbf4ef74c2$var$supportsUnit = false;\n\ntry {\n  // @ts-ignore\n  $488c6ddbf4ef74c2$var$supportsUnit = new Intl.NumberFormat(\"de-DE\", {\n    style: \"unit\",\n    unit: \"degree\"\n  }).resolvedOptions().style === \"unit\"; // eslint-disable-next-line no-empty\n} catch (e1) {} // Polyfill for units since Safari doesn't support them yet. See https://bugs.webkit.org/show_bug.cgi?id=215438.\n// Currently only polyfilling the unit degree in narrow format for ColorSlider in our supported locales.\n// Values were determined by switching to each locale manually in Chrome.\n\n\nconst $488c6ddbf4ef74c2$var$UNITS = {\n  degree: {\n    narrow: {\n      default: \"\\xb0\",\n      \"ja-JP\": \" 度\",\n      \"zh-TW\": \"度\",\n      \"sl-SI\": \" \\xb0\"\n    }\n  }\n};\n\nclass $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5 {\n  /** Formats a number value as a string, according to the locale and options provided to the constructor. */\n  format(value) {\n    let res = \"\";\n    if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null) res = $488c6ddbf4ef74c2$export$711b50b3c525e0f2(this.numberFormatter, this.options.signDisplay, value);else res = this.numberFormatter.format(value);\n\n    if (this.options.style === \"unit\" && !$488c6ddbf4ef74c2$var$supportsUnit) {\n      var _UNITS_unit;\n\n      let {\n        unit: unit,\n        unitDisplay = \"short\",\n        locale: locale\n      } = this.resolvedOptions();\n      let values = (_UNITS_unit = $488c6ddbf4ef74c2$var$UNITS[unit]) === null || _UNITS_unit === void 0 ? void 0 : _UNITS_unit[unitDisplay];\n      res += values[locale] || values.default;\n    }\n\n    return res;\n  }\n  /** Formats a number to an array of parts such as separators, digits, punctuation, and more. */\n\n\n  formatToParts(value) {\n    // TODO: implement signDisplay for formatToParts\n    // @ts-ignore\n    return this.numberFormatter.formatToParts(value);\n  }\n  /** Formats a number range as a string. */\n\n\n  formatRange(start, end) {\n    // @ts-ignore\n    if (typeof this.numberFormatter.formatRange === \"function\") // @ts-ignore\n      return this.numberFormatter.formatRange(start, end);\n    if (end < start) throw new RangeError(\"End date must be >= start date\"); // Very basic fallback for old browsers.\n\n    return `${this.format(start)} – ${this.format(end)}`;\n  }\n  /** Formats a number range as an array of parts. */\n\n\n  formatRangeToParts(start, end) {\n    // @ts-ignore\n    if (typeof this.numberFormatter.formatRangeToParts === \"function\") // @ts-ignore\n      return this.numberFormatter.formatRangeToParts(start, end);\n    if (end < start) throw new RangeError(\"End date must be >= start date\");\n    let startParts = this.numberFormatter.formatToParts(start);\n    let endParts = this.numberFormatter.formatToParts(end);\n    return [...startParts.map(p => ({ ...p,\n      source: \"startRange\"\n    })), {\n      type: \"literal\",\n      value: \" – \",\n      source: \"shared\"\n    }, ...endParts.map(p => ({ ...p,\n      source: \"endRange\"\n    }))];\n  }\n  /** Returns the resolved formatting options based on the values passed to the constructor. */\n\n\n  resolvedOptions() {\n    let options = this.numberFormatter.resolvedOptions();\n    if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null) options = { ...options,\n      signDisplay: this.options.signDisplay\n    };\n    if (!$488c6ddbf4ef74c2$var$supportsUnit && this.options.style === \"unit\") options = { ...options,\n      style: \"unit\",\n      unit: this.options.unit,\n      unitDisplay: this.options.unitDisplay\n    };\n    return options;\n  }\n\n  constructor(locale) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.numberFormatter = $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale, options);\n    this.options = options;\n  }\n\n}\n\nfunction $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let {\n    numberingSystem: numberingSystem\n  } = options;\n  if (numberingSystem && locale.indexOf(\"-u-nu-\") === -1) locale = `${locale}-u-nu-${numberingSystem}`;\n\n  if (options.style === \"unit\" && !$488c6ddbf4ef74c2$var$supportsUnit) {\n    var _UNITS_unit;\n\n    let {\n      unit: unit,\n      unitDisplay = \"short\"\n    } = options;\n    if (!unit) throw new Error('unit option must be provided with style: \"unit\"');\n    if (!((_UNITS_unit = $488c6ddbf4ef74c2$var$UNITS[unit]) === null || _UNITS_unit === void 0 ? void 0 : _UNITS_unit[unitDisplay])) throw new Error(`Unsupported unit ${unit} with unitDisplay = ${unitDisplay}`);\n    options = { ...options,\n      style: \"decimal\"\n    };\n  }\n\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : \"\");\n  if ($488c6ddbf4ef74c2$var$formatterCache.has(cacheKey)) return $488c6ddbf4ef74c2$var$formatterCache.get(cacheKey);\n  let numberFormatter = new Intl.NumberFormat(locale, options);\n  $488c6ddbf4ef74c2$var$formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\n\nfunction $488c6ddbf4ef74c2$export$711b50b3c525e0f2(numberFormat, signDisplay, num) {\n  if (signDisplay === \"auto\") return numberFormat.format(num);else if (signDisplay === \"never\") return numberFormat.format(Math.abs(num));else {\n    let needsPositiveSign = false;\n    if (signDisplay === \"always\") needsPositiveSign = num > 0 || Object.is(num, 0);else if (signDisplay === \"exceptZero\") {\n      if (Object.is(num, -0) || Object.is(num, 0)) num = Math.abs(num);else needsPositiveSign = num > 0;\n    }\n\n    if (needsPositiveSign) {\n      let negative = numberFormat.format(-num);\n      let noSign = numberFormat.format(num); // ignore RTL/LTR marker character\n\n      let minus = negative.replace(noSign, \"\").replace(/\\u200e|\\u061C/, \"\");\n      if ([...minus].length !== 1) console.warn(\"@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case\");\n      let positive = negative.replace(noSign, \"!!!\").replace(minus, \"+\").replace(\"!!!\", noSign);\n      return positive;\n    } else return numberFormat.format(num);\n  }\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n\nconst $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX = new RegExp(\"^.*\\\\(.*\\\\).*$\");\nconst $6c7bd7858deea686$var$NUMBERING_SYSTEMS = [\"latn\", \"arab\", \"hanidec\"];\n\nclass $6c7bd7858deea686$export$cd11ab140839f11d {\n  /**\n  * Parses the given string to a number. Returns NaN if a valid number could not be parsed.\n  */\n  parse(value) {\n    return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).parse(value);\n  }\n  /**\n  * Returns whether the given string could potentially be a valid number. This should be used to\n  * validate user input as the user types. If a `minValue` or `maxValue` is provided, the validity\n  * of the minus/plus sign characters can be checked.\n  */\n\n\n  isValidPartialNumber(value, minValue, maxValue) {\n    return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).isValidPartialNumber(value, minValue, maxValue);\n  }\n  /**\n  * Returns a numbering system for which the given string is valid in the current locale.\n  * If no numbering system could be detected, the default numbering system for the current\n  * locale is returned.\n  */\n\n\n  getNumberingSystem(value) {\n    return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).options.numberingSystem;\n  }\n\n  constructor(locale) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.locale = locale;\n    this.options = options;\n  }\n\n}\n\nconst $6c7bd7858deea686$var$numberParserCache = new Map();\n\nfunction $6c7bd7858deea686$var$getNumberParserImpl(locale, options, value) {\n  // First try the default numbering system for the provided locale\n  let defaultParser = $6c7bd7858deea686$var$getCachedNumberParser(locale, options); // If that doesn't match, and the locale doesn't include a hard coded numbering system,\n  // try each of the other supported numbering systems until we find one that matches.\n\n  if (!locale.includes(\"-nu-\") && !defaultParser.isValidPartialNumber(value)) {\n    for (let numberingSystem of $6c7bd7858deea686$var$NUMBERING_SYSTEMS) if (numberingSystem !== defaultParser.options.numberingSystem) {\n      let parser = $6c7bd7858deea686$var$getCachedNumberParser(locale + (locale.includes(\"-u-\") ? \"-nu-\" : \"-u-nu-\") + numberingSystem, options);\n      if (parser.isValidPartialNumber(value)) return parser;\n    }\n  }\n\n  return defaultParser;\n}\n\nfunction $6c7bd7858deea686$var$getCachedNumberParser(locale, options) {\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : \"\");\n  let parser = $6c7bd7858deea686$var$numberParserCache.get(cacheKey);\n\n  if (!parser) {\n    parser = new $6c7bd7858deea686$var$NumberParserImpl(locale, options);\n    $6c7bd7858deea686$var$numberParserCache.set(cacheKey, parser);\n  }\n\n  return parser;\n} // The actual number parser implementation. Instances of this class are cached\n// based on the locale, options, and detected numbering system.\n\n\nclass $6c7bd7858deea686$var$NumberParserImpl {\n  parse(value) {\n    // to parse the number, we need to remove anything that isn't actually part of the number, for example we want '-10.40' not '-10.40 USD'\n    let fullySanitizedValue = this.sanitize(value); // Remove group characters, and replace decimal points and numerals with ASCII values.\n\n    fullySanitizedValue = $6c7bd7858deea686$var$replaceAll(fullySanitizedValue, this.symbols.group, \"\").replace(this.symbols.decimal, \".\").replace(this.symbols.minusSign, \"-\").replace(this.symbols.numeral, this.symbols.index);\n    let newValue = fullySanitizedValue ? +fullySanitizedValue : NaN;\n    if (isNaN(newValue)) return NaN; // accounting will always be stripped to a positive number, so if it's accounting and has a () around everything, then we need to make it negative again\n\n    if (this.options.currencySign === \"accounting\" && $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX.test(value)) newValue = -1 * newValue; // when reading the number, if it's a percent, then it should be interpreted as being divided by 100\n\n    if (this.options.style === \"percent\") {\n      newValue /= 100;\n\n      var _this_options_maximumFractionDigits; // after dividing to get the percent value, javascript may get .0210999999 instead of .0211, so fix the number of fraction digits\n\n\n      newValue = +newValue.toFixed(((_this_options_maximumFractionDigits = this.options.maximumFractionDigits) !== null && _this_options_maximumFractionDigits !== void 0 ? _this_options_maximumFractionDigits : 0) + 2);\n    }\n\n    return newValue;\n  }\n\n  sanitize(value) {\n    // Remove literals and whitespace, which are allowed anywhere in the string\n    value = value.replace(this.symbols.literals, \"\"); // Replace the ASCII minus sign with the minus sign used in the current locale\n    // so that both are allowed in case the user's keyboard doesn't have the locale's minus sign.\n\n    value = value.replace(\"-\", this.symbols.minusSign); // In arab numeral system, their decimal character is 1643, but most keyboards don't type that\n    // instead they use the , (44) character or apparently the (1548) character.\n\n    if (this.options.numberingSystem === \"arab\") {\n      value = value.replace(\",\", this.symbols.decimal);\n      value = value.replace(String.fromCharCode(1548), this.symbols.decimal);\n      value = $6c7bd7858deea686$var$replaceAll(value, \".\", this.symbols.group);\n    } // fr-FR group character is char code 8239, but that's not a key on the french keyboard,\n    // so allow 'period' as a group char and replace it with a space\n\n\n    if (this.options.locale === \"fr-FR\") value = $6c7bd7858deea686$var$replaceAll(value, \".\", String.fromCharCode(8239));\n    return value;\n  }\n\n  isValidPartialNumber(value) {\n    let minValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -Infinity;\n    let maxValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;\n    value = this.sanitize(value); // Remove minus or plus sign, which must be at the start of the string.\n\n    if (value.startsWith(this.symbols.minusSign) && minValue < 0) value = value.slice(this.symbols.minusSign.length);else if (this.symbols.plusSign && value.startsWith(this.symbols.plusSign) && maxValue > 0) value = value.slice(this.symbols.plusSign.length); // Numbers cannot start with a group separator\n\n    if (value.startsWith(this.symbols.group)) return false; // Remove numerals, groups, and decimals\n\n    value = $6c7bd7858deea686$var$replaceAll(value, this.symbols.group, \"\").replace(this.symbols.numeral, \"\").replace(this.symbols.decimal, \"\"); // The number is valid if there are no remaining characters\n\n    return value.length === 0;\n  }\n\n  constructor(locale) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.formatter = new Intl.NumberFormat(locale, options);\n    this.options = this.formatter.resolvedOptions();\n    this.symbols = $6c7bd7858deea686$var$getSymbols(this.formatter, this.options, options);\n  }\n\n}\n\nconst $6c7bd7858deea686$var$nonLiteralParts = new Set([\"decimal\", \"fraction\", \"integer\", \"minusSign\", \"plusSign\", \"group\"]);\n\nfunction $6c7bd7858deea686$var$getSymbols(formatter, intlOptions, originalOptions) {\n  var _allParts_find, _posAllParts_find, _allParts_find1, _allParts_find2; // Note: some locale's don't add a group symbol until there is a ten thousands place\n\n\n  let allParts = formatter.formatToParts(-10000.111);\n  let posAllParts = formatter.formatToParts(10000.111);\n  let singularParts = formatter.formatToParts(1);\n\n  var _allParts_find_value;\n\n  let minusSign = (_allParts_find_value = (_allParts_find = allParts.find(p => p.type === \"minusSign\")) === null || _allParts_find === void 0 ? void 0 : _allParts_find.value) !== null && _allParts_find_value !== void 0 ? _allParts_find_value : \"-\";\n  let plusSign = (_posAllParts_find = posAllParts.find(p => p.type === \"plusSign\")) === null || _posAllParts_find === void 0 ? void 0 : _posAllParts_find.value; // Safari does not support the signDisplay option, but our number parser polyfills it.\n  // If no plus sign was returned, but the original options contained signDisplay, default to the '+' character.\n  // @ts-ignore\n\n  if (!plusSign && ((originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === \"exceptZero\" || (originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === \"always\")) plusSign = \"+\";\n  let decimal = (_allParts_find1 = allParts.find(p => p.type === \"decimal\")) === null || _allParts_find1 === void 0 ? void 0 : _allParts_find1.value;\n  let group = (_allParts_find2 = allParts.find(p => p.type === \"group\")) === null || _allParts_find2 === void 0 ? void 0 : _allParts_find2.value; // this set is also for a regex, it's all literals that might be in the string we want to eventually parse that\n  // don't contribute to the numerical value\n\n  let pluralLiterals = allParts.filter(p => !$6c7bd7858deea686$var$nonLiteralParts.has(p.type)).map(p => $6c7bd7858deea686$var$escapeRegex(p.value));\n  let singularLiterals = singularParts.filter(p => !$6c7bd7858deea686$var$nonLiteralParts.has(p.type)).map(p => $6c7bd7858deea686$var$escapeRegex(p.value));\n  let sortedLiterals = [...new Set([...singularLiterals, ...pluralLiterals])].sort((a, b) => b.length - a.length);\n  let literals = sortedLiterals.length === 0 ? new RegExp(\"[\\\\p{White_Space}]\", \"gu\") : new RegExp(`${sortedLiterals.join(\"|\")}|[\\\\p{White_Space}]`, \"gu\"); // These are for replacing non-latn characters with the latn equivalent\n\n  let numerals = [...new Intl.NumberFormat(intlOptions.locale, {\n    useGrouping: false\n  }).format(9876543210)].reverse();\n  let indexes = new Map(numerals.map((d, i) => [d, i]));\n  let numeral = new RegExp(`[${numerals.join(\"\")}]`, \"g\");\n\n  let index = d => String(indexes.get(d));\n\n  return {\n    minusSign: minusSign,\n    plusSign: plusSign,\n    decimal: decimal,\n    group: group,\n    literals: literals,\n    numeral: numeral,\n    index: index\n  };\n}\n\nfunction $6c7bd7858deea686$var$replaceAll(str, find, replace) {\n  // @ts-ignore\n  if (str.replaceAll) // @ts-ignore\n    return str.replaceAll(find, replace);\n  return str.split(find).join(replace);\n}\n\nfunction $6c7bd7858deea686$var$escapeRegex(string) {\n  return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n}\n\nexport { $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5 as NumberFormatter, $6c7bd7858deea686$export$cd11ab140839f11d as NumberParser };","map":{"version":3,"mappings":"AAAA;;;;;;;;;;ACAA;;AAAA;;;;;;;;;;;AAYA,IAAIA,uCAAiB,IAAIC,GAAJ,EAArB;AAEA,IAAIC,4CAAsB,KAA1B;;AACA,IAAI;AACF;AACAA,8CAAsB,IAAKC,KAAKC,YAAV,CAAuB,OAAvB,EAAgC;AAACC,iBAAa;AAAd,GAAhC,EAA8DC,eAA9D,GAAgFD,WAAhF,KAAgG,YAAtH,CAFE,CAGF;AACF,CAJA,CAIE,OAAOE,CAAP,EAAU,CAAC;;AAEb,IAAIC,qCAAe,KAAnB;;AACA,IAAI;AACF;AACAA,uCAAe,IAAKL,KAAKC,YAAV,CAAuB,OAAvB,EAAgC;AAACK,WAAO,MAAR;AAAgBC,UAAM;AAAtB,GAAhC,EAAkEJ,eAAlE,GAAoFG,KAApF,KAA8F,MAA7G,CAFE,CAGF;AACF,CAJA,CAIE,OAAOE,EAAP,EAAU,CAAC,C,CAEb;AACA;AACA;;;AACA,MAAMC,8BAAQ;AACZC,UAAQ;AACNC,YAAQ;AACNC,eAAS,MADH;AAEN,eAAS,IAFH;AAGN,eAAS,GAHH;AAIN,eAAS;AAJH;AADF;AADI,CAAd;;AAyBO,MAAMC,yCAAN,CAAM;AASX;AACAC,SAAOC,KAAP,EAA8B;AAC5B,QAAIC,MAAM,EAAV;AACA,QAAI,CAACjB,yCAAD,IAAwB,KAAKkB,OAAL,CAAaf,WAAb,IAA4B,IAAxD,EACEc,MAAME,0CAAgC,KAAKC,eAArC,EAAsD,KAAKF,OAAL,CAAaf,WAAnE,EAAgFa,KAAhF,CAAN,CADF,KAGEC,MAAM,KAAKG,eAAL,CAAqBL,MAArB,CAA4BC,KAA5B,CAAN;;AAGF,QAAI,KAAKE,OAAL,CAAaX,KAAb,KAAuB,MAAvB,IAAiC,CAACD,kCAAtC,EAAoD;UAErCe;;AADb,UAAI;AAAAb,cAACA,IAAD;AAAOc,sBAAc,OAArB;AAAqBC,gBAASA;AAA9B,UAAwC,KAAKnB,eAAL,EAA5C;AACA,UAAIoB,SAAS,0CAAK,CAAChB,IAAD,CAAL,MAAW,IAAX,iDAAa,CAACc,WAAD,CAA1B;AACAL,aAAOO,MAAM,CAACD,MAAD,CAAN,IAAkBC,OAAOX,OAAhC;AACD;;AAED,WAAOI,GAAP;AACF;AAEA;;;AACAQ,gBAAcT,KAAd,EAAsD;AACpD;AACA;AACA,WAAO,KAAKI,eAAL,CAAqBK,aAArB,CAAmCT,KAAnC,CAAP;AACF;AAEA;;;AACAU,cAAYC,KAAZ,EAA2BC,GAA3B,EAAgD;AAC9C;AACA,QAAI,OAAO,KAAKR,eAAL,CAAqBM,WAA5B,KAA4C,UAAhD,EACE;AACA,aAAO,KAAKN,eAAL,CAAqBM,WAArB,CAAiCC,KAAjC,EAAwCC,GAAxC,CAAP;AAGF,QAAIA,MAAMD,KAAV,EACE,MAAM,IAAIE,UAAJ,CAAe,gCAAf,CAAN,CAR4C,CAW9C;;AACA,WAAQ,GAAE,KAAKd,MAAL,CAAYY,KAAZ,CAAmB,MAAK,KAAKZ,MAAL,CAAYa,GAAZ,CAAiB,EAAnD;AACF;AAEA;;;AACAE,qBAAmBH,KAAnB,EAAkCC,GAAlC,EAAwE;AACtE;AACA,QAAI,OAAO,KAAKR,eAAL,CAAqBU,kBAA5B,KAAmD,UAAvD,EACE;AACA,aAAO,KAAKV,eAAL,CAAqBU,kBAArB,CAAwCH,KAAxC,EAA+CC,GAA/C,CAAP;AAGF,QAAIA,MAAMD,KAAV,EACE,MAAM,IAAIE,UAAJ,CAAe,gCAAf,CAAN;AAGF,QAAIE,aAAa,KAAKX,eAAL,CAAqBK,aAArB,CAAmCE,KAAnC,CAAjB;AACA,QAAIK,WAAW,KAAKZ,eAAL,CAAqBK,aAArB,CAAmCG,GAAnC,CAAf;AACA,WAAO,IACFG,WAAWE,GAAX,CAAeC,MAAM,EAAC,GAAGA,CAAJ;AAAOC,cAAQ;AAAf,KAAN,CAAf,CADE,EAEL;AAACC,YAAM,SAAP;AAAkBpB,aAAO,KAAzB;AAAgCmB,cAAQ;AAAxC,KAFK,KAGFH,SAASC,GAAT,CAAaC,MAAM,EAAC,GAAGA,CAAJ;AAAOC,cAAQ;AAAf,KAAN,CAAb,CAHE,CAAP;AAKF;AAEA;;;AACA/B,oBAAoD;AAClD,QAAIc,UAAU,KAAKE,eAAL,CAAqBhB,eAArB,EAAd;AACA,QAAI,CAACJ,yCAAD,IAAwB,KAAKkB,OAAL,CAAaf,WAAb,IAA4B,IAAxD,EACEe,UAAU,EAAC,GAAGA,OAAJ;AAAaf,mBAAa,KAAKe,OAAL,CAAaf;AAAvC,KAAV;AAGF,QAAI,CAACG,kCAAD,IAAiB,KAAKY,OAAL,CAAaX,KAAb,KAAuB,MAA5C,EACEW,UAAU,EAAC,GAAGA,OAAJ;AAAaX,aAAO,MAApB;AAA4BC,YAAM,KAAKU,OAAL,CAAaV,IAA/C;AAAqDc,mBAAa,KAAKJ,OAAL,CAAaI;AAA/E,KAAV;AAGF,WAAOJ,OAAP;AACF;;AA/EAmB,cAAYd,MAAZ,EAA+D;AAAA,QAAnCL,OAAmC,uEAAJ,EAAI;AAC7D,SAAKE,eAAL,GAAuBkB,+CAAyBf,MAAzB,EAAiCL,OAAjC,CAAvB;AACA,SAAKA,OAAL,GAAeA,OAAf;AACF;;AAPW;;AAsFb,SAASoB,8CAAT,CAAkCf,MAAlC,EAAwG;AAAA,MAAtDL,OAAsD,uEAAvB,EAAuB;AACtG,MAAI;AAAAqB,qBAACA;AAAD,MAAoBrB,OAAxB;AACA,MAAIqB,mBAAmBhB,OAAOiB,OAAP,CAAe,QAAf,MAA6B,EAApD,EACEjB,SAAU,GAAEA,MAAO,SAAQgB,eAAgB,EAA3C;;AAGF,MAAIrB,QAAQX,KAAR,KAAkB,MAAlB,IAA4B,CAACD,kCAAjC,EAA+C;QAKxCe;;AAJL,QAAI;AAAAb,YAACA,IAAD;AAAOc,oBAAc;AAArB,QAAgCJ,OAApC;AACA,QAAI,CAACV,IAAL,EACE,MAAM,IAAIiC,KAAJ,CAAU,iDAAV,CAAN;AAEF,QAAI,EAAC,0CAAK,CAACjC,IAAD,CAAL,MAAW,IAAX,iDAAa,CAACc,WAAD,CAAd,CAAJ,EACE,MAAM,IAAImB,KAAJ,CAAW,oBAAmBjC,IAAK,uBAAsBc,WAAY,EAArE,CAAN;AAEFJ,cAAU,EAAC,GAAGA,OAAJ;AAAaX,aAAO;AAApB,KAAV;AACD;;AAED,MAAImC,WAAWnB,UAAUL,UAAUyB,OAAOC,OAAP,CAAe1B,OAAf,EAAwB2B,IAAxB,CAA6B,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAR,GAAc,EAAd,GAAmB,CAA1D,EAA6DC,IAA7D,EAAV,GAAgF,EAA1F,CAAf;AACA,MAAIlD,qCAAemD,GAAf,CAAmBP,QAAnB,CAAJ,EACE,OAAO5C,qCAAeoD,GAAf,CAAmBR,QAAnB,CAAP;AAGF,MAAItB,kBAAkB,IAAInB,KAAKC,YAAT,CAAsBqB,MAAtB,EAA8BL,OAA9B,CAAtB;AACApB,uCAAeqD,GAAf,CAAmBT,QAAnB,EAA6BtB,eAA7B;AACA,SAAOA,eAAP;AACF;;AAGO,SAASD,yCAAT,CAAyCiC,YAAzC,EAA0EjD,WAA1E,EAA+FkD,GAA/F,EAA4G;AACjH,MAAIlD,gBAAgB,MAApB,EACE,OAAOiD,aAAarC,MAAb,CAAoBsC,GAApB,CAAP,CADF,KAEO,IAAIlD,gBAAgB,OAApB,EACL,OAAOiD,aAAarC,MAAb,CAAoBuC,KAAKC,GAAL,CAASF,GAAT,CAApB,CAAP,CADK,KAEA;AACL,QAAIG,oBAAoB,KAAxB;AACA,QAAIrD,gBAAgB,QAApB,EACEqD,oBAAoBH,MAAM,CAAN,IAAWV,OAAOc,EAAP,CAAUJ,GAAV,EAAe,CAAf,CAA/B,CADF,KAEO,IAAIlD,gBAAgB,YAApB,EAAoB;AACzB,UAAIwC,OAAOc,EAAP,CAAUJ,GAAV,EAAe,EAAf,KAAsBV,OAAOc,EAAP,CAAUJ,GAAV,EAAe,CAAf,CAA1B,EACEA,MAAMC,KAAKC,GAAL,CAASF,GAAT,CAAN,CADF,KAGEG,oBAAoBH,MAAM,CAA1B;AAEH;;AAED,QAAIG,iBAAJ,EAAuB;AACrB,UAAIE,WAAWN,aAAarC,MAAb,CAAoB,CAACsC,GAArB,CAAf;AACA,UAAIM,SAASP,aAAarC,MAAb,CAAoBsC,GAApB,CAAb,CAFqB,CAGrB;;AACA,UAAIO,QAAQF,SAASG,OAAT,CAAiBF,MAAjB,EAAyB,EAAzB,EAA6BE,OAA7B,CAAqC,eAArC,EAAsD,EAAtD,CAAZ;AACA,UAAI,IAAID,KAAJ,EAAWE,MAAX,KAAsB,CAA1B,EACEC,QAAQC,IAAR,CAAa,0EAAb;AAEF,UAAIC,WAAWP,SAASG,OAAT,CAAiBF,MAAjB,EAAyB,KAAzB,EAAgCE,OAAhC,CAAwCD,KAAxC,EAA+C,GAA/C,EAAoDC,OAApD,CAA4D,KAA5D,EAAmEF,MAAnE,CAAf;AACA,aAAOM,QAAP;AACF,KAVA,MAWE,OAAOb,aAAarC,MAAb,CAAoBsC,GAApB,CAAP;AAEH;AACH;ACzMA;;;;;;;;;;;;;AAYA,MAUMa,4CAAsB,IAAIC,MAAJ,CAAW,gBAAX,CAV5B;AAWA,MAAMC,0CAAoB,CAAC,MAAD,EAAS,MAAT,EAAiB,SAAjB,CAA1B;;AAQO,MAAMC,yCAAN,CAAM;AASX;;;AAGAC,QAAMtD,KAAN,EAA6B;AAC3B,WAAOuD,0CAAoB,KAAKhD,MAAzB,EAAiC,KAAKL,OAAtC,EAA+CF,KAA/C,EAAsDsD,KAAtD,CAA4DtD,KAA5D,CAAP;AACF;AAEA;;;;;;;AAKAwD,uBAAqBxD,KAArB,EAAoCyD,QAApC,EAAuDC,QAAvD,EAAmF;AACjF,WAAOH,0CAAoB,KAAKhD,MAAzB,EAAiC,KAAKL,OAAtC,EAA+CF,KAA/C,EAAsDwD,oBAAtD,CAA2ExD,KAA3E,EAAkFyD,QAAlF,EAA4FC,QAA5F,CAAP;AACF;AAEA;;;;;;;AAKAC,qBAAmB3D,KAAnB,EAA0C;AACxC,WAAOuD,0CAAoB,KAAKhD,MAAzB,EAAiC,KAAKL,OAAtC,EAA+CF,KAA/C,EAAsDE,OAAtD,CAA8DqB,eAArE;AACF;;AA5BAF,cAAYd,MAAZ,EAAoE;AAAA,QAAxCL,OAAwC,uEAAJ,EAAI;AAClE,SAAKK,MAAL,GAAcA,MAAd;AACA,SAAKL,OAAL,GAAeA,OAAf;AACF;;AAPW;;AAmCb,MAAM0D,0CAAoB,IAAI7E,GAAJ,EAA1B;;AACA,SAASwE,yCAAT,CAA6BhD,MAA7B,EAA6CL,OAA7C,EAAgFF,KAAhF,EAA+F;AAC7F;AACA,MAAI6D,gBAAgBC,4CAAsBvD,MAAtB,EAA8BL,OAA9B,CAApB,CAF6F,CAI7F;AACA;;AACA,MAAI,CAACK,OAAOwD,QAAP,CAAgB,MAAhB,CAAD,IAA4B,CAACF,cAAcL,oBAAd,CAAmCxD,KAAnC,CAAjC,EAA4E;AAC1E,SAAK,IAAIuB,eAAT,IAA4B6B,uCAA5B,EACE,IAAI7B,oBAAoBsC,cAAc3D,OAAd,CAAsBqB,eAA9C,EAA+D;AAC7D,UAAIyC,SAASF,4CAAsBvD,UAAUA,OAAOwD,QAAP,CAAgB,KAAhB,IAAyB,MAAzB,GAAkC,QAA5C,IAAwDxC,eAA9E,EAA+FrB,OAA/F,CAAb;AACA,UAAI8D,OAAOR,oBAAP,CAA4BxD,KAA5B,CAAJ,EACE,OAAOgE,MAAP;AAEH;AAEJ;;AAED,SAAOH,aAAP;AACF;;AAEA,SAASC,2CAAT,CAA+BvD,MAA/B,EAA+CL,OAA/C,EAAkF;AAChF,MAAIwB,WAAWnB,UAAUL,UAAUyB,OAAOC,OAAP,CAAe1B,OAAf,EAAwB2B,IAAxB,CAA6B,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAR,GAAc,EAAd,GAAmB,CAA1D,EAA6DC,IAA7D,EAAV,GAAgF,EAA1F,CAAf;AACA,MAAIgC,SAASJ,wCAAkB1B,GAAlB,CAAsBR,QAAtB,CAAb;;AACA,MAAI,CAACsC,MAAL,EAAa;AACXA,aAAS,IAAIC,sCAAJ,CAAqB1D,MAArB,EAA6BL,OAA7B,CAAT;AACA0D,4CAAkBzB,GAAlB,CAAsBT,QAAtB,EAAgCsC,MAAhC;AACD;;AAED,SAAOA,MAAP;AACF,C,CAEA;AACA;;;AACA,MAAMC,sCAAN,CAAM;AAWJX,QAAMtD,KAAN,EAAqB;AACnB;AACA,QAAIkE,sBAAsB,KAAKC,QAAL,CAAcnE,KAAd,CAA1B,CAFmB,CAInB;;AACAkE,0BAAsBE,iCAAWF,mBAAX,EAAgC,KAAKG,OAAL,CAAaC,KAA7C,EAAoD,EAApD,EACnBzB,OADmB,CACX,KAAKwB,OAAL,CAAaE,OADF,EACW,GADX,EAEnB1B,OAFmB,CAEX,KAAKwB,OAAL,CAAaG,SAFF,EAEa,GAFb,EAGnB3B,OAHmB,CAGX,KAAKwB,OAAL,CAAaI,OAHF,EAGW,KAAKJ,OAAL,CAAaK,KAHxB,CAAtB;AAKA,QAAIC,WAAWT,sBAAsB,CAACA,mBAAvB,GAA6CU,GAA5D;AACA,QAAIC,MAAMF,QAAN,CAAJ,EACE,OAAOC,GAAP,CAZiB,CAenB;;AACA,QAAI,KAAK1E,OAAL,CAAa4E,YAAb,KAA8B,YAA9B,IAA8C5B,0CAAoB6B,IAApB,CAAyB/E,KAAzB,CAAlD,EACE2E,WAAW,KAAKA,QAAhB,CAjBiB,CAoBnB;;AACA,QAAI,KAAKzE,OAAL,CAAaX,KAAb,KAAuB,SAA3B,EAAsC;AACpCoF,kBAAY,GAAZ;;UAE8BK,oCAHM,CAEpC;;;AACAL,iBAAW,CAACA,SAASM,OAAT,CAAiB,CAAC,4CAAK/E,OAAL,CAAagF,qBAAb,MAAkC,IAAlC,2FAAsC,CAAvC,IAA4C,CAA7D,CAAZ;AACD;;AAED,WAAOP,QAAP;AACF;;AAEAR,WAASnE,KAAT,EAAwB;AACtB;AACAA,YAAQA,MAAM6C,OAAN,CAAc,KAAKwB,OAAL,CAAac,QAA3B,EAAqC,EAArC,CAAR,CAFsB,CAItB;AACA;;AACAnF,YAAQA,MAAM6C,OAAN,CAAc,GAAd,EAAmB,KAAKwB,OAAL,CAAaG,SAAhC,CAAR,CANsB,CAQtB;AACA;;AACA,QAAI,KAAKtE,OAAL,CAAaqB,eAAb,KAAiC,MAArC,EAA6C;AAC3CvB,cAAQA,MAAM6C,OAAN,CAAc,GAAd,EAAmB,KAAKwB,OAAL,CAAaE,OAAhC,CAAR;AACAvE,cAAQA,MAAM6C,OAAN,CAAcuC,OAAOC,YAAP,CAAoB,IAApB,CAAd,EAAyC,KAAKhB,OAAL,CAAaE,OAAtD,CAAR;AACAvE,cAAQoE,iCAAWpE,KAAX,EAAkB,GAAlB,EAAuB,KAAKqE,OAAL,CAAaC,KAApC,CAAR;AACD,KAdqB,CAgBtB;AACA;;;AACA,QAAI,KAAKpE,OAAL,CAAaK,MAAb,KAAwB,OAA5B,EACEP,QAAQoE,iCAAWpE,KAAX,EAAkB,GAAlB,EAAuBoF,OAAOC,YAAP,CAAoB,IAApB,CAAvB,CAAR;AAGF,WAAOrF,KAAP;AACF;;AAEAwD,uBAAqBxD,KAArB,EAAwG;AAAA,QAApEyD,QAAoE,uEAAjD,CAAC6B,QAAgD;AAAA,QAAtC5B,QAAsC,uEAAnB4B,QAAmB;AACtGtF,YAAQ,KAAKmE,QAAL,CAAcnE,KAAd,CAAR,CADsG,CAGtG;;AACA,QAAIA,MAAMuF,UAAN,CAAiB,KAAKlB,OAAL,CAAaG,SAA9B,KAA4Cf,WAAW,CAA3D,EACEzD,QAAQA,MAAMwF,KAAN,CAAY,KAAKnB,OAAL,CAAaG,SAAb,CAAuB1B,MAAnC,CAAR,CADF,KAEO,IAAI,KAAKuB,OAAL,CAAaoB,QAAb,IAAyBzF,MAAMuF,UAAN,CAAiB,KAAKlB,OAAL,CAAaoB,QAA9B,CAAzB,IAAoE/B,WAAW,CAAnF,EACL1D,QAAQA,MAAMwF,KAAN,CAAY,KAAKnB,OAAL,CAAaoB,QAAb,CAAsB3C,MAAlC,CAAR,CAPoG,CAUtG;;AACA,QAAI9C,MAAMuF,UAAN,CAAiB,KAAKlB,OAAL,CAAaC,KAA9B,CAAJ,EACE,OAAO,KAAP,CAZoG,CAetG;;AACAtE,YAAQoE,iCAAWpE,KAAX,EAAkB,KAAKqE,OAAL,CAAaC,KAA/B,EAAsC,EAAtC,EACLzB,OADK,CACG,KAAKwB,OAAL,CAAaI,OADhB,EACyB,EADzB,EAEL5B,OAFK,CAEG,KAAKwB,OAAL,CAAaE,OAFhB,EAEyB,EAFzB,CAAR,CAhBsG,CAoBtG;;AACA,WAAOvE,MAAM8C,MAAN,KAAiB,CAAxB;AACF;;AAnFAzB,cAAYd,MAAZ,EAAoE;AAAA,QAAxCL,OAAwC,uEAAJ,EAAI;AAClE,SAAKwF,SAAL,GAAiB,IAAIzG,KAAKC,YAAT,CAAsBqB,MAAtB,EAA8BL,OAA9B,CAAjB;AACA,SAAKA,OAAL,GAAe,KAAKwF,SAAL,CAAetG,eAAf,EAAf;AACA,SAAKiF,OAAL,GAAesB,iCAAW,KAAKD,SAAhB,EAA2B,KAAKxF,OAAhC,EAAyCA,OAAzC,CAAf;AACF;;AATI;;AA2FN,MAAM0F,wCAAkB,IAAIC,GAAJ,CAAQ,CAAC,SAAD,EAAY,UAAZ,EAAwB,SAAxB,EAAmC,WAAnC,EAAgD,UAAhD,EAA4D,OAA5D,CAAR,CAAxB;;AAEA,SAASF,gCAAT,CAAoBD,SAApB,EAAkDI,WAAlD,EAAiGC,eAAjG,EAAqJ;MAMnIC,gBACDC,mBASDC,iBACFC,gBAjBuI,CACnJ;;;AACA,MAAIC,WAAWV,UAAUjF,aAAV,CAAwB,UAAxB,CAAf;AACA,MAAI4F,cAAcX,UAAUjF,aAAV,CAAwB,SAAxB,CAAlB;AACA,MAAI6F,gBAAgBZ,UAAUjF,aAAV,CAAwB,CAAxB,CAApB;;MAEgB8F;;AAAhB,MAAI/B,YAAY,mDAASgC,IAAT,CAActF,KAAKA,EAAEE,IAAF,KAAW,WAA9B,OAA8B,IAA9B,wDAA4CpB,KAA5C,MAAiD,IAAjD,6DAAqD,GAArE;AACA,MAAIyF,WAAW,iCAAYe,IAAZ,CAAiBtF,KAAKA,EAAEE,IAAF,KAAW,UAAjC,OAAiC,IAAjC,8DAA8CpB,KAA7D,CAPmJ,CASnJ;AACA;AACA;;AACA,MAAI,CAACyF,QAAD,KAAc,mFAAiBtG,WAAjB,MAAiC,YAAjC,IAAiD,mFAAiBA,WAAjB,MAAiC,QAAhG,CAAJ,EACEsG,WAAW,GAAX;AAGF,MAAIlB,UAAU,4BAASiC,IAAT,CAActF,KAAKA,EAAEE,IAAF,KAAW,SAA9B,OAA8B,IAA9B,0DAA0CpB,KAAxD;AACA,MAAIsE,QAAQ,4BAASkC,IAAT,CAActF,KAAKA,EAAEE,IAAF,KAAW,OAA9B,OAA8B,IAA9B,0DAAwCpB,KAApD,CAjBmJ,CAmBnJ;AACA;;AACA,MAAIyG,iBAAiBL,SAASM,MAAT,CAAgBxF,KAAK,CAAC0E,sCAAgB3D,GAAhB,CAAoBf,EAAEE,IAAtB,CAAtB,EAAmDH,GAAnD,CAAuDC,KAAKyF,kCAAYzF,EAAElB,KAAd,CAA5D,CAArB;AACA,MAAI4G,mBAAmBN,cAAcI,MAAd,CAAqBxF,KAAK,CAAC0E,sCAAgB3D,GAAhB,CAAoBf,EAAEE,IAAtB,CAA3B,EAAwDH,GAAxD,CAA4DC,KAAKyF,kCAAYzF,EAAElB,KAAd,CAAjE,CAAvB;AACA,MAAI6G,iBAAiB,IAAI,IAAIhB,GAAJ,CAAQ,IAAIe,gBAAJ,KAAyBH,cAAzB,CAAR,CAAJ,EAAuD5E,IAAvD,CAA4D,CAACC,CAAD,EAAIC,CAAJ,KAAUA,EAAEe,MAAF,GAAWhB,EAAEgB,MAAnF,CAArB;AACA,MAAIqC,WAAW0B,eAAe/D,MAAf,KAA0B,CAA1B,GACX,IAAIK,MAAJ,CAAW,oBAAX,EAAiC,IAAjC,CADW,GAEX,IAAIA,MAAJ,CAAY,GAAE0D,eAAe7E,IAAf,CAAoB,GAApB,CAAyB,qBAAvC,EAA6D,IAA7D,CAFJ,CAxBmJ,CA4BnJ;;AACA,MAAI8E,WAAW,IAAI,IAAI7H,KAAKC,YAAT,CAAsB4G,YAAYvF,MAAlC,EAA0C;AAACwG,iBAAa;AAAd,GAA1C,EAAgEhH,MAAhE,CAAuE,UAAvE,CAAJ,EAAwFiH,OAAxF,EAAf;AACA,MAAIC,UAAU,IAAIlI,GAAJ,CAAQ+H,SAAS7F,GAAT,CAAa,CAACiG,CAAD,EAAIC,CAAJ,KAAU,CAACD,CAAD,EAAIC,CAAJ,CAAvB,CAAR,CAAd;AACA,MAAI1C,UAAU,IAAItB,MAAJ,CAAY,IAAG2D,SAAS9E,IAAT,CAAc,EAAd,CAAkB,GAAjC,EAAqC,GAArC,CAAd;;AACA,MAAI0C,QAAQwC,KAAK9B,OAAO6B,QAAQ/E,GAAR,CAAYgF,CAAZ,CAAP,CAAjB;;AAEA,SAAO;eAAC1C,SAAD;cAAYiB,QAAZ;aAAsBlB,OAAtB;WAA+BD,KAA/B;cAAsCa,QAAtC;aAAgDV,OAAhD;WAAyDC;AAAzD,GAAP;AACF;;AAEA,SAASN,gCAAT,CAAoBgD,GAApB,EAAiCZ,IAAjC,EAA+C3D,OAA/C,EAAgE;AAC9D;AACA,MAAIuE,IAAIC,UAAR,EACE;AACA,WAAOD,IAAIC,UAAJ,CAAeb,IAAf,EAAqB3D,OAArB,CAAP;AAGF,SAAOuE,IAAIE,KAAJ,CAAUd,IAAV,EAAgBxE,IAAhB,CAAqBa,OAArB,CAAP;AACF;;AAEA,SAAS8D,iCAAT,CAAqBY,MAArB,EAAqC;AACnC,SAAOA,OAAO1E,OAAP,CAAe,uBAAf,EAAwC,MAAxC,CAAP;AACF","names":["$488c6ddbf4ef74c2$var$formatterCache","Map","$488c6ddbf4ef74c2$var$supportsSignDisplay","Intl","NumberFormat","signDisplay","resolvedOptions","e","$488c6ddbf4ef74c2$var$supportsUnit","style","unit","e1","$488c6ddbf4ef74c2$var$UNITS","degree","narrow","default","$488c6ddbf4ef74c2$export$cc77c4ff7e8673c5","format","value","res","options","$488c6ddbf4ef74c2$export$711b50b3c525e0f2","numberFormatter","_UNITS_unit","unitDisplay","locale","values","formatToParts","formatRange","start","end","RangeError","formatRangeToParts","startParts","endParts","map","p","source","type","constructor","$488c6ddbf4ef74c2$var$getCachedNumberFormatter","numberingSystem","indexOf","Error","cacheKey","Object","entries","sort","a","b","join","has","get","set","numberFormat","num","Math","abs","needsPositiveSign","is","negative","noSign","minus","replace","length","console","warn","positive","$6c7bd7858deea686$var$CURRENCY_SIGN_REGEX","RegExp","$6c7bd7858deea686$var$NUMBERING_SYSTEMS","$6c7bd7858deea686$export$cd11ab140839f11d","parse","$6c7bd7858deea686$var$getNumberParserImpl","isValidPartialNumber","minValue","maxValue","getNumberingSystem","$6c7bd7858deea686$var$numberParserCache","defaultParser","$6c7bd7858deea686$var$getCachedNumberParser","includes","parser","$6c7bd7858deea686$var$NumberParserImpl","fullySanitizedValue","sanitize","$6c7bd7858deea686$var$replaceAll","symbols","group","decimal","minusSign","numeral","index","newValue","NaN","isNaN","currencySign","test","_this_options_maximumFractionDigits","toFixed","maximumFractionDigits","literals","String","fromCharCode","Infinity","startsWith","slice","plusSign","formatter","$6c7bd7858deea686$var$getSymbols","$6c7bd7858deea686$var$nonLiteralParts","Set","intlOptions","originalOptions","_allParts_find","_posAllParts_find","_allParts_find1","_allParts_find2","allParts","posAllParts","singularParts","_allParts_find_value","find","pluralLiterals","filter","$6c7bd7858deea686$var$escapeRegex","singularLiterals","sortedLiterals","numerals","useGrouping","reverse","indexes","d","i","str","replaceAll","split","string"],"sources":["/Users/vux/dev/react-project1/node_modules/@internationalized/number/dist/packages/@internationalized/number/src/index.ts","/Users/vux/dev/react-project1/node_modules/@internationalized/number/dist/packages/@internationalized/number/src/NumberFormatter.ts","/Users/vux/dev/react-project1/node_modules/@internationalized/number/dist/packages/@internationalized/number/src/NumberParser.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {NumberFormatOptions} from './NumberFormatter';\n\nexport {NumberFormatter} from './NumberFormatter';\nexport {NumberParser} from './NumberParser';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nlet formatterCache = new Map<string, Intl.NumberFormat>();\n\nlet supportsSignDisplay = false;\ntry {\n  // @ts-ignore\n  supportsSignDisplay = (new Intl.NumberFormat('de-DE', {signDisplay: 'exceptZero'})).resolvedOptions().signDisplay === 'exceptZero';\n  // eslint-disable-next-line no-empty\n} catch (e) {}\n\nlet supportsUnit = false;\ntry {\n  // @ts-ignore\n  supportsUnit = (new Intl.NumberFormat('de-DE', {style: 'unit', unit: 'degree'})).resolvedOptions().style === 'unit';\n  // eslint-disable-next-line no-empty\n} catch (e) {}\n\n// Polyfill for units since Safari doesn't support them yet. See https://bugs.webkit.org/show_bug.cgi?id=215438.\n// Currently only polyfilling the unit degree in narrow format for ColorSlider in our supported locales.\n// Values were determined by switching to each locale manually in Chrome.\nconst UNITS = {\n  degree: {\n    narrow: {\n      default: '°',\n      'ja-JP': ' 度',\n      'zh-TW': '度',\n      'sl-SI': ' °'\n      // Arabic?? But Safari already doesn't use Arabic digits so might be ok...\n      // https://bugs.webkit.org/show_bug.cgi?id=218139\n    }\n  }\n};\n\nexport interface NumberFormatOptions extends Intl.NumberFormatOptions {\n  /** Overrides default numbering system for the current locale. */\n  numberingSystem?: string\n}\n\ninterface NumberRangeFormatPart extends Intl.NumberFormatPart {\n  source: 'startRange' | 'endRange' | 'shared'\n}\n\n/**\n * A wrapper around Intl.NumberFormat providing additional options, polyfills, and caching for performance.\n */\nexport class NumberFormatter implements Intl.NumberFormat {\n  private numberFormatter: Intl.NumberFormat;\n  private options: NumberFormatOptions;\n\n  constructor(locale: string, options: NumberFormatOptions = {}) {\n    this.numberFormatter = getCachedNumberFormatter(locale, options);\n    this.options = options;\n  }\n\n  /** Formats a number value as a string, according to the locale and options provided to the constructor. */\n  format(value: number): string {\n    let res = '';\n    if (!supportsSignDisplay && this.options.signDisplay != null) {\n      res = numberFormatSignDisplayPolyfill(this.numberFormatter, this.options.signDisplay, value);\n    } else {\n      res = this.numberFormatter.format(value);\n    }\n\n    if (this.options.style === 'unit' && !supportsUnit) {\n      let {unit, unitDisplay = 'short', locale} = this.resolvedOptions();\n      let values = UNITS[unit]?.[unitDisplay];\n      res += values[locale] || values.default;\n    }\n\n    return res;\n  }\n\n  /** Formats a number to an array of parts such as separators, digits, punctuation, and more. */\n  formatToParts(value: number): Intl.NumberFormatPart[] {\n    // TODO: implement signDisplay for formatToParts\n    // @ts-ignore\n    return this.numberFormatter.formatToParts(value);\n  }\n\n  /** Formats a number range as a string. */\n  formatRange(start: number, end: number): string {\n    // @ts-ignore\n    if (typeof this.numberFormatter.formatRange === 'function') {\n      // @ts-ignore\n      return this.numberFormatter.formatRange(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    // Very basic fallback for old browsers.\n    return `${this.format(start)} – ${this.format(end)}`;\n  }\n\n  /** Formats a number range as an array of parts. */\n  formatRangeToParts(start: number, end: number): NumberRangeFormatPart[] {\n    // @ts-ignore\n    if (typeof this.numberFormatter.formatRangeToParts === 'function') {\n      // @ts-ignore\n      return this.numberFormatter.formatRangeToParts(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    let startParts = this.numberFormatter.formatToParts(start);\n    let endParts = this.numberFormatter.formatToParts(end);\n    return [\n      ...startParts.map(p => ({...p, source: 'startRange'} as NumberRangeFormatPart)),\n      {type: 'literal', value: ' – ', source: 'shared'},\n      ...endParts.map(p => ({...p, source: 'endRange'} as NumberRangeFormatPart))\n    ];\n  }\n\n  /** Returns the resolved formatting options based on the values passed to the constructor. */\n  resolvedOptions(): Intl.ResolvedNumberFormatOptions {\n    let options = this.numberFormatter.resolvedOptions();\n    if (!supportsSignDisplay && this.options.signDisplay != null) {\n      options = {...options, signDisplay: this.options.signDisplay};\n    }\n\n    if (!supportsUnit && this.options.style === 'unit') {\n      options = {...options, style: 'unit', unit: this.options.unit, unitDisplay: this.options.unitDisplay};\n    }\n\n    return options;\n  }\n}\n\nfunction getCachedNumberFormatter(locale: string, options: NumberFormatOptions = {}): Intl.NumberFormat {\n  let {numberingSystem} = options;\n  if (numberingSystem && locale.indexOf('-u-nu-') === -1) {\n    locale = `${locale}-u-nu-${numberingSystem}`;\n  }\n\n  if (options.style === 'unit' && !supportsUnit) {\n    let {unit, unitDisplay = 'short'} = options;\n    if (!unit) {\n      throw new Error('unit option must be provided with style: \"unit\"');\n    }\n    if (!UNITS[unit]?.[unitDisplay]) {\n      throw new Error(`Unsupported unit ${unit} with unitDisplay = ${unitDisplay}`);\n    }\n    options = {...options, style: 'decimal'};\n  }\n\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  if (formatterCache.has(cacheKey)) {\n    return formatterCache.get(cacheKey);\n  }\n\n  let numberFormatter = new Intl.NumberFormat(locale, options);\n  formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\n\n/** @private - exported for tests */\nexport function numberFormatSignDisplayPolyfill(numberFormat: Intl.NumberFormat, signDisplay: string, num: number) {\n  if (signDisplay === 'auto') {\n    return numberFormat.format(num);\n  } else if (signDisplay === 'never') {\n    return numberFormat.format(Math.abs(num));\n  } else {\n    let needsPositiveSign = false;\n    if (signDisplay === 'always') {\n      needsPositiveSign = num > 0 || Object.is(num, 0);\n    } else if (signDisplay === 'exceptZero') {\n      if (Object.is(num, -0) || Object.is(num, 0)) {\n        num = Math.abs(num);\n      } else {\n        needsPositiveSign = num > 0;\n      }\n    }\n\n    if (needsPositiveSign) {\n      let negative = numberFormat.format(-num);\n      let noSign = numberFormat.format(num);\n      // ignore RTL/LTR marker character\n      let minus = negative.replace(noSign, '').replace(/\\u200e|\\u061C/, '');\n      if ([...minus].length !== 1) {\n        console.warn('@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case');\n      }\n      let positive = negative.replace(noSign, '!!!').replace(minus, '+').replace('!!!', noSign);\n      return positive;\n    } else {\n      return numberFormat.format(num);\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\ninterface Symbols {\n  minusSign: string,\n  plusSign: string,\n  decimal: string,\n  group: string,\n  literals: RegExp,\n  numeral: RegExp,\n  index: (v: string) => string\n}\n\nconst CURRENCY_SIGN_REGEX = new RegExp('^.*\\\\(.*\\\\).*$');\nconst NUMBERING_SYSTEMS = ['latn', 'arab', 'hanidec'];\n\n/**\n * A NumberParser can be used to perform locale-aware parsing of numbers from Unicode strings,\n * as well as validation of partial user input. It automatically detects the numbering system\n * used in the input, and supports parsing decimals, percentages, currency values, and units\n * according to the locale.\n */\nexport class NumberParser {\n  private locale: string;\n  private options: Intl.NumberFormatOptions;\n\n  constructor(locale: string, options: Intl.NumberFormatOptions = {}) {\n    this.locale = locale;\n    this.options = options;\n  }\n\n  /**\n   * Parses the given string to a number. Returns NaN if a valid number could not be parsed.\n   */\n  parse(value: string): number {\n    return getNumberParserImpl(this.locale, this.options, value).parse(value);\n  }\n\n  /**\n   * Returns whether the given string could potentially be a valid number. This should be used to\n   * validate user input as the user types. If a `minValue` or `maxValue` is provided, the validity\n   * of the minus/plus sign characters can be checked.\n   */\n  isValidPartialNumber(value: string, minValue?: number, maxValue?: number): boolean {\n    return getNumberParserImpl(this.locale, this.options, value).isValidPartialNumber(value, minValue, maxValue);\n  }\n\n  /**\n   * Returns a numbering system for which the given string is valid in the current locale.\n   * If no numbering system could be detected, the default numbering system for the current\n   * locale is returned.\n   */\n  getNumberingSystem(value: string): string {\n    return getNumberParserImpl(this.locale, this.options, value).options.numberingSystem;\n  }\n}\n\nconst numberParserCache = new Map<string, NumberParserImpl>();\nfunction getNumberParserImpl(locale: string, options: Intl.NumberFormatOptions, value: string) {\n  // First try the default numbering system for the provided locale\n  let defaultParser = getCachedNumberParser(locale, options);\n\n  // If that doesn't match, and the locale doesn't include a hard coded numbering system,\n  // try each of the other supported numbering systems until we find one that matches.\n  if (!locale.includes('-nu-') && !defaultParser.isValidPartialNumber(value)) {\n    for (let numberingSystem of NUMBERING_SYSTEMS) {\n      if (numberingSystem !== defaultParser.options.numberingSystem) {\n        let parser = getCachedNumberParser(locale + (locale.includes('-u-') ? '-nu-' : '-u-nu-') + numberingSystem, options);\n        if (parser.isValidPartialNumber(value)) {\n          return parser;\n        }\n      }\n    }\n  }\n\n  return defaultParser;\n}\n\nfunction getCachedNumberParser(locale: string, options: Intl.NumberFormatOptions) {\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  let parser = numberParserCache.get(cacheKey);\n  if (!parser) {\n    parser = new NumberParserImpl(locale, options);\n    numberParserCache.set(cacheKey, parser);\n  }\n\n  return parser;\n}\n\n// The actual number parser implementation. Instances of this class are cached\n// based on the locale, options, and detected numbering system.\nclass NumberParserImpl {\n  formatter: Intl.NumberFormat;\n  options: Intl.ResolvedNumberFormatOptions;\n  symbols: Symbols;\n\n  constructor(locale: string, options: Intl.NumberFormatOptions = {}) {\n    this.formatter = new Intl.NumberFormat(locale, options);\n    this.options = this.formatter.resolvedOptions();\n    this.symbols = getSymbols(this.formatter, this.options, options);\n  }\n\n  parse(value: string) {\n    // to parse the number, we need to remove anything that isn't actually part of the number, for example we want '-10.40' not '-10.40 USD'\n    let fullySanitizedValue = this.sanitize(value);\n\n    // Remove group characters, and replace decimal points and numerals with ASCII values.\n    fullySanitizedValue = replaceAll(fullySanitizedValue, this.symbols.group, '')\n      .replace(this.symbols.decimal, '.')\n      .replace(this.symbols.minusSign, '-')\n      .replace(this.symbols.numeral, this.symbols.index);\n\n    let newValue = fullySanitizedValue ? +fullySanitizedValue : NaN;\n    if (isNaN(newValue)) {\n      return NaN;\n    }\n\n    // accounting will always be stripped to a positive number, so if it's accounting and has a () around everything, then we need to make it negative again\n    if (this.options.currencySign === 'accounting' && CURRENCY_SIGN_REGEX.test(value)) {\n      newValue = -1 * newValue;\n    }\n\n    // when reading the number, if it's a percent, then it should be interpreted as being divided by 100\n    if (this.options.style === 'percent') {\n      newValue /= 100;\n      // after dividing to get the percent value, javascript may get .0210999999 instead of .0211, so fix the number of fraction digits\n      newValue = +newValue.toFixed((this.options.maximumFractionDigits ?? 0) + 2);\n    }\n\n    return newValue;\n  }\n\n  sanitize(value: string) {\n    // Remove literals and whitespace, which are allowed anywhere in the string\n    value = value.replace(this.symbols.literals, '');\n\n    // Replace the ASCII minus sign with the minus sign used in the current locale\n    // so that both are allowed in case the user's keyboard doesn't have the locale's minus sign.\n    value = value.replace('-', this.symbols.minusSign);\n\n    // In arab numeral system, their decimal character is 1643, but most keyboards don't type that\n    // instead they use the , (44) character or apparently the (1548) character.\n    if (this.options.numberingSystem === 'arab') {\n      value = value.replace(',', this.symbols.decimal);\n      value = value.replace(String.fromCharCode(1548), this.symbols.decimal);\n      value = replaceAll(value, '.', this.symbols.group);\n    }\n\n    // fr-FR group character is char code 8239, but that's not a key on the french keyboard,\n    // so allow 'period' as a group char and replace it with a space\n    if (this.options.locale === 'fr-FR') {\n      value = replaceAll(value, '.', String.fromCharCode(8239));\n    }\n\n    return value;\n  }\n\n  isValidPartialNumber(value: string, minValue: number = -Infinity, maxValue: number = Infinity): boolean {\n    value = this.sanitize(value);\n\n    // Remove minus or plus sign, which must be at the start of the string.\n    if (value.startsWith(this.symbols.minusSign) && minValue < 0) {\n      value = value.slice(this.symbols.minusSign.length);\n    } else if (this.symbols.plusSign && value.startsWith(this.symbols.plusSign) && maxValue > 0) {\n      value = value.slice(this.symbols.plusSign.length);\n    }\n\n    // Numbers cannot start with a group separator\n    if (value.startsWith(this.symbols.group)) {\n      return false;\n    }\n\n    // Remove numerals, groups, and decimals\n    value = replaceAll(value, this.symbols.group, '')\n      .replace(this.symbols.numeral, '')\n      .replace(this.symbols.decimal, '');\n\n    // The number is valid if there are no remaining characters\n    return value.length === 0;\n  }\n}\n\nconst nonLiteralParts = new Set(['decimal', 'fraction', 'integer', 'minusSign', 'plusSign', 'group']);\n\nfunction getSymbols(formatter: Intl.NumberFormat, intlOptions: Intl.ResolvedNumberFormatOptions, originalOptions: Intl.NumberFormatOptions): Symbols {\n  // Note: some locale's don't add a group symbol until there is a ten thousands place\n  let allParts = formatter.formatToParts(-10000.111);\n  let posAllParts = formatter.formatToParts(10000.111);\n  let singularParts = formatter.formatToParts(1);\n\n  let minusSign = allParts.find(p => p.type === 'minusSign')?.value ?? '-';\n  let plusSign = posAllParts.find(p => p.type === 'plusSign')?.value;\n\n  // Safari does not support the signDisplay option, but our number parser polyfills it.\n  // If no plus sign was returned, but the original options contained signDisplay, default to the '+' character.\n  // @ts-ignore\n  if (!plusSign && (originalOptions?.signDisplay === 'exceptZero' || originalOptions?.signDisplay === 'always')) {\n    plusSign = '+';\n  }\n\n  let decimal = allParts.find(p => p.type === 'decimal')?.value;\n  let group = allParts.find(p => p.type === 'group')?.value;\n\n  // this set is also for a regex, it's all literals that might be in the string we want to eventually parse that\n  // don't contribute to the numerical value\n  let pluralLiterals = allParts.filter(p => !nonLiteralParts.has(p.type)).map(p => escapeRegex(p.value));\n  let singularLiterals = singularParts.filter(p => !nonLiteralParts.has(p.type)).map(p => escapeRegex(p.value));\n  let sortedLiterals = [...new Set([...singularLiterals, ...pluralLiterals])].sort((a, b) => b.length - a.length);\n  let literals = sortedLiterals.length === 0 ? \n      new RegExp('[\\\\p{White_Space}]', 'gu') :\n      new RegExp(`${sortedLiterals.join('|')}|[\\\\p{White_Space}]`, 'gu');\n\n  // These are for replacing non-latn characters with the latn equivalent\n  let numerals = [...new Intl.NumberFormat(intlOptions.locale, {useGrouping: false}).format(9876543210)].reverse();\n  let indexes = new Map(numerals.map((d, i) => [d, i]));\n  let numeral = new RegExp(`[${numerals.join('')}]`, 'g');\n  let index = d => String(indexes.get(d));\n\n  return {minusSign, plusSign, decimal, group, literals, numeral, index};\n}\n\nfunction replaceAll(str: string, find: string, replace: string) {\n  // @ts-ignore\n  if (str.replaceAll) {\n    // @ts-ignore\n    return str.replaceAll(find, replace);\n  }\n\n  return str.split(find).join(replace);\n}\n\nfunction escapeRegex(string: string) {\n  return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n"]},"metadata":{},"sourceType":"module"}