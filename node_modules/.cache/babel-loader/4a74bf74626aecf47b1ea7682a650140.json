{"ast":null,"code":"import { mergeProps as $bx7SL$mergeProps, useSyncRef as $bx7SL$useSyncRef, useGlobalListeners as $bx7SL$useGlobalListeners, isVirtualClick as $bx7SL$isVirtualClick, focusWithoutScrolling as $bx7SL$focusWithoutScrolling, isVirtualPointerEvent as $bx7SL$isVirtualPointerEvent, isIOS as $bx7SL$isIOS, runAfterTransition as $bx7SL$runAfterTransition, useLayoutEffect as $bx7SL$useLayoutEffect, isMac as $bx7SL$isMac, useEvent as $bx7SL$useEvent, useDescription as $bx7SL$useDescription } from \"@react-aria/utils\";\nimport $bx7SL$react, { useRef as $bx7SL$useRef, useContext as $bx7SL$useContext, useState as $bx7SL$useState, useMemo as $bx7SL$useMemo, useEffect as $bx7SL$useEffect, useCallback as $bx7SL$useCallback } from \"react\";\nimport { useIsSSR as $bx7SL$useIsSSR } from \"@react-aria/ssr\";\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/*\n* Copyright 2020 Adobe. All rights reserved.\n* This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License. You may obtain a copy\n* of the License at http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software distributed under\n* the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n* OF ANY KIND, either express or implied. See the License for the specific language\n* governing permissions and limitations under the License.\n*/\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element\n// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually\n\nlet $14c0b72509d70225$var$state = \"default\";\nlet $14c0b72509d70225$var$savedUserSelect = \"\";\nlet $14c0b72509d70225$var$modifiedElementMap = new WeakMap();\n\nfunction $14c0b72509d70225$export$16a4697467175487(target) {\n  if ((0, $bx7SL$isIOS)()) {\n    if ($14c0b72509d70225$var$state === \"default\") {\n      $14c0b72509d70225$var$savedUserSelect = document.documentElement.style.webkitUserSelect;\n      document.documentElement.style.webkitUserSelect = \"none\";\n    }\n\n    $14c0b72509d70225$var$state = \"disabled\";\n  } else if (target instanceof HTMLElement || target instanceof SVGElement) {\n    // If not iOS, store the target's original user-select and change to user-select: none\n    // Ignore state since it doesn't apply for non iOS\n    $14c0b72509d70225$var$modifiedElementMap.set(target, target.style.userSelect);\n    target.style.userSelect = \"none\";\n  }\n}\n\nfunction $14c0b72509d70225$export$b0d6fa1ab32e3295(target) {\n  if ((0, $bx7SL$isIOS)()) {\n    // If the state is already default, there's nothing to do.\n    // If it is restoring, then there's no need to queue a second restore.\n    if ($14c0b72509d70225$var$state !== \"disabled\") return;\n    $14c0b72509d70225$var$state = \"restoring\"; // There appears to be a delay on iOS where selection still might occur\n    // after pointer up, so wait a bit before removing user-select.\n\n    setTimeout(() => {\n      // Wait for any CSS transitions to complete so we don't recompute style\n      // for the whole page in the middle of the animation and cause jank.\n      (0, $bx7SL$runAfterTransition)(() => {\n        // Avoid race conditions\n        if ($14c0b72509d70225$var$state === \"restoring\") {\n          if (document.documentElement.style.webkitUserSelect === \"none\") document.documentElement.style.webkitUserSelect = $14c0b72509d70225$var$savedUserSelect || \"\";\n          $14c0b72509d70225$var$savedUserSelect = \"\";\n          $14c0b72509d70225$var$state = \"default\";\n        }\n      });\n    }, 300);\n  } else if (target instanceof HTMLElement || target instanceof SVGElement) // If not iOS, restore the target's original user-select if any\n    // Ignore state since it doesn't apply for non iOS\n    {\n      if (target && $14c0b72509d70225$var$modifiedElementMap.has(target)) {\n        let targetOldUserSelect = $14c0b72509d70225$var$modifiedElementMap.get(target);\n        if (target.style.userSelect === \"none\") target.style.userSelect = targetOldUserSelect;\n        if (target.getAttribute(\"style\") === \"\") target.removeAttribute(\"style\");\n        $14c0b72509d70225$var$modifiedElementMap.delete(target);\n      }\n    }\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n\nconst $ae1eeba8b9eafd08$export$5165eccb35aaadb5 = (0, $bx7SL$react).createContext(null);\n$ae1eeba8b9eafd08$export$5165eccb35aaadb5.displayName = \"PressResponderContext\";\n\nfunction $f6c31cce2adf654f$var$usePressResponderContext(props) {\n  // Consume context from <PressResponder> and merge with props.\n  let context = (0, $bx7SL$useContext)((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5));\n\n  if (context) {\n    let {\n      register: register,\n      ...contextProps\n    } = context;\n    props = (0, $bx7SL$mergeProps)(contextProps, props);\n    register();\n  }\n\n  (0, $bx7SL$useSyncRef)(context, props.ref);\n  return props;\n}\n\nfunction $f6c31cce2adf654f$export$45712eceda6fad21(props) {\n  let {\n    onPress: onPress,\n    onPressChange: onPressChange,\n    onPressStart: onPressStart,\n    onPressEnd: onPressEnd,\n    onPressUp: onPressUp,\n    isDisabled: isDisabled,\n    isPressed: isPressedProp,\n    preventFocusOnPress: preventFocusOnPress,\n    shouldCancelOnPointerExit: shouldCancelOnPointerExit,\n    allowTextSelectionOnPress: allowTextSelectionOnPress,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref: _,\n    ...domProps\n  } = $f6c31cce2adf654f$var$usePressResponderContext(props);\n  let propsRef = (0, $bx7SL$useRef)(null);\n  propsRef.current = {\n    onPress: onPress,\n    onPressChange: onPressChange,\n    onPressStart: onPressStart,\n    onPressEnd: onPressEnd,\n    onPressUp: onPressUp,\n    isDisabled: isDisabled,\n    shouldCancelOnPointerExit: shouldCancelOnPointerExit\n  };\n  let [isPressed, setPressed] = (0, $bx7SL$useState)(false);\n  let ref = (0, $bx7SL$useRef)({\n    isPressed: false,\n    ignoreEmulatedMouseEvents: false,\n    ignoreClickAfterPress: false,\n    didFirePressStart: false,\n    activePointerId: null,\n    target: null,\n    isOverTarget: false,\n    pointerType: null\n  });\n  let {\n    addGlobalListener: addGlobalListener,\n    removeAllGlobalListeners: removeAllGlobalListeners\n  } = (0, $bx7SL$useGlobalListeners)();\n  let pressProps = (0, $bx7SL$useMemo)(() => {\n    let state = ref.current;\n\n    let triggerPressStart = (originalEvent, pointerType) => {\n      let {\n        onPressStart: onPressStart,\n        onPressChange: onPressChange,\n        isDisabled: isDisabled\n      } = propsRef.current;\n      if (isDisabled || state.didFirePressStart) return;\n      if (onPressStart) onPressStart({\n        type: \"pressstart\",\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n      if (onPressChange) onPressChange(true);\n      state.didFirePressStart = true;\n      setPressed(true);\n    };\n\n    let triggerPressEnd = function (originalEvent, pointerType) {\n      let wasPressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      let {\n        onPressEnd: onPressEnd,\n        onPressChange: onPressChange,\n        onPress: onPress,\n        isDisabled: isDisabled\n      } = propsRef.current;\n      if (!state.didFirePressStart) return;\n      state.ignoreClickAfterPress = true;\n      state.didFirePressStart = false;\n      if (onPressEnd) onPressEnd({\n        type: \"pressend\",\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n      if (onPressChange) onPressChange(false);\n      setPressed(false);\n      if (onPress && wasPressed && !isDisabled) onPress({\n        type: \"press\",\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n\n    let triggerPressUp = (originalEvent, pointerType) => {\n      let {\n        onPressUp: onPressUp,\n        isDisabled: isDisabled\n      } = propsRef.current;\n      if (isDisabled) return;\n      if (onPressUp) onPressUp({\n        type: \"pressup\",\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n\n    let cancel = e => {\n      if (state.isPressed) {\n        if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n        state.isPressed = false;\n        state.isOverTarget = false;\n        state.activePointerId = null;\n        state.pointerType = null;\n        removeAllGlobalListeners();\n        if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);\n      }\n    };\n\n    let pressProps = {\n      onKeyDown(e) {\n        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target)) {\n          if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();\n          e.stopPropagation(); // If the event is repeating, it may have started on a different element\n          // after which focus moved to the current element. Ignore these events and\n          // only handle the first key down event.\n\n          if (!state.isPressed && !e.repeat) {\n            state.target = e.currentTarget;\n            state.isPressed = true;\n            triggerPressStart(e, \"keyboard\"); // Focus may move before the key up event, so register the event on the document\n            // instead of the same element where the key down event occurred.\n\n            addGlobalListener(document, \"keyup\", onKeyUp, false);\n          }\n        } else if (e.key === \"Enter\" && $f6c31cce2adf654f$var$isHTMLAnchorLink(e.currentTarget)) // If the target is a link, we won't have handled this above because we want the default\n          // browser behavior to open the link when pressing Enter. But we still need to prevent\n          // default so that elements above do not also handle it (e.g. table row).\n          e.stopPropagation();\n      },\n\n      onKeyUp(e) {\n        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && !e.repeat && e.currentTarget.contains(e.target)) triggerPressUp($f6c31cce2adf654f$var$createEvent(state.target, e), \"keyboard\");\n      },\n\n      onClick(e) {\n        if (e && !e.currentTarget.contains(e.target)) return;\n\n        if (e && e.button === 0) {\n          e.stopPropagation();\n          if (isDisabled) e.preventDefault(); // If triggered from a screen reader or by using element.click(),\n          // trigger as if it were a keyboard click.\n\n          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === \"virtual\" || (0, $bx7SL$isVirtualClick)(e.nativeEvent))) {\n            // Ensure the element receives focus (VoiceOver on iOS does not do this)\n            if (!isDisabled && !preventFocusOnPress) (0, $bx7SL$focusWithoutScrolling)(e.currentTarget);\n            triggerPressStart(e, \"virtual\");\n            triggerPressUp(e, \"virtual\");\n            triggerPressEnd(e, \"virtual\");\n          }\n\n          state.ignoreEmulatedMouseEvents = false;\n          state.ignoreClickAfterPress = false;\n        }\n      }\n\n    };\n\n    let onKeyUp = e => {\n      if (state.isPressed && $f6c31cce2adf654f$var$isValidKeyboardEvent(e, state.target)) {\n        if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();\n        e.stopPropagation();\n        state.isPressed = false;\n        let target = e.target;\n        triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), \"keyboard\", state.target.contains(target));\n        removeAllGlobalListeners(); // If the target is a link, trigger the click method to open the URL,\n        // but defer triggering pressEnd until onClick event handler.\n\n        if (state.target instanceof HTMLElement && state.target.contains(target) && ($f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) || state.target.getAttribute(\"role\") === \"link\")) state.target.click();\n      }\n    };\n\n    if (typeof PointerEvent !== \"undefined\") {\n      pressProps.onPointerDown = e => {\n        // Only handle left clicks, and ignore events that bubbled through portals.\n        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return; // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.\n        // Ignore and let the onClick handler take care of it instead.\n        // https://bugs.webkit.org/show_bug.cgi?id=222627\n        // https://bugs.webkit.org/show_bug.cgi?id=223202\n\n        if ((0, $bx7SL$isVirtualPointerEvent)(e.nativeEvent)) {\n          state.pointerType = \"virtual\";\n          return;\n        } // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on pointer down and handle focusing the pressable element ourselves.\n\n\n        if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n        state.pointerType = e.pointerType;\n        e.stopPropagation();\n\n        if (!state.isPressed) {\n          state.isPressed = true;\n          state.isOverTarget = true;\n          state.activePointerId = e.pointerId;\n          state.target = e.currentTarget;\n          if (!isDisabled && !preventFocusOnPress) (0, $bx7SL$focusWithoutScrolling)(e.currentTarget);\n          if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$16a4697467175487)(state.target);\n          triggerPressStart(e, state.pointerType);\n          addGlobalListener(document, \"pointermove\", onPointerMove, false);\n          addGlobalListener(document, \"pointerup\", onPointerUp, false);\n          addGlobalListener(document, \"pointercancel\", onPointerCancel, false);\n        }\n      };\n\n      pressProps.onMouseDown = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n\n        if (e.button === 0) {\n          // Chrome and Firefox on touch Windows devices require mouse down events\n          // to be canceled in addition to pointer events, or an extra asynchronous\n          // focus event will be fired.\n          if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onPointerUp = e => {\n        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.\n        if (!e.currentTarget.contains(e.target) || state.pointerType === \"virtual\") return; // Only handle left clicks\n        // Safari on iOS sometimes fires pointerup events, even\n        // when the touch isn't over the target, so double check.\n\n        if (e.button === 0 && $f6c31cce2adf654f$var$isOverTarget(e, e.currentTarget)) triggerPressUp(e, state.pointerType || e.pointerType);\n      }; // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.\n      // Use pointer move events instead to implement our own hit testing.\n      // See https://bugs.webkit.org/show_bug.cgi?id=199803\n\n\n      let onPointerMove = e => {\n        if (e.pointerId !== state.activePointerId) return;\n\n        if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n        }\n      };\n\n      let onPointerUp = e => {\n        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {\n          if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n          state.isPressed = false;\n          state.isOverTarget = false;\n          state.activePointerId = null;\n          state.pointerType = null;\n          removeAllGlobalListeners();\n          if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);\n        }\n      };\n\n      let onPointerCancel = e => {\n        cancel(e);\n      };\n\n      pressProps.onDragStart = e => {\n        if (!e.currentTarget.contains(e.target)) return; // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.\n\n        cancel(e);\n      };\n    } else {\n      pressProps.onMouseDown = e => {\n        // Only handle left clicks\n        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return; // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on mouse down and handle focusing the pressable element ourselves.\n\n        if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n        e.stopPropagation();\n        if (state.ignoreEmulatedMouseEvents) return;\n        state.isPressed = true;\n        state.isOverTarget = true;\n        state.target = e.currentTarget;\n        state.pointerType = (0, $bx7SL$isVirtualClick)(e.nativeEvent) ? \"virtual\" : \"mouse\";\n        if (!isDisabled && !preventFocusOnPress) (0, $bx7SL$focusWithoutScrolling)(e.currentTarget);\n        triggerPressStart(e, state.pointerType);\n        addGlobalListener(document, \"mouseup\", onMouseUp, false);\n      };\n\n      pressProps.onMouseEnter = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = true;\n          triggerPressStart(e, state.pointerType);\n        }\n      };\n\n      pressProps.onMouseLeave = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n        }\n      };\n\n      pressProps.onMouseUp = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        if (!state.ignoreEmulatedMouseEvents && e.button === 0) triggerPressUp(e, state.pointerType);\n      };\n\n      let onMouseUp = e => {\n        // Only handle left clicks\n        if (e.button !== 0) return;\n        state.isPressed = false;\n        removeAllGlobalListeners();\n\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n          return;\n        }\n\n        if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n        state.isOverTarget = false;\n      };\n\n      pressProps.onTouchStart = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        let touch = $f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);\n        if (!touch) return;\n        state.activePointerId = touch.identifier;\n        state.ignoreEmulatedMouseEvents = true;\n        state.isOverTarget = true;\n        state.isPressed = true;\n        state.target = e.currentTarget;\n        state.pointerType = \"touch\"; // Due to browser inconsistencies, especially on mobile browsers, we prevent default\n        // on the emulated mouse event and handle focusing the pressable element ourselves.\n\n        if (!isDisabled && !preventFocusOnPress) (0, $bx7SL$focusWithoutScrolling)(e.currentTarget);\n        if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$16a4697467175487)(state.target);\n        triggerPressStart(e, state.pointerType);\n        addGlobalListener(window, \"scroll\", onScroll, true);\n      };\n\n      pressProps.onTouchMove = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (!state.isPressed) return;\n        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n\n        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(e, state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n        }\n      };\n\n      pressProps.onTouchEnd = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (!state.isPressed) return;\n        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n\n        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType);\n          triggerPressEnd(e, state.pointerType);\n        } else if (state.isOverTarget) triggerPressEnd(e, state.pointerType, false);\n\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        state.ignoreEmulatedMouseEvents = true;\n        if (!allowTextSelectionOnPress) (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);\n        removeAllGlobalListeners();\n      };\n\n      pressProps.onTouchCancel = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (state.isPressed) cancel(e);\n      };\n\n      let onScroll = e => {\n        if (state.isPressed && e.target.contains(state.target)) cancel({\n          currentTarget: state.target,\n          shiftKey: false,\n          ctrlKey: false,\n          metaKey: false,\n          altKey: false\n        });\n      };\n\n      pressProps.onDragStart = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        cancel(e);\n      };\n    }\n\n    return pressProps;\n  }, [addGlobalListener, isDisabled, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress]); // Remove user-select: none in case component unmounts immediately after pressStart\n  // eslint-disable-next-line arrow-body-style\n\n  (0, $bx7SL$useEffect)(() => {\n    return () => {\n      if (!allowTextSelectionOnPress) // eslint-disable-next-line react-hooks/exhaustive-deps\n        (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)(ref.current.target);\n    };\n  }, [allowTextSelectionOnPress]);\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: (0, $bx7SL$mergeProps)(domProps, pressProps)\n  };\n}\n\nfunction $f6c31cce2adf654f$var$isHTMLAnchorLink(target) {\n  return target.tagName === \"A\" && target.hasAttribute(\"href\");\n}\n\nfunction $f6c31cce2adf654f$var$isValidKeyboardEvent(event, currentTarget) {\n  const {\n    key: key,\n    code: code\n  } = event;\n  const element = currentTarget;\n  const role = element.getAttribute(\"role\"); // Accessibility for keyboards. Space and Enter only.\n  // \"Spacebar\" is for IE 11\n\n  return (key === \"Enter\" || key === \" \" || key === \"Spacebar\" || code === \"Space\") && !(element instanceof HTMLInputElement && !$f6c31cce2adf654f$var$isValidInputKey(element, key) || element instanceof HTMLTextAreaElement || element.isContentEditable) && ( // A link with a valid href should be handled natively,\n  // unless it also has role='button' and was triggered using Space.\n  !$f6c31cce2adf654f$var$isHTMLAnchorLink(element) || role === \"button\" && key !== \"Enter\") && // An element with role='link' should only trigger with Enter key\n  !(role === \"link\" && key !== \"Enter\");\n}\n\nfunction $f6c31cce2adf654f$var$getTouchFromEvent(event) {\n  const {\n    targetTouches: targetTouches\n  } = event;\n  if (targetTouches.length > 0) return targetTouches[0];\n  return null;\n}\n\nfunction $f6c31cce2adf654f$var$getTouchById(event, pointerId) {\n  const changedTouches = event.changedTouches;\n\n  for (let i = 0; i < changedTouches.length; i++) {\n    const touch = changedTouches[i];\n    if (touch.identifier === pointerId) return touch;\n  }\n\n  return null;\n}\n\nfunction $f6c31cce2adf654f$var$createEvent(target, e) {\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey\n  };\n}\n\nfunction $f6c31cce2adf654f$var$getPointClientRect(point) {\n  let offsetX = point.width / 2 || point.radiusX || 0;\n  let offsetY = point.height / 2 || point.radiusY || 0;\n  return {\n    top: point.clientY - offsetY,\n    right: point.clientX + offsetX,\n    bottom: point.clientY + offsetY,\n    left: point.clientX - offsetX\n  };\n}\n\nfunction $f6c31cce2adf654f$var$areRectanglesOverlapping(a, b) {\n  // check if they cannot overlap on x axis\n  if (a.left > b.right || b.left > a.right) return false; // check if they cannot overlap on y axis\n\n  if (a.top > b.bottom || b.top > a.bottom) return false;\n  return true;\n}\n\nfunction $f6c31cce2adf654f$var$isOverTarget(point, target) {\n  let rect = target.getBoundingClientRect();\n  let pointRect = $f6c31cce2adf654f$var$getPointClientRect(point);\n  return $f6c31cce2adf654f$var$areRectanglesOverlapping(rect, pointRect);\n}\n\nfunction $f6c31cce2adf654f$var$shouldPreventDefault(target) {\n  // We cannot prevent default if the target is a draggable element.\n  return !(target instanceof HTMLElement) || !target.draggable;\n}\n\nfunction $f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target, key) {\n  if (target instanceof HTMLInputElement) return !$f6c31cce2adf654f$var$isValidInputKey(target, key);\n  if (target instanceof HTMLButtonElement) return target.type !== \"submit\";\n  return true;\n}\n\nconst $f6c31cce2adf654f$var$nonTextInputTypes = new Set([\"checkbox\", \"radio\", \"range\", \"color\", \"file\", \"image\", \"button\", \"submit\", \"reset\"]);\n\nfunction $f6c31cce2adf654f$var$isValidInputKey(target, key) {\n  // Only space should toggle checkboxes and radios, not enter.\n  return target.type === \"checkbox\" || target.type === \"radio\" ? key === \" \" : $f6c31cce2adf654f$var$nonTextInputTypes.has(target.type);\n}\n\nconst $3b117e43dc0ca95d$export$27c701ed9e449e99 = /*#__PURE__*/(0, $bx7SL$react).forwardRef((_ref, ref) => {\n  let {\n    children: children,\n    ...props\n  } = _ref;\n  let newRef = (0, $bx7SL$useRef)();\n  ref = ref !== null && ref !== void 0 ? ref : newRef;\n  let {\n    pressProps: pressProps\n  } = (0, $f6c31cce2adf654f$export$45712eceda6fad21)({ ...props,\n    ref: ref\n  });\n  let child = (0, $bx7SL$react).Children.only(children);\n  return /*#__PURE__*/(0, $bx7SL$react).cloneElement(child, // @ts-ignore\n  {\n    ref: ref,\n    ...(0, $bx7SL$mergeProps)(child.props, pressProps)\n  });\n});\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $f1ab8c75478c6f73$export$3351871ee4b288b8 = /*#__PURE__*/(0, $bx7SL$react).forwardRef((_ref2, ref) => {\n  let {\n    children: children,\n    ...props\n  } = _ref2;\n  let isRegistered = (0, $bx7SL$useRef)(false);\n  let prevContext = (0, $bx7SL$useContext)((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5));\n  let context = (0, $bx7SL$mergeProps)(prevContext || {}, { ...props,\n    ref: ref || (prevContext === null || prevContext === void 0 ? void 0 : prevContext.ref),\n\n    register() {\n      isRegistered.current = true;\n      if (prevContext) prevContext.register();\n    }\n\n  });\n  (0, $bx7SL$useSyncRef)(prevContext, ref);\n  (0, $bx7SL$useEffect)(() => {\n    if (!isRegistered.current) console.warn(\"A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.\");\n  }, []);\n  return /*#__PURE__*/(0, $bx7SL$react).createElement((0, $ae1eeba8b9eafd08$export$5165eccb35aaadb5).Provider, {\n    value: context\n  }, children);\n});\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nclass $8a9cb279dc87e130$export$905e7fc544a71f36 {\n  isDefaultPrevented() {\n    return this.nativeEvent.defaultPrevented;\n  }\n\n  preventDefault() {\n    this.defaultPrevented = true;\n    this.nativeEvent.preventDefault();\n  }\n\n  stopPropagation() {\n    this.nativeEvent.stopPropagation();\n\n    this.isPropagationStopped = () => true;\n  }\n\n  isPropagationStopped() {\n    return false;\n  }\n\n  persist() {}\n\n  constructor(type, nativeEvent) {\n    this.nativeEvent = nativeEvent;\n    this.target = nativeEvent.target;\n    this.currentTarget = nativeEvent.currentTarget;\n    this.relatedTarget = nativeEvent.relatedTarget;\n    this.bubbles = nativeEvent.bubbles;\n    this.cancelable = nativeEvent.cancelable;\n    this.defaultPrevented = nativeEvent.defaultPrevented;\n    this.eventPhase = nativeEvent.eventPhase;\n    this.isTrusted = nativeEvent.isTrusted;\n    this.timeStamp = nativeEvent.timeStamp;\n    this.type = type;\n  }\n\n}\n\nfunction $8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {\n  let stateRef = (0, $bx7SL$useRef)({\n    isFocused: false,\n    onBlur: onBlur,\n    observer: null\n  });\n  stateRef.current.onBlur = onBlur; // Clean up MutationObserver on unmount. See below.\n  // eslint-disable-next-line arrow-body-style\n\n  (0, $bx7SL$useLayoutEffect)(() => {\n    const state = stateRef.current;\n    return () => {\n      if (state.observer) {\n        state.observer.disconnect();\n        state.observer = null;\n      }\n    };\n  }, []); // This function is called during a React onFocus event.\n\n  return (0, $bx7SL$useCallback)(e => {\n    // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142\n    // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a\n    // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.\n    // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.\n    if (e.target instanceof HTMLButtonElement || e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement || e.target instanceof HTMLSelectElement) {\n      stateRef.current.isFocused = true;\n      let target = e.target;\n\n      let onBlurHandler = e => {\n        var // For backward compatibility, dispatch a (fake) React synthetic event.\n        _stateRef_current, _stateRef_current_onBlur;\n\n        stateRef.current.isFocused = false;\n        if (target.disabled) (_stateRef_current_onBlur = (_stateRef_current = stateRef.current).onBlur) === null || _stateRef_current_onBlur === void 0 ? void 0 : _stateRef_current_onBlur.call(_stateRef_current, new $8a9cb279dc87e130$export$905e7fc544a71f36(\"blur\", e)); // We no longer need the MutationObserver once the target is blurred.\n\n        if (stateRef.current.observer) {\n          stateRef.current.observer.disconnect();\n          stateRef.current.observer = null;\n        }\n      };\n\n      target.addEventListener(\"focusout\", onBlurHandler, {\n        once: true\n      });\n      stateRef.current.observer = new MutationObserver(() => {\n        if (stateRef.current.isFocused && target.disabled) {\n          stateRef.current.observer.disconnect();\n          target.dispatchEvent(new FocusEvent(\"blur\"));\n          target.dispatchEvent(new FocusEvent(\"focusout\", {\n            bubbles: true\n          }));\n        }\n      });\n      stateRef.current.observer.observe(target, {\n        attributes: true,\n        attributeFilter: [\"disabled\"]\n      });\n    }\n  }, []);\n}\n\nfunction $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {\n  let {\n    isDisabled: isDisabled,\n    onFocus: onFocusProp,\n    onBlur: onBlurProp,\n    onFocusChange: onFocusChange\n  } = props;\n  const onBlur = (0, $bx7SL$useCallback)(e => {\n    if (e.target === e.currentTarget) {\n      if (onBlurProp) onBlurProp(e);\n      if (onFocusChange) onFocusChange(false);\n      return true;\n    }\n  }, [onBlurProp, onFocusChange]);\n  const onSyntheticFocus = (0, $8a9cb279dc87e130$export$715c682d09d639cc)(onBlur);\n  const onFocus = (0, $bx7SL$useCallback)(e => {\n    // Double check that document.activeElement actually matches e.target in case a previously chained\n    // focus handler already moved focus somewhere else.\n    if (e.target === e.currentTarget && document.activeElement === e.target) {\n      if (onFocusProp) onFocusProp(e);\n      if (onFocusChange) onFocusChange(true);\n      onSyntheticFocus(e);\n    }\n  }, [onFocusChange, onFocusProp, onSyntheticFocus]);\n  return {\n    focusProps: {\n      onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : undefined,\n      onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : undefined\n    }\n  };\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\n\nlet $507fabe10e71c6fb$var$currentModality = null;\nlet $507fabe10e71c6fb$var$changeHandlers = new Set();\nlet $507fabe10e71c6fb$var$hasSetupGlobalListeners = false;\nlet $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\nlet $507fabe10e71c6fb$var$hasBlurredWindowRecently = false; // Only Tab or Esc keys will make focus visible on text input elements\n\nconst $507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS = {\n  Tab: true,\n  Escape: true\n};\n\nfunction $507fabe10e71c6fb$var$triggerChangeHandlers(modality, e) {\n  for (let handler of $507fabe10e71c6fb$var$changeHandlers) handler(modality, e);\n}\n/**\n * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.\n */\n\n\nfunction $507fabe10e71c6fb$var$isValidKey(e) {\n  // Control and Shift keys trigger when navigating back to the tab with keyboard.\n  return !(e.metaKey || !(0, $bx7SL$isMac)() && e.altKey || e.ctrlKey || e.key === \"Control\" || e.key === \"Shift\" || e.key === \"Meta\");\n}\n\nfunction $507fabe10e71c6fb$var$handleKeyboardEvent(e) {\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n\n  if ($507fabe10e71c6fb$var$isValidKey(e)) {\n    $507fabe10e71c6fb$var$currentModality = \"keyboard\";\n    $507fabe10e71c6fb$var$triggerChangeHandlers(\"keyboard\", e);\n  }\n}\n\nfunction $507fabe10e71c6fb$var$handlePointerEvent(e) {\n  $507fabe10e71c6fb$var$currentModality = \"pointer\";\n\n  if (e.type === \"mousedown\" || e.type === \"pointerdown\") {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    $507fabe10e71c6fb$var$triggerChangeHandlers(\"pointer\", e);\n  }\n}\n\nfunction $507fabe10e71c6fb$var$handleClickEvent(e) {\n  if ((0, $bx7SL$isVirtualClick)(e)) {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    $507fabe10e71c6fb$var$currentModality = \"virtual\";\n  }\n}\n\nfunction $507fabe10e71c6fb$var$handleFocusEvent(e) {\n  // Firefox fires two extra focus events when the user first clicks into an iframe:\n  // first on the window, then on the document. We ignore these events so they don't\n  // cause keyboard focus rings to appear.\n  if (e.target === window || e.target === document) return; // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.\n  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n\n  if (!$507fabe10e71c6fb$var$hasEventBeforeFocus && !$507fabe10e71c6fb$var$hasBlurredWindowRecently) {\n    $507fabe10e71c6fb$var$currentModality = \"virtual\";\n    $507fabe10e71c6fb$var$triggerChangeHandlers(\"virtual\", e);\n  }\n\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\n  $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;\n}\n\nfunction $507fabe10e71c6fb$var$handleWindowBlur() {\n  // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n  // for example, since a subsequent focus event won't be fired.\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\n  $507fabe10e71c6fb$var$hasBlurredWindowRecently = true;\n}\n/**\n * Setup global event listeners to control when keyboard focus style should be visible.\n */\n\n\nfunction $507fabe10e71c6fb$var$setupGlobalFocusEvents() {\n  if (typeof window === \"undefined\" || $507fabe10e71c6fb$var$hasSetupGlobalListeners) return; // Programmatic focus() calls shouldn't affect the current input modality.\n  // However, we need to detect other cases when a focus event occurs without\n  // a preceding user event (e.g. screen reader focus). Overriding the focus\n  // method on HTMLElement.prototype is a bit hacky, but works.\n\n  let focus = HTMLElement.prototype.focus;\n\n  HTMLElement.prototype.focus = function () {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    focus.apply(this, arguments);\n  };\n\n  document.addEventListener(\"keydown\", $507fabe10e71c6fb$var$handleKeyboardEvent, true);\n  document.addEventListener(\"keyup\", $507fabe10e71c6fb$var$handleKeyboardEvent, true);\n  document.addEventListener(\"click\", $507fabe10e71c6fb$var$handleClickEvent, true); // Register focus events on the window so they are sure to happen\n  // before React's event listeners (registered on the document).\n\n  window.addEventListener(\"focus\", $507fabe10e71c6fb$var$handleFocusEvent, true);\n  window.addEventListener(\"blur\", $507fabe10e71c6fb$var$handleWindowBlur, false);\n\n  if (typeof PointerEvent !== \"undefined\") {\n    document.addEventListener(\"pointerdown\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener(\"pointermove\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener(\"pointerup\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n  } else {\n    document.addEventListener(\"mousedown\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener(\"mousemove\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener(\"mouseup\", $507fabe10e71c6fb$var$handlePointerEvent, true);\n  }\n\n  $507fabe10e71c6fb$var$hasSetupGlobalListeners = true;\n}\n\nif (typeof document !== \"undefined\") {\n  if (document.readyState !== \"loading\") $507fabe10e71c6fb$var$setupGlobalFocusEvents();else document.addEventListener(\"DOMContentLoaded\", $507fabe10e71c6fb$var$setupGlobalFocusEvents);\n}\n\nfunction $507fabe10e71c6fb$export$b9b3dfddab17db27() {\n  return $507fabe10e71c6fb$var$currentModality !== \"pointer\";\n}\n\nfunction $507fabe10e71c6fb$export$630ff653c5ada6a9() {\n  return $507fabe10e71c6fb$var$currentModality;\n}\n\nfunction $507fabe10e71c6fb$export$8397ddfc504fdb9a(modality) {\n  $507fabe10e71c6fb$var$currentModality = modality;\n  $507fabe10e71c6fb$var$triggerChangeHandlers(modality, null);\n}\n\nfunction $507fabe10e71c6fb$export$98e20ec92f614cfe() {\n  $507fabe10e71c6fb$var$setupGlobalFocusEvents();\n  let [modality, setModality] = (0, $bx7SL$useState)($507fabe10e71c6fb$var$currentModality);\n  (0, $bx7SL$useEffect)(() => {\n    let handler = () => {\n      setModality($507fabe10e71c6fb$var$currentModality);\n    };\n\n    $507fabe10e71c6fb$var$changeHandlers.add(handler);\n    return () => {\n      $507fabe10e71c6fb$var$changeHandlers.delete(handler);\n    };\n  }, []);\n  return (0, $bx7SL$useIsSSR)() ? null : modality;\n}\n/**\n * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that\n * focus visible style can be properly set.\n */\n\n\nfunction $507fabe10e71c6fb$var$isKeyboardFocusEvent(isTextInput, modality, e) {\n  return !(isTextInput && modality === \"keyboard\" && e instanceof KeyboardEvent && !$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]);\n}\n\nfunction $507fabe10e71c6fb$export$ffd9e5021c1fb2d6() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let {\n    isTextInput: isTextInput,\n    autoFocus: autoFocus\n  } = props;\n  let [isFocusVisibleState, setFocusVisible] = (0, $bx7SL$useState)(autoFocus || $507fabe10e71c6fb$export$b9b3dfddab17db27());\n  $507fabe10e71c6fb$export$ec71b4b83ac08ec3(isFocusVisible => {\n    setFocusVisible(isFocusVisible);\n  }, [isTextInput], {\n    isTextInput: isTextInput\n  });\n  return {\n    isFocusVisible: isFocusVisibleState\n  };\n}\n\nfunction $507fabe10e71c6fb$export$ec71b4b83ac08ec3(fn, deps, opts) {\n  $507fabe10e71c6fb$var$setupGlobalFocusEvents();\n  (0, $bx7SL$useEffect)(() => {\n    let handler = (modality, e) => {\n      if (!$507fabe10e71c6fb$var$isKeyboardFocusEvent(opts === null || opts === void 0 ? void 0 : opts.isTextInput, modality, e)) return;\n      fn($507fabe10e71c6fb$export$b9b3dfddab17db27());\n    };\n\n    $507fabe10e71c6fb$var$changeHandlers.add(handler);\n    return () => {\n      $507fabe10e71c6fb$var$changeHandlers.delete(handler);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\n\nfunction $9ab94262bd0047c7$export$420e68273165f4ec(props) {\n  let {\n    isDisabled: isDisabled,\n    onBlurWithin: onBlurWithin,\n    onFocusWithin: onFocusWithin,\n    onFocusWithinChange: onFocusWithinChange\n  } = props;\n  let state = (0, $bx7SL$useRef)({\n    isFocusWithin: false\n  });\n  let onBlur = (0, $bx7SL$useCallback)(e => {\n    // We don't want to trigger onBlurWithin and then immediately onFocusWithin again\n    // when moving focus inside the element. Only trigger if the currentTarget doesn't\n    // include the relatedTarget (where focus is moving).\n    if (state.current.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {\n      state.current.isFocusWithin = false;\n      if (onBlurWithin) onBlurWithin(e);\n      if (onFocusWithinChange) onFocusWithinChange(false);\n    }\n  }, [onBlurWithin, onFocusWithinChange, state]);\n  let onSyntheticFocus = (0, $8a9cb279dc87e130$export$715c682d09d639cc)(onBlur);\n  let onFocus = (0, $bx7SL$useCallback)(e => {\n    // Double check that document.activeElement actually matches e.target in case a previously chained\n    // focus handler already moved focus somewhere else.\n    if (!state.current.isFocusWithin && document.activeElement === e.target) {\n      if (onFocusWithin) onFocusWithin(e);\n      if (onFocusWithinChange) onFocusWithinChange(true);\n      state.current.isFocusWithin = true;\n      onSyntheticFocus(e);\n    }\n  }, [onFocusWithin, onFocusWithinChange, onSyntheticFocus]);\n  if (isDisabled) return {\n    focusWithinProps: {\n      onFocus: null,\n      onBlur: null\n    }\n  };\n  return {\n    focusWithinProps: {\n      onFocus: onFocus,\n      onBlur: onBlur\n    }\n  };\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n// iOS fires onPointerEnter twice: once with pointerType=\"touch\" and again with pointerType=\"mouse\".\n// We want to ignore these emulated events so they do not trigger hover behavior.\n// See https://bugs.webkit.org/show_bug.cgi?id=214609.\n\n\nlet $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;\nlet $6179b936705e76d3$var$hoverCount = 0;\n\nfunction $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents() {\n  $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = true; // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter\n  // with pointerType=\"mouse\" immediately after onPointerUp and before onFocus. On other\n  // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in\n  // the distant future because a user previously touched the element.\n\n  setTimeout(() => {\n    $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;\n  }, 50);\n}\n\nfunction $6179b936705e76d3$var$handleGlobalPointerEvent(e) {\n  if (e.pointerType === \"touch\") $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents();\n}\n\nfunction $6179b936705e76d3$var$setupGlobalTouchEvents() {\n  if (typeof document === \"undefined\") return;\n  if (typeof PointerEvent !== \"undefined\") document.addEventListener(\"pointerup\", $6179b936705e76d3$var$handleGlobalPointerEvent);else document.addEventListener(\"touchend\", $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);\n  $6179b936705e76d3$var$hoverCount++;\n  return () => {\n    $6179b936705e76d3$var$hoverCount--;\n    if ($6179b936705e76d3$var$hoverCount > 0) return;\n    if (typeof PointerEvent !== \"undefined\") document.removeEventListener(\"pointerup\", $6179b936705e76d3$var$handleGlobalPointerEvent);else document.removeEventListener(\"touchend\", $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);\n  };\n}\n\nfunction $6179b936705e76d3$export$ae780daf29e6d456(props) {\n  let {\n    onHoverStart: onHoverStart,\n    onHoverChange: onHoverChange,\n    onHoverEnd: onHoverEnd,\n    isDisabled: isDisabled\n  } = props;\n  let [isHovered, setHovered] = (0, $bx7SL$useState)(false);\n  let state = (0, $bx7SL$useRef)({\n    isHovered: false,\n    ignoreEmulatedMouseEvents: false,\n    pointerType: \"\",\n    target: null\n  }).current;\n  (0, $bx7SL$useEffect)($6179b936705e76d3$var$setupGlobalTouchEvents, []);\n  let {\n    hoverProps: hoverProps,\n    triggerHoverEnd: triggerHoverEnd\n  } = (0, $bx7SL$useMemo)(() => {\n    let triggerHoverStart = (event, pointerType) => {\n      state.pointerType = pointerType;\n      if (isDisabled || pointerType === \"touch\" || state.isHovered || !event.currentTarget.contains(event.target)) return;\n      state.isHovered = true;\n      let target = event.currentTarget;\n      state.target = target;\n      if (onHoverStart) onHoverStart({\n        type: \"hoverstart\",\n        target: target,\n        pointerType: pointerType\n      });\n      if (onHoverChange) onHoverChange(true);\n      setHovered(true);\n    };\n\n    let triggerHoverEnd = (event, pointerType) => {\n      state.pointerType = \"\";\n      state.target = null;\n      if (pointerType === \"touch\" || !state.isHovered) return;\n      state.isHovered = false;\n      let target = event.currentTarget;\n      if (onHoverEnd) onHoverEnd({\n        type: \"hoverend\",\n        target: target,\n        pointerType: pointerType\n      });\n      if (onHoverChange) onHoverChange(false);\n      setHovered(false);\n    };\n\n    let hoverProps = {};\n\n    if (typeof PointerEvent !== \"undefined\") {\n      hoverProps.onPointerEnter = e => {\n        if ($6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents && e.pointerType === \"mouse\") return;\n        triggerHoverStart(e, e.pointerType);\n      };\n\n      hoverProps.onPointerLeave = e => {\n        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, e.pointerType);\n      };\n    } else {\n      hoverProps.onTouchStart = () => {\n        state.ignoreEmulatedMouseEvents = true;\n      };\n\n      hoverProps.onMouseEnter = e => {\n        if (!state.ignoreEmulatedMouseEvents && !$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents) triggerHoverStart(e, \"mouse\");\n        state.ignoreEmulatedMouseEvents = false;\n      };\n\n      hoverProps.onMouseLeave = e => {\n        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, \"mouse\");\n      };\n    }\n\n    return {\n      hoverProps: hoverProps,\n      triggerHoverEnd: triggerHoverEnd\n    };\n  }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state]);\n  (0, $bx7SL$useEffect)(() => {\n    // Call the triggerHoverEnd as soon as isDisabled changes to true\n    // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering\n    if (isDisabled) triggerHoverEnd({\n      currentTarget: state.target\n    }, state.pointerType); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isDisabled]);\n  return {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  };\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\n\nfunction $e0b6e0b68ec7f50f$export$872b660ac5a1ff98(props) {\n  let {\n    ref: ref,\n    onInteractOutside: onInteractOutside,\n    isDisabled: isDisabled,\n    onInteractOutsideStart: onInteractOutsideStart\n  } = props;\n  let stateRef = (0, $bx7SL$useRef)({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false,\n    onInteractOutside: onInteractOutside,\n    onInteractOutsideStart: onInteractOutsideStart\n  });\n  let state = stateRef.current;\n  state.onInteractOutside = onInteractOutside;\n  state.onInteractOutsideStart = onInteractOutsideStart;\n  (0, $bx7SL$useEffect)(() => {\n    if (isDisabled) return;\n\n    let onPointerDown = e => {\n      if ($e0b6e0b68ec7f50f$var$isValidEvent(e, ref) && state.onInteractOutside) {\n        if (state.onInteractOutsideStart) state.onInteractOutsideStart(e);\n        state.isPointerDown = true;\n      }\n    }; // Use pointer events if available. Otherwise, fall back to mouse and touch events.\n\n\n    if (typeof PointerEvent !== \"undefined\") {\n      let onPointerUp = e => {\n        if (state.isPointerDown && state.onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) state.onInteractOutside(e);\n        state.isPointerDown = false;\n      }; // changing these to capture phase fixed combobox\n\n\n      document.addEventListener(\"pointerdown\", onPointerDown, true);\n      document.addEventListener(\"pointerup\", onPointerUp, true);\n      return () => {\n        document.removeEventListener(\"pointerdown\", onPointerDown, true);\n        document.removeEventListener(\"pointerup\", onPointerUp, true);\n      };\n    } else {\n      let onMouseUp = e => {\n        if (state.ignoreEmulatedMouseEvents) state.ignoreEmulatedMouseEvents = false;else if (state.isPointerDown && state.onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) state.onInteractOutside(e);\n        state.isPointerDown = false;\n      };\n\n      let onTouchEnd = e => {\n        state.ignoreEmulatedMouseEvents = true;\n        if (state.onInteractOutside && state.isPointerDown && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) state.onInteractOutside(e);\n        state.isPointerDown = false;\n      };\n\n      document.addEventListener(\"mousedown\", onPointerDown, true);\n      document.addEventListener(\"mouseup\", onMouseUp, true);\n      document.addEventListener(\"touchstart\", onPointerDown, true);\n      document.addEventListener(\"touchend\", onTouchEnd, true);\n      return () => {\n        document.removeEventListener(\"mousedown\", onPointerDown, true);\n        document.removeEventListener(\"mouseup\", onMouseUp, true);\n        document.removeEventListener(\"touchstart\", onPointerDown, true);\n        document.removeEventListener(\"touchend\", onTouchEnd, true);\n      };\n    }\n  }, [ref, state, isDisabled]);\n}\n\nfunction $e0b6e0b68ec7f50f$var$isValidEvent(event, ref) {\n  if (event.button > 0) return false;\n\n  if (event.target) {\n    // if the event target is no longer in the document, ignore\n    const ownerDocument = event.target.ownerDocument;\n    if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) return false; // If the target is within a top layer element (e.g. toasts), ignore.\n\n    if (event.target.closest(\"[data-react-aria-top-layer]\")) return false;\n  }\n\n  return ref.current && !ref.current.contains(event.target);\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/*\n* Copyright 2020 Adobe. All rights reserved.\n* This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License. You may obtain a copy\n* of the License at http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software distributed under\n* the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n* OF ANY KIND, either express or implied. See the License for the specific language\n* governing permissions and limitations under the License.\n*/\n\n\nfunction $93925083ecbb358c$export$48d1ea6320830260(handler) {\n  if (!handler) return;\n  let shouldStopPropagation = true;\n  return e => {\n    let event = { ...e,\n\n      preventDefault() {\n        e.preventDefault();\n      },\n\n      isDefaultPrevented() {\n        return e.isDefaultPrevented();\n      },\n\n      stopPropagation() {\n        console.error(\"stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.\");\n      },\n\n      continuePropagation() {\n        shouldStopPropagation = false;\n      }\n\n    };\n    handler(event);\n    if (shouldStopPropagation) e.stopPropagation();\n  };\n}\n\nfunction $46d819fcbaf35654$export$8f71654801c2f7cd(props) {\n  return {\n    keyboardProps: props.isDisabled ? {} : {\n      onKeyDown: (0, $93925083ecbb358c$export$48d1ea6320830260)(props.onKeyDown),\n      onKeyUp: (0, $93925083ecbb358c$export$48d1ea6320830260)(props.onKeyUp)\n    }\n  };\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n\nfunction $e8a7022cf87cba2a$export$36da96379f79f245(props) {\n  let {\n    onMoveStart: onMoveStart,\n    onMove: onMove,\n    onMoveEnd: onMoveEnd\n  } = props;\n  let state = (0, $bx7SL$useRef)({\n    didMove: false,\n    lastPosition: null,\n    id: null\n  });\n  let {\n    addGlobalListener: addGlobalListener,\n    removeGlobalListener: removeGlobalListener\n  } = (0, $bx7SL$useGlobalListeners)();\n  let moveProps = (0, $bx7SL$useMemo)(() => {\n    let moveProps = {};\n\n    let start = () => {\n      (0, $14c0b72509d70225$export$16a4697467175487)();\n      state.current.didMove = false;\n    };\n\n    let move = (originalEvent, pointerType, deltaX, deltaY) => {\n      if (deltaX === 0 && deltaY === 0) return;\n\n      if (!state.current.didMove) {\n        state.current.didMove = true;\n        onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({\n          type: \"movestart\",\n          pointerType: pointerType,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n\n      onMove({\n        type: \"move\",\n        pointerType: pointerType,\n        deltaX: deltaX,\n        deltaY: deltaY,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n\n    let end = (originalEvent, pointerType) => {\n      (0, $14c0b72509d70225$export$b0d6fa1ab32e3295)();\n      if (state.current.didMove) onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({\n        type: \"moveend\",\n        pointerType: pointerType,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n\n    if (typeof PointerEvent === \"undefined\") {\n      let onMouseMove = e => {\n        if (e.button === 0) {\n          move(e, \"mouse\", e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n        }\n      };\n\n      let onMouseUp = e => {\n        if (e.button === 0) {\n          end(e, \"mouse\");\n          removeGlobalListener(window, \"mousemove\", onMouseMove, false);\n          removeGlobalListener(window, \"mouseup\", onMouseUp, false);\n        }\n      };\n\n      moveProps.onMouseDown = e => {\n        if (e.button === 0) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n          addGlobalListener(window, \"mousemove\", onMouseMove, false);\n          addGlobalListener(window, \"mouseup\", onMouseUp, false);\n        }\n      };\n\n      let onTouchMove = e => {\n        let touch = [...e.changedTouches].findIndex(_ref3 => {\n          let {\n            identifier: identifier\n          } = _ref3;\n          return identifier === state.current.id;\n        });\n\n        if (touch >= 0) {\n          let {\n            pageX: pageX,\n            pageY: pageY\n          } = e.changedTouches[touch];\n          move(e, \"touch\", pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: pageX,\n            pageY: pageY\n          };\n        }\n      };\n\n      let onTouchEnd = e => {\n        let touch = [...e.changedTouches].findIndex(_ref4 => {\n          let {\n            identifier: identifier\n          } = _ref4;\n          return identifier === state.current.id;\n        });\n\n        if (touch >= 0) {\n          end(e, \"touch\");\n          state.current.id = null;\n          removeGlobalListener(window, \"touchmove\", onTouchMove);\n          removeGlobalListener(window, \"touchend\", onTouchEnd);\n          removeGlobalListener(window, \"touchcancel\", onTouchEnd);\n        }\n      };\n\n      moveProps.onTouchStart = e => {\n        if (e.changedTouches.length === 0 || state.current.id != null) return;\n        let {\n          pageX: pageX,\n          pageY: pageY,\n          identifier: identifier\n        } = e.changedTouches[0];\n        start();\n        e.stopPropagation();\n        e.preventDefault();\n        state.current.lastPosition = {\n          pageX: pageX,\n          pageY: pageY\n        };\n        state.current.id = identifier;\n        addGlobalListener(window, \"touchmove\", onTouchMove, false);\n        addGlobalListener(window, \"touchend\", onTouchEnd, false);\n        addGlobalListener(window, \"touchcancel\", onTouchEnd, false);\n      };\n    } else {\n      let onPointerMove = e => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = e.pointerType || \"mouse\"; // Problems with PointerEvent#movementX/movementY:\n          // 1. it is always 0 on macOS Safari.\n          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS\n\n          move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n        }\n      };\n\n      let onPointerUp = e => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = e.pointerType || \"mouse\";\n          end(e, pointerType);\n          state.current.id = null;\n          removeGlobalListener(window, \"pointermove\", onPointerMove, false);\n          removeGlobalListener(window, \"pointerup\", onPointerUp, false);\n          removeGlobalListener(window, \"pointercancel\", onPointerUp, false);\n        }\n      };\n\n      moveProps.onPointerDown = e => {\n        if (e.button === 0 && state.current.id == null) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n          state.current.id = e.pointerId;\n          addGlobalListener(window, \"pointermove\", onPointerMove, false);\n          addGlobalListener(window, \"pointerup\", onPointerUp, false);\n          addGlobalListener(window, \"pointercancel\", onPointerUp, false);\n        }\n      };\n    }\n\n    let triggerKeyboardMove = (e, deltaX, deltaY) => {\n      start();\n      move(e, \"keyboard\", deltaX, deltaY);\n      end(e, \"keyboard\");\n    };\n\n    moveProps.onKeyDown = e => {\n      switch (e.key) {\n        case \"Left\":\n        case \"ArrowLeft\":\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, -1, 0);\n          break;\n\n        case \"Right\":\n        case \"ArrowRight\":\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 1, 0);\n          break;\n\n        case \"Up\":\n        case \"ArrowUp\":\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, -1);\n          break;\n\n        case \"Down\":\n        case \"ArrowDown\":\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, 1);\n          break;\n      }\n    };\n\n    return moveProps;\n  }, [state, onMoveStart, onMove, onMoveEnd, addGlobalListener, removeGlobalListener]);\n  return {\n    moveProps: moveProps\n  };\n}\n/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n\nfunction $7d0a636d7a4dcefd$export$2123ff2b87c81ca(props, ref) {\n  let {\n    onScroll: onScroll,\n    isDisabled: isDisabled\n  } = props;\n  let onScrollHandler = (0, $bx7SL$useCallback)(e => {\n    // If the ctrlKey is pressed, this is a zoom event, do nothing.\n    if (e.ctrlKey) return; // stop scrolling the page\n\n    e.preventDefault();\n    e.stopPropagation();\n    if (onScroll) onScroll({\n      deltaX: e.deltaX,\n      deltaY: e.deltaY\n    });\n  }, [onScroll]);\n  (0, $bx7SL$useEvent)(ref, \"wheel\", isDisabled ? null : onScrollHandler);\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n\nconst $8a26561d2877236e$var$DEFAULT_THRESHOLD = 500;\n\nfunction $8a26561d2877236e$export$c24ed0104d07eab9(props) {\n  let {\n    isDisabled: isDisabled,\n    onLongPressStart: onLongPressStart,\n    onLongPressEnd: onLongPressEnd,\n    onLongPress: onLongPress,\n    threshold = $8a26561d2877236e$var$DEFAULT_THRESHOLD,\n    accessibilityDescription: accessibilityDescription\n  } = props;\n  const timeRef = (0, $bx7SL$useRef)(null);\n  let {\n    addGlobalListener: addGlobalListener,\n    removeGlobalListener: removeGlobalListener\n  } = (0, $bx7SL$useGlobalListeners)();\n  let {\n    pressProps: pressProps\n  } = (0, $f6c31cce2adf654f$export$45712eceda6fad21)({\n    isDisabled: isDisabled,\n\n    onPressStart(e) {\n      if (e.pointerType === \"mouse\" || e.pointerType === \"touch\") {\n        if (onLongPressStart) onLongPressStart({ ...e,\n          type: \"longpressstart\"\n        });\n        timeRef.current = setTimeout(() => {\n          // Prevent other usePress handlers from also handling this event.\n          e.target.dispatchEvent(new PointerEvent(\"pointercancel\", {\n            bubbles: true\n          }));\n          if (onLongPress) onLongPress({ ...e,\n            type: \"longpress\"\n          });\n          timeRef.current = null;\n        }, threshold); // Prevent context menu, which may be opened on long press on touch devices\n\n        if (e.pointerType === \"touch\") {\n          let onContextMenu = e => {\n            e.preventDefault();\n          };\n\n          addGlobalListener(e.target, \"contextmenu\", onContextMenu, {\n            once: true\n          });\n          addGlobalListener(window, \"pointerup\", () => {\n            // If no contextmenu event is fired quickly after pointerup, remove the handler\n            // so future context menu events outside a long press are not prevented.\n            setTimeout(() => {\n              removeGlobalListener(e.target, \"contextmenu\", onContextMenu);\n            }, 30);\n          }, {\n            once: true\n          });\n        }\n      }\n    },\n\n    onPressEnd(e) {\n      if (timeRef.current) clearTimeout(timeRef.current);\n      if (onLongPressEnd && (e.pointerType === \"mouse\" || e.pointerType === \"touch\")) onLongPressEnd({ ...e,\n        type: \"longpressend\"\n      });\n    }\n\n  });\n  let descriptionProps = (0, $bx7SL$useDescription)(onLongPress && !isDisabled ? accessibilityDescription : null);\n  return {\n    longPressProps: (0, $bx7SL$mergeProps)(pressProps, descriptionProps)\n  };\n}\n\nexport { $3b117e43dc0ca95d$export$27c701ed9e449e99 as Pressable, $f1ab8c75478c6f73$export$3351871ee4b288b8 as PressResponder, $a1ea59d68270f0dd$export$f8168d8dd8fd66e6 as useFocus, $507fabe10e71c6fb$export$b9b3dfddab17db27 as isFocusVisible, $507fabe10e71c6fb$export$630ff653c5ada6a9 as getInteractionModality, $507fabe10e71c6fb$export$8397ddfc504fdb9a as setInteractionModality, $507fabe10e71c6fb$export$98e20ec92f614cfe as useInteractionModality, $507fabe10e71c6fb$export$ffd9e5021c1fb2d6 as useFocusVisible, $507fabe10e71c6fb$export$ec71b4b83ac08ec3 as useFocusVisibleListener, $9ab94262bd0047c7$export$420e68273165f4ec as useFocusWithin, $6179b936705e76d3$export$ae780daf29e6d456 as useHover, $e0b6e0b68ec7f50f$export$872b660ac5a1ff98 as useInteractOutside, $46d819fcbaf35654$export$8f71654801c2f7cd as useKeyboard, $e8a7022cf87cba2a$export$36da96379f79f245 as useMove, $f6c31cce2adf654f$export$45712eceda6fad21 as usePress, $7d0a636d7a4dcefd$export$2123ff2b87c81ca as useScrollWheel, $8a26561d2877236e$export$c24ed0104d07eab9 as useLongPress };","map":{"version":3,"mappings":"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","names":["$14c0b72509d70225$var$state","$14c0b72509d70225$var$savedUserSelect","$14c0b72509d70225$var$modifiedElementMap","WeakMap","$14c0b72509d70225$export$16a4697467175487","target","document","documentElement","style","webkitUserSelect","HTMLElement","SVGElement","set","userSelect","$14c0b72509d70225$export$b0d6fa1ab32e3295","setTimeout","has","targetOldUserSelect","get","getAttribute","removeAttribute","delete","$ae1eeba8b9eafd08$export$5165eccb35aaadb5","createContext","displayName","$f6c31cce2adf654f$var$usePressResponderContext","props","context","register","contextProps","ref","$f6c31cce2adf654f$export$45712eceda6fad21","onPress","onPressChange","onPressStart","onPressEnd","onPressUp","isDisabled","isPressed","isPressedProp","preventFocusOnPress","shouldCancelOnPointerExit","allowTextSelectionOnPress","_","domProps","propsRef","current","setPressed","ignoreEmulatedMouseEvents","ignoreClickAfterPress","didFirePressStart","activePointerId","isOverTarget","pointerType","addGlobalListener","removeAllGlobalListeners","pressProps","state","triggerPressStart","originalEvent","type","currentTarget","shiftKey","metaKey","ctrlKey","altKey","triggerPressEnd","wasPressed","triggerPressUp","cancel","e","$f6c31cce2adf654f$var$createEvent","onKeyDown","$f6c31cce2adf654f$var$isValidKeyboardEvent","nativeEvent","contains","$f6c31cce2adf654f$var$shouldPreventDefaultKeyboard","key","preventDefault","stopPropagation","repeat","onKeyUp","$f6c31cce2adf654f$var$isHTMLAnchorLink","onClick","button","click","PointerEvent","onPointerDown","$f6c31cce2adf654f$var$shouldPreventDefault","pointerId","onPointerMove","onPointerUp","onPointerCancel","onMouseDown","$f6c31cce2adf654f$var$isOverTarget","onDragStart","onMouseUp","onMouseEnter","onMouseLeave","onTouchStart","touch","$f6c31cce2adf654f$var$getTouchFromEvent","identifier","window","onScroll","onTouchMove","$f6c31cce2adf654f$var$getTouchById","onTouchEnd","onTouchCancel","tagName","hasAttribute","event","code","element","role","HTMLInputElement","$f6c31cce2adf654f$var$isValidInputKey","HTMLTextAreaElement","isContentEditable","targetTouches","length","changedTouches","i","$f6c31cce2adf654f$var$getPointClientRect","point","offsetX","width","radiusX","offsetY","height","radiusY","top","clientY","right","clientX","bottom","left","$f6c31cce2adf654f$var$areRectanglesOverlapping","a","b","rect","getBoundingClientRect","pointRect","draggable","HTMLButtonElement","$f6c31cce2adf654f$var$nonTextInputTypes","Set","$3b117e43dc0ca95d$export$27c701ed9e449e99","forwardRef","children","newRef","child","Children","only","cloneElement","$f1ab8c75478c6f73$export$3351871ee4b288b8","isRegistered","prevContext","console","warn","Provider","value","$8a9cb279dc87e130$export$905e7fc544a71f36","isDefaultPrevented","defaultPrevented","isPropagationStopped","persist","constructor","relatedTarget","bubbles","cancelable","eventPhase","isTrusted","timeStamp","$8a9cb279dc87e130$export$715c682d09d639cc","onBlur","stateRef","isFocused","observer","disconnect","HTMLSelectElement","onBlurHandler","_stateRef_current","disabled","addEventListener","once","MutationObserver","dispatchEvent","FocusEvent","observe","attributes","attributeFilter","$a1ea59d68270f0dd$export$f8168d8dd8fd66e6","onFocus","onFocusProp","onBlurProp","onFocusChange","onSyntheticFocus","activeElement","focusProps","undefined","$507fabe10e71c6fb$var$currentModality","$507fabe10e71c6fb$var$changeHandlers","$507fabe10e71c6fb$var$hasSetupGlobalListeners","$507fabe10e71c6fb$var$hasEventBeforeFocus","$507fabe10e71c6fb$var$hasBlurredWindowRecently","$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS","Tab","Escape","$507fabe10e71c6fb$var$triggerChangeHandlers","modality","handler","$507fabe10e71c6fb$var$isValidKey","$507fabe10e71c6fb$var$handleKeyboardEvent","$507fabe10e71c6fb$var$handlePointerEvent","$507fabe10e71c6fb$var$handleClickEvent","$507fabe10e71c6fb$var$handleFocusEvent","$507fabe10e71c6fb$var$handleWindowBlur","$507fabe10e71c6fb$var$setupGlobalFocusEvents","focus","prototype","apply","arguments","readyState","$507fabe10e71c6fb$export$b9b3dfddab17db27","$507fabe10e71c6fb$export$630ff653c5ada6a9","$507fabe10e71c6fb$export$8397ddfc504fdb9a","$507fabe10e71c6fb$export$98e20ec92f614cfe","setModality","add","$507fabe10e71c6fb$var$isKeyboardFocusEvent","isTextInput","KeyboardEvent","$507fabe10e71c6fb$export$ffd9e5021c1fb2d6","autoFocus","isFocusVisibleState","setFocusVisible","$507fabe10e71c6fb$export$ec71b4b83ac08ec3","isFocusVisible","fn","deps","opts","$9ab94262bd0047c7$export$420e68273165f4ec","onBlurWithin","onFocusWithin","onFocusWithinChange","isFocusWithin","focusWithinProps","$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents","$6179b936705e76d3$var$hoverCount","$6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents","$6179b936705e76d3$var$handleGlobalPointerEvent","$6179b936705e76d3$var$setupGlobalTouchEvents","removeEventListener","$6179b936705e76d3$export$ae780daf29e6d456","onHoverStart","onHoverChange","onHoverEnd","isHovered","setHovered","hoverProps","triggerHoverEnd","triggerHoverStart","onPointerEnter","onPointerLeave","$e0b6e0b68ec7f50f$export$872b660ac5a1ff98","onInteractOutside","onInteractOutsideStart","isPointerDown","$e0b6e0b68ec7f50f$var$isValidEvent","ownerDocument","closest","$93925083ecbb358c$export$48d1ea6320830260","shouldStopPropagation","error","continuePropagation","$46d819fcbaf35654$export$8f71654801c2f7cd","keyboardProps","$e8a7022cf87cba2a$export$36da96379f79f245","onMoveStart","onMove","onMoveEnd","didMove","lastPosition","id","removeGlobalListener","moveProps","start","move","deltaX","deltaY","end","onMouseMove","pageX","pageY","findIndex","triggerKeyboardMove","$7d0a636d7a4dcefd$export$2123ff2b87c81ca","onScrollHandler","$8a26561d2877236e$var$DEFAULT_THRESHOLD","$8a26561d2877236e$export$c24ed0104d07eab9","onLongPressStart","onLongPressEnd","onLongPress","threshold","accessibilityDescription","timeRef","onContextMenu","clearTimeout","descriptionProps","longPressProps"],"sources":["/Users/vux/dev/react-project1/node_modules/@react-aria/dialog/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/index.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/dialog/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/Pressable.tsx","/Users/vux/dev/react-project1/node_modules/@react-aria/dialog/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/usePress.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/dialog/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/textSelection.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/dialog/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/context.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/dialog/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/PressResponder.tsx","/Users/vux/dev/react-project1/node_modules/@react-aria/dialog/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useFocus.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/dialog/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/utils.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/dialog/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useFocusVisible.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/dialog/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useFocusWithin.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/dialog/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useHover.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/dialog/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useInteractOutside.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/dialog/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useKeyboard.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/dialog/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/createEventHandler.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/dialog/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useMove.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/dialog/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useScrollWheel.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/dialog/node_modules/@react-aria/interactions/dist/packages/@react-aria/interactions/src/useLongPress.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {Pressable} from './Pressable';\nexport {PressResponder} from './PressResponder';\nexport {useFocus} from './useFocus';\nexport {\n  isFocusVisible,\n  getInteractionModality,\n  setInteractionModality,\n  useInteractionModality,\n  useFocusVisible,\n  useFocusVisibleListener\n} from './useFocusVisible';\nexport {useFocusWithin} from './useFocusWithin';\nexport {useHover} from './useHover';\nexport {useInteractOutside} from './useInteractOutside';\nexport {useKeyboard} from './useKeyboard';\nexport {useMove} from './useMove';\nexport {usePress} from './usePress';\nexport {useScrollWheel} from './useScrollWheel';\nexport {useLongPress} from './useLongPress';\n\nexport type {FocusProps, FocusResult} from './useFocus';\nexport type {FocusVisibleHandler, FocusVisibleProps, FocusVisibleResult, Modality} from './useFocusVisible';\nexport type {FocusWithinProps, FocusWithinResult} from './useFocusWithin';\nexport type {HoverProps, HoverResult} from './useHover';\nexport type {InteractOutsideProps} from './useInteractOutside';\nexport type {KeyboardProps, KeyboardResult} from './useKeyboard';\nexport type {PressProps, PressHookProps, PressResult} from './usePress';\nexport type {MoveEvents} from '@react-types/shared';\nexport type {MoveResult} from './useMove';\nexport type {LongPressProps, LongPressResult} from './useLongPress';\nexport type {ScrollWheelProps} from './useScrollWheel';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes} from '@react-types/shared';\nimport {mergeProps} from '@react-aria/utils';\nimport {PressProps, usePress} from './usePress';\nimport React, {ReactElement, RefObject, useRef} from 'react';\n\ninterface PressableProps extends PressProps {\n  children: ReactElement<DOMAttributes, string>\n}\n\nexport const Pressable = React.forwardRef(({children, ...props}: PressableProps, ref: RefObject<Element>) => {\n  let newRef = useRef();\n  ref = ref ?? newRef;\n  let {pressProps} = usePress({...props, ref});\n  let child = React.Children.only(children);\n  return React.cloneElement(\n    child,\n    // @ts-ignore\n    {ref, ...mergeProps(child.props, pressProps)}\n  );\n});\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {disableTextSelection, restoreTextSelection} from './textSelection';\nimport {DOMAttributes, FocusableElement, PointerType, PressEvents} from '@react-types/shared';\nimport {focusWithoutScrolling, isVirtualClick, isVirtualPointerEvent, mergeProps, useGlobalListeners, useSyncRef} from '@react-aria/utils';\nimport {PressResponderContext} from './context';\nimport {RefObject, useContext, useEffect, useMemo, useRef, useState} from 'react';\n\nexport interface PressProps extends PressEvents {\n  /** Whether the target is in a controlled press state (e.g. an overlay it triggers is open). */\n  isPressed?: boolean,\n  /** Whether the press events should be disabled. */\n  isDisabled?: boolean,\n  /** Whether the target should not receive focus on press. */\n  preventFocusOnPress?: boolean,\n  /**\n   * Whether press events should be canceled when the pointer leaves the target while pressed.\n   * By default, this is `false`, which means if the pointer returns back over the target while\n   * still pressed, onPressStart will be fired again. If set to `true`, the press is canceled\n   * when the pointer leaves the target and onPressStart will not be fired if the pointer returns.\n   */\n  shouldCancelOnPointerExit?: boolean,\n  /** Whether text selection should be enabled on the pressable element. */\n  allowTextSelectionOnPress?: boolean\n}\n\nexport interface PressHookProps extends PressProps {\n  /** A ref to the target element. */\n  ref?: RefObject<Element>\n}\n\ninterface PressState {\n  isPressed: boolean,\n  ignoreEmulatedMouseEvents: boolean,\n  ignoreClickAfterPress: boolean,\n  didFirePressStart: boolean,\n  activePointerId: any,\n  target: FocusableElement | null,\n  isOverTarget: boolean,\n  pointerType: PointerType,\n  userSelect?: string\n}\n\ninterface EventBase {\n  currentTarget: EventTarget,\n  shiftKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean,\n  altKey: boolean\n}\n\nexport interface PressResult {\n  /** Whether the target is currently pressed. */\n  isPressed: boolean,\n  /** Props to spread on the target element. */\n  pressProps: DOMAttributes\n}\n\nfunction usePressResponderContext(props: PressHookProps): PressHookProps {\n  // Consume context from <PressResponder> and merge with props.\n  let context = useContext(PressResponderContext);\n  if (context) {\n    let {register, ...contextProps} = context;\n    props = mergeProps(contextProps, props) as PressHookProps;\n    register();\n  }\n  useSyncRef(context, props.ref);\n\n  return props;\n}\n\n/**\n * Handles press interactions across mouse, touch, keyboard, and screen readers.\n * It normalizes behavior across browsers and platforms, and handles many nuances\n * of dealing with pointer and keyboard events.\n */\nexport function usePress(props: PressHookProps): PressResult {\n  let {\n    onPress,\n    onPressChange,\n    onPressStart,\n    onPressEnd,\n    onPressUp,\n    isDisabled,\n    isPressed: isPressedProp,\n    preventFocusOnPress,\n    shouldCancelOnPointerExit,\n    allowTextSelectionOnPress,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref: _, // Removing `ref` from `domProps` because TypeScript is dumb\n    ...domProps\n  } = usePressResponderContext(props);\n  let propsRef = useRef<PressHookProps>(null);\n  propsRef.current = {onPress, onPressChange, onPressStart, onPressEnd, onPressUp, isDisabled, shouldCancelOnPointerExit};\n\n  let [isPressed, setPressed] = useState(false);\n  let ref = useRef<PressState>({\n    isPressed: false,\n    ignoreEmulatedMouseEvents: false,\n    ignoreClickAfterPress: false,\n    didFirePressStart: false,\n    activePointerId: null,\n    target: null,\n    isOverTarget: false,\n    pointerType: null\n  });\n\n  let {addGlobalListener, removeAllGlobalListeners} = useGlobalListeners();\n\n  let pressProps = useMemo(() => {\n    let state = ref.current;\n    let triggerPressStart = (originalEvent: EventBase, pointerType: PointerType) => {\n      let {onPressStart, onPressChange, isDisabled} = propsRef.current;\n      if (isDisabled || state.didFirePressStart) {\n        return;\n      }\n\n      if (onPressStart) {\n        onPressStart({\n          type: 'pressstart',\n          pointerType,\n          target: originalEvent.currentTarget as Element,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n\n      if (onPressChange) {\n        onPressChange(true);\n      }\n\n      state.didFirePressStart = true;\n      setPressed(true);\n    };\n\n    let triggerPressEnd = (originalEvent: EventBase, pointerType: PointerType, wasPressed = true) => {\n      let {onPressEnd, onPressChange, onPress, isDisabled} = propsRef.current;\n      if (!state.didFirePressStart) {\n        return;\n      }\n\n      state.ignoreClickAfterPress = true;\n      state.didFirePressStart = false;\n\n      if (onPressEnd) {\n        onPressEnd({\n          type: 'pressend',\n          pointerType,\n          target: originalEvent.currentTarget as Element,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n\n      if (onPressChange) {\n        onPressChange(false);\n      }\n\n      setPressed(false);\n\n      if (onPress && wasPressed && !isDisabled) {\n        onPress({\n          type: 'press',\n          pointerType,\n          target: originalEvent.currentTarget as Element,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n    };\n\n    let triggerPressUp = (originalEvent: EventBase, pointerType: PointerType) => {\n      let {onPressUp, isDisabled} = propsRef.current;\n      if (isDisabled) {\n        return;\n      }\n\n      if (onPressUp) {\n        onPressUp({\n          type: 'pressup',\n          pointerType,\n          target: originalEvent.currentTarget as Element,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n    };\n\n    let cancel = (e: EventBase) => {\n      if (state.isPressed) {\n        if (state.isOverTarget) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n        }\n        state.isPressed = false;\n        state.isOverTarget = false;\n        state.activePointerId = null;\n        state.pointerType = null;\n        removeAllGlobalListeners();\n        if (!allowTextSelectionOnPress) {\n          restoreTextSelection(state.target);\n        }\n      }\n    };\n\n    let pressProps: DOMAttributes = {\n      onKeyDown(e) {\n        if (isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target as Element)) {\n          if (shouldPreventDefaultKeyboard(e.target as Element, e.key)) {\n            e.preventDefault();\n          }\n          e.stopPropagation();\n\n          // If the event is repeating, it may have started on a different element\n          // after which focus moved to the current element. Ignore these events and\n          // only handle the first key down event.\n          if (!state.isPressed && !e.repeat) {\n            state.target = e.currentTarget;\n            state.isPressed = true;\n            triggerPressStart(e, 'keyboard');\n\n            // Focus may move before the key up event, so register the event on the document\n            // instead of the same element where the key down event occurred.\n            addGlobalListener(document, 'keyup', onKeyUp, false);\n          }\n        } else if (e.key === 'Enter' && isHTMLAnchorLink(e.currentTarget)) {\n          // If the target is a link, we won't have handled this above because we want the default\n          // browser behavior to open the link when pressing Enter. But we still need to prevent\n          // default so that elements above do not also handle it (e.g. table row).\n          e.stopPropagation();\n        }\n      },\n      onKeyUp(e) {\n        if (isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && !e.repeat && e.currentTarget.contains(e.target as Element)) {\n          triggerPressUp(createEvent(state.target, e), 'keyboard');\n        }\n      },\n      onClick(e) {\n        if (e && !e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (e && e.button === 0) {\n          e.stopPropagation();\n          if (isDisabled) {\n            e.preventDefault();\n          }\n\n          // If triggered from a screen reader or by using element.click(),\n          // trigger as if it were a keyboard click.\n          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === 'virtual' || isVirtualClick(e.nativeEvent))) {\n            // Ensure the element receives focus (VoiceOver on iOS does not do this)\n            if (!isDisabled && !preventFocusOnPress) {\n              focusWithoutScrolling(e.currentTarget);\n            }\n\n            triggerPressStart(e, 'virtual');\n            triggerPressUp(e, 'virtual');\n            triggerPressEnd(e, 'virtual');\n          }\n\n          state.ignoreEmulatedMouseEvents = false;\n          state.ignoreClickAfterPress = false;\n        }\n      }\n    };\n\n    let onKeyUp = (e: KeyboardEvent) => {\n      if (state.isPressed && isValidKeyboardEvent(e, state.target)) {\n        if (shouldPreventDefaultKeyboard(e.target as Element, e.key)) {\n          e.preventDefault();\n        }\n        e.stopPropagation();\n\n        state.isPressed = false;\n        let target = e.target as Element;\n        triggerPressEnd(createEvent(state.target, e), 'keyboard', state.target.contains(target));\n        removeAllGlobalListeners();\n\n        // If the target is a link, trigger the click method to open the URL,\n        // but defer triggering pressEnd until onClick event handler.\n        if (state.target instanceof HTMLElement && state.target.contains(target) && (isHTMLAnchorLink(state.target) || state.target.getAttribute('role') === 'link')) {\n          state.target.click();\n        }\n      }\n    };\n\n    if (typeof PointerEvent !== 'undefined') {\n      pressProps.onPointerDown = (e) => {\n        // Only handle left clicks, and ignore events that bubbled through portals.\n        if (e.button !== 0 || !e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.\n        // Ignore and let the onClick handler take care of it instead.\n        // https://bugs.webkit.org/show_bug.cgi?id=222627\n        // https://bugs.webkit.org/show_bug.cgi?id=223202\n        if (isVirtualPointerEvent(e.nativeEvent)) {\n          state.pointerType = 'virtual';\n          return;\n        }\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on pointer down and handle focusing the pressable element ourselves.\n        if (shouldPreventDefault(e.currentTarget as Element)) {\n          e.preventDefault();\n        }\n\n        state.pointerType = e.pointerType;\n\n        e.stopPropagation();\n        if (!state.isPressed) {\n          state.isPressed = true;\n          state.isOverTarget = true;\n          state.activePointerId = e.pointerId;\n          state.target = e.currentTarget;\n\n          if (!isDisabled && !preventFocusOnPress) {\n            focusWithoutScrolling(e.currentTarget);\n          }\n\n          if (!allowTextSelectionOnPress) {\n            disableTextSelection(state.target);\n          }\n\n          triggerPressStart(e, state.pointerType);\n\n          addGlobalListener(document, 'pointermove', onPointerMove, false);\n          addGlobalListener(document, 'pointerup', onPointerUp, false);\n          addGlobalListener(document, 'pointercancel', onPointerCancel, false);\n        }\n      };\n\n      pressProps.onMouseDown = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (e.button === 0) {\n          // Chrome and Firefox on touch Windows devices require mouse down events\n          // to be canceled in addition to pointer events, or an extra asynchronous\n          // focus event will be fired.\n          if (shouldPreventDefault(e.currentTarget as Element)) {\n            e.preventDefault();\n          }\n\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onPointerUp = (e) => {\n        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.\n        if (!e.currentTarget.contains(e.target as Element) || state.pointerType === 'virtual') {\n          return;\n        }\n\n        // Only handle left clicks\n        // Safari on iOS sometimes fires pointerup events, even\n        // when the touch isn't over the target, so double check.\n        if (e.button === 0 && isOverTarget(e, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType || e.pointerType);\n        }\n      };\n\n      // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.\n      // Use pointer move events instead to implement our own hit testing.\n      // See https://bugs.webkit.org/show_bug.cgi?id=199803\n      let onPointerMove = (e: PointerEvent) => {\n        if (e.pointerId !== state.activePointerId) {\n          return;\n        }\n\n        if (isOverTarget(e, state.target)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(createEvent(state.target, e), state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) {\n            cancel(e);\n          }\n        }\n      };\n\n      let onPointerUp = (e: PointerEvent) => {\n        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {\n          if (isOverTarget(e, state.target)) {\n            triggerPressEnd(createEvent(state.target, e), state.pointerType);\n          } else if (state.isOverTarget) {\n            triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n          }\n\n          state.isPressed = false;\n          state.isOverTarget = false;\n          state.activePointerId = null;\n          state.pointerType = null;\n          removeAllGlobalListeners();\n          if (!allowTextSelectionOnPress) {\n            restoreTextSelection(state.target);\n          }\n        }\n      };\n\n      let onPointerCancel = (e: PointerEvent) => {\n        cancel(e);\n      };\n\n      pressProps.onDragStart = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.\n        cancel(e);\n      };\n    } else {\n      pressProps.onMouseDown = (e) => {\n        // Only handle left clicks\n        if (e.button !== 0 || !e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on mouse down and handle focusing the pressable element ourselves.\n        if (shouldPreventDefault(e.currentTarget)) {\n          e.preventDefault();\n        }\n\n        e.stopPropagation();\n        if (state.ignoreEmulatedMouseEvents) {\n          return;\n        }\n\n        state.isPressed = true;\n        state.isOverTarget = true;\n        state.target = e.currentTarget;\n        state.pointerType = isVirtualClick(e.nativeEvent) ? 'virtual' : 'mouse';\n\n        if (!isDisabled && !preventFocusOnPress) {\n          focusWithoutScrolling(e.currentTarget);\n        }\n\n        triggerPressStart(e, state.pointerType);\n\n        addGlobalListener(document, 'mouseup', onMouseUp, false);\n      };\n\n      pressProps.onMouseEnter = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = true;\n          triggerPressStart(e, state.pointerType);\n        }\n      };\n\n      pressProps.onMouseLeave = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) {\n            cancel(e);\n          }\n        }\n      };\n\n      pressProps.onMouseUp = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        if (!state.ignoreEmulatedMouseEvents && e.button === 0) {\n          triggerPressUp(e, state.pointerType);\n        }\n      };\n\n      let onMouseUp = (e: MouseEvent) => {\n        // Only handle left clicks\n        if (e.button !== 0) {\n          return;\n        }\n\n        state.isPressed = false;\n        removeAllGlobalListeners();\n\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n          return;\n        }\n\n        if (isOverTarget(e, state.target)) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType);\n        } else if (state.isOverTarget) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n        }\n\n        state.isOverTarget = false;\n      };\n\n      pressProps.onTouchStart = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        let touch = getTouchFromEvent(e.nativeEvent);\n        if (!touch) {\n          return;\n        }\n        state.activePointerId = touch.identifier;\n        state.ignoreEmulatedMouseEvents = true;\n        state.isOverTarget = true;\n        state.isPressed = true;\n        state.target = e.currentTarget;\n        state.pointerType = 'touch';\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent default\n        // on the emulated mouse event and handle focusing the pressable element ourselves.\n        if (!isDisabled && !preventFocusOnPress) {\n          focusWithoutScrolling(e.currentTarget);\n        }\n\n        if (!allowTextSelectionOnPress) {\n          disableTextSelection(state.target);\n        }\n\n        triggerPressStart(e, state.pointerType);\n\n        addGlobalListener(window, 'scroll', onScroll, true);\n      };\n\n      pressProps.onTouchMove = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (!state.isPressed) {\n          return;\n        }\n\n        let touch = getTouchById(e.nativeEvent, state.activePointerId);\n        if (touch && isOverTarget(touch, e.currentTarget)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(e, state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) {\n            cancel(e);\n          }\n        }\n      };\n\n      pressProps.onTouchEnd = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (!state.isPressed) {\n          return;\n        }\n\n        let touch = getTouchById(e.nativeEvent, state.activePointerId);\n        if (touch && isOverTarget(touch, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType);\n          triggerPressEnd(e, state.pointerType);\n        } else if (state.isOverTarget) {\n          triggerPressEnd(e, state.pointerType, false);\n        }\n\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        state.ignoreEmulatedMouseEvents = true;\n        if (!allowTextSelectionOnPress) {\n          restoreTextSelection(state.target);\n        }\n        removeAllGlobalListeners();\n      };\n\n      pressProps.onTouchCancel = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed) {\n          cancel(e);\n        }\n      };\n\n      let onScroll = (e: Event) => {\n        if (state.isPressed && (e.target as Element).contains(state.target)) {\n          cancel({\n            currentTarget: state.target,\n            shiftKey: false,\n            ctrlKey: false,\n            metaKey: false,\n            altKey: false\n          });\n        }\n      };\n\n      pressProps.onDragStart = (e) => {\n        if (!e.currentTarget.contains(e.target as Element)) {\n          return;\n        }\n\n        cancel(e);\n      };\n    }\n\n    return pressProps;\n  }, [addGlobalListener, isDisabled, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress]);\n\n  // Remove user-select: none in case component unmounts immediately after pressStart\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => {\n      if (!allowTextSelectionOnPress) {\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        restoreTextSelection(ref.current.target);\n      }\n    };\n  }, [allowTextSelectionOnPress]);\n\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: mergeProps(domProps, pressProps)\n  };\n}\n\nfunction isHTMLAnchorLink(target: Element): boolean {\n  return target.tagName === 'A' && target.hasAttribute('href');\n}\n\nfunction isValidKeyboardEvent(event: KeyboardEvent, currentTarget: Element): boolean {\n  const {key, code} = event;\n  const element = currentTarget as HTMLElement;\n  const role = element.getAttribute('role');\n  // Accessibility for keyboards. Space and Enter only.\n  // \"Spacebar\" is for IE 11\n  return (\n    (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') &&\n    !((element instanceof HTMLInputElement && !isValidInputKey(element, key)) ||\n      element instanceof HTMLTextAreaElement ||\n      element.isContentEditable) &&\n    // A link with a valid href should be handled natively,\n    // unless it also has role='button' and was triggered using Space.\n    (!isHTMLAnchorLink(element) || (role === 'button' && key !== 'Enter')) &&\n    // An element with role='link' should only trigger with Enter key\n    !(role === 'link' && key !== 'Enter')\n  );\n}\n\nfunction getTouchFromEvent(event: TouchEvent): Touch | null {\n  const {targetTouches} = event;\n  if (targetTouches.length > 0) {\n    return targetTouches[0];\n  }\n  return null;\n}\n\nfunction getTouchById(\n  event: TouchEvent,\n  pointerId: null | number\n): null | Touch {\n  const changedTouches = event.changedTouches;\n  for (let i = 0; i < changedTouches.length; i++) {\n    const touch = changedTouches[i];\n    if (touch.identifier === pointerId) {\n      return touch;\n    }\n  }\n  return null;\n}\n\nfunction createEvent(target: FocusableElement, e: EventBase): EventBase {\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey\n  };\n}\n\ninterface Rect {\n  top: number,\n  right: number,\n  bottom: number,\n  left: number\n}\n\ninterface EventPoint {\n  clientX: number,\n  clientY: number,\n  width?: number,\n  height?: number,\n  radiusX?: number,\n  radiusY?: number\n}\n\nfunction getPointClientRect(point: EventPoint): Rect {\n  let offsetX = (point.width / 2) || point.radiusX || 0;\n  let offsetY = (point.height / 2) || point.radiusY || 0;\n\n  return {\n    top: point.clientY - offsetY,\n    right: point.clientX + offsetX,\n    bottom: point.clientY + offsetY,\n    left: point.clientX - offsetX\n  };\n}\n\nfunction areRectanglesOverlapping(a: Rect, b: Rect) {\n  // check if they cannot overlap on x axis\n  if (a.left > b.right || b.left > a.right) {\n    return false;\n  }\n  // check if they cannot overlap on y axis\n  if (a.top > b.bottom || b.top > a.bottom) {\n    return false;\n  }\n  return true;\n}\n\nfunction isOverTarget(point: EventPoint, target: Element) {\n  let rect = target.getBoundingClientRect();\n  let pointRect = getPointClientRect(point);\n  return areRectanglesOverlapping(rect, pointRect);\n}\n\nfunction shouldPreventDefault(target: Element) {\n  // We cannot prevent default if the target is a draggable element.\n  return !(target instanceof HTMLElement) || !target.draggable;\n}\n\nfunction shouldPreventDefaultKeyboard(target: Element, key: string) {\n  if (target instanceof HTMLInputElement) {\n    return !isValidInputKey(target, key);\n  }\n\n  if (target instanceof HTMLButtonElement) {\n    return target.type !== 'submit';\n  }\n\n  return true;\n}\n\nconst nonTextInputTypes = new Set([\n  'checkbox',\n  'radio',\n  'range',\n  'color',\n  'file',\n  'image',\n  'button',\n  'submit',\n  'reset'\n]);\n\nfunction isValidInputKey(target: HTMLInputElement, key: string) {\n  // Only space should toggle checkboxes and radios, not enter.\n  return target.type === 'checkbox' || target.type === 'radio'\n    ? key === ' '\n    : nonTextInputTypes.has(target.type);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {isIOS, runAfterTransition} from '@react-aria/utils';\n\n// Safari on iOS starts selecting text on long press. The only way to avoid this, it seems,\n// is to add user-select: none to the entire page. Adding it to the pressable element prevents\n// that element from being selected, but nearby elements may still receive selection. We add\n// user-select: none on touch start, and remove it again on touch end to prevent this.\n// This must be implemented using global state to avoid race conditions between multiple elements.\n\n// There are three possible states due to the delay before removing user-select: none after\n// pointer up. The 'default' state always transitions to the 'disabled' state, which transitions\n// to 'restoring'. The 'restoring' state can either transition back to 'disabled' or 'default'.\n\n// For non-iOS devices, we apply user-select: none to the pressed element instead to avoid possible\n// performance issues that arise from applying and removing user-select: none to the entire page\n// (see https://github.com/adobe/react-spectrum/issues/1609).\ntype State = 'default' | 'disabled' | 'restoring';\n\n// Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element\n// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually\nlet state: State = 'default';\nlet savedUserSelect = '';\nlet modifiedElementMap = new WeakMap<Element, string>();\n\nexport function disableTextSelection(target?: Element) {\n  if (isIOS()) {\n    if (state === 'default') {\n      savedUserSelect = document.documentElement.style.webkitUserSelect;\n      document.documentElement.style.webkitUserSelect = 'none';\n    }\n\n    state = 'disabled';\n  } else if (target instanceof HTMLElement || target instanceof SVGElement) {\n    // If not iOS, store the target's original user-select and change to user-select: none\n    // Ignore state since it doesn't apply for non iOS\n    modifiedElementMap.set(target, target.style.userSelect);\n    target.style.userSelect = 'none';\n  }\n}\n\nexport function restoreTextSelection(target?: Element) {\n  if (isIOS()) {\n    // If the state is already default, there's nothing to do.\n    // If it is restoring, then there's no need to queue a second restore.\n    if (state !== 'disabled') {\n      return;\n    }\n\n    state = 'restoring';\n\n    // There appears to be a delay on iOS where selection still might occur\n    // after pointer up, so wait a bit before removing user-select.\n    setTimeout(() => {\n      // Wait for any CSS transitions to complete so we don't recompute style\n      // for the whole page in the middle of the animation and cause jank.\n      runAfterTransition(() => {\n        // Avoid race conditions\n        if (state === 'restoring') {\n          if (document.documentElement.style.webkitUserSelect === 'none') {\n            document.documentElement.style.webkitUserSelect = savedUserSelect || '';\n          }\n\n          savedUserSelect = '';\n          state = 'default';\n        }\n      });\n    }, 300);\n  } else if (target instanceof HTMLElement || target instanceof SVGElement) {\n    // If not iOS, restore the target's original user-select if any\n    // Ignore state since it doesn't apply for non iOS\n    if (target && modifiedElementMap.has(target)) {\n      let targetOldUserSelect = modifiedElementMap.get(target);\n\n      if (target.style.userSelect === 'none') {\n        target.style.userSelect = targetOldUserSelect;\n      }\n\n      if (target.getAttribute('style') === '') {\n        target.removeAttribute('style');\n      }\n      modifiedElementMap.delete(target);\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\nimport {PressProps} from './usePress';\nimport React, {MutableRefObject} from 'react';\n\ninterface IPressResponderContext extends PressProps {\n  register(): void,\n  ref?: MutableRefObject<FocusableElement>\n}\n\nexport const PressResponderContext = React.createContext<IPressResponderContext>(null);\nPressResponderContext.displayName = 'PressResponderContext';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\nimport {mergeProps, useSyncRef} from '@react-aria/utils';\nimport {PressProps} from './usePress';\nimport {PressResponderContext} from './context';\nimport React, {ReactNode, RefObject, useContext, useEffect, useRef} from 'react';\n\ninterface PressResponderProps extends PressProps {\n  children: ReactNode\n}\n\nexport const PressResponder = React.forwardRef(({children, ...props}: PressResponderProps, ref: RefObject<FocusableElement>) => {\n  let isRegistered = useRef(false);\n  let prevContext = useContext(PressResponderContext);\n  let context = mergeProps(prevContext || {}, {\n    ...props,\n    ref: ref || prevContext?.ref,\n    register() {\n      isRegistered.current = true;\n      if (prevContext) {\n        prevContext.register();\n      }\n    }\n  });\n\n  useSyncRef(prevContext, ref);\n\n  useEffect(() => {\n    if (!isRegistered.current) {\n      console.warn(\n        'A PressResponder was rendered without a pressable child. ' +\n        'Either call the usePress hook, or wrap your DOM node with <Pressable> component.'\n      );\n    }\n  }, []);\n\n  return (\n    <PressResponderContext.Provider value={context}>\n      {children}\n    </PressResponderContext.Provider>\n  );\n});\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {DOMAttributes, FocusableElement, FocusEvents} from '@react-types/shared';\nimport {FocusEvent, useCallback} from 'react';\nimport {useSyntheticBlurEvent} from './utils';\n\nexport interface FocusProps<Target = FocusableElement> extends FocusEvents<Target> {\n  /** Whether the focus events should be disabled. */\n  isDisabled?: boolean\n}\n\nexport interface FocusResult<Target = FocusableElement> {\n  /** Props to spread onto the target element. */\n  focusProps: DOMAttributes<Target>\n}\n\n/**\n * Handles focus events for the immediate target.\n * Focus events on child elements will be ignored.\n */\nexport function useFocus<Target extends FocusableElement = FocusableElement>(props: FocusProps<Target>): FocusResult<Target> {\n  let {\n    isDisabled,\n    onFocus: onFocusProp,\n    onBlur: onBlurProp,\n    onFocusChange\n  } = props;\n\n  const onBlur: FocusProps<Target>['onBlur'] = useCallback((e: FocusEvent<Target>) => {\n    if (e.target === e.currentTarget) {\n      if (onBlurProp) {\n        onBlurProp(e);\n      }\n\n      if (onFocusChange) {\n        onFocusChange(false);\n      }\n\n      return true;\n    }\n  }, [onBlurProp, onFocusChange]);\n\n\n  const onSyntheticFocus = useSyntheticBlurEvent<Target>(onBlur);\n\n  const onFocus: FocusProps<Target>['onFocus'] = useCallback((e: FocusEvent<Target>) => {\n    // Double check that document.activeElement actually matches e.target in case a previously chained\n    // focus handler already moved focus somewhere else.\n    if (e.target === e.currentTarget && document.activeElement === e.target) {\n      if (onFocusProp) {\n        onFocusProp(e);\n      }\n\n      if (onFocusChange) {\n        onFocusChange(true);\n      }\n\n      onSyntheticFocus(e);\n    }\n  }, [onFocusChange, onFocusProp, onSyntheticFocus]);\n\n  return {\n    focusProps: {\n      onFocus: (!isDisabled && (onFocusProp || onFocusChange || onBlurProp)) ? onFocus : undefined,\n      onBlur: (!isDisabled && (onBlurProp || onFocusChange)) ? onBlur : undefined\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusEvent as ReactFocusEvent, useCallback, useRef} from 'react';\nimport {useLayoutEffect} from '@react-aria/utils';\n\nexport class SyntheticFocusEvent<Target = Element> implements ReactFocusEvent<Target> {\n  nativeEvent: FocusEvent;\n  target: EventTarget & Target;\n  currentTarget: EventTarget & Target;\n  relatedTarget: Element;\n  bubbles: boolean;\n  cancelable: boolean;\n  defaultPrevented: boolean;\n  eventPhase: number;\n  isTrusted: boolean;\n  timeStamp: number;\n  type: string;\n\n  constructor(type: string, nativeEvent: FocusEvent) {\n    this.nativeEvent = nativeEvent;\n    this.target = nativeEvent.target as EventTarget & Target;\n    this.currentTarget = nativeEvent.currentTarget as EventTarget & Target;\n    this.relatedTarget = nativeEvent.relatedTarget as Element;\n    this.bubbles = nativeEvent.bubbles;\n    this.cancelable = nativeEvent.cancelable;\n    this.defaultPrevented = nativeEvent.defaultPrevented;\n    this.eventPhase = nativeEvent.eventPhase;\n    this.isTrusted = nativeEvent.isTrusted;\n    this.timeStamp = nativeEvent.timeStamp;\n    this.type = type;\n  }\n\n  isDefaultPrevented(): boolean {\n    return this.nativeEvent.defaultPrevented;\n  }\n\n  preventDefault(): void {\n    this.defaultPrevented = true;\n    this.nativeEvent.preventDefault();\n  }\n\n  stopPropagation(): void {\n    this.nativeEvent.stopPropagation();\n    this.isPropagationStopped = () => true;\n  }\n\n  isPropagationStopped(): boolean {\n    return false;\n  }\n\n  persist() {}\n}\n\nexport function useSyntheticBlurEvent<Target = Element>(onBlur: (e: ReactFocusEvent<Target>) => void) {\n  let stateRef = useRef({\n    isFocused: false,\n    onBlur,\n    observer: null as MutationObserver\n  });\n  stateRef.current.onBlur = onBlur;\n\n  // Clean up MutationObserver on unmount. See below.\n  // eslint-disable-next-line arrow-body-style\n  useLayoutEffect(() => {\n    const state = stateRef.current;\n    return () => {\n      if (state.observer) {\n        state.observer.disconnect();\n        state.observer = null;\n      }\n    };\n  }, []);\n\n  // This function is called during a React onFocus event.\n  return useCallback((e: ReactFocusEvent<Target>) => {\n    // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142\n    // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a\n    // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.\n    // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.\n    if (\n      e.target instanceof HTMLButtonElement ||\n      e.target instanceof HTMLInputElement ||\n      e.target instanceof HTMLTextAreaElement ||\n      e.target instanceof HTMLSelectElement\n    ) {\n      stateRef.current.isFocused = true;\n\n      let target = e.target;\n      let onBlurHandler = (e: FocusEvent) => {\n        stateRef.current.isFocused = false;\n\n        if (target.disabled) {\n          // For backward compatibility, dispatch a (fake) React synthetic event.\n          stateRef.current.onBlur?.(new SyntheticFocusEvent('blur', e));\n        }\n\n        // We no longer need the MutationObserver once the target is blurred.\n        if (stateRef.current.observer) {\n          stateRef.current.observer.disconnect();\n          stateRef.current.observer = null;\n        }\n      };\n\n      target.addEventListener('focusout', onBlurHandler, {once: true});\n\n      stateRef.current.observer = new MutationObserver(() => {\n        if (stateRef.current.isFocused && target.disabled) {\n          stateRef.current.observer.disconnect();\n          target.dispatchEvent(new FocusEvent('blur'));\n          target.dispatchEvent(new FocusEvent('focusout', {bubbles: true}));\n        }\n      });\n\n      stateRef.current.observer.observe(target, {attributes: true, attributeFilter: ['disabled']});\n    }\n  }, []);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {isMac, isVirtualClick} from '@react-aria/utils';\nimport {useEffect, useState} from 'react';\nimport {useIsSSR} from '@react-aria/ssr';\n\nexport type Modality = 'keyboard' | 'pointer' | 'virtual';\ntype HandlerEvent = PointerEvent | MouseEvent | KeyboardEvent | FocusEvent;\ntype Handler = (modality: Modality, e: HandlerEvent) => void;\nexport type FocusVisibleHandler = (isFocusVisible: boolean) => void;\nexport interface FocusVisibleProps {\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\nexport interface FocusVisibleResult {\n  /** Whether keyboard focus is visible globally. */\n  isFocusVisible: boolean\n}\n\nlet currentModality = null;\nlet changeHandlers = new Set<Handler>();\nlet hasSetupGlobalListeners = false;\nlet hasEventBeforeFocus = false;\nlet hasBlurredWindowRecently = false;\n\n// Only Tab or Esc keys will make focus visible on text input elements\nconst FOCUS_VISIBLE_INPUT_KEYS = {\n  Tab: true,\n  Escape: true\n};\n\nfunction triggerChangeHandlers(modality: Modality, e: HandlerEvent) {\n  for (let handler of changeHandlers) {\n    handler(modality, e);\n  }\n}\n\n/**\n * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.\n */\nfunction isValidKey(e: KeyboardEvent) {\n  // Control and Shift keys trigger when navigating back to the tab with keyboard.\n  return !(e.metaKey || (!isMac() && e.altKey) || e.ctrlKey || e.key === 'Control' || e.key === 'Shift' || e.key === 'Meta');\n}\n\n\nfunction handleKeyboardEvent(e: KeyboardEvent) {\n  hasEventBeforeFocus = true;\n  if (isValidKey(e)) {\n    currentModality = 'keyboard';\n    triggerChangeHandlers('keyboard', e);\n  }\n}\n\nfunction handlePointerEvent(e: PointerEvent | MouseEvent) {\n  currentModality = 'pointer';\n  if (e.type === 'mousedown' || e.type === 'pointerdown') {\n    hasEventBeforeFocus = true;\n    triggerChangeHandlers('pointer', e);\n  }\n}\n\nfunction handleClickEvent(e: MouseEvent) {\n  if (isVirtualClick(e)) {\n    hasEventBeforeFocus = true;\n    currentModality = 'virtual';\n  }\n}\n\nfunction handleFocusEvent(e: FocusEvent) {\n  // Firefox fires two extra focus events when the user first clicks into an iframe:\n  // first on the window, then on the document. We ignore these events so they don't\n  // cause keyboard focus rings to appear.\n  if (e.target === window || e.target === document) {\n    return;\n  }\n\n  // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.\n  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n  if (!hasEventBeforeFocus && !hasBlurredWindowRecently) {\n    currentModality = 'virtual';\n    triggerChangeHandlers('virtual', e);\n  }\n\n  hasEventBeforeFocus = false;\n  hasBlurredWindowRecently = false;\n}\n\nfunction handleWindowBlur() {\n  // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n  // for example, since a subsequent focus event won't be fired.\n  hasEventBeforeFocus = false;\n  hasBlurredWindowRecently = true;\n}\n\n/**\n * Setup global event listeners to control when keyboard focus style should be visible.\n */\nfunction setupGlobalFocusEvents() {\n  if (typeof window === 'undefined' || hasSetupGlobalListeners) {\n    return;\n  }\n\n  // Programmatic focus() calls shouldn't affect the current input modality.\n  // However, we need to detect other cases when a focus event occurs without\n  // a preceding user event (e.g. screen reader focus). Overriding the focus\n  // method on HTMLElement.prototype is a bit hacky, but works.\n  let focus = HTMLElement.prototype.focus;\n  HTMLElement.prototype.focus = function () {\n    hasEventBeforeFocus = true;\n    focus.apply(this, arguments);\n  };\n\n  document.addEventListener('keydown', handleKeyboardEvent, true);\n  document.addEventListener('keyup', handleKeyboardEvent, true);\n  document.addEventListener('click', handleClickEvent, true);\n\n  // Register focus events on the window so they are sure to happen\n  // before React's event listeners (registered on the document).\n  window.addEventListener('focus', handleFocusEvent, true);\n  window.addEventListener('blur', handleWindowBlur, false);\n\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerdown', handlePointerEvent, true);\n    document.addEventListener('pointermove', handlePointerEvent, true);\n    document.addEventListener('pointerup', handlePointerEvent, true);\n  } else {\n    document.addEventListener('mousedown', handlePointerEvent, true);\n    document.addEventListener('mousemove', handlePointerEvent, true);\n    document.addEventListener('mouseup', handlePointerEvent, true);\n  }\n\n  hasSetupGlobalListeners = true;\n}\n\nif (typeof document !== 'undefined') {\n  if (document.readyState !== 'loading') {\n    setupGlobalFocusEvents();\n  } else {\n    document.addEventListener('DOMContentLoaded', setupGlobalFocusEvents);\n  }\n}\n\n/**\n * If true, keyboard focus is visible.\n */\nexport function isFocusVisible(): boolean {\n  return currentModality !== 'pointer';\n}\n\nexport function getInteractionModality(): Modality {\n  return currentModality;\n}\n\nexport function setInteractionModality(modality: Modality) {\n  currentModality = modality;\n  triggerChangeHandlers(modality, null);\n}\n\n/**\n * Keeps state of the current modality.\n */\nexport function useInteractionModality(): Modality {\n  setupGlobalFocusEvents();\n\n  let [modality, setModality] = useState(currentModality);\n  useEffect(() => {\n    let handler = () => {\n      setModality(currentModality);\n    };\n\n    changeHandlers.add(handler);\n    return () => {\n      changeHandlers.delete(handler);\n    };\n  }, []);\n\n  return useIsSSR() ? null : modality;\n}\n\n/**\n * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that\n * focus visible style can be properly set.\n */\nfunction isKeyboardFocusEvent(isTextInput: boolean, modality: Modality, e: HandlerEvent) {\n  return !(isTextInput && modality === 'keyboard' && e instanceof KeyboardEvent && !FOCUS_VISIBLE_INPUT_KEYS[e.key]);\n}\n\n/**\n * Manages focus visible state for the page, and subscribes individual components for updates.\n */\nexport function useFocusVisible(props: FocusVisibleProps = {}): FocusVisibleResult {\n  let {isTextInput, autoFocus} = props;\n  let [isFocusVisibleState, setFocusVisible] = useState(autoFocus || isFocusVisible());\n  useFocusVisibleListener((isFocusVisible) => {\n    setFocusVisible(isFocusVisible);\n  }, [isTextInput], {isTextInput});\n\n  return {isFocusVisible: isFocusVisibleState};\n}\n\n/**\n * Listens for trigger change and reports if focus is visible (i.e., modality is not pointer).\n */\nexport function useFocusVisibleListener(fn: FocusVisibleHandler, deps: ReadonlyArray<any>, opts?: {isTextInput?: boolean}): void {\n  setupGlobalFocusEvents();\n\n  useEffect(() => {\n    let handler = (modality: Modality, e: HandlerEvent) => {\n      if (!isKeyboardFocusEvent(opts?.isTextInput, modality, e)) {\n        return;\n      }\n      fn(isFocusVisible());\n    };\n    changeHandlers.add(handler);\n    return () => {\n      changeHandlers.delete(handler);\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {DOMAttributes} from '@react-types/shared';\nimport {FocusEvent, useCallback, useRef} from 'react';\nimport {useSyntheticBlurEvent} from './utils';\n\nexport interface FocusWithinProps {\n  /** Whether the focus within events should be disabled. */\n  isDisabled?: boolean,\n  /** Handler that is called when the target element or a descendant receives focus. */\n  onFocusWithin?: (e: FocusEvent) => void,\n  /** Handler that is called when the target element and all descendants lose focus. */\n  onBlurWithin?: (e: FocusEvent) => void,\n  /** Handler that is called when the the focus within state changes. */\n  onFocusWithinChange?: (isFocusWithin: boolean) => void\n}\n\nexport interface FocusWithinResult {\n  /** Props to spread onto the target element. */\n  focusWithinProps: DOMAttributes\n}\n\n/**\n * Handles focus events for the target and its descendants.\n */\nexport function useFocusWithin(props: FocusWithinProps): FocusWithinResult {\n  let {\n    isDisabled,\n    onBlurWithin,\n    onFocusWithin,\n    onFocusWithinChange\n  } = props;\n  let state = useRef({\n    isFocusWithin: false\n  });\n\n  let onBlur = useCallback((e: FocusEvent) => {\n    // We don't want to trigger onBlurWithin and then immediately onFocusWithin again\n    // when moving focus inside the element. Only trigger if the currentTarget doesn't\n    // include the relatedTarget (where focus is moving).\n    if (state.current.isFocusWithin && !(e.currentTarget as Element).contains(e.relatedTarget as Element)) {\n      state.current.isFocusWithin = false;\n\n      if (onBlurWithin) {\n        onBlurWithin(e);\n      }\n\n      if (onFocusWithinChange) {\n        onFocusWithinChange(false);\n      }\n    }\n  }, [onBlurWithin, onFocusWithinChange, state]);\n\n  let onSyntheticFocus = useSyntheticBlurEvent(onBlur);\n  let onFocus = useCallback((e: FocusEvent) => {\n    // Double check that document.activeElement actually matches e.target in case a previously chained\n    // focus handler already moved focus somewhere else.\n    if (!state.current.isFocusWithin && document.activeElement === e.target) {\n      if (onFocusWithin) {\n        onFocusWithin(e);\n      }\n\n      if (onFocusWithinChange) {\n        onFocusWithinChange(true);\n      }\n\n      state.current.isFocusWithin = true;\n      onSyntheticFocus(e);\n    }\n  }, [onFocusWithin, onFocusWithinChange, onSyntheticFocus]);\n\n  if (isDisabled) {\n    return {\n      focusWithinProps: {\n        onFocus: null,\n        onBlur: null\n      }\n    };\n  }\n\n  return {\n    focusWithinProps: {\n      onFocus,\n      onBlur\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {DOMAttributes} from '@react-types/shared';\nimport {HoverEvents} from '@react-types/shared';\nimport {useEffect, useMemo, useRef, useState} from 'react';\n\nexport interface HoverProps extends HoverEvents {\n  /** Whether the hover events should be disabled. */\n  isDisabled?: boolean\n}\n\nexport interface HoverResult {\n  /** Props to spread on the target element. */\n  hoverProps: DOMAttributes,\n  isHovered: boolean\n}\n\n// iOS fires onPointerEnter twice: once with pointerType=\"touch\" and again with pointerType=\"mouse\".\n// We want to ignore these emulated events so they do not trigger hover behavior.\n// See https://bugs.webkit.org/show_bug.cgi?id=214609.\nlet globalIgnoreEmulatedMouseEvents = false;\nlet hoverCount = 0;\n\nfunction setGlobalIgnoreEmulatedMouseEvents() {\n  globalIgnoreEmulatedMouseEvents = true;\n\n  // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter\n  // with pointerType=\"mouse\" immediately after onPointerUp and before onFocus. On other\n  // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in\n  // the distant future because a user previously touched the element.\n  setTimeout(() => {\n    globalIgnoreEmulatedMouseEvents = false;\n  }, 50);\n}\n\nfunction handleGlobalPointerEvent(e) {\n  if (e.pointerType === 'touch') {\n    setGlobalIgnoreEmulatedMouseEvents();\n  }\n}\n\nfunction setupGlobalTouchEvents() {\n  if (typeof document === 'undefined') {\n    return;\n  }\n\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerup', handleGlobalPointerEvent);\n  } else {\n    document.addEventListener('touchend', setGlobalIgnoreEmulatedMouseEvents);\n  }\n\n  hoverCount++;\n  return () => {\n    hoverCount--;\n    if (hoverCount > 0) {\n      return;\n    }\n\n    if (typeof PointerEvent !== 'undefined') {\n      document.removeEventListener('pointerup', handleGlobalPointerEvent);\n    } else {\n      document.removeEventListener('touchend', setGlobalIgnoreEmulatedMouseEvents);\n    }\n  };\n}\n\n/**\n * Handles pointer hover interactions for an element. Normalizes behavior\n * across browsers and platforms, and ignores emulated mouse events on touch devices.\n */\nexport function useHover(props: HoverProps): HoverResult {\n  let {\n    onHoverStart,\n    onHoverChange,\n    onHoverEnd,\n    isDisabled\n  } = props;\n\n  let [isHovered, setHovered] = useState(false);\n  let state = useRef({\n    isHovered: false,\n    ignoreEmulatedMouseEvents: false,\n    pointerType: '',\n    target: null\n  }).current;\n\n  useEffect(setupGlobalTouchEvents, []);\n\n  let {hoverProps, triggerHoverEnd} = useMemo(() => {\n    let triggerHoverStart = (event, pointerType) => {\n      state.pointerType = pointerType;\n      if (isDisabled || pointerType === 'touch' || state.isHovered || !event.currentTarget.contains(event.target)) {\n        return;\n      }\n\n      state.isHovered = true;\n      let target = event.currentTarget;\n      state.target = target;\n\n      if (onHoverStart) {\n        onHoverStart({\n          type: 'hoverstart',\n          target,\n          pointerType\n        });\n      }\n\n      if (onHoverChange) {\n        onHoverChange(true);\n      }\n\n      setHovered(true);\n    };\n\n    let triggerHoverEnd = (event, pointerType) => {\n      state.pointerType = '';\n      state.target = null;\n\n      if (pointerType === 'touch' || !state.isHovered) {\n        return;\n      }\n\n      state.isHovered = false;\n      let target = event.currentTarget;\n      if (onHoverEnd) {\n        onHoverEnd({\n          type: 'hoverend',\n          target,\n          pointerType\n        });\n      }\n\n      if (onHoverChange) {\n        onHoverChange(false);\n      }\n\n      setHovered(false);\n    };\n\n    let hoverProps: DOMAttributes = {};\n\n    if (typeof PointerEvent !== 'undefined') {\n      hoverProps.onPointerEnter = (e) => {\n        if (globalIgnoreEmulatedMouseEvents && e.pointerType === 'mouse') {\n          return;\n        }\n\n        triggerHoverStart(e, e.pointerType);\n      };\n\n      hoverProps.onPointerLeave = (e) => {\n        if (!isDisabled && e.currentTarget.contains(e.target as Element)) {\n          triggerHoverEnd(e, e.pointerType);\n        }\n      };\n    } else {\n      hoverProps.onTouchStart = () => {\n        state.ignoreEmulatedMouseEvents = true;\n      };\n\n      hoverProps.onMouseEnter = (e) => {\n        if (!state.ignoreEmulatedMouseEvents && !globalIgnoreEmulatedMouseEvents) {\n          triggerHoverStart(e, 'mouse');\n        }\n\n        state.ignoreEmulatedMouseEvents = false;\n      };\n\n      hoverProps.onMouseLeave = (e) => {\n        if (!isDisabled && e.currentTarget.contains(e.target as Element)) {\n          triggerHoverEnd(e, 'mouse');\n        }\n      };\n    }\n    return {hoverProps, triggerHoverEnd};\n  }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state]);\n\n  useEffect(() => {\n    // Call the triggerHoverEnd as soon as isDisabled changes to true\n    // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering\n    if (isDisabled) {\n      triggerHoverEnd({currentTarget: state.target}, state.pointerType);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isDisabled]);\n\n  return {\n    hoverProps,\n    isHovered\n  };\n}\n\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {RefObject, SyntheticEvent, useEffect, useRef} from 'react';\n\nexport interface InteractOutsideProps {\n  ref: RefObject<Element>,\n  onInteractOutside?: (e: SyntheticEvent) => void,\n  onInteractOutsideStart?: (e: SyntheticEvent) => void,\n  /** Whether the interact outside events should be disabled. */\n  isDisabled?: boolean\n}\n\n/**\n * Example, used in components like Dialogs and Popovers so they can close\n * when a user clicks outside them.\n */\nexport function useInteractOutside(props: InteractOutsideProps) {\n  let {ref, onInteractOutside, isDisabled, onInteractOutsideStart} = props;\n  let stateRef = useRef({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false,\n    onInteractOutside,\n    onInteractOutsideStart\n  });\n  let state = stateRef.current;\n  state.onInteractOutside = onInteractOutside;\n  state.onInteractOutsideStart = onInteractOutsideStart;\n\n  useEffect(() => {\n    if (isDisabled) {\n      return;\n    }\n\n    let onPointerDown = (e) => {\n      if (isValidEvent(e, ref) && state.onInteractOutside) {\n        if (state.onInteractOutsideStart) {\n          state.onInteractOutsideStart(e);\n        }\n        state.isPointerDown = true;\n      }\n    };\n\n    // Use pointer events if available. Otherwise, fall back to mouse and touch events.\n    if (typeof PointerEvent !== 'undefined') {\n      let onPointerUp = (e) => {\n        if (state.isPointerDown && state.onInteractOutside && isValidEvent(e, ref)) {\n          state.onInteractOutside(e);\n        }\n        state.isPointerDown = false;\n      };\n\n      // changing these to capture phase fixed combobox\n      document.addEventListener('pointerdown', onPointerDown, true);\n      document.addEventListener('pointerup', onPointerUp, true);\n\n      return () => {\n        document.removeEventListener('pointerdown', onPointerDown, true);\n        document.removeEventListener('pointerup', onPointerUp, true);\n      };\n    } else {\n      let onMouseUp = (e) => {\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n        } else if (state.isPointerDown && state.onInteractOutside && isValidEvent(e, ref)) {\n          state.onInteractOutside(e);\n        }\n        state.isPointerDown = false;\n      };\n\n      let onTouchEnd = (e) => {\n        state.ignoreEmulatedMouseEvents = true;\n        if (state.onInteractOutside && state.isPointerDown && isValidEvent(e, ref)) {\n          state.onInteractOutside(e);\n        }\n        state.isPointerDown = false;\n      };\n\n      document.addEventListener('mousedown', onPointerDown, true);\n      document.addEventListener('mouseup', onMouseUp, true);\n      document.addEventListener('touchstart', onPointerDown, true);\n      document.addEventListener('touchend', onTouchEnd, true);\n\n      return () => {\n        document.removeEventListener('mousedown', onPointerDown, true);\n        document.removeEventListener('mouseup', onMouseUp, true);\n        document.removeEventListener('touchstart', onPointerDown, true);\n        document.removeEventListener('touchend', onTouchEnd, true);\n      };\n    }\n  }, [ref, state, isDisabled]);\n}\n\nfunction isValidEvent(event, ref) {\n  if (event.button > 0) {\n    return false;\n  }\n\n  if (event.target) {\n    // if the event target is no longer in the document, ignore\n    const ownerDocument = event.target.ownerDocument;\n    if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) {\n      return false;\n    }\n\n    // If the target is within a top layer element (e.g. toasts), ignore.\n    if (event.target.closest('[data-react-aria-top-layer]')) {\n      return false;\n    }\n  }\n\n  return ref.current && !ref.current.contains(event.target);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {createEventHandler} from './createEventHandler';\nimport {DOMAttributes, KeyboardEvents} from '@react-types/shared';\n\nexport interface KeyboardProps extends KeyboardEvents {\n  /** Whether the keyboard events should be disabled. */\n  isDisabled?: boolean\n}\n\nexport interface KeyboardResult {\n  /** Props to spread onto the target element. */\n  keyboardProps: DOMAttributes\n}\n\n/**\n * Handles keyboard interactions for a focusable element.\n */\nexport function useKeyboard(props: KeyboardProps): KeyboardResult {\n  return {\n    keyboardProps: props.isDisabled ? {} : {\n      onKeyDown: createEventHandler(props.onKeyDown),\n      onKeyUp: createEventHandler(props.onKeyUp)\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {BaseEvent} from '@react-types/shared';\nimport {SyntheticEvent} from 'react';\n\n/**\n * This function wraps a React event handler to make stopPropagation the default, and support continuePropagation instead.\n */\nexport function createEventHandler<T extends SyntheticEvent>(handler: (e: BaseEvent<T>) => void): (e: T) => void {\n  if (!handler) {\n    return;\n  }\n\n  let shouldStopPropagation = true;\n  return (e: T) => {\n    let event: BaseEvent<T> = {\n      ...e,\n      preventDefault() {\n        e.preventDefault();\n      },\n      isDefaultPrevented() {\n        return e.isDefaultPrevented();\n      },\n      stopPropagation() {\n        console.error('stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.');\n      },\n      continuePropagation() {\n        shouldStopPropagation = false;\n      }\n    };\n\n    handler(event);\n\n    if (shouldStopPropagation) {\n      e.stopPropagation();\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {disableTextSelection, restoreTextSelection}  from './textSelection';\nimport {DOMAttributes, MoveEvents, PointerType} from '@react-types/shared';\nimport React, {useMemo, useRef} from 'react';\nimport {useGlobalListeners} from '@react-aria/utils';\n\nexport interface MoveResult {\n  /** Props to spread on the target element. */\n  moveProps: DOMAttributes\n}\n\ninterface EventBase {\n  shiftKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean,\n  altKey: boolean\n}\n\n/**\n * Handles move interactions across mouse, touch, and keyboard, including dragging with\n * the mouse or touch, and using the arrow keys. Normalizes behavior across browsers and\n * platforms, and ignores emulated mouse events on touch devices.\n */\nexport function useMove(props: MoveEvents): MoveResult {\n  let {onMoveStart, onMove, onMoveEnd} = props;\n\n  let state = useRef<{\n    didMove: boolean,\n    lastPosition: {pageX: number, pageY: number} | null,\n    id: number | null\n  }>({didMove: false, lastPosition: null, id: null});\n\n  let {addGlobalListener, removeGlobalListener} = useGlobalListeners();\n\n  let moveProps = useMemo(() => {\n    let moveProps: DOMAttributes = {};\n\n    let start = () => {\n      disableTextSelection();\n      state.current.didMove = false;\n    };\n    let move = (originalEvent: EventBase, pointerType: PointerType, deltaX: number, deltaY: number) => {\n      if (deltaX === 0 && deltaY === 0) {\n        return;\n      }\n\n      if (!state.current.didMove) {\n        state.current.didMove = true;\n        onMoveStart?.({\n          type: 'movestart',\n          pointerType,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n      onMove({\n        type: 'move',\n        pointerType,\n        deltaX: deltaX,\n        deltaY: deltaY,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n    let end = (originalEvent: EventBase, pointerType: PointerType) => {\n      restoreTextSelection();\n      if (state.current.didMove) {\n        onMoveEnd?.({\n          type: 'moveend',\n          pointerType,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n    };\n\n    if (typeof PointerEvent === 'undefined') {\n      let onMouseMove = (e: MouseEvent) => {\n        if (e.button === 0) {\n          move(e, 'mouse', e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n        }\n      };\n      let onMouseUp = (e: MouseEvent) => {\n        if (e.button === 0) {\n          end(e, 'mouse');\n          removeGlobalListener(window, 'mousemove', onMouseMove, false);\n          removeGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n      moveProps.onMouseDown = (e: React.MouseEvent) => {\n        if (e.button === 0) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n          addGlobalListener(window, 'mousemove', onMouseMove, false);\n          addGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n\n      let onTouchMove = (e: TouchEvent) => {\n        let touch = [...e.changedTouches].findIndex(({identifier}) => identifier === state.current.id);\n        if (touch >= 0) {\n          let {pageX, pageY} = e.changedTouches[touch];\n          move(e, 'touch', pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {pageX, pageY};\n        }\n      };\n      let onTouchEnd = (e: TouchEvent) => {\n        let touch = [...e.changedTouches].findIndex(({identifier}) => identifier === state.current.id);\n        if (touch >= 0) {\n          end(e, 'touch');\n          state.current.id = null;\n          removeGlobalListener(window, 'touchmove', onTouchMove);\n          removeGlobalListener(window, 'touchend', onTouchEnd);\n          removeGlobalListener(window, 'touchcancel', onTouchEnd);\n        }\n      };\n      moveProps.onTouchStart = (e: React.TouchEvent) => {\n        if (e.changedTouches.length === 0 || state.current.id != null) {\n          return;\n        }\n\n        let {pageX, pageY, identifier} = e.changedTouches[0];\n        start();\n        e.stopPropagation();\n        e.preventDefault();\n        state.current.lastPosition = {pageX, pageY};\n        state.current.id = identifier;\n        addGlobalListener(window, 'touchmove', onTouchMove, false);\n        addGlobalListener(window, 'touchend', onTouchEnd, false);\n        addGlobalListener(window, 'touchcancel', onTouchEnd, false);\n      };\n    } else {\n      let onPointerMove = (e: PointerEvent) => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = (e.pointerType || 'mouse') as PointerType;\n\n          // Problems with PointerEvent#movementX/movementY:\n          // 1. it is always 0 on macOS Safari.\n          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS\n          move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n        }\n      };\n\n      let onPointerUp = (e: PointerEvent) => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = (e.pointerType || 'mouse') as PointerType;\n          end(e, pointerType);\n          state.current.id = null;\n          removeGlobalListener(window, 'pointermove', onPointerMove, false);\n          removeGlobalListener(window, 'pointerup', onPointerUp, false);\n          removeGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n\n      moveProps.onPointerDown = (e: React.PointerEvent) => {\n        if (e.button === 0 && state.current.id == null) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n          state.current.id = e.pointerId;\n          addGlobalListener(window, 'pointermove', onPointerMove, false);\n          addGlobalListener(window, 'pointerup', onPointerUp, false);\n          addGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n    }\n\n    let triggerKeyboardMove = (e: EventBase, deltaX: number, deltaY: number) => {\n      start();\n      move(e, 'keyboard', deltaX, deltaY);\n      end(e, 'keyboard');\n    };\n\n    moveProps.onKeyDown = (e) => {\n      switch (e.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, -1, 0);\n          break;\n        case 'Right':\n        case 'ArrowRight':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 1, 0);\n          break;\n        case 'Up':\n        case 'ArrowUp':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, -1);\n          break;\n        case 'Down':\n        case 'ArrowDown':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, 1);\n          break;\n      }\n    };\n\n    return moveProps;\n  }, [state, onMoveStart, onMove, onMoveEnd, addGlobalListener, removeGlobalListener]);\n\n  return {moveProps};\n}\n","/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {RefObject, useCallback} from 'react';\nimport {ScrollEvents} from '@react-types/shared';\nimport {useEvent} from '@react-aria/utils';\n\nexport interface ScrollWheelProps extends ScrollEvents {\n  /** Whether the scroll listener should be disabled. */\n  isDisabled?: boolean\n}\n\n// scroll wheel needs to be added not passively so it's cancelable, small helper hook to remember that\nexport function useScrollWheel(props: ScrollWheelProps, ref: RefObject<HTMLElement>): void {\n  let {onScroll, isDisabled} = props;\n  let onScrollHandler = useCallback((e) => {\n    // If the ctrlKey is pressed, this is a zoom event, do nothing.\n    if (e.ctrlKey) {\n      return;\n    }\n\n    // stop scrolling the page\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (onScroll) {\n      onScroll({deltaX: e.deltaX, deltaY: e.deltaY});\n    }\n  }, [onScroll]);\n\n  useEvent(ref, 'wheel', isDisabled ? null : onScrollHandler);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, LongPressEvent} from '@react-types/shared';\nimport {mergeProps, useDescription, useGlobalListeners} from '@react-aria/utils';\nimport {usePress} from './usePress';\nimport {useRef} from 'react';\n\nexport interface LongPressProps {\n  /** Whether long press events should be disabled. */\n  isDisabled?: boolean,\n  /** Handler that is called when a long press interaction starts. */\n  onLongPressStart?: (e: LongPressEvent) => void,\n  /**\n   * Handler that is called when a long press interaction ends, either\n   * over the target or when the pointer leaves the target.\n   */\n  onLongPressEnd?: (e: LongPressEvent) => void,\n  /**\n   * Handler that is called when the threshold time is met while\n   * the press is over the target.\n   */\n  onLongPress?: (e: LongPressEvent) => void,\n  /**\n   * The amount of time in milliseconds to wait before triggering a long press.\n   * @default 500ms\n   */\n  threshold?: number,\n  /**\n   * A description for assistive techology users indicating that a long press\n   * action is available, e.g. \"Long press to open menu\".\n   */\n  accessibilityDescription?: string\n}\n\nexport interface LongPressResult {\n  /** Props to spread on the target element. */\n  longPressProps: DOMAttributes\n}\n\nconst DEFAULT_THRESHOLD = 500;\n\n/**\n * Handles long press interactions across mouse and touch devices. Supports a customizable time threshold,\n * accessibility description, and normalizes behavior across browsers and devices.\n */\nexport function useLongPress(props: LongPressProps): LongPressResult {\n  let {\n    isDisabled,\n    onLongPressStart,\n    onLongPressEnd,\n    onLongPress,\n    threshold = DEFAULT_THRESHOLD,\n    accessibilityDescription\n  } = props;\n\n  const timeRef = useRef(null);\n  let {addGlobalListener, removeGlobalListener} = useGlobalListeners();\n\n  let {pressProps} = usePress({\n    isDisabled,\n    onPressStart(e) {\n      if (e.pointerType === 'mouse' || e.pointerType === 'touch') {\n        if (onLongPressStart) {\n          onLongPressStart({\n            ...e,\n            type: 'longpressstart'\n          });\n        }\n\n        timeRef.current = setTimeout(() => {\n          // Prevent other usePress handlers from also handling this event.\n          e.target.dispatchEvent(new PointerEvent('pointercancel', {bubbles: true}));\n          if (onLongPress) {\n            onLongPress({\n              ...e,\n              type: 'longpress'\n            });\n          }\n          timeRef.current = null;\n        }, threshold);\n\n        // Prevent context menu, which may be opened on long press on touch devices\n        if (e.pointerType === 'touch') {\n          let onContextMenu = e => {\n            e.preventDefault();\n          };\n\n          addGlobalListener(e.target, 'contextmenu', onContextMenu, {once: true});\n          addGlobalListener(window, 'pointerup', () => {\n            // If no contextmenu event is fired quickly after pointerup, remove the handler\n            // so future context menu events outside a long press are not prevented.\n            setTimeout(() => {\n              removeGlobalListener(e.target, 'contextmenu', onContextMenu);\n            }, 30);\n          }, {once: true});\n        }\n      }\n    },\n    onPressEnd(e) {\n      if (timeRef.current) {\n        clearTimeout(timeRef.current);\n      }\n\n      if (onLongPressEnd && (e.pointerType === 'mouse' || e.pointerType === 'touch')) {\n        onLongPressEnd({\n          ...e,\n          type: 'longpressend'\n        });\n      }\n    }\n  });\n\n  let descriptionProps = useDescription(onLongPress && !isDisabled ? accessibilityDescription : null);\n\n  return {\n    longPressProps: mergeProps(pressProps, descriptionProps)\n  };\n}\n"]},"metadata":{},"sourceType":"module"}