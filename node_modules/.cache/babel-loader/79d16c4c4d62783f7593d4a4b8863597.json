{"ast":null,"code":"/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\nimport { __assign, __rest, __spreadArray } from \"tslib\";\nimport { parse } from '@formatjs/icu-messageformat-parser';\nimport { memoize, strategies } from '@formatjs/fast-memoize';\nimport { formatToParts, PART_TYPE } from './formatters'; // -- MessageFormat --------------------------------------------------------\n\nfunction mergeConfig(c1, c2) {\n  if (!c2) {\n    return c1;\n  }\n\n  return __assign(__assign(__assign({}, c1 || {}), c2 || {}), Object.keys(c1).reduce(function (all, k) {\n    all[k] = __assign(__assign({}, c1[k]), c2[k] || {});\n    return all;\n  }, {}));\n}\n\nfunction mergeConfigs(defaultConfig, configs) {\n  if (!configs) {\n    return defaultConfig;\n  }\n\n  return Object.keys(defaultConfig).reduce(function (all, k) {\n    all[k] = mergeConfig(defaultConfig[k], configs[k]);\n    return all;\n  }, __assign({}, defaultConfig));\n}\n\nfunction createFastMemoizeCache(store) {\n  return {\n    create: function () {\n      return {\n        get: function (key) {\n          return store[key];\n        },\n        set: function (key, value) {\n          store[key] = value;\n        }\n      };\n    }\n  };\n}\n\nfunction createDefaultFormatters(cache) {\n  if (cache === void 0) {\n    cache = {\n      number: {},\n      dateTime: {},\n      pluralRules: {}\n    };\n  }\n\n  return {\n    getNumberFormat: memoize(function () {\n      var _a;\n\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return new ((_a = Intl.NumberFormat).bind.apply(_a, __spreadArray([void 0], args, false)))();\n    }, {\n      cache: createFastMemoizeCache(cache.number),\n      strategy: strategies.variadic\n    }),\n    getDateTimeFormat: memoize(function () {\n      var _a;\n\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return new ((_a = Intl.DateTimeFormat).bind.apply(_a, __spreadArray([void 0], args, false)))();\n    }, {\n      cache: createFastMemoizeCache(cache.dateTime),\n      strategy: strategies.variadic\n    }),\n    getPluralRules: memoize(function () {\n      var _a;\n\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return new ((_a = Intl.PluralRules).bind.apply(_a, __spreadArray([void 0], args, false)))();\n    }, {\n      cache: createFastMemoizeCache(cache.pluralRules),\n      strategy: strategies.variadic\n    })\n  };\n}\n\nexport var IntlMessageFormat =\n/** @class */\nfunction () {\n  function IntlMessageFormat(message, locales, overrideFormats, opts) {\n    if (locales === void 0) {\n      locales = IntlMessageFormat.defaultLocale;\n    }\n\n    var _this = this;\n\n    this.formatterCache = {\n      number: {},\n      dateTime: {},\n      pluralRules: {}\n    };\n\n    this.format = function (values) {\n      var parts = _this.formatToParts(values); // Hot path for straight simple msg translations\n\n\n      if (parts.length === 1) {\n        return parts[0].value;\n      }\n\n      var result = parts.reduce(function (all, part) {\n        if (!all.length || part.type !== PART_TYPE.literal || typeof all[all.length - 1] !== 'string') {\n          all.push(part.value);\n        } else {\n          all[all.length - 1] += part.value;\n        }\n\n        return all;\n      }, []);\n\n      if (result.length <= 1) {\n        return result[0] || '';\n      }\n\n      return result;\n    };\n\n    this.formatToParts = function (values) {\n      return formatToParts(_this.ast, _this.locales, _this.formatters, _this.formats, values, undefined, _this.message);\n    };\n\n    this.resolvedOptions = function () {\n      var _a;\n\n      return {\n        locale: ((_a = _this.resolvedLocale) === null || _a === void 0 ? void 0 : _a.toString()) || Intl.NumberFormat.supportedLocalesOf(_this.locales)[0]\n      };\n    };\n\n    this.getAst = function () {\n      return _this.ast;\n    }; // Defined first because it's used to build the format pattern.\n\n\n    this.locales = locales;\n    this.resolvedLocale = IntlMessageFormat.resolveLocale(locales);\n\n    if (typeof message === 'string') {\n      this.message = message;\n\n      if (!IntlMessageFormat.__parse) {\n        throw new TypeError('IntlMessageFormat.__parse must be set to process `message` of type `string`');\n      }\n\n      var _a = opts || {},\n          formatters = _a.formatters,\n          parseOpts = __rest(_a, [\"formatters\"]); // Parse string messages into an AST.\n\n\n      this.ast = IntlMessageFormat.__parse(message, __assign(__assign({}, parseOpts), {\n        locale: this.resolvedLocale\n      }));\n    } else {\n      this.ast = message;\n    }\n\n    if (!Array.isArray(this.ast)) {\n      throw new TypeError('A message must be provided as a String or AST.');\n    } // Creates a new object with the specified `formats` merged with the default\n    // formats.\n\n\n    this.formats = mergeConfigs(IntlMessageFormat.formats, overrideFormats);\n    this.formatters = opts && opts.formatters || createDefaultFormatters(this.formatterCache);\n  }\n\n  Object.defineProperty(IntlMessageFormat, \"defaultLocale\", {\n    get: function () {\n      if (!IntlMessageFormat.memoizedDefaultLocale) {\n        IntlMessageFormat.memoizedDefaultLocale = new Intl.NumberFormat().resolvedOptions().locale;\n      }\n\n      return IntlMessageFormat.memoizedDefaultLocale;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  IntlMessageFormat.memoizedDefaultLocale = null;\n\n  IntlMessageFormat.resolveLocale = function (locales) {\n    if (typeof Intl.Locale === 'undefined') {\n      return;\n    }\n\n    var supportedLocales = Intl.NumberFormat.supportedLocalesOf(locales);\n\n    if (supportedLocales.length > 0) {\n      return new Intl.Locale(supportedLocales[0]);\n    }\n\n    return new Intl.Locale(typeof locales === 'string' ? locales : locales[0]);\n  };\n\n  IntlMessageFormat.__parse = parse; // Default format options used as the prototype of the `formats` provided to the\n  // constructor. These are used when constructing the internal Intl.NumberFormat\n  // and Intl.DateTimeFormat instances.\n\n  IntlMessageFormat.formats = {\n    number: {\n      integer: {\n        maximumFractionDigits: 0\n      },\n      currency: {\n        style: 'currency'\n      },\n      percent: {\n        style: 'percent'\n      }\n    },\n    date: {\n      short: {\n        month: 'numeric',\n        day: 'numeric',\n        year: '2-digit'\n      },\n      medium: {\n        month: 'short',\n        day: 'numeric',\n        year: 'numeric'\n      },\n      long: {\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      },\n      full: {\n        weekday: 'long',\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      }\n    },\n    time: {\n      short: {\n        hour: 'numeric',\n        minute: 'numeric'\n      },\n      medium: {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric'\n      },\n      long: {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZoneName: 'short'\n      },\n      full: {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZoneName: 'short'\n      }\n    }\n  };\n  return IntlMessageFormat;\n}();","map":{"version":3,"sources":["/Users/vux/dev/react-project1/node_modules/intl-messageformat/lib/src/core.js"],"names":["__assign","__rest","__spreadArray","parse","memoize","strategies","formatToParts","PART_TYPE","mergeConfig","c1","c2","Object","keys","reduce","all","k","mergeConfigs","defaultConfig","configs","createFastMemoizeCache","store","create","get","key","set","value","createDefaultFormatters","cache","number","dateTime","pluralRules","getNumberFormat","_a","args","_i","arguments","length","Intl","NumberFormat","bind","apply","strategy","variadic","getDateTimeFormat","DateTimeFormat","getPluralRules","PluralRules","IntlMessageFormat","message","locales","overrideFormats","opts","defaultLocale","_this","formatterCache","format","values","parts","result","part","type","literal","push","ast","formatters","formats","undefined","resolvedOptions","locale","resolvedLocale","toString","supportedLocalesOf","getAst","resolveLocale","__parse","TypeError","parseOpts","Array","isArray","defineProperty","memoizedDefaultLocale","enumerable","configurable","Locale","supportedLocales","integer","maximumFractionDigits","currency","style","percent","date","short","month","day","year","medium","long","full","weekday","time","hour","minute","second","timeZoneName"],"mappings":"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","sourcesContent":["/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\nimport { __assign, __rest, __spreadArray } from \"tslib\";\nimport { parse, } from '@formatjs/icu-messageformat-parser';\nimport { memoize, strategies } from '@formatjs/fast-memoize';\nimport { formatToParts, PART_TYPE, } from './formatters';\n// -- MessageFormat --------------------------------------------------------\nfunction mergeConfig(c1, c2) {\n    if (!c2) {\n        return c1;\n    }\n    return __assign(__assign(__assign({}, (c1 || {})), (c2 || {})), Object.keys(c1).reduce(function (all, k) {\n        all[k] = __assign(__assign({}, c1[k]), (c2[k] || {}));\n        return all;\n    }, {}));\n}\nfunction mergeConfigs(defaultConfig, configs) {\n    if (!configs) {\n        return defaultConfig;\n    }\n    return Object.keys(defaultConfig).reduce(function (all, k) {\n        all[k] = mergeConfig(defaultConfig[k], configs[k]);\n        return all;\n    }, __assign({}, defaultConfig));\n}\nfunction createFastMemoizeCache(store) {\n    return {\n        create: function () {\n            return {\n                get: function (key) {\n                    return store[key];\n                },\n                set: function (key, value) {\n                    store[key] = value;\n                },\n            };\n        },\n    };\n}\nfunction createDefaultFormatters(cache) {\n    if (cache === void 0) { cache = {\n        number: {},\n        dateTime: {},\n        pluralRules: {},\n    }; }\n    return {\n        getNumberFormat: memoize(function () {\n            var _a;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return new ((_a = Intl.NumberFormat).bind.apply(_a, __spreadArray([void 0], args, false)))();\n        }, {\n            cache: createFastMemoizeCache(cache.number),\n            strategy: strategies.variadic,\n        }),\n        getDateTimeFormat: memoize(function () {\n            var _a;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return new ((_a = Intl.DateTimeFormat).bind.apply(_a, __spreadArray([void 0], args, false)))();\n        }, {\n            cache: createFastMemoizeCache(cache.dateTime),\n            strategy: strategies.variadic,\n        }),\n        getPluralRules: memoize(function () {\n            var _a;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return new ((_a = Intl.PluralRules).bind.apply(_a, __spreadArray([void 0], args, false)))();\n        }, {\n            cache: createFastMemoizeCache(cache.pluralRules),\n            strategy: strategies.variadic,\n        }),\n    };\n}\nexport var IntlMessageFormat = /** @class */ (function () {\n    function IntlMessageFormat(message, locales, overrideFormats, opts) {\n        if (locales === void 0) { locales = IntlMessageFormat.defaultLocale; }\n        var _this = this;\n        this.formatterCache = {\n            number: {},\n            dateTime: {},\n            pluralRules: {},\n        };\n        this.format = function (values) {\n            var parts = _this.formatToParts(values);\n            // Hot path for straight simple msg translations\n            if (parts.length === 1) {\n                return parts[0].value;\n            }\n            var result = parts.reduce(function (all, part) {\n                if (!all.length ||\n                    part.type !== PART_TYPE.literal ||\n                    typeof all[all.length - 1] !== 'string') {\n                    all.push(part.value);\n                }\n                else {\n                    all[all.length - 1] += part.value;\n                }\n                return all;\n            }, []);\n            if (result.length <= 1) {\n                return result[0] || '';\n            }\n            return result;\n        };\n        this.formatToParts = function (values) {\n            return formatToParts(_this.ast, _this.locales, _this.formatters, _this.formats, values, undefined, _this.message);\n        };\n        this.resolvedOptions = function () {\n            var _a;\n            return ({\n                locale: ((_a = _this.resolvedLocale) === null || _a === void 0 ? void 0 : _a.toString()) ||\n                    Intl.NumberFormat.supportedLocalesOf(_this.locales)[0],\n            });\n        };\n        this.getAst = function () { return _this.ast; };\n        // Defined first because it's used to build the format pattern.\n        this.locales = locales;\n        this.resolvedLocale = IntlMessageFormat.resolveLocale(locales);\n        if (typeof message === 'string') {\n            this.message = message;\n            if (!IntlMessageFormat.__parse) {\n                throw new TypeError('IntlMessageFormat.__parse must be set to process `message` of type `string`');\n            }\n            var _a = opts || {}, formatters = _a.formatters, parseOpts = __rest(_a, [\"formatters\"]);\n            // Parse string messages into an AST.\n            this.ast = IntlMessageFormat.__parse(message, __assign(__assign({}, parseOpts), { locale: this.resolvedLocale }));\n        }\n        else {\n            this.ast = message;\n        }\n        if (!Array.isArray(this.ast)) {\n            throw new TypeError('A message must be provided as a String or AST.');\n        }\n        // Creates a new object with the specified `formats` merged with the default\n        // formats.\n        this.formats = mergeConfigs(IntlMessageFormat.formats, overrideFormats);\n        this.formatters =\n            (opts && opts.formatters) || createDefaultFormatters(this.formatterCache);\n    }\n    Object.defineProperty(IntlMessageFormat, \"defaultLocale\", {\n        get: function () {\n            if (!IntlMessageFormat.memoizedDefaultLocale) {\n                IntlMessageFormat.memoizedDefaultLocale =\n                    new Intl.NumberFormat().resolvedOptions().locale;\n            }\n            return IntlMessageFormat.memoizedDefaultLocale;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IntlMessageFormat.memoizedDefaultLocale = null;\n    IntlMessageFormat.resolveLocale = function (locales) {\n        if (typeof Intl.Locale === 'undefined') {\n            return;\n        }\n        var supportedLocales = Intl.NumberFormat.supportedLocalesOf(locales);\n        if (supportedLocales.length > 0) {\n            return new Intl.Locale(supportedLocales[0]);\n        }\n        return new Intl.Locale(typeof locales === 'string' ? locales : locales[0]);\n    };\n    IntlMessageFormat.__parse = parse;\n    // Default format options used as the prototype of the `formats` provided to the\n    // constructor. These are used when constructing the internal Intl.NumberFormat\n    // and Intl.DateTimeFormat instances.\n    IntlMessageFormat.formats = {\n        number: {\n            integer: {\n                maximumFractionDigits: 0,\n            },\n            currency: {\n                style: 'currency',\n            },\n            percent: {\n                style: 'percent',\n            },\n        },\n        date: {\n            short: {\n                month: 'numeric',\n                day: 'numeric',\n                year: '2-digit',\n            },\n            medium: {\n                month: 'short',\n                day: 'numeric',\n                year: 'numeric',\n            },\n            long: {\n                month: 'long',\n                day: 'numeric',\n                year: 'numeric',\n            },\n            full: {\n                weekday: 'long',\n                month: 'long',\n                day: 'numeric',\n                year: 'numeric',\n            },\n        },\n        time: {\n            short: {\n                hour: 'numeric',\n                minute: 'numeric',\n            },\n            medium: {\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n            },\n            long: {\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n                timeZoneName: 'short',\n            },\n            full: {\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n                timeZoneName: 'short',\n            },\n        },\n    };\n    return IntlMessageFormat;\n}());\n"]},"metadata":{},"sourceType":"module"}