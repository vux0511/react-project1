{"ast":null,"code":"import { useMemo as $1OoTj$useMemo, useEffect as $1OoTj$useEffect } from \"react\";\nimport { useMultipleSelectionState as $1OoTj$useMultipleSelectionState, SelectionManager as $1OoTj$SelectionManager } from \"@react-stately/selection\";\nimport { useCollection as $1OoTj$useCollection } from \"@react-stately/collections\";\nimport { useControlledState as $1OoTj$useControlledState } from \"@react-stately/utils\";\nvar tmp = Symbol.iterator;\n\nclass $05ca4cd7c4a5a999$export$863faf230ee2118a {\n  *[tmp]() {\n    yield* this.iterable;\n  }\n\n  get size() {\n    return this.keyMap.size;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return this.firstKey;\n  }\n\n  getLastKey() {\n    return this.lastKey;\n  }\n\n  getItem(key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n\n  constructor(nodes) {\n    let {\n      expandedKeys: expandedKeys\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.keyMap = new Map();\n    this.iterable = nodes;\n    expandedKeys = expandedKeys || new Set();\n\n    let visit = node => {\n      this.keyMap.set(node.key, node);\n      if (node.childNodes && (node.type === 'section' || expandedKeys.has(node.key))) for (let child of node.childNodes) visit(child);\n    };\n\n    for (let node2 of nodes) visit(node2);\n\n    let last;\n    let index = 0;\n\n    for (let [key, node1] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node1.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node1.prevKey = undefined;\n      }\n\n      if (node1.type === 'item') node1.index = index++;\n      last = node1; // Set nextKey as undefined since this might be the last node\n      // If it isn't the last node, last.nextKey will properly set at start of new loop\n\n      last.nextKey = undefined;\n    }\n\n    this.lastKey = last === null || last === void 0 ? void 0 : last.key;\n  }\n\n}\n\nfunction $875d6693e12af071$export$728d6ba534403756(props) {\n  let [expandedKeys, setExpandedKeys] = $1OoTj$useControlledState(props.expandedKeys ? new Set(props.expandedKeys) : undefined, props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : new Set(), props.onExpandedChange);\n  let selectionState = $1OoTj$useMultipleSelectionState(props);\n  let disabledKeys = $1OoTj$useMemo(() => props.disabledKeys ? new Set(props.disabledKeys) : new Set(), [props.disabledKeys]);\n  let tree = $1OoTj$useCollection(props, nodes => new $05ca4cd7c4a5a999$export$863faf230ee2118a(nodes, {\n    expandedKeys: expandedKeys\n  }), null, [expandedKeys]); // Reset focused key if that item is deleted from the collection.\n\n  $1OoTj$useEffect(() => {\n    if (selectionState.focusedKey != null && !tree.getItem(selectionState.focusedKey)) selectionState.setFocusedKey(null);\n  }, [tree, selectionState.focusedKey]);\n\n  let onToggle = key => {\n    setExpandedKeys($875d6693e12af071$var$toggleKey(expandedKeys, key));\n  };\n\n  return {\n    collection: tree,\n    expandedKeys: expandedKeys,\n    disabledKeys: disabledKeys,\n    toggleKey: onToggle,\n    selectionManager: new $1OoTj$SelectionManager(tree, selectionState)\n  };\n}\n\nfunction $875d6693e12af071$var$toggleKey(set, key) {\n  let res = new Set(set);\n  if (res.has(key)) res.delete(key);else res.add(key);\n  return res;\n}\n\nexport { $875d6693e12af071$export$728d6ba534403756 as useTreeState };","map":{"version":3,"mappings":"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","names":["Symbol","iterator","$05ca4cd7c4a5a999$export$863faf230ee2118a","iterable","size","keyMap","getKeys","keys","getKeyBefore","key","node","get","prevKey","getKeyAfter","nextKey","getFirstKey","firstKey","getLastKey","lastKey","getItem","at","idx","nodes","expandedKeys","Map","Set","visit","set","childNodes","type","has","child","node2","last","index","node1","undefined","$875d6693e12af071$export$728d6ba534403756","props","setExpandedKeys","$1OoTj$useControlledState","defaultExpandedKeys","onExpandedChange","selectionState","$1OoTj$useMultipleSelectionState","disabledKeys","$1OoTj$useMemo","tree","$1OoTj$useCollection","$1OoTj$useEffect","focusedKey","setFocusedKey","onToggle","$875d6693e12af071$var$toggleKey","collection","toggleKey","selectionManager","$1OoTj$SelectionManager","res","delete","add"],"sources":["/Users/vux/dev/react-project1/node_modules/@react-stately/tree/dist/packages/@react-stately/tree/src/TreeCollection.ts","/Users/vux/dev/react-project1/node_modules/@react-stately/tree/dist/packages/@react-stately/tree/src/useTreeState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, Node} from '@react-types/shared';\nimport {Key} from 'react';\n\nexport class TreeCollection<T> implements Collection<Node<T>> {\n  private keyMap: Map<Key, Node<T>> = new Map();\n  private iterable: Iterable<Node<T>>;\n  private firstKey: Key;\n  private lastKey: Key;\n\n  constructor(nodes: Iterable<Node<T>>, {expandedKeys}: {expandedKeys?: Set<Key>} = {}) {\n    this.iterable = nodes;\n    expandedKeys = expandedKeys || new Set();\n\n    let visit = (node: Node<T>) => {\n      this.keyMap.set(node.key, node);\n\n      if (node.childNodes && (node.type === 'section' || expandedKeys.has(node.key))) {\n        for (let child of node.childNodes) {\n          visit(child);\n        }\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    let last: Node<T>;\n    let index = 0;\n    for (let [key, node] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node.prevKey = undefined;\n      }\n\n      if (node.type === 'item') {\n        node.index = index++;\n      }\n\n      last = node;\n\n      // Set nextKey as undefined since this might be the last node\n      // If it isn't the last node, last.nextKey will properly set at start of new loop\n      last.nextKey = undefined;\n    }\n\n    this.lastKey = last?.key;\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.iterable;\n  }\n\n  get size() {\n    return this.keyMap.size;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return this.firstKey;\n  }\n\n  getLastKey() {\n    return this.lastKey;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, CollectionBase, Expandable, MultipleSelection, Node} from '@react-types/shared';\nimport {Key, useEffect, useMemo} from 'react';\nimport {SelectionManager, useMultipleSelectionState} from '@react-stately/selection';\nimport {TreeCollection} from './TreeCollection';\nimport {useCollection} from '@react-stately/collections';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface TreeProps<T> extends CollectionBase<T>, Expandable, MultipleSelection {}\nexport interface TreeState<T> {\n  /** A collection of items in the tree. */\n  readonly collection: Collection<Node<T>>,\n\n  /** A set of keys for items that are disabled. */\n  readonly disabledKeys: Set<Key>,\n\n  /** A set of keys for items that are expanded. */\n  readonly expandedKeys: Set<Key>,\n\n  /** Toggles the expanded state for an item by its key. */\n  toggleKey(key: Key): void,\n\n  /** A selection manager to read and update multiple selection state. */\n  readonly selectionManager: SelectionManager\n}\n\n/**\n * Provides state management for tree-like components. Handles building a collection\n * of items from props, item expanded state, and manages multiple selection state.\n */\nexport function useTreeState<T extends object>(props: TreeProps<T>): TreeState<T> {\n  let [expandedKeys, setExpandedKeys] = useControlledState(\n    props.expandedKeys ? new Set(props.expandedKeys) : undefined,\n    props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : new Set(),\n    props.onExpandedChange\n  );\n\n  let selectionState = useMultipleSelectionState(props);\n  let disabledKeys = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n\n  let tree = useCollection(props, nodes => new TreeCollection(nodes, {expandedKeys}), null, [expandedKeys]);\n\n  // Reset focused key if that item is deleted from the collection.\n  useEffect(() => {\n    if (selectionState.focusedKey != null && !tree.getItem(selectionState.focusedKey)) {\n      selectionState.setFocusedKey(null);\n    }\n  }, [tree, selectionState.focusedKey]);\n\n  let onToggle = (key: Key) => {\n    setExpandedKeys(toggleKey(expandedKeys, key));\n  };\n\n  return {\n    collection: tree,\n    expandedKeys,\n    disabledKeys,\n    toggleKey: onToggle,\n    selectionManager: new SelectionManager(tree, selectionState)\n  };\n}\n\nfunction toggleKey(set: Set<Key>, key: Key): Set<Key> {\n  let res = new Set(set);\n  if (res.has(key)) {\n    res.delete(key);\n  } else {\n    res.add(key);\n  }\n\n  return res;\n}\n"]},"metadata":{},"sourceType":"module"}