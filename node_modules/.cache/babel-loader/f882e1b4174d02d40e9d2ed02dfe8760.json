{"ast":null,"code":"import { useSlotId as $m1DSs$useSlotId, filterDOMProps as $m1DSs$filterDOMProps } from \"@react-aria/utils\";\nimport { focusSafely as $m1DSs$focusSafely } from \"@react-aria/focus\";\nimport { useRef as $m1DSs$useRef, useEffect as $m1DSs$useEffect } from \"react\";\nimport { useOverlayFocusContain as $m1DSs$useOverlayFocusContain } from \"@react-aria/overlays\";\n\nfunction $40df3f8667284809$export$d55e7ee900f34e93(props, ref) {\n  let {\n    role = 'dialog'\n  } = props;\n  let titleId = $m1DSs$useSlotId();\n  titleId = props['aria-label'] ? undefined : titleId;\n  let isRefocusing = $m1DSs$useRef(false); // Focus the dialog itself on mount, unless a child element is already focused.\n\n  $m1DSs$useEffect(() => {\n    if (ref.current && !ref.current.contains(document.activeElement)) {\n      $m1DSs$focusSafely(ref.current); // Safari on iOS does not move the VoiceOver cursor to the dialog\n      // or announce that it has opened until it has rendered. A workaround\n      // is to wait for half a second, then blur and re-focus the dialog.\n\n      let timeout = setTimeout(() => {\n        if (document.activeElement === ref.current) {\n          isRefocusing.current = true;\n          ref.current.blur();\n          $m1DSs$focusSafely(ref.current);\n          isRefocusing.current = false;\n        }\n      }, 500);\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [ref]);\n  $m1DSs$useOverlayFocusContain(); // We do not use aria-modal due to a Safari bug which forces the first focusable element to be focused\n  // on mount when inside an iframe, no matter which element we programmatically focus.\n  // See https://bugs.webkit.org/show_bug.cgi?id=211934.\n  // useModal sets aria-hidden on all elements outside the dialog, so the dialog will behave as a modal\n  // even without aria-modal on the dialog itself.\n\n  return {\n    dialogProps: { ...$m1DSs$filterDOMProps(props, {\n        labelable: true\n      }),\n      role: role,\n      tabIndex: -1,\n      'aria-labelledby': props['aria-labelledby'] || titleId,\n      // Prevent blur events from reaching useOverlay, which may cause\n      // popovers to close. Since focus is contained within the dialog,\n      // we don't want this to occur due to the above useEffect.\n      onBlur: e => {\n        if (isRefocusing.current) e.stopPropagation();\n      }\n    },\n    titleProps: {\n      id: titleId\n    }\n  };\n}\n\nexport { $40df3f8667284809$export$d55e7ee900f34e93 as useDialog };","map":{"version":3,"mappings":";;;;;SA+BgBA,0CAAUC,OAAwBC,KAA8C;AAC9F,MAAI;AAACC,QAAI,GAAG;AAAR,MAAoBF,KAAxB;AACA,MAAIG,OAAO,GAAGC,gBAAS,EAAvB;AACAD,SAAO,GAAGH,KAAK,CAAC,YAAD,CAAL,GAAsBK,SAAtB,GAAkCF,OAA5C;AAEA,MAAIG,YAAY,GAAGC,aAAM,CAAC,KAAD,CAAzB,CAL8F,CAO9F;;AACAC,kBAAS,OAAO;AACd,QAAIP,GAAG,CAACQ,OAAJ,IAAW,CAAKR,GAAG,CAACQ,OAAJ,CAAYC,QAAZ,CAAqBC,QAAQ,CAACC,aAA9B,CAApB,EAAkE;AAChEC,wBAAW,CAACZ,GAAG,CAACQ,OAAL,CAAX,CADgE,CAGhE;AACA;AACA;;AACA,UAAIK,OAAO,GAAGC,UAAU,OAAO;AAC7B,YAAIJ,QAAQ,CAACC,aAAT,KAA2BX,GAAG,CAACQ,OAAnC,EAA4C;AAC1CH,sBAAY,CAACG,OAAb,GAAuB,IAAvB;AACAR,aAAG,CAACQ,OAAJ,CAAYO,IAAZ;AACAH,4BAAW,CAACZ,GAAG,CAACQ,OAAL,CAAX;AACAH,sBAAY,CAACG,OAAb,GAAuB,KAAvB;AACD;AACF,OAPuB,EAOrB,GAPqB,CAAxB;AASA,aAAM,MAAO;AACXQ,oBAAY,CAACH,OAAD,CAAZ;AACD,OAFD;AAGD;AACF,GApBQ,EAoBN,CAACb,GAAD,CApBM,CAAT;AAsBAiB,+BAAsB,GA9BwE,CAgC9F;AACA;AACA;AACA;AACA;;AACA,SAAO;AACLC,eAAW,EAAE,KACRC,qBAAc,CAACpB,KAAD,EAAQ;AAACqB,iBAAS,EAAE;AAAZ,OAAR,CADN;YAEXnB,IAFW;AAGXoB,cAAQ,EAAE,EAHC;AAIX,yBAAmBtB,KAAK,CAAC,iBAAD,CAAL,IAA4BG,OAJpC;AAKX;AACA;AACA;AACAoB,YAAM,EAAEC,CAAF,IAAO;AACX,YAAIlB,YAAY,CAACG,OAAjB,EACEe,CAAC,CAACC,eAAF;AAEH;AAZU,KADR;AAeLC,cAAU,EAAE;AACVC,QAAE,EAAExB;AADM;AAfP,GAAP;AAmBD","names":["$40df3f8667284809$export$d55e7ee900f34e93","props","ref","role","titleId","$m1DSs$useSlotId","undefined","isRefocusing","$m1DSs$useRef","$m1DSs$useEffect","current","contains","document","activeElement","$m1DSs$focusSafely","timeout","setTimeout","blur","clearTimeout","$m1DSs$useOverlayFocusContain","dialogProps","$m1DSs$filterDOMProps","labelable","tabIndex","onBlur","e","stopPropagation","titleProps","id"],"sources":["/Users/vux/dev/react-project1/node_modules/@react-aria/dialog/dist/packages/@react-aria/dialog/src/useDialog.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaDialogProps} from '@react-types/dialog';\nimport {DOMAttributes, FocusableElement} from '@react-types/shared';\nimport {filterDOMProps, useSlotId} from '@react-aria/utils';\nimport {focusSafely} from '@react-aria/focus';\nimport {RefObject, useEffect, useRef} from 'react';\nimport {useOverlayFocusContain} from '@react-aria/overlays';\n\nexport interface DialogAria {\n  /** Props for the dialog container element. */\n  dialogProps: DOMAttributes,\n\n  /** Props for the dialog title element. */\n  titleProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a dialog component.\n * A dialog is an overlay shown above other content in an application.\n */\nexport function useDialog(props: AriaDialogProps, ref: RefObject<FocusableElement>): DialogAria {\n  let {role = 'dialog'} = props;\n  let titleId = useSlotId();\n  titleId = props['aria-label'] ? undefined : titleId;\n\n  let isRefocusing = useRef(false);\n\n  // Focus the dialog itself on mount, unless a child element is already focused.\n  useEffect(() => {\n    if (ref.current && !ref.current.contains(document.activeElement)) {\n      focusSafely(ref.current);\n\n      // Safari on iOS does not move the VoiceOver cursor to the dialog\n      // or announce that it has opened until it has rendered. A workaround\n      // is to wait for half a second, then blur and re-focus the dialog.\n      let timeout = setTimeout(() => {\n        if (document.activeElement === ref.current) {\n          isRefocusing.current = true;\n          ref.current.blur();\n          focusSafely(ref.current);\n          isRefocusing.current = false;\n        }\n      }, 500);\n\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [ref]);\n\n  useOverlayFocusContain();\n\n  // We do not use aria-modal due to a Safari bug which forces the first focusable element to be focused\n  // on mount when inside an iframe, no matter which element we programmatically focus.\n  // See https://bugs.webkit.org/show_bug.cgi?id=211934.\n  // useModal sets aria-hidden on all elements outside the dialog, so the dialog will behave as a modal\n  // even without aria-modal on the dialog itself.\n  return {\n    dialogProps: {\n      ...filterDOMProps(props, {labelable: true}),\n      role,\n      tabIndex: -1,\n      'aria-labelledby': props['aria-labelledby'] || titleId,\n      // Prevent blur events from reaching useOverlay, which may cause\n      // popovers to close. Since focus is contained within the dialog,\n      // we don't want this to occur due to the above useEffect.\n      onBlur: e => {\n        if (isRefocusing.current) {\n          e.stopPropagation();\n        }\n      }\n    },\n    titleProps: {\n      id: titleId\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}