{"ast":null,"code":"import $6nfFC$swchelperssrc_define_propertymjs from \"@swc/helpers/src/_define_property.mjs\";\nimport $6nfFC$react, { useRef as $6nfFC$useRef, useContext as $6nfFC$useContext, useMemo as $6nfFC$useMemo, useEffect as $6nfFC$useEffect, useState as $6nfFC$useState, useCallback as $6nfFC$useCallback } from \"react\";\nimport { useLayoutEffect as $6nfFC$useLayoutEffect, runAfterTransition as $6nfFC$runAfterTransition, focusWithoutScrolling as $6nfFC$focusWithoutScrolling, mergeProps as $6nfFC$mergeProps, useSyncRef as $6nfFC$useSyncRef } from \"@react-aria/utils\";\nimport { getInteractionModality as $6nfFC$getInteractionModality, isFocusVisible as $6nfFC$isFocusVisible, useFocusVisibleListener as $6nfFC$useFocusVisibleListener, useFocus as $6nfFC$useFocus, useFocusWithin as $6nfFC$useFocusWithin, useKeyboard as $6nfFC$useKeyboard } from \"@react-aria/interactions\";\nimport $6nfFC$clsx from \"clsx\";\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/*\n* Copyright 2020 Adobe. All rights reserved.\n* This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License. You may obtain a copy\n* of the License at http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software distributed under\n* the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n* OF ANY KIND, either express or implied. See the License for the specific language\n* governing permissions and limitations under the License.\n*/\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $6a99195332edec8b$export$80f3e147d781571c(element) {\n  // If the user is interacting with a virtual cursor, e.g. screen reader, then\n  // wait until after any animated transitions that are currently occurring on\n  // the page before shifting focus. This avoids issues with VoiceOver on iOS\n  // causing the page to scroll when moving focus if the element is transitioning\n  // from off the screen.\n  if ((0, $6nfFC$getInteractionModality)() === \"virtual\") {\n    let lastFocusedElement = document.activeElement;\n    (0, $6nfFC$runAfterTransition)(() => {\n      // If focus did not move and the element is still in the document, focus it.\n      if (document.activeElement === lastFocusedElement && document.contains(element)) (0, $6nfFC$focusWithoutScrolling)(element);\n    });\n  } else (0, $6nfFC$focusWithoutScrolling)(element);\n}\n/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n\nfunction $645f2e67b85a24c9$var$isStyleVisible(element) {\n  if (!(element instanceof HTMLElement) && !(element instanceof SVGElement)) return false;\n  let {\n    display: display,\n    visibility: visibility\n  } = element.style;\n  let isVisible = display !== \"none\" && visibility !== \"hidden\" && visibility !== \"collapse\";\n\n  if (isVisible) {\n    const {\n      getComputedStyle: getComputedStyle\n    } = element.ownerDocument.defaultView;\n    let {\n      display: computedDisplay,\n      visibility: computedVisibility\n    } = getComputedStyle(element);\n    isVisible = computedDisplay !== \"none\" && computedVisibility !== \"hidden\" && computedVisibility !== \"collapse\";\n  }\n\n  return isVisible;\n}\n\nfunction $645f2e67b85a24c9$var$isAttributeVisible(element, childElement) {\n  return !element.hasAttribute(\"hidden\") && (element.nodeName === \"DETAILS\" && childElement && childElement.nodeName !== \"SUMMARY\" ? element.hasAttribute(\"open\") : true);\n}\n\nfunction $645f2e67b85a24c9$export$e989c0fffaa6b27a(element, childElement) {\n  return element.nodeName !== \"#comment\" && $645f2e67b85a24c9$var$isStyleVisible(element) && $645f2e67b85a24c9$var$isAttributeVisible(element, childElement) && (!element.parentElement || $645f2e67b85a24c9$export$e989c0fffaa6b27a(element.parentElement, element));\n}\n\nconst $9bf71ea28793e738$var$FocusContext = /*#__PURE__*/(0, $6nfFC$react).createContext(null);\nlet $9bf71ea28793e738$var$activeScope = null;\n\nfunction $9bf71ea28793e738$export$20e40289641fbbb6(props) {\n  let {\n    children: children,\n    contain: contain,\n    restoreFocus: restoreFocus,\n    autoFocus: autoFocus\n  } = props;\n  let startRef = (0, $6nfFC$useRef)();\n  let endRef = (0, $6nfFC$useRef)();\n  let scopeRef = (0, $6nfFC$useRef)([]);\n  let {\n    parentNode: parentNode\n  } = (0, $6nfFC$useContext)($9bf71ea28793e738$var$FocusContext) || {}; // Create a tree node here so we can add children to it even before it is added to the tree.\n\n  let node = (0, $6nfFC$useMemo)(() => new $9bf71ea28793e738$var$TreeNode({\n    scopeRef: scopeRef\n  }), [scopeRef]);\n  (0, $6nfFC$useLayoutEffect)(() => {\n    // If a new scope mounts outside the active scope, (e.g. DialogContainer launched from a menu),\n    // use the active scope as the parent instead of the parent from context. Layout effects run bottom\n    // up, so if the parent is not yet added to the tree, don't do this. Only the outer-most FocusScope\n    // that is being added should get the activeScope as its parent.\n    let parent = parentNode || $9bf71ea28793e738$export$d06fae2ee68b101e.root;\n\n    if ($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parent.scopeRef) && $9bf71ea28793e738$var$activeScope && !$9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, parent.scopeRef)) {\n      let activeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);\n      if (activeNode) parent = activeNode;\n    } // Add the node to the parent, and to the tree.\n\n\n    parent.addChild(node);\n    $9bf71ea28793e738$export$d06fae2ee68b101e.addNode(node);\n  }, [node, parentNode]);\n  (0, $6nfFC$useLayoutEffect)(() => {\n    let node = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);\n    node.contain = contain;\n  }, [contain]);\n  (0, $6nfFC$useLayoutEffect)(() => {\n    // Find all rendered nodes between the sentinels and add them to the scope.\n    let node = startRef.current.nextSibling;\n    let nodes = [];\n\n    while (node && node !== endRef.current) {\n      nodes.push(node);\n      node = node.nextSibling;\n    }\n\n    scopeRef.current = nodes;\n  }, [children]);\n  $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restoreFocus, contain);\n  $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain);\n  $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain);\n  $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus); // this layout effect needs to run last so that focusScopeTree cleanup happens at the last moment possible\n\n  (0, $6nfFC$useEffect)(() => {\n    if (scopeRef) {\n      let activeElement = document.activeElement;\n      let scope = null; // In strict mode, active scope is incorrectly updated since cleanup will run even though scope hasn't unmounted.\n      // To fix this, we need to update the actual activeScope here\n\n      if ($9bf71ea28793e738$var$isElementInScope(activeElement, scopeRef.current)) {\n        // Since useLayoutEffect runs for children first, we need to traverse the focusScope tree and find the bottom most scope that\n        // contains the active element and set that as the activeScope\n        for (let node of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse()) if ($9bf71ea28793e738$var$isElementInScope(activeElement, node.scopeRef.current)) scope = node;\n\n        if (scope === $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef)) $9bf71ea28793e738$var$activeScope = scope.scopeRef;\n      }\n\n      return () => {\n        // Scope may have been re-parented.\n        let parentScope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).parent.scopeRef; // Restore the active scope on unmount if this scope or a descendant scope is active.\n        // Parent effect cleanups run before children, so we need to check if the\n        // parent scope actually still exists before restoring the active scope to it.\n\n        if ((scopeRef === $9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope(scopeRef, $9bf71ea28793e738$var$activeScope)) && (!parentScope || $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parentScope))) $9bf71ea28793e738$var$activeScope = parentScope;\n        $9bf71ea28793e738$export$d06fae2ee68b101e.removeTreeNode(scopeRef);\n      };\n    }\n  }, [scopeRef]);\n  let focusManager = (0, $6nfFC$useMemo)(() => $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef), []);\n  let value = (0, $6nfFC$useMemo)(() => ({\n    focusManager: focusManager,\n    parentNode: node\n  }), [node, focusManager]);\n  return /*#__PURE__*/(0, $6nfFC$react).createElement($9bf71ea28793e738$var$FocusContext.Provider, {\n    value: value\n  }, /*#__PURE__*/(0, $6nfFC$react).createElement(\"span\", {\n    \"data-focus-scope-start\": true,\n    hidden: true,\n    ref: startRef\n  }), children, /*#__PURE__*/(0, $6nfFC$react).createElement(\"span\", {\n    \"data-focus-scope-end\": true,\n    hidden: true,\n    ref: endRef\n  }));\n}\n\nfunction $9bf71ea28793e738$export$10c5169755ce7bd7() {\n  var _useContext;\n\n  return (_useContext = (0, $6nfFC$useContext)($9bf71ea28793e738$var$FocusContext)) === null || _useContext === void 0 ? void 0 : _useContext.focusManager;\n}\n\nfunction $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef) {\n  return {\n    focusNext() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let scope = scopeRef.current;\n      let {\n        from: from,\n        tabbable: tabbable,\n        wrap: wrap,\n        accept: accept\n      } = opts;\n      let node = from || document.activeElement;\n      let sentinel = scope[0].previousElementSibling;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;\n      let nextNode = walker.nextNode();\n\n      if (!nextNode && wrap) {\n        walker.currentNode = sentinel;\n        nextNode = walker.nextNode();\n      }\n\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n\n    focusPrevious() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let scope = scopeRef.current;\n      let {\n        from: from,\n        tabbable: tabbable,\n        wrap: wrap,\n        accept: accept\n      } = opts;\n      let node = from || document.activeElement;\n      let sentinel = scope[scope.length - 1].nextElementSibling;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;\n      let previousNode = walker.previousNode();\n\n      if (!previousNode && wrap) {\n        walker.currentNode = sentinel;\n        previousNode = walker.previousNode();\n      }\n\n      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n      return previousNode;\n    },\n\n    focusFirst() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let scope = scopeRef.current;\n      let {\n        tabbable: tabbable,\n        accept: accept\n      } = opts;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = scope[0].previousElementSibling;\n      let nextNode = walker.nextNode();\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n\n    focusLast() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let scope = scopeRef.current;\n      let {\n        tabbable: tabbable,\n        accept: accept\n      } = opts;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = scope[scope.length - 1].nextElementSibling;\n      let previousNode = walker.previousNode();\n      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n      return previousNode;\n    }\n\n  };\n}\n\nconst $9bf71ea28793e738$var$focusableElements = [\"input:not([disabled]):not([type=hidden])\", \"select:not([disabled])\", \"textarea:not([disabled])\", \"button:not([disabled])\", \"a[href]\", \"area[href]\", \"summary\", \"iframe\", \"object\", \"embed\", \"audio[controls]\", \"video[controls]\", \"[contenteditable]\"];\nconst $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(\":not([hidden]),\") + \",[tabindex]:not([disabled]):not([hidden])\";\n$9bf71ea28793e738$var$focusableElements.push('[tabindex]:not([tabindex=\"-1\"]):not([disabled])');\nconst $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(':not([hidden]):not([tabindex=\"-1\"]),');\n\nfunction $9bf71ea28793e738$var$getScopeRoot(scope) {\n  return scope[0].parentElement;\n}\n\nfunction $9bf71ea28793e738$var$shouldContainFocus(scopeRef) {\n  let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);\n\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.contain) return false;\n    scope = scope.parent;\n  }\n\n  return true;\n}\n\nfunction $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain) {\n  let focusedNode = (0, $6nfFC$useRef)();\n  let raf = (0, $6nfFC$useRef)(null);\n  (0, $6nfFC$useLayoutEffect)(() => {\n    let scope = scopeRef.current;\n\n    if (!contain) {\n      // if contain was changed, then we should cancel any ongoing waits to pull focus back into containment\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n        raf.current = null;\n      }\n\n      return;\n    } // Handle the Tab key to contain focus within the scope\n\n\n    let onKeyDown = e => {\n      if (e.key !== \"Tab\" || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef)) return;\n      let focusedElement = document.activeElement;\n      let scope = scopeRef.current;\n      if (!$9bf71ea28793e738$var$isElementInScope(focusedElement, scope)) return;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n        tabbable: true\n      }, scope);\n      walker.currentNode = focusedElement;\n      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n\n      if (!nextElement) {\n        walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling : scope[0].previousElementSibling;\n        nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n      }\n\n      e.preventDefault();\n      if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);\n    };\n\n    let onFocus = e => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope(e.target, scopeRef.current)) {\n        $9bf71ea28793e738$var$activeScope = scopeRef;\n        focusedNode.current = e.target;\n      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(e.target, scopeRef)) {\n        // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),\n        // restore focus to the previously focused node or the first tabbable element in the active scope.\n        if (focusedNode.current) focusedNode.current.focus();else if ($9bf71ea28793e738$var$activeScope) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);\n      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef)) focusedNode.current = e.target;\n    };\n\n    let onBlur = e => {\n      // Firefox doesn't shift focus back to the Dialog properly without this\n      if (raf.current) cancelAnimationFrame(raf.current);\n      raf.current = requestAnimationFrame(() => {\n        // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe\n        if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(document.activeElement, scopeRef)) {\n          $9bf71ea28793e738$var$activeScope = scopeRef;\n\n          if (document.body.contains(e.target)) {\n            focusedNode.current = e.target;\n            focusedNode.current.focus();\n          } else if ($9bf71ea28793e738$var$activeScope) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);\n        }\n      });\n    };\n\n    document.addEventListener(\"keydown\", onKeyDown, false);\n    document.addEventListener(\"focusin\", onFocus, false);\n    scope.forEach(element => element.addEventListener(\"focusin\", onFocus, false));\n    scope.forEach(element => element.addEventListener(\"focusout\", onBlur, false));\n    return () => {\n      document.removeEventListener(\"keydown\", onKeyDown, false);\n      document.removeEventListener(\"focusin\", onFocus, false);\n      scope.forEach(element => element.removeEventListener(\"focusin\", onFocus, false));\n      scope.forEach(element => element.removeEventListener(\"focusout\", onBlur, false));\n    };\n  }, [scopeRef, contain]); // eslint-disable-next-line arrow-body-style\n\n  (0, $6nfFC$useEffect)(() => {\n    return () => {\n      if (raf.current) cancelAnimationFrame(raf.current);\n    };\n  }, [raf]);\n}\n\nfunction $9bf71ea28793e738$var$isElementInAnyScope(element) {\n  return $9bf71ea28793e738$var$isElementInChildScope(element);\n}\n\nfunction $9bf71ea28793e738$var$isElementInScope(element, scope) {\n  return scope.some(node => node.contains(element));\n}\n\nfunction $9bf71ea28793e738$var$isElementInChildScope(element) {\n  let scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  // If the element is within a top layer element (e.g. toasts), always allow moving focus there.\n  if (element instanceof Element && element.closest(\"[data-react-aria-top-layer]\")) return true; // node.contains in isElementInScope covers child scopes that are also DOM children,\n  // but does not cover child scopes in portals.\n\n  for (let {\n    scopeRef: s\n  } of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope))) {\n    if ($9bf71ea28793e738$var$isElementInScope(element, s.current)) return true;\n  }\n\n  return false;\n}\n\nfunction $9bf71ea28793e738$export$1258395f99bf9cbf(element) {\n  return $9bf71ea28793e738$var$isElementInChildScope(element, $9bf71ea28793e738$var$activeScope);\n}\n\nfunction $9bf71ea28793e738$var$isAncestorScope(ancestor, scope) {\n  var _focusScopeTree_getTreeNode;\n\n  let parent = (_focusScopeTree_getTreeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : _focusScopeTree_getTreeNode.parent;\n\n  while (parent) {\n    if (parent.scopeRef === ancestor) return true;\n    parent = parent.parent;\n  }\n\n  return false;\n}\n\nfunction $9bf71ea28793e738$var$focusElement(element) {\n  let scroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (element != null && !scroll) try {\n    (0, $6a99195332edec8b$export$80f3e147d781571c)(element);\n  } catch (err) {// ignore\n  } else if (element != null) try {\n    element.focus();\n  } catch (err1) {// ignore\n  }\n}\n\nfunction $9bf71ea28793e738$var$focusFirstInScope(scope) {\n  let tabbable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  let sentinel = scope[0].previousElementSibling;\n  let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n    tabbable: tabbable\n  }, scope);\n  walker.currentNode = sentinel;\n  let nextNode = walker.nextNode(); // If the scope does not contain a tabbable element, use the first focusable element.\n\n  if (tabbable && !nextNode) {\n    walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n      tabbable: false\n    }, scope);\n    walker.currentNode = sentinel;\n    nextNode = walker.nextNode();\n  }\n\n  $9bf71ea28793e738$var$focusElement(nextNode);\n}\n\nfunction $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus) {\n  const autoFocusRef = (0, $6nfFC$react).useRef(autoFocus);\n  (0, $6nfFC$useEffect)(() => {\n    if (autoFocusRef.current) {\n      $9bf71ea28793e738$var$activeScope = scopeRef;\n      if (!$9bf71ea28793e738$var$isElementInScope(document.activeElement, $9bf71ea28793e738$var$activeScope.current)) $9bf71ea28793e738$var$focusFirstInScope(scopeRef.current);\n    }\n\n    autoFocusRef.current = false;\n  }, [scopeRef]);\n}\n\nfunction $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restore, contain) {\n  // tracks the active scope, in case restore and contain are both false.\n  // if either are true, this is tracked in useRestoreFocus or useFocusContainment.\n  (0, $6nfFC$useLayoutEffect)(() => {\n    if (restore || contain) return;\n    let scope = scopeRef.current;\n\n    let onFocus = e => {\n      let target = e.target;\n      if ($9bf71ea28793e738$var$isElementInScope(target, scopeRef.current)) $9bf71ea28793e738$var$activeScope = scopeRef;else if (!$9bf71ea28793e738$var$isElementInAnyScope(target)) $9bf71ea28793e738$var$activeScope = null;\n    };\n\n    document.addEventListener(\"focusin\", onFocus, false);\n    scope.forEach(element => element.addEventListener(\"focusin\", onFocus, false));\n    return () => {\n      document.removeEventListener(\"focusin\", onFocus, false);\n      scope.forEach(element => element.removeEventListener(\"focusin\", onFocus, false));\n    };\n  }, [scopeRef, restore, contain]);\n}\n\nfunction $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef) {\n  let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);\n\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.nodeToRestore) return false;\n    scope = scope.parent;\n  }\n\n  return (scope === null || scope === void 0 ? void 0 : scope.scopeRef) === scopeRef;\n}\n\nfunction $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain) {\n  // create a ref during render instead of useLayoutEffect so the active element is saved before a child with autoFocus=true mounts.\n  const nodeToRestoreRef = (0, $6nfFC$useRef)(typeof document !== \"undefined\" ? document.activeElement : null); // restoring scopes should all track if they are active regardless of contain, but contain already tracks it plus logic to contain the focus\n  // restoring-non-containing scopes should only care if they become active so they can perform the restore\n\n  (0, $6nfFC$useLayoutEffect)(() => {\n    let scope = scopeRef.current;\n    if (!restoreFocus || contain) return;\n\n    let onFocus = () => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if (!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) $9bf71ea28793e738$var$activeScope = scopeRef;\n    };\n\n    document.addEventListener(\"focusin\", onFocus, false);\n    scope.forEach(element => element.addEventListener(\"focusin\", onFocus, false));\n    return () => {\n      document.removeEventListener(\"focusin\", onFocus, false);\n      scope.forEach(element => element.removeEventListener(\"focusin\", onFocus, false));\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [scopeRef, contain]); // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.\n\n  (0, $6nfFC$useLayoutEffect)(() => {\n    if (!restoreFocus) return;\n    $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore = nodeToRestoreRef.current; // Handle the Tab key so that tabbing out of the scope goes to the next element\n    // after the node that had focus when the scope mounted. This is important when\n    // using portals for overlays, so that focus goes to the expected element when\n    // tabbing out of the overlay.\n\n    let onKeyDown = e => {\n      if (e.key !== \"Tab\" || e.altKey || e.ctrlKey || e.metaKey) return;\n      let focusedElement = document.activeElement;\n      if (!$9bf71ea28793e738$var$isElementInScope(focusedElement, scopeRef.current)) return;\n      let nodeToRestore = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore; // Create a DOM tree walker that matches all tabbable elements\n\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(document.body, {\n        tabbable: true\n      }); // Find the next tabbable element after the currently focused element\n\n      walker.currentNode = focusedElement;\n      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n\n      if (!document.body.contains(nodeToRestore) || nodeToRestore === document.body) {\n        nodeToRestore = null;\n        $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore = null;\n      } // If there is no next element, or it is outside the current scope, move focus to the\n      // next element after the node to restore to instead.\n\n\n      if ((!nextElement || !$9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current)) && nodeToRestore) {\n        walker.currentNode = nodeToRestore; // Skip over elements within the scope, in case the scope immediately follows the node to restore.\n\n        do nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode(); while ($9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current));\n\n        e.preventDefault();\n        e.stopPropagation();\n        if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);else // If there is no next element and the nodeToRestore isn't within a FocusScope (i.e. we are leaving the top level focus scope)\n          // then move focus to the body.\n          // Otherwise restore focus to the nodeToRestore (e.g menu within a popover -> tabbing to close the menu should move focus to menu trigger)\n          if (!$9bf71ea28793e738$var$isElementInAnyScope(nodeToRestore)) focusedElement.blur();else $9bf71ea28793e738$var$focusElement(nodeToRestore, true);\n      }\n    };\n\n    if (!contain) document.addEventListener(\"keydown\", onKeyDown, true);\n    return () => {\n      if (!contain) document.removeEventListener(\"keydown\", onKeyDown, true);\n      let nodeToRestore = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore; // if we already lost focus to the body and this was the active scope, then we should attempt to restore\n\n      if (restoreFocus && nodeToRestore && ( // eslint-disable-next-line react-hooks/exhaustive-deps\n      $9bf71ea28793e738$var$isElementInScope(document.activeElement, scopeRef.current) || document.activeElement === document.body && $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef))) {\n        // freeze the focusScopeTree so it persists after the raf, otherwise during unmount nodes are removed from it\n        let clonedTree = $9bf71ea28793e738$export$d06fae2ee68b101e.clone();\n        requestAnimationFrame(() => {\n          // Only restore focus if we've lost focus to the body, the alternative is that focus has been purposefully moved elsewhere\n          if (document.activeElement === document.body) {\n            // look up the tree starting with our scope to find a nodeToRestore still in the DOM\n            let treeNode = clonedTree.getTreeNode(scopeRef);\n\n            while (treeNode) {\n              if (treeNode.nodeToRestore && document.body.contains(treeNode.nodeToRestore)) {\n                $9bf71ea28793e738$var$focusElement(treeNode.nodeToRestore);\n                return;\n              }\n\n              treeNode = treeNode.parent;\n            } // If no nodeToRestore was found, focus the first element in the nearest\n            // ancestor scope that is still in the tree.\n\n\n            treeNode = clonedTree.getTreeNode(scopeRef);\n\n            while (treeNode) {\n              if (treeNode.scopeRef && $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(treeNode.scopeRef)) {\n                $9bf71ea28793e738$var$focusFirstInScope(treeNode.scopeRef.current, true);\n                return;\n              }\n\n              treeNode = treeNode.parent;\n            }\n          }\n        });\n      }\n    };\n  }, [scopeRef, restoreFocus, contain]);\n}\n\nfunction $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, opts, scope) {\n  let selector = (opts === null || opts === void 0 ? void 0 : opts.tabbable) ? $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR : $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR;\n  let walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {\n    acceptNode(node) {\n      var _opts_from; // Skip nodes inside the starting node.\n\n\n      if (opts === null || opts === void 0 ? void 0 : (_opts_from = opts.from) === null || _opts_from === void 0 ? void 0 : _opts_from.contains(node)) return NodeFilter.FILTER_REJECT;\n      if (node.matches(selector) && (0, $645f2e67b85a24c9$export$e989c0fffaa6b27a)(node) && (!scope || $9bf71ea28793e738$var$isElementInScope(node, scope)) && (!(opts === null || opts === void 0 ? void 0 : opts.accept) || opts.accept(node))) return NodeFilter.FILTER_ACCEPT;\n      return NodeFilter.FILTER_SKIP;\n    }\n\n  });\n  if (opts === null || opts === void 0 ? void 0 : opts.from) walker.currentNode = opts.from;\n  return walker;\n}\n\nfunction $9bf71ea28793e738$export$c5251b9e124bf29(ref) {\n  let defaultOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return {\n    focusNext() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let root = ref.current;\n      if (!root) return;\n      let {\n        from: from,\n        tabbable = defaultOptions.tabbable,\n        wrap = defaultOptions.wrap,\n        accept = defaultOptions.accept\n      } = opts;\n      let node = from || document.activeElement;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      if (root.contains(node)) walker.currentNode = node;\n      let nextNode = walker.nextNode();\n\n      if (!nextNode && wrap) {\n        walker.currentNode = root;\n        nextNode = walker.nextNode();\n      }\n\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n\n    focusPrevious() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultOptions;\n      let root = ref.current;\n      if (!root) return;\n      let {\n        from: from,\n        tabbable = defaultOptions.tabbable,\n        wrap = defaultOptions.wrap,\n        accept = defaultOptions.accept\n      } = opts;\n      let node = from || document.activeElement;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      if (root.contains(node)) walker.currentNode = node;else {\n        let next = $9bf71ea28793e738$var$last(walker);\n        if (next) $9bf71ea28793e738$var$focusElement(next, true);\n        return next;\n      }\n      let previousNode = walker.previousNode();\n\n      if (!previousNode && wrap) {\n        walker.currentNode = root;\n        previousNode = $9bf71ea28793e738$var$last(walker);\n      }\n\n      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n      return previousNode;\n    },\n\n    focusFirst() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultOptions;\n      let root = ref.current;\n      if (!root) return;\n      let {\n        tabbable = defaultOptions.tabbable,\n        accept = defaultOptions.accept\n      } = opts;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      let nextNode = walker.nextNode();\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n\n    focusLast() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultOptions;\n      let root = ref.current;\n      if (!root) return;\n      let {\n        tabbable = defaultOptions.tabbable,\n        accept = defaultOptions.accept\n      } = opts;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      let next = $9bf71ea28793e738$var$last(walker);\n      if (next) $9bf71ea28793e738$var$focusElement(next, true);\n      return next;\n    }\n\n  };\n}\n\nfunction $9bf71ea28793e738$var$last(walker) {\n  let next;\n  let last;\n\n  do {\n    last = walker.lastChild();\n    if (last) next = last;\n  } while (last);\n\n  return next;\n}\n\nclass $9bf71ea28793e738$var$Tree {\n  get size() {\n    return this.fastMap.size;\n  }\n\n  getTreeNode(data) {\n    return this.fastMap.get(data);\n  }\n\n  addTreeNode(scopeRef, parent, nodeToRestore) {\n    let parentNode = this.fastMap.get(parent !== null && parent !== void 0 ? parent : null);\n    let node = new $9bf71ea28793e738$var$TreeNode({\n      scopeRef: scopeRef\n    });\n    parentNode.addChild(node);\n    node.parent = parentNode;\n    this.fastMap.set(scopeRef, node);\n    if (nodeToRestore) node.nodeToRestore = nodeToRestore;\n  }\n\n  addNode(node) {\n    this.fastMap.set(node.scopeRef, node);\n  }\n\n  removeTreeNode(scopeRef) {\n    // never remove the root\n    if (scopeRef === null) return;\n    let node = this.fastMap.get(scopeRef);\n    let parentNode = node.parent; // when we remove a scope, check if any sibling scopes are trying to restore focus to something inside the scope we're removing\n    // if we are, then replace the siblings restore with the restore from the scope we're removing\n\n    for (let current of this.traverse()) if (current !== node && node.nodeToRestore && current.nodeToRestore && node.scopeRef.current && $9bf71ea28793e738$var$isElementInScope(current.nodeToRestore, node.scopeRef.current)) current.nodeToRestore = node.nodeToRestore;\n\n    let children = node.children;\n    parentNode.removeChild(node);\n    if (children.size > 0) children.forEach(child => parentNode.addChild(child));\n    this.fastMap.delete(node.scopeRef);\n  } // Pre Order Depth First\n\n\n  *traverse() {\n    let node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.root;\n    if (node.scopeRef != null) yield node;\n    if (node.children.size > 0) for (let child of node.children) yield* this.traverse(child);\n  }\n\n  clone() {\n    let newTree = new $9bf71ea28793e738$var$Tree();\n\n    for (let node of this.traverse()) newTree.addTreeNode(node.scopeRef, node.parent.scopeRef, node.nodeToRestore);\n\n    return newTree;\n  }\n\n  constructor() {\n    (0, $6nfFC$swchelperssrc_define_propertymjs)(this, \"fastMap\", new Map());\n    this.root = new $9bf71ea28793e738$var$TreeNode({\n      scopeRef: null\n    });\n    this.fastMap.set(null, this.root);\n  }\n\n}\n\nclass $9bf71ea28793e738$var$TreeNode {\n  addChild(node) {\n    this.children.add(node);\n    node.parent = this;\n  }\n\n  removeChild(node) {\n    this.children.delete(node);\n    node.parent = undefined;\n  }\n\n  constructor(props) {\n    (0, $6nfFC$swchelperssrc_define_propertymjs)(this, \"children\", new Set());\n    (0, $6nfFC$swchelperssrc_define_propertymjs)(this, \"contain\", false);\n    this.scopeRef = props.scopeRef;\n  }\n\n}\n\nlet $9bf71ea28793e738$export$d06fae2ee68b101e = new $9bf71ea28793e738$var$Tree();\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $f7dceffc5ad7768b$export$4e328f61c538687f() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let {\n    autoFocus = false,\n    isTextInput: isTextInput,\n    within: within\n  } = props;\n  let state = (0, $6nfFC$useRef)({\n    isFocused: false,\n    isFocusVisible: autoFocus || (0, $6nfFC$isFocusVisible)()\n  });\n  let [isFocused, setFocused] = (0, $6nfFC$useState)(false);\n  let [isFocusVisibleState, setFocusVisible] = (0, $6nfFC$useState)(() => state.current.isFocused && state.current.isFocusVisible);\n  let updateState = (0, $6nfFC$useCallback)(() => setFocusVisible(state.current.isFocused && state.current.isFocusVisible), []);\n  let onFocusChange = (0, $6nfFC$useCallback)(isFocused => {\n    state.current.isFocused = isFocused;\n    setFocused(isFocused);\n    updateState();\n  }, [updateState]);\n  (0, $6nfFC$useFocusVisibleListener)(isFocusVisible => {\n    state.current.isFocusVisible = isFocusVisible;\n    updateState();\n  }, [], {\n    isTextInput: isTextInput\n  });\n  let {\n    focusProps: focusProps\n  } = (0, $6nfFC$useFocus)({\n    isDisabled: within,\n    onFocusChange: onFocusChange\n  });\n  let {\n    focusWithinProps: focusWithinProps\n  } = (0, $6nfFC$useFocusWithin)({\n    isDisabled: !within,\n    onFocusWithinChange: onFocusChange\n  });\n  return {\n    isFocused: isFocused,\n    isFocusVisible: state.current.isFocused && isFocusVisibleState,\n    focusProps: within ? focusWithinProps : focusProps\n  };\n}\n\nfunction $907718708eab68af$export$1a38b4ad7f578e1d(props) {\n  let {\n    children: children,\n    focusClass: focusClass,\n    focusRingClass: focusRingClass\n  } = props;\n  let {\n    isFocused: isFocused,\n    isFocusVisible: isFocusVisible,\n    focusProps: focusProps\n  } = (0, $f7dceffc5ad7768b$export$4e328f61c538687f)(props);\n  let child = (0, $6nfFC$react).Children.only(children);\n  return /*#__PURE__*/(0, $6nfFC$react).cloneElement(child, (0, $6nfFC$mergeProps)(child.props, { ...focusProps,\n    className: (0, $6nfFC$clsx)({\n      [focusClass || \"\"]: isFocused,\n      [focusRingClass || \"\"]: isFocusVisible\n    })\n  }));\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n\nlet $e6afbd83fe6ebbd2$var$FocusableContext = /*#__PURE__*/(0, $6nfFC$react).createContext(null);\n\nfunction $e6afbd83fe6ebbd2$var$useFocusableContext(ref) {\n  let context = (0, $6nfFC$useContext)($e6afbd83fe6ebbd2$var$FocusableContext) || {};\n  (0, $6nfFC$useSyncRef)(context, ref); // eslint-disable-next-line\n\n  let {\n    ref: _,\n    ...otherProps\n  } = context;\n  return otherProps;\n}\n/**\n * Provides DOM props to the nearest focusable child.\n */\n\n\nfunction $e6afbd83fe6ebbd2$var$FocusableProvider(props, ref) {\n  let {\n    children: children,\n    ...otherProps\n  } = props;\n  let context = { ...otherProps,\n    ref: ref\n  };\n  return /*#__PURE__*/(0, $6nfFC$react).createElement($e6afbd83fe6ebbd2$var$FocusableContext.Provider, {\n    value: context\n  }, children);\n}\n\nlet $e6afbd83fe6ebbd2$export$13f3202a3e5ddd5 = /*#__PURE__*/(0, $6nfFC$react).forwardRef($e6afbd83fe6ebbd2$var$FocusableProvider);\n\nfunction $e6afbd83fe6ebbd2$export$4c014de7c8940b4c(props, domRef) {\n  let {\n    focusProps: focusProps\n  } = (0, $6nfFC$useFocus)(props);\n  let {\n    keyboardProps: keyboardProps\n  } = (0, $6nfFC$useKeyboard)(props);\n  let interactions = (0, $6nfFC$mergeProps)(focusProps, keyboardProps);\n  let domProps = $e6afbd83fe6ebbd2$var$useFocusableContext(domRef);\n  let interactionProps = props.isDisabled ? {} : domProps;\n  let autoFocusRef = (0, $6nfFC$useRef)(props.autoFocus);\n  (0, $6nfFC$useEffect)(() => {\n    if (autoFocusRef.current && domRef.current) (0, $6a99195332edec8b$export$80f3e147d781571c)(domRef.current);\n    autoFocusRef.current = false;\n  }, [domRef]);\n  return {\n    focusableProps: (0, $6nfFC$mergeProps)({ ...interactions,\n      tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : undefined\n    }, interactionProps)\n  };\n}\n/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n\nfunction $83013635b024ae3d$export$eac1895992b9f3d6(ref, options) {\n  let isDisabled = options === null || options === void 0 ? void 0 : options.isDisabled;\n  let [hasTabbableChild, setHasTabbableChild] = (0, $6nfFC$useState)(false);\n  (0, $6nfFC$useLayoutEffect)(() => {\n    if ((ref === null || ref === void 0 ? void 0 : ref.current) && !isDisabled) {\n      let update = () => {\n        if (ref.current) {\n          let walker = (0, $9bf71ea28793e738$export$2d6ec8fc375ceafa)(ref.current, {\n            tabbable: true\n          });\n          setHasTabbableChild(!!walker.nextNode());\n        }\n      };\n\n      update(); // Update when new elements are inserted, or the tabIndex/disabled attribute updates.\n\n      let observer = new MutationObserver(update);\n      observer.observe(ref.current, {\n        subtree: true,\n        childList: true,\n        attributes: true,\n        attributeFilter: [\"tabIndex\", \"disabled\"]\n      });\n      return () => {\n        // Disconnect mutation observer when a React update occurs on the top-level component\n        // so we update synchronously after re-rendering. Otherwise React will emit act warnings\n        // in tests since mutation observers fire asynchronously. The mutation observer is necessary\n        // so we also update if a child component re-renders and adds/removes something tabbable.\n        observer.disconnect();\n      };\n    }\n  });\n  return isDisabled ? false : hasTabbableChild;\n}\n\nexport { $9bf71ea28793e738$export$20e40289641fbbb6 as FocusScope, $9bf71ea28793e738$export$10c5169755ce7bd7 as useFocusManager, $9bf71ea28793e738$export$2d6ec8fc375ceafa as getFocusableTreeWalker, $9bf71ea28793e738$export$c5251b9e124bf29 as createFocusManager, $9bf71ea28793e738$export$1258395f99bf9cbf as isElementInChildOfActiveScope, $907718708eab68af$export$1a38b4ad7f578e1d as FocusRing, $e6afbd83fe6ebbd2$export$13f3202a3e5ddd5 as FocusableProvider, $e6afbd83fe6ebbd2$export$4c014de7c8940b4c as useFocusable, $f7dceffc5ad7768b$export$4e328f61c538687f as useFocusRing, $6a99195332edec8b$export$80f3e147d781571c as focusSafely, $83013635b024ae3d$export$eac1895992b9f3d6 as useHasTabbableChild };","map":{"version":3,"mappings":";;;;;AAAA;;;;;;;;;;ACAA;;AAAA;;;;;;;;;;;;ACAA;;;;;;;;;;;;AAoBO,SAASA,yCAAT,CAAqBC,OAArB,EAAgD;AACrD;AACA;AACA;AACA;AACA;AACA,MAAI,yCAA6B,SAAjC,EAA4C;AAC1C,QAAIC,qBAAqBC,SAASC,aAAlC;AACA,mCAAmB,MAAM;AACvB;AACA,UAAID,SAASC,aAAT,KAA2BF,kBAA3B,IAAiDC,SAASE,QAAT,CAAkBJ,OAAlB,CAArD,EACE,kCAAsBA,OAAtB;AAEJ,KALA;AAMF,GARA,MASE,kCAAsBA,OAAtB;AAEJ;ACrCA;;;;;;;;;;;;;AAYA,SAASK,oCAAT,CAAwBL,OAAxB,EAA0C;AACxC,MAAI,EAAEA,mBAAmBM,WAArB,KAAqC,EAAEN,mBAAmBO,UAArB,CAAzC,EACE,OAAO,KAAP;AAGF,MAAI;AAAAC,aAACA,OAAD;AAAQC,gBAAEA;AAAV,MAAwBT,QAAQU,KAApC;AAEA,MAAIC,YACFH,YAAY,MAAZ,IACAC,eAAe,QADf,IAEAA,eAAe,UAHjB;;AAMA,MAAIE,SAAJ,EAAe;AACb,UAAM;AAAAC,wBAACA;AAAD,QAAqBZ,QAAQa,aAAR,CAAsBC,WAAjD;AACA,QAAI;AAACN,eAASO,eAAV;AAA2BN,kBAAYO;AAAvC,QAA6DJ,iBAAiBZ,OAAjB,CAAjE;AAEAW,gBACEI,oBAAoB,MAApB,IACAC,uBAAuB,QADvB,IAEAA,uBAAuB,UAHzB;AAKD;;AAED,SAAOL,SAAP;AACF;;AAEA,SAASM,wCAAT,CAA4BjB,OAA5B,EAA8CkB,YAA9C,EAAsE;AACpE,SACE,CAAClB,QAAQmB,YAAR,CAAqB,QAArB,CAAD,KACCnB,QAAQoB,QAAR,KAAqB,SAArB,IACCF,YADD,IAECA,aAAaE,QAAb,KAA0B,SAF3B,GAGGpB,QAAQmB,YAAR,CAAqB,MAArB,CAHH,GAIG,IALJ,CADF;AAQF;;AAQO,SAASE,yCAAT,CAA0BrB,OAA1B,EAA4CkB,YAA5C,EAAoE;AACzE,SACElB,QAAQoB,QAAR,KAAqB,UAArB,IACAf,qCAAeL,OAAf,CADA,IAEAiB,yCAAmBjB,OAAnB,EAA4BkB,YAA5B,CAFA,KAGC,CAAClB,QAAQsB,aAAT,IAA0BD,0CAAiBrB,QAAQsB,aAAzB,EAAwCtB,OAAxC,CAH3B,CADF;AAMF;;AFIA,MAAMuB,kDAAe,kBAAMC,aAAN,CAAmC,IAAnC,CAArB;AAEA,IAAIC,oCAAwB,IAA5B;;AAYO,SAASC,yCAAT,CAAoBC,KAApB,EAA4C;AACjD,MAAI;AAAAC,cAACA,QAAD;AAASC,aAAEA,OAAX;AAAkBC,kBAAEA,YAApB;AAAgCC,eAAEA;AAAlC,MAA+CJ,KAAnD;AACA,MAAIK,WAAW,oBAAf;AACA,MAAIC,SAAS,oBAAb;AACA,MAAIC,WAAW,mBAAkB,EAAlB,CAAf;AACA,MAAI;AAAAC,gBAACA;AAAD,MAAe,uBAAWZ,kCAAX,KAA4B,EAA/C,CALiD,CAOjD;;AACA,MAAIa,OAAO,oBAAQ,MAAM,IAAIC,8BAAJ,CAAa;cAACH;AAAD,GAAb,CAAd,EAAwC,CAACA,QAAD,CAAxC,CAAX;AAEA,8BAAgB,MAAM;AACpB;AACA;AACA;AACA;AACA,QAAII,SAASH,cAAcI,0CAAeC,IAA1C;;AACA,QAAID,0CAAeE,WAAf,CAA2BH,OAAOJ,QAAlC,KAA+CT,iCAA/C,IAA8D,CAACiB,sCAAgBjB,iCAAhB,EAA6Ba,OAAOJ,QAApC,CAAnE,EAAkH;AAChH,UAAIS,aAAaJ,0CAAeE,WAAf,CAA2BhB,iCAA3B,CAAjB;AACA,UAAIkB,UAAJ,EACEL,SAASK,UAAT;AAEH,KAXmB,CAapB;;;AACAL,WAAOM,QAAP,CAAgBR,IAAhB;AACAG,8CAAeM,OAAf,CAAuBT,IAAvB;AACF,GAhBA,EAgBG,CAACA,IAAD,EAAOD,UAAP,CAhBH;AAkBA,8BAAgB,MAAM;AACpB,QAAIC,OAAOG,0CAAeE,WAAf,CAA2BP,QAA3B,CAAX;AACAE,SAAKP,OAAL,GAAeA,OAAf;AACF,GAHA,EAGG,CAACA,OAAD,CAHH;AAKA,8BAAgB,MAAM;AACpB;AACA,QAAIO,OAAOJ,SAASc,OAAT,CAAiBC,WAA5B;AACA,QAAIC,QAAQ,EAAZ;;AACA,WAAOZ,QAAQA,SAASH,OAAOa,OAA/B,EAAwC;AACtCE,YAAMC,IAAN,CAAWb,IAAX;AACAA,aAAOA,KAAKW,WAAZ;AACF;;AAEAb,aAASY,OAAT,GAAmBE,KAAnB;AACF,GAVA,EAUG,CAACpB,QAAD,CAVH;AAYAsB,8CAAsBhB,QAAtB,EAAgCJ,YAAhC,EAA8CD,OAA9C;AACAsB,4CAAoBjB,QAApB,EAA8BL,OAA9B;AACAuB,wCAAgBlB,QAAhB,EAA0BJ,YAA1B,EAAwCD,OAAxC;AACAwB,qCAAanB,QAAb,EAAuBH,SAAvB,EAhDiD,CAkDjD;;AACA,wBAAU,MAAM;AACd,QAAIG,QAAJ,EAAc;AACZ,UAAI/B,gBAAgBD,SAASC,aAA7B;AACA,UAAImD,QAAQ,IAAZ,CAFY,CAGZ;AACA;;AACA,UAAIC,uCAAiBpD,aAAjB,EAAgC+B,SAASY,OAAzC,CAAJ,EAAuD;AACrD;AACA;AACA,aAAK,IAAIV,IAAT,IAAiBG,0CAAeiB,QAAf,EAAjB,EACE,IAAID,uCAAiBpD,aAAjB,EAAgCiC,KAAKF,QAAL,CAAcY,OAA9C,CAAJ,EACEQ,QAAQlB,IAAR;;AAIJ,YAAIkB,UAAUf,0CAAeE,WAAf,CAA2BP,QAA3B,CAAd,EACET,oCAAc6B,MAAMpB,QAApB;AAEH;;AAED,aAAO,MAAM;AACX;AACA,YAAIuB,cAAclB,0CAAeE,WAAf,CAA2BP,QAA3B,EAAqCI,MAArC,CAA4CJ,QAA9D,CAFW,CAIX;AACA;AACA;;AACA,YACE,CAACA,aAAaT,iCAAb,IAA4BiB,sCAAgBR,QAAhB,EAA0BT,iCAA1B,CAA7B,MACC,CAACgC,WAAD,IAAgBlB,0CAAeE,WAAf,CAA2BgB,WAA3B,CADjB,CADF,EAIEhC,oCAAcgC,WAAd;AAEFlB,kDAAemB,cAAf,CAA8BxB,QAA9B;AACF,OAdA;AAeD;AACH,GApCA,EAoCG,CAACA,QAAD,CApCH;AAsCA,MAAIyB,eAAe,oBAAQ,MAAMC,iDAA2B1B,QAA3B,CAAd,EAAoD,EAApD,CAAnB;AACA,MAAI2B,QAAQ,oBAAQ,OAAO;kBACzBF,YADyB;AAEzBxB,gBAAYC;AAFa,GAAP,CAAR,EAGR,CAACA,IAAD,EAAOuB,YAAP,CAHQ,CAAZ;AAKA,sBACE,gCAACpC,mCAAauC,QAAd,EAAsB;AAACD,WAAOA;AAAR,GAAtB,eACE,gCAAC,MAAD,EAAC;AAAK,kCAAL;AAA4BE,gBAA5B;AAAmCC,SAAKhC;AAAxC,GAAD,CADF,EAEGJ,QAFH,EAEG,aACD,gCAAC,MAAD,EAAC;AAAK,gCAAL;AAA0BmC,gBAA1B;AAAiCC,SAAK/B;AAAtC,GAAD,CAHF,CADF;AAOF;;AAOO,SAASgC,yCAAT,GAAyC;MACvCC;;AAAP,SAAO,sCAAW3C,kCAAX,OAAW,IAAX,kDAA0BoC,YAAjC;AACF;;AAEA,SAASC,gDAAT,CAAoC1B,QAApC,EAAwF;AACtF,SAAO;AACLiC,gBAA0C;AAAA,UAAhCC,IAAgC,uEAAJ,EAAI;AACxC,UAAId,QAAQpB,SAASY,OAArB;AACA,UAAI;AAAAuB,cAACA,IAAD;AAAKC,kBAAEA,QAAP;AAAeC,cAAEA,IAAjB;AAAqBC,gBAAEA;AAAvB,UAAiCJ,IAArC;AACA,UAAIhC,OAAOiC,QAAQnE,SAASC,aAA5B;AACA,UAAIsE,WAAWnB,KAAK,CAAC,CAAD,CAAL,CAASoB,sBAAxB;AACA,UAAIC,SAASC,0CAAuBC,mCAAavB,KAAb,CAAvB,EAA4C;kBAACgB,QAAD;gBAAWE;AAAX,OAA5C,EAAgElB,KAAhE,CAAb;AACAqB,aAAOG,WAAP,GAAqBvB,uCAAiBnB,IAAjB,EAAuBkB,KAAvB,IAAgClB,IAAhC,GAAuCqC,QAA5D;AACA,UAAIM,WAAWJ,OAAOI,QAAP,EAAf;;AACA,UAAI,CAACA,QAAD,IAAaR,IAAjB,EAAuB;AACrBI,eAAOG,WAAP,GAAqBL,QAArB;AACAM,mBAAWJ,OAAOI,QAAP,EAAX;AACD;;AACD,UAAIA,QAAJ,EACEC,mCAAaD,QAAb,EAAuB,IAAvB;AAEF,aAAOA,QAAP;AACF,KAjBK;;AAkBLE,oBAA8C;AAAA,UAAhCb,IAAgC,uEAAJ,EAAI;AAC5C,UAAId,QAAQpB,SAASY,OAArB;AACA,UAAI;AAAAuB,cAACA,IAAD;AAAKC,kBAAEA,QAAP;AAAeC,cAAEA,IAAjB;AAAqBC,gBAAEA;AAAvB,UAAiCJ,IAArC;AACA,UAAIhC,OAAOiC,QAAQnE,SAASC,aAA5B;AACA,UAAIsE,WAAWnB,KAAK,CAACA,MAAM4B,MAAN,GAAe,CAAhB,CAAL,CAAwBC,kBAAvC;AACA,UAAIR,SAASC,0CAAuBC,mCAAavB,KAAb,CAAvB,EAA4C;kBAACgB,QAAD;gBAAWE;AAAX,OAA5C,EAAgElB,KAAhE,CAAb;AACAqB,aAAOG,WAAP,GAAqBvB,uCAAiBnB,IAAjB,EAAuBkB,KAAvB,IAAgClB,IAAhC,GAAuCqC,QAA5D;AACA,UAAIW,eAAeT,OAAOS,YAAP,EAAnB;;AACA,UAAI,CAACA,YAAD,IAAiBb,IAArB,EAA2B;AACzBI,eAAOG,WAAP,GAAqBL,QAArB;AACAW,uBAAeT,OAAOS,YAAP,EAAf;AACD;;AACD,UAAIA,YAAJ,EACEJ,mCAAaI,YAAb,EAA2B,IAA3B;AAEF,aAAOA,YAAP;AACF,KAlCK;;AAmCLC,iBAAsB;AAAA,UAAXjB,IAAW,uEAAJ,EAAI;AACpB,UAAId,QAAQpB,SAASY,OAArB;AACA,UAAI;AAAAwB,kBAACA,QAAD;AAASE,gBAAEA;AAAX,UAAqBJ,IAAzB;AACA,UAAIO,SAASC,0CAAuBC,mCAAavB,KAAb,CAAvB,EAA4C;kBAACgB,QAAD;gBAAWE;AAAX,OAA5C,EAAgElB,KAAhE,CAAb;AACAqB,aAAOG,WAAP,GAAqBxB,KAAK,CAAC,CAAD,CAAL,CAASoB,sBAA9B;AACA,UAAIK,WAAWJ,OAAOI,QAAP,EAAf;AACA,UAAIA,QAAJ,EACEC,mCAAaD,QAAb,EAAuB,IAAvB;AAEF,aAAOA,QAAP;AACF,KA7CK;;AA8CLO,gBAAqB;AAAA,UAAXlB,IAAW,uEAAJ,EAAI;AACnB,UAAId,QAAQpB,SAASY,OAArB;AACA,UAAI;AAAAwB,kBAACA,QAAD;AAASE,gBAAEA;AAAX,UAAqBJ,IAAzB;AACA,UAAIO,SAASC,0CAAuBC,mCAAavB,KAAb,CAAvB,EAA4C;kBAACgB,QAAD;gBAAWE;AAAX,OAA5C,EAAgElB,KAAhE,CAAb;AACAqB,aAAOG,WAAP,GAAqBxB,KAAK,CAACA,MAAM4B,MAAN,GAAe,CAAhB,CAAL,CAAwBC,kBAA7C;AACA,UAAIC,eAAeT,OAAOS,YAAP,EAAnB;AACA,UAAIA,YAAJ,EACEJ,mCAAaI,YAAb,EAA2B,IAA3B;AAEF,aAAOA,YAAP;AACF;;AAxDK,GAAP;AA0DF;;AAEA,MAAMG,0CAAoB,CACxB,0CADwB,EAExB,wBAFwB,EAGxB,0BAHwB,EAIxB,wBAJwB,EAKxB,SALwB,EAMxB,YANwB,EAOxB,SAPwB,EAQxB,QARwB,EASxB,QATwB,EAUxB,OAVwB,EAWxB,iBAXwB,EAYxB,iBAZwB,EAaxB,mBAbwB,CAA1B;AAgBA,MAAMC,mDAA6BD,wCAAkBE,IAAlB,CAAuB,iBAAvB,IAA4C,2CAA/E;AAEAF,wCAAkBtC,IAAlB,CAAuB,iDAAvB;AACA,MAAMyC,kDAA4BH,wCAAkBE,IAAlB,CAAuB,sCAAvB,CAAlC;;AAEA,SAASZ,kCAAT,CAAsBvB,KAAtB,EAAwC;AACtC,SAAOA,KAAK,CAAC,CAAD,CAAL,CAAShC,aAAhB;AACF;;AAEA,SAASqE,wCAAT,CAA4BzD,QAA5B,EAAgD;AAC9C,MAAIoB,QAAQf,0CAAeE,WAAf,CAA2BhB,iCAA3B,CAAZ;;AACA,SAAO6B,SAASA,MAAMpB,QAAN,KAAmBA,QAAnC,EAA6C;AAC3C,QAAIoB,MAAMzB,OAAV,EACE,OAAO,KAAP;AAGFyB,YAAQA,MAAMhB,MAAd;AACF;;AAEA,SAAO,IAAP;AACF;;AAEA,SAASa,yCAAT,CAA6BjB,QAA7B,EAA6DL,OAA7D,EAA+E;AAC7E,MAAI+D,cAAc,oBAAlB;AAEA,MAAIC,MAAM,mBAAO,IAAP,CAAV;AACA,8BAAgB,MAAM;AACpB,QAAIvC,QAAQpB,SAASY,OAArB;;AACA,QAAI,CAACjB,OAAL,EAAc;AACZ;AACA,UAAIgE,IAAI/C,OAAR,EAAiB;AACfgD,6BAAqBD,IAAI/C,OAAzB;AACA+C,YAAI/C,OAAJ,GAAc,IAAd;AACD;;AACD;AACD,KATmB,CAWpB;;;AACA,QAAIiD,YAAaC,CAAD,IAAO;AACrB,UAAIA,EAAEC,GAAF,KAAU,KAAV,IAAmBD,EAAEE,MAArB,IAA+BF,EAAEG,OAAjC,IAA4CH,EAAEI,OAA9C,IAAyD,CAACT,yCAAmBzD,QAAnB,CAA9D,EACE;AAGF,UAAImE,iBAAiBnG,SAASC,aAA9B;AACA,UAAImD,QAAQpB,SAASY,OAArB;AACA,UAAI,CAACS,uCAAiB8C,cAAjB,EAAiC/C,KAAjC,CAAL,EACE;AAGF,UAAIqB,SAASC,0CAAuBC,mCAAavB,KAAb,CAAvB,EAA4C;AAACgB,kBAAU;AAAX,OAA5C,EAA8DhB,KAA9D,CAAb;AACAqB,aAAOG,WAAP,GAAqBuB,cAArB;AACA,UAAIC,cAAeN,EAAEO,QAAF,GAAa5B,OAAOS,YAAP,EAAb,GAAqCT,OAAOI,QAAP,EAAxD;;AACA,UAAI,CAACuB,WAAL,EAAkB;AAChB3B,eAAOG,WAAP,GAAqBkB,EAAEO,QAAF,GAAajD,KAAK,CAACA,MAAM4B,MAAN,GAAe,CAAhB,CAAL,CAAwBC,kBAArC,GAA0D7B,KAAK,CAAC,CAAD,CAAL,CAASoB,sBAAxF;AACA4B,sBAAeN,EAAEO,QAAF,GAAa5B,OAAOS,YAAP,EAAb,GAAqCT,OAAOI,QAAP,EAApD;AACD;;AAEDiB,QAAEQ,cAAF;AACA,UAAIF,WAAJ,EACEtB,mCAAasB,WAAb,EAA0B,IAA1B;AAEJ,KAvBA;;AAyBA,QAAIG,UAAWT,CAAD,IAAO;AACnB;AACA;AACA,UAAI,CAAC,CAACvE,iCAAD,IAAgBiB,sCAAgBjB,iCAAhB,EAA6BS,QAA7B,CAAjB,KAA4DqB,uCAAiByC,EAAEU,MAAnB,EAA2BxE,SAASY,OAApC,CAAhE,EAA8G;AAC5GrB,4CAAcS,QAAd;AACA0D,oBAAY9C,OAAZ,GAAsBkD,EAAEU,MAAxB;AACF,OAHA,MAGO,IAAIf,yCAAmBzD,QAAnB,KAAgC,CAACyE,4CAAsBX,EAAEU,MAAxB,EAAgCxE,QAAhC,CAArC,EAAgF;AACrF;AACA;AACA,YAAI0D,YAAY9C,OAAhB,EACE8C,YAAY9C,OAAZ,CAAoB8D,KAApB,GADF,KAEO,IAAInF,iCAAJ,EACLoF,wCAAkBpF,kCAAYqB,OAA9B;AAEJ,OARO,MAQA,IAAI6C,yCAAmBzD,QAAnB,CAAJ,EACL0D,YAAY9C,OAAZ,GAAsBkD,EAAEU,MAAxB;AAEJ,KAjBA;;AAmBA,QAAII,SAAUd,CAAD,IAAO;AAClB;AACA,UAAIH,IAAI/C,OAAR,EACEgD,qBAAqBD,IAAI/C,OAAzB;AAEF+C,UAAI/C,OAAJ,GAAciE,sBAAsB,MAAM;AACxC;AACA,YAAIpB,yCAAmBzD,QAAnB,KAAgC,CAACyE,4CAAsBzG,SAASC,aAA/B,EAA8C+B,QAA9C,CAArC,EAA8F;AAC5FT,8CAAcS,QAAd;;AACA,cAAIhC,SAAS8G,IAAT,CAAc5G,QAAd,CAAuB4F,EAAEU,MAAzB,CAAJ,EAAsC;AACpCd,wBAAY9C,OAAZ,GAAsBkD,EAAEU,MAAxB;AACAd,wBAAY9C,OAAZ,CAAoB8D,KAApB;AACF,WAHA,MAGO,IAAInF,iCAAJ,EACLoF,wCAAkBpF,kCAAYqB,OAA9B;AAEH;AACH,OAXc,CAAd;AAYF,KAjBA;;AAmBA5C,aAAS+G,gBAAT,CAA0B,SAA1B,EAAqClB,SAArC,EAAgD,KAAhD;AACA7F,aAAS+G,gBAAT,CAA0B,SAA1B,EAAqCR,OAArC,EAA8C,KAA9C;AACAnD,UAAM4D,OAAN,CAAclH,WAAWA,QAAQiH,gBAAR,CAAyB,SAAzB,EAAoCR,OAApC,EAA6C,KAA7C,CAAzB;AACAnD,UAAM4D,OAAN,CAAclH,WAAWA,QAAQiH,gBAAR,CAAyB,UAAzB,EAAqCH,MAArC,EAA6C,KAA7C,CAAzB;AACA,WAAO,MAAM;AACX5G,eAASiH,mBAAT,CAA6B,SAA7B,EAAwCpB,SAAxC,EAAmD,KAAnD;AACA7F,eAASiH,mBAAT,CAA6B,SAA7B,EAAwCV,OAAxC,EAAiD,KAAjD;AACAnD,YAAM4D,OAAN,CAAclH,WAAWA,QAAQmH,mBAAR,CAA4B,SAA5B,EAAuCV,OAAvC,EAAgD,KAAhD,CAAzB;AACAnD,YAAM4D,OAAN,CAAclH,WAAWA,QAAQmH,mBAAR,CAA4B,UAA5B,EAAwCL,MAAxC,EAAgD,KAAhD,CAAzB;AACF,KALA;AAMF,GArFA,EAqFG,CAAC5E,QAAD,EAAWL,OAAX,CArFH,EAJ6E,CA2F7E;;AACA,wBAAU,MAAM;AACd,WAAO,MAAM;AACX,UAAIgE,IAAI/C,OAAR,EACEgD,qBAAqBD,IAAI/C,OAAzB;AAEJ,KAJA;AAKF,GANA,EAMG,CAAC+C,GAAD,CANH;AAOF;;AAEA,SAASuB,yCAAT,CAA6BpH,OAA7B,EAA+C;AAC7C,SAAO2G,4CAAsB3G,OAAtB,CAAP;AACF;;AAEA,SAASuD,sCAAT,CAA0BvD,OAA1B,EAA4CsD,KAA5C,EAA8D;AAC5D,SAAOA,MAAM+D,IAAN,CAAWjF,QAAQA,KAAKhC,QAAL,CAAcJ,OAAd,CAAnB,CAAP;AACF;;AAEA,SAAS2G,2CAAT,CAA+B3G,OAA/B,EAAyE;AAAA,MAAxBsD,KAAwB,uEAAN,IAAM;AACvE;AACA,MAAItD,mBAAmBsH,OAAnB,IAA8BtH,QAAQuH,OAAR,CAAgB,6BAAhB,CAAlC,EACE,OAAO,IAAP,CAHqE,CAMvE;AACA;;AACA,OAAK,IAAI;AAACrF,cAAUsF;AAAX,GAAT,IAA0BjF,0CAAeiB,QAAf,CAAwBjB,0CAAeE,WAAf,CAA2Ba,KAA3B,CAAxB,CAA1B,EAAsF;AACpF,QAAIC,uCAAiBvD,OAAjB,EAA0BwH,EAAE1E,OAA5B,CAAJ,EACE,OAAO,IAAP;AAEJ;;AAEA,SAAO,KAAP;AACF;;AAGO,SAAS2E,yCAAT,CAAuCzH,OAAvC,EAAyD;AAC9D,SAAO2G,4CAAsB3G,OAAtB,EAA+ByB,iCAA/B,CAAP;AACF;;AAEA,SAASiB,qCAAT,CAAyBgF,QAAzB,EAA6CpE,KAA7C,EAA8D;MAC/CqE;;AAAb,MAAIrF,SAAS,yEAAeG,WAAf,CAA2Ba,KAA3B,OAA2B,IAA3B,kFAAmChB,MAAhD;;AACA,SAAOA,MAAP,EAAe;AACb,QAAIA,OAAOJ,QAAP,KAAoBwF,QAAxB,EACE,OAAO,IAAP;AAEFpF,aAASA,OAAOA,MAAhB;AACF;;AACA,SAAO,KAAP;AACF;;AAEA,SAAS0C,kCAAT,CAAsBhF,OAAtB,EAAwE;AAAA,MAAhB4H,MAAgB,uEAAP,KAAO;AACtE,MAAI5H,WAAW,IAAX,IAAmB,CAAC4H,MAAxB,EACE,IAAI;AACF,mDAAY5H,OAAZ;AACF,GAFA,CAEE,OAAO6H,GAAP,EAAY,CACZ;AACF,GALF,MAMO,IAAI7H,WAAW,IAAf,EACL,IAAI;AACFA,YAAQ4G,KAAR;AACF,GAFA,CAEE,OAAOkB,IAAP,EAAY,CACZ;AACF;AAEJ;;AAEA,SAASjB,uCAAT,CAA2BvD,KAA3B,EAAsE;AAAA,MAAzBgB,QAAyB,uEAAN,IAAM;AACpE,MAAIG,WAAWnB,KAAK,CAAC,CAAD,CAAL,CAASoB,sBAAxB;AACA,MAAIC,SAASC,0CAAuBC,mCAAavB,KAAb,CAAvB,EAA4C;cAACgB;AAAD,GAA5C,EAAwDhB,KAAxD,CAAb;AACAqB,SAAOG,WAAP,GAAqBL,QAArB;AACA,MAAIM,WAAWJ,OAAOI,QAAP,EAAf,CAJoE,CAMpE;;AACA,MAAIT,YAAY,CAACS,QAAjB,EAA2B;AACzBJ,aAASC,0CAAuBC,mCAAavB,KAAb,CAAvB,EAA4C;AAACgB,gBAAU;AAAX,KAA5C,EAA+DhB,KAA/D,CAAT;AACAqB,WAAOG,WAAP,GAAqBL,QAArB;AACAM,eAAWJ,OAAOI,QAAP,EAAX;AACD;;AAEDC,qCAAaD,QAAb;AACF;;AAEA,SAAS1B,kCAAT,CAAsBnB,QAAtB,EAAsDH,SAAtD,EAA0E;AACxE,QAAMgG,eAAe,kBAAMC,MAAN,CAAajG,SAAb,CAArB;AACA,wBAAU,MAAM;AACd,QAAIgG,aAAajF,OAAjB,EAA0B;AACxBrB,0CAAcS,QAAd;AACA,UAAI,CAACqB,uCAAiBrD,SAASC,aAA1B,EAAyCsB,kCAAYqB,OAArD,CAAL,EACE+D,wCAAkB3E,SAASY,OAA3B;AAEH;;AACDiF,iBAAajF,OAAb,GAAuB,KAAvB;AACF,GARA,EAQG,CAACZ,QAAD,CARH;AASF;;AAEA,SAASgB,2CAAT,CAA+BhB,QAA/B,EAA+D+F,OAA/D,EAAiFpG,OAAjF,EAAmG;AACjG;AACA;AACA,8BAAgB,MAAM;AACpB,QAAIoG,WAAWpG,OAAf,EACE;AAGF,QAAIyB,QAAQpB,SAASY,OAArB;;AAEA,QAAI2D,UAAWT,CAAD,IAAmB;AAC/B,UAAIU,SAASV,EAAEU,MAAf;AACA,UAAInD,uCAAiBmD,MAAjB,EAAyBxE,SAASY,OAAlC,CAAJ,EACErB,oCAAcS,QAAd,CADF,KAEO,IAAI,CAACkF,0CAAoBV,MAApB,CAAL,EACLjF,oCAAc,IAAd;AAEJ,KAPA;;AASAvB,aAAS+G,gBAAT,CAA0B,SAA1B,EAAqCR,OAArC,EAA8C,KAA9C;AACAnD,UAAM4D,OAAN,CAAclH,WAAWA,QAAQiH,gBAAR,CAAyB,SAAzB,EAAoCR,OAApC,EAA6C,KAA7C,CAAzB;AACA,WAAO,MAAM;AACXvG,eAASiH,mBAAT,CAA6B,SAA7B,EAAwCV,OAAxC,EAAiD,KAAjD;AACAnD,YAAM4D,OAAN,CAAclH,WAAWA,QAAQmH,mBAAR,CAA4B,SAA5B,EAAuCV,OAAvC,EAAgD,KAAhD,CAAzB;AACF,KAHA;AAIF,GAtBA,EAsBG,CAACvE,QAAD,EAAW+F,OAAX,EAAoBpG,OAApB,CAtBH;AAuBF;;AAEA,SAASqG,wCAAT,CAA4BhG,QAA5B,EAAgD;AAC9C,MAAIoB,QAAQf,0CAAeE,WAAf,CAA2BhB,iCAA3B,CAAZ;;AACA,SAAO6B,SAASA,MAAMpB,QAAN,KAAmBA,QAAnC,EAA6C;AAC3C,QAAIoB,MAAM6E,aAAV,EACE,OAAO,KAAP;AAGF7E,YAAQA,MAAMhB,MAAd;AACF;;AAEA,SAAO,qDAAOJ,QAAP,MAAoBA,QAA3B;AACF;;AAEA,SAASkB,qCAAT,CAAyBlB,QAAzB,EAAyDJ,YAAzD,EAAgFD,OAAhF,EAAkG;AAChG;AACA,QAAMuG,mBAAmB,mBAAO,OAAOlI,QAAP,KAAoB,WAApB,GAAkCA,SAASC,aAA3C,GAA+E,IAAtF,CAAzB,CAFgG,CAIhG;AACA;;AACA,8BAAgB,MAAM;AACpB,QAAImD,QAAQpB,SAASY,OAArB;AACA,QAAI,CAAChB,YAAD,IAAiBD,OAArB,EACE;;AAGF,QAAI4E,UAAU,MAAM;AAClB;AACA;AACA,UAAI,CAAChF,iCAAD,IAAgBiB,sCAAgBjB,iCAAhB,EAA6BS,QAA7B,CAApB,EACET,oCAAcS,QAAd;AAEJ,KANA;;AAQAhC,aAAS+G,gBAAT,CAA0B,SAA1B,EAAqCR,OAArC,EAA8C,KAA9C;AACAnD,UAAM4D,OAAN,CAAclH,WAAWA,QAAQiH,gBAAR,CAAyB,SAAzB,EAAoCR,OAApC,EAA6C,KAA7C,CAAzB;AACA,WAAO,MAAM;AACXvG,eAASiH,mBAAT,CAA6B,SAA7B,EAAwCV,OAAxC,EAAiD,KAAjD;AACAnD,YAAM4D,OAAN,CAAclH,WAAWA,QAAQmH,mBAAR,CAA4B,SAA5B,EAAuCV,OAAvC,EAAgD,KAAhD,CAAzB;AACF,KAHA,CAhBoB,CAoBtB;AACA,GArBA,EAqBG,CAACvE,QAAD,EAAWL,OAAX,CArBH,EANgG,CA6BhG;;AACA,8BAAgB,MAAM;AACpB,QAAI,CAACC,YAAL,EACE;AAGFS,8CAAeE,WAAf,CAA2BP,QAA3B,EAAqCiG,aAArC,GAAqDC,iBAAiBtF,OAAtE,CALoB,CAOpB;AACA;AACA;AACA;;AACA,QAAIiD,YAAaC,CAAD,IAAsB;AACpC,UAAIA,EAAEC,GAAF,KAAU,KAAV,IAAmBD,EAAEE,MAArB,IAA+BF,EAAEG,OAAjC,IAA4CH,EAAEI,OAAlD,EACE;AAGF,UAAIC,iBAAiBnG,SAASC,aAA9B;AACA,UAAI,CAACoD,uCAAiB8C,cAAjB,EAAiCnE,SAASY,OAA1C,CAAL,EACE;AAEF,UAAIqF,gBAAgB5F,0CAAeE,WAAf,CAA2BP,QAA3B,EAAqCiG,aAAzD,CAToC,CAWpC;;AACA,UAAIxD,SAASC,0CAAuB1E,SAAS8G,IAAhC,EAAsC;AAAC1C,kBAAU;AAAX,OAAtC,CAAb,CAZoC,CAcpC;;AACAK,aAAOG,WAAP,GAAqBuB,cAArB;AACA,UAAIC,cAAeN,EAAEO,QAAF,GAAa5B,OAAOS,YAAP,EAAb,GAAqCT,OAAOI,QAAP,EAAxD;;AAEA,UAAI,CAAC7E,SAAS8G,IAAT,CAAc5G,QAAd,CAAuB+H,aAAvB,CAAD,IAA0CA,kBAAkBjI,SAAS8G,IAAzE,EAA+E;AAC7EmB,wBAAgB,IAAhB;AACA5F,kDAAeE,WAAf,CAA2BP,QAA3B,EAAqCiG,aAArC,GAAqD,IAArD;AACD,OArBmC,CAuBpC;AACA;;;AACA,UAAI,CAAC,CAAC7B,WAAD,IAAgB,CAAC/C,uCAAiB+C,WAAjB,EAA8BpE,SAASY,OAAvC,CAAlB,KAAsEqF,aAA1E,EAAyF;AACvFxD,eAAOG,WAAP,GAAqBqD,aAArB,CADuF,CAGvF;;AACA,WACE7B,cAAeN,EAAEO,QAAF,GAAa5B,OAAOS,YAAP,EAAb,GAAqCT,OAAOI,QAAP,EAApD,CADF,QAESxB,uCAAiB+C,WAAjB,EAA8BpE,SAASY,OAAvC,CAFT;;AAIAkD,UAAEQ,cAAF;AACAR,UAAEqC,eAAF;AACA,YAAI/B,WAAJ,EACEtB,mCAAasB,WAAb,EAA0B,IAA1B,EADF,KAGG;AACA;AACA;AACD,cAAI,CAACc,0CAAoBe,aAApB,CAAL,EACE9B,eAAeiC,IAAf,GADF,KAGEtD,mCAAamD,aAAb,EAA4B,IAA5B;AAGL;AACH,KAhDA;;AAkDA,QAAI,CAACtG,OAAL,EACE3B,SAAS+G,gBAAT,CAA0B,SAA1B,EAAqClB,SAArC,EAAgD,IAAhD;AAGF,WAAO,MAAM;AACX,UAAI,CAAClE,OAAL,EACE3B,SAASiH,mBAAT,CAA6B,SAA7B,EAAwCpB,SAAxC,EAAmD,IAAnD;AAEF,UAAIoC,gBAAgB5F,0CAAeE,WAAf,CAA2BP,QAA3B,EAAqCiG,aAAzD,CAJW,CAMX;;AACA,UACErG,gBACGqG,aADH,MAGE;AACA5E,6CAAiBrD,SAASC,aAA1B,EAAyC+B,SAASY,OAAlD,KACI5C,SAASC,aAAT,KAA2BD,SAAS8G,IAApC,IAA4CkB,yCAAmBhG,QAAnB,CALlD,CADF,EAQE;AACA;AACA,YAAIqG,aAAahG,0CAAeiG,KAAf,EAAjB;AACAzB,8BAAsB,MAAM;AAC1B;AACA,cAAI7G,SAASC,aAAT,KAA2BD,SAAS8G,IAAxC,EAA8C;AAC5C;AACA,gBAAIyB,WAAWF,WAAW9F,WAAX,CAAuBP,QAAvB,CAAf;;AACA,mBAAOuG,QAAP,EAAiB;AACf,kBAAIA,SAASN,aAAT,IAA0BjI,SAAS8G,IAAT,CAAc5G,QAAd,CAAuBqI,SAASN,aAAhC,CAA9B,EAA8E;AAC5EnD,mDAAayD,SAASN,aAAtB;AACA;AACD;;AACDM,yBAAWA,SAASnG,MAApB;AACF,aAT4C,CAW5C;AACA;;;AACAmG,uBAAWF,WAAW9F,WAAX,CAAuBP,QAAvB,CAAX;;AACA,mBAAOuG,QAAP,EAAiB;AACf,kBAAIA,SAASvG,QAAT,IAAqBK,0CAAeE,WAAf,CAA2BgG,SAASvG,QAApC,CAAzB,EAAwE;AACtE2E,wDAAkB4B,SAASvG,QAAT,CAAkBY,OAApC,EAA6C,IAA7C;AACA;AACD;;AACD2F,yBAAWA,SAASnG,MAApB;AACF;AACD;AACH,SAxBA;AAyBD;AACH,KA5CA;AA6CF,GA9GA,EA8GG,CAACJ,QAAD,EAAWJ,YAAX,EAAyBD,OAAzB,CA9GH;AA+GF;;AAMO,SAAS+C,yCAAT,CAAgCpC,IAAhC,EAA+C4B,IAA/C,EAA2Ed,KAA3E,EAA8F;AACnG,MAAIoF,WAAW,kDAAMpE,QAAN,IAAiBoB,+CAAjB,GAA6CF,gDAA5D;AACA,MAAIb,SAASzE,SAASyI,gBAAT,CACXnG,IADW,EAEXoG,WAAWC,YAFA,EAGX;AACEC,eAAW1G,IAAX,EAAiB;UAEX2G,WAFW,CACf;;;AACA,UAAI3E,+DAAMC,IAAN,MAAU,IAAV,gDAAYjE,QAAZ,CAAqBgC,IAArB,CAAJ,EACE,OAAOwG,WAAWI,aAAlB;AAGF,UAAI5G,IAAC,CAAiB6G,OAAlB,CAA0BP,QAA1B,KACC,+CAAiBtG,IAAjB,CADD,KAEE,CAACkB,KAAD,IAAUC,uCAAiBnB,IAAjB,EAAkCkB,KAAlC,CAFZ,MAGE,EAACc,iDAAMI,MAAP,KAAiBJ,KAAKI,MAAL,CAAYpC,IAAZ,CAHnB,CAAJ,EAKE,OAAOwG,WAAWM,aAAlB;AAGF,aAAON,WAAWO,WAAlB;AACF;;AAhBF,GAHW,CAAb;AAuBA,MAAI/E,iDAAMC,IAAV,EACEM,OAAOG,WAAP,GAAqBV,KAAKC,IAA1B;AAGF,SAAOM,MAAP;AACF;;AAKO,SAASyE,wCAAT,CAA4BpF,GAA5B,EAA6G;AAAA,MAAxDqF,cAAwD,uEAAlB,EAAkB;AAClH,SAAO;AACLlF,gBAA0C;AAAA,UAAhCC,IAAgC,uEAAJ,EAAI;AACxC,UAAI5B,OAAOwB,IAAIlB,OAAf;AACA,UAAI,CAACN,IAAL,EACE;AAEF,UAAI;AAAA6B,cAACA,IAAD;AAAOC,mBAAW+E,eAAe/E,QAAjC;AAA2CC,eAAO8E,eAAe9E,IAAjE;AAAuEC,iBAAS6E,eAAe7E;AAA/F,UAAyGJ,IAA7G;AACA,UAAIhC,OAAOiC,QAAQnE,SAASC,aAA5B;AACA,UAAIwE,SAASC,0CAAuBpC,IAAvB,EAA6B;kBAAC8B,QAAD;gBAAWE;AAAX,OAA7B,CAAb;AACA,UAAIhC,KAAKpC,QAAL,CAAcgC,IAAd,CAAJ,EACEuC,OAAOG,WAAP,GAAqB1C,IAArB;AAEF,UAAI2C,WAAWJ,OAAOI,QAAP,EAAf;;AACA,UAAI,CAACA,QAAD,IAAaR,IAAjB,EAAuB;AACrBI,eAAOG,WAAP,GAAqBtC,IAArB;AACAuC,mBAAWJ,OAAOI,QAAP,EAAX;AACD;;AACD,UAAIA,QAAJ,EACEC,mCAAaD,QAAb,EAAuB,IAAvB;AAEF,aAAOA,QAAP;AACF,KArBK;;AAsBLE,oBAA0D;AAAA,UAA5Cb,IAA4C,uEAAhBiF,cAAgB;AACxD,UAAI7G,OAAOwB,IAAIlB,OAAf;AACA,UAAI,CAACN,IAAL,EACE;AAEF,UAAI;AAAA6B,cAACA,IAAD;AAAOC,mBAAW+E,eAAe/E,QAAjC;AAA2CC,eAAO8E,eAAe9E,IAAjE;AAAuEC,iBAAS6E,eAAe7E;AAA/F,UAAyGJ,IAA7G;AACA,UAAIhC,OAAOiC,QAAQnE,SAASC,aAA5B;AACA,UAAIwE,SAASC,0CAAuBpC,IAAvB,EAA6B;kBAAC8B,QAAD;gBAAWE;AAAX,OAA7B,CAAb;AACA,UAAIhC,KAAKpC,QAAL,CAAcgC,IAAd,CAAJ,EACEuC,OAAOG,WAAP,GAAqB1C,IAArB,CADF,KAEO;AACL,YAAIkH,OAAOC,2BAAK5E,MAAL,CAAX;AACA,YAAI2E,IAAJ,EACEtE,mCAAasE,IAAb,EAAmB,IAAnB;AAEF,eAAOA,IAAP;AACD;AACD,UAAIlE,eAAeT,OAAOS,YAAP,EAAnB;;AACA,UAAI,CAACA,YAAD,IAAiBb,IAArB,EAA2B;AACzBI,eAAOG,WAAP,GAAqBtC,IAArB;AACA4C,uBAAemE,2BAAK5E,MAAL,CAAf;AACD;;AACD,UAAIS,YAAJ,EACEJ,mCAAaI,YAAb,EAA2B,IAA3B;AAEF,aAAOA,YAAP;AACF,KAhDK;;AAiDLC,iBAAkC;AAAA,UAAvBjB,IAAuB,uEAAhBiF,cAAgB;AAChC,UAAI7G,OAAOwB,IAAIlB,OAAf;AACA,UAAI,CAACN,IAAL,EACE;AAEF,UAAI;AAAC8B,mBAAW+E,eAAe/E,QAA3B;AAAqCE,iBAAS6E,eAAe7E;AAA7D,UAAuEJ,IAA3E;AACA,UAAIO,SAASC,0CAAuBpC,IAAvB,EAA6B;kBAAC8B,QAAD;gBAAWE;AAAX,OAA7B,CAAb;AACA,UAAIO,WAAWJ,OAAOI,QAAP,EAAf;AACA,UAAIA,QAAJ,EACEC,mCAAaD,QAAb,EAAuB,IAAvB;AAEF,aAAOA,QAAP;AACF,KA7DK;;AA8DLO,gBAAiC;AAAA,UAAvBlB,IAAuB,uEAAhBiF,cAAgB;AAC/B,UAAI7G,OAAOwB,IAAIlB,OAAf;AACA,UAAI,CAACN,IAAL,EACE;AAEF,UAAI;AAAC8B,mBAAW+E,eAAe/E,QAA3B;AAAqCE,iBAAS6E,eAAe7E;AAA7D,UAAuEJ,IAA3E;AACA,UAAIO,SAASC,0CAAuBpC,IAAvB,EAA6B;kBAAC8B,QAAD;gBAAWE;AAAX,OAA7B,CAAb;AACA,UAAI8E,OAAOC,2BAAK5E,MAAL,CAAX;AACA,UAAI2E,IAAJ,EACEtE,mCAAasE,IAAb,EAAmB,IAAnB;AAEF,aAAOA,IAAP;AACF;;AA1EK,GAAP;AA4EF;;AAEA,SAASC,0BAAT,CAAc5E,MAAd,EAAkC;AAChC,MAAI2E,IAAJ;AACA,MAAIE,IAAJ;;AACA,KAAG;AACDA,WAAO7E,OAAO8E,SAAP,EAAP;AACA,QAAID,IAAJ,EACEF,OAAOE,IAAP;AAEJ,GALA,QAKSA,IALT;;AAMA,SAAOF,IAAP;AACF;;AAGA,MAAMI,0BAAN,CAAM;AASA,aAAO;AACT,WAAO,KAAKC,OAAL,CAAaC,IAApB;AACF;;AAEAnH,cAAYoH,IAAZ,EAA4B;AAC1B,WAAO,KAAKF,OAAL,CAAaG,GAAb,CAAiBD,IAAjB,CAAP;AACF;;AAEAE,cAAY7H,QAAZ,EAAgCI,MAAhC,EAAkD6F,aAAlD,EAAoF;AAClF,QAAIhG,aAAa,KAAKwH,OAAL,CAAaG,GAAb,CAAiBxH,gDAAU,IAA3B,CAAjB;AACA,QAAIF,OAAO,IAAIC,8BAAJ,CAAa;gBAACH;AAAD,KAAb,CAAX;AACAC,eAAWS,QAAX,CAAoBR,IAApB;AACAA,SAAKE,MAAL,GAAcH,UAAd;AACA,SAAKwH,OAAL,CAAaK,GAAb,CAAiB9H,QAAjB,EAA2BE,IAA3B;AACA,QAAI+F,aAAJ,EACE/F,KAAK+F,aAAL,GAAqBA,aAArB;AAEJ;;AAEAtF,UAAQT,IAAR,EAAwB;AACtB,SAAKuH,OAAL,CAAaK,GAAb,CAAiB5H,KAAKF,QAAtB,EAAgCE,IAAhC;AACF;;AAEAsB,iBAAexB,QAAf,EAAmC;AACjC;AACA,QAAIA,aAAa,IAAjB,EACE;AAEF,QAAIE,OAAO,KAAKuH,OAAL,CAAaG,GAAb,CAAiB5H,QAAjB,CAAX;AACA,QAAIC,aAAaC,KAAKE,MAAtB,CANiC,CAOjC;AACA;;AACA,SAAK,IAAIQ,OAAT,IAAoB,KAAKU,QAAL,EAApB,EACE,IACEV,YAAYV,IAAZ,IACAA,KAAK+F,aADL,IAEArF,QAAQqF,aAFR,IAGA/F,KAAKF,QAAL,CAAcY,OAHd,IAIAS,uCAAiBT,QAAQqF,aAAzB,EAAwC/F,KAAKF,QAAL,CAAcY,OAAtD,CALF,EAOEA,QAAQqF,aAAR,GAAwB/F,KAAK+F,aAA7B;;AAGJ,QAAIvG,WAAWQ,KAAKR,QAApB;AACAO,eAAW8H,WAAX,CAAuB7H,IAAvB;AACA,QAAIR,SAASgI,IAAT,GAAgB,CAApB,EACEhI,SAASsF,OAAT,CAAiBgD,SAAS/H,WAAWS,QAAX,CAAoBsH,KAApB,CAA1B;AAGF,SAAKP,OAAL,CAAaQ,MAAb,CAAoB/H,KAAKF,QAAzB;AACF,GA3DI,CA6DJ;;;AACC,cAA0D;AAAA,QAAjDE,IAAiD,uEAAhC,KAAKI,IAA2B;AACzD,QAAIJ,KAAKF,QAAL,IAAiB,IAArB,EACE,MAAME,IAAN;AAEF,QAAIA,KAAKR,QAAL,CAAcgI,IAAd,GAAqB,CAAzB,EACE,KAAK,IAAIM,KAAT,IAAkB9H,KAAKR,QAAvB,EACE,OAAO,KAAK4B,QAAL,CAAc0G,KAAd,CAAP;AAGN;;AAEA1B,UAAc;AACZ,QAAI4B,UAAU,IAAIV,0BAAJ,EAAd;;AACA,SAAK,IAAItH,IAAT,IAAiB,KAAKoB,QAAL,EAAjB,EACE4G,QAAQL,WAAR,CAAoB3H,KAAKF,QAAzB,EAAmCE,KAAKE,MAAL,CAAYJ,QAA/C,EAAyDE,KAAK+F,aAA9D;;AAEF,WAAOiC,OAAP;AACF;;AA3EAC,gBAAc;AAFd,uDAAQ,SAAR,EAAkB,IAAIC,GAAJ,EAAlB;AAGE,SAAK9H,IAAL,GAAY,IAAIH,8BAAJ,CAAa;AAACH,gBAAU;AAAX,KAAb,CAAZ;AACA,SAAKyH,OAAL,CAAaK,GAAb,CAAiB,IAAjB,EAAuB,KAAKxH,IAA5B;AACF;;AAPI;;AAkFN,MAAMH,8BAAN,CAAM;AAUJO,WAASR,IAAT,EAAyB;AACvB,SAAKR,QAAL,CAAc2I,GAAd,CAAkBnI,IAAlB;AACAA,SAAKE,MAAL,GAAc,IAAd;AACF;;AACA2H,cAAY7H,IAAZ,EAA4B;AAC1B,SAAKR,QAAL,CAAcuI,MAAd,CAAqB/H,IAArB;AACAA,SAAKE,MAAL,GAAckI,SAAd;AACF;;AAVAH,cAAY1I,KAAZ,EAAyC;AAHzC,uDAAO,UAAP,EAAiC,IAAI8I,GAAJ,EAAjC;AACA,uDAAO,SAAP,EAAiB,KAAjB;AAGE,SAAKvI,QAAL,GAAgBP,MAAMO,QAAtB;AACF;;AATI;;AAoBC,IAAIK,4CAAiB,IAAImH,0BAAJ,EAArB;AGj4BP;;;;;;;;;;;;ACqCO,SAASgB,yCAAT,GAAqE;AAAA,MAA/C/I,KAA+C,uEAAnB,EAAmB;AAC1E,MAAI;AACFI,gBAAY,KADV;AACe4I,iBACjBA,WAFE;AAESC,YACXA;AAHE,MAIAjJ,KAJJ;AAKA,MAAIkJ,QAAQ,mBAAO;AACjBC,eAAW,KADM;AAEjBC,oBAAgBhJ,aAAa;AAFZ,GAAP,CAAZ;AAIA,MAAI,CAAC+I,SAAD,EAAYE,UAAZ,IAA0B,qBAAS,KAAT,CAA9B;AACA,MAAI,CAACC,mBAAD,EAAsBC,eAAtB,IAAyC,qBAAS,MAAML,MAAM/H,OAAN,CAAcgI,SAAd,IAA2BD,MAAM/H,OAAN,CAAciI,cAAxD,CAA7C;AAEA,MAAII,cAAc,wBAAY,MAAMD,gBAAgBL,MAAM/H,OAAN,CAAcgI,SAAd,IAA2BD,MAAM/H,OAAN,CAAciI,cAAzD,CAAlB,EAA4F,EAA5F,CAAlB;AAEA,MAAIK,gBAAgB,wBAAYN,aAAa;AAC3CD,UAAM/H,OAAN,CAAcgI,SAAd,GAA0BA,SAA1B;AACAE,eAAWF,SAAX;AACAK;AACF,GAJoB,EAIjB,CAACA,WAAD,CAJiB,CAApB;AAMA,sCAAyBJ,cAAD,IAAoB;AAC1CF,UAAM/H,OAAN,CAAciI,cAAd,GAA+BA,cAA/B;AACAI;AACF,GAHA,EAGG,EAHH,EAGO;iBAACR;AAAD,GAHP;AAKA,MAAI;AAAAU,gBAACA;AAAD,MAAe,qBAAS;AAC1BC,gBAAYV,MADc;mBAE1BQ;AAF0B,GAAT,CAAnB;AAKA,MAAI;AAAAG,sBAACA;AAAD,MAAqB,2BAAe;AACtCD,gBAAY,CAACV,MADyB;AAEtCY,yBAAqBJ;AAFiB,GAAf,CAAzB;AAKA,SAAO;eACLN,SADK;AAELC,oBAAgBF,MAAM/H,OAAN,CAAcgI,SAAd,IAA2BG,mBAFtC;AAGLI,gBAAYT,SAASW,gBAAT,GAA4BF;AAHnC,GAAP;AAKF;;ADpCO,SAASI,yCAAT,CAAmB9J,KAAnB,EAA0C;AAC/C,MAAI;AAAAC,cAACA,QAAD;AAAS8J,gBAAEA,UAAX;AAAqBC,oBAAEA;AAAvB,MAAyChK,KAA7C;AACA,MAAI;AAAAmJ,eAACA,SAAD;AAAUC,oBAAEA,cAAZ;AAA0BM,gBAAEA;AAA5B,MAA0C,+CAAa1J,KAAb,CAA9C;AACA,MAAIuI,QAAQ,kBAAM0B,QAAN,CAAeC,IAAf,CAAoBjK,QAApB,CAAZ;AAEA,sBAAO,kBAAMkK,YAAN,CAAmB5B,KAAnB,EAA0B,uBAAWA,MAAMvI,KAAjB,EAAwB,EACvD,GAAG0J,UADoD;AAEvDU,eAAW,iBAAK;AACd,OAACL,cAAc,EAAf,GAAoBZ,SADN;AAEd,OAACa,kBAAkB,EAAnB,GAAwBZ;AAFV,KAAL;AAF4C,GAAxB,CAA1B,CAAP;AAOF;AEtDA;;;;;;;;;;;;;AAgCA,IAAIiB,sDAAmB,kBAAMxK,aAAN,CAA2C,IAA3C,CAAvB;;AAEA,SAASyK,yCAAT,CAA6BjI,GAA7B,EAAsF;AACpF,MAAIkI,UAAU,uBAAWF,sCAAX,KAAgC,EAA9C;AACA,yBAAWE,OAAX,EAAoBlI,GAApB,EAFoF,CAIpF;;AACA,MAAI;AAACA,SAAKmI,CAAN;AAAS,OAAGC;AAAZ,MAA0BF,OAA9B;AACA,SAAOE,UAAP;AACF;AAEA;;;;;AAGA,SAASC,uCAAT,CAA2B1K,KAA3B,EAA0DqC,GAA1D,EAA4F;AAC1F,MAAI;AAAApC,cAACA,QAAD;AAAW,OAAGwK;AAAd,MAA4BzK,KAAhC;AACA,MAAIuK,UAAU,EACZ,GAAGE,UADS;SAEZpI;AAFY,GAAd;AAKA,sBACE,gCAACgI,uCAAiBlI,QAAlB,EAA0B;AAACD,WAAOqI;AAAR,GAA1B,EACGtK,QADH,CADF;AAKF;;AAEA,IAAI0K,wDAAqB,kBAAMC,UAAN,CAAiBF,uCAAjB,CAAzB;;AAWO,SAASG,yCAAT,CAAsB7K,KAAtB,EAA+C8K,MAA/C,EAAmG;AACxG,MAAI;AAAApB,gBAACA;AAAD,MAAe,qBAAS1J,KAAT,CAAnB;AACA,MAAI;AAAA+K,mBAACA;AAAD,MAAkB,wBAAY/K,KAAZ,CAAtB;AACA,MAAIgL,eAAe,uBAAWtB,UAAX,EAAuBqB,aAAvB,CAAnB;AACA,MAAIE,WAAWX,0CAAoBQ,MAApB,CAAf;AACA,MAAII,mBAAmBlL,MAAM2J,UAAN,GAAmB,EAAnB,GAAwBsB,QAA/C;AACA,MAAI7E,eAAe,mBAAOpG,MAAMI,SAAb,CAAnB;AAEA,wBAAU,MAAM;AACd,QAAIgG,aAAajF,OAAb,IAAwB2J,OAAO3J,OAAnC,EACE,+CAAY2J,OAAO3J,OAAnB;AAEFiF,iBAAajF,OAAb,GAAuB,KAAvB;AACF,GALA,EAKG,CAAC2J,MAAD,CALH;AAOA,SAAO;AACLK,oBAAgB,uBACd,EACE,GAAGH,YADL;AAEEI,gBAAUpL,MAAMqL,mBAAN,IAA6B,CAACrL,MAAM2J,UAApC,GAAiD,EAAjD,GAAsDd;AAFlE,KADc,EAKdqC,gBALc;AADX,GAAP;AASF;AC/FA;;;;;;;;;;;;;AA6BO,SAASI,yCAAT,CAA6BjJ,GAA7B,EAAsDkJ,OAAtD,EAAsG;AAC3G,MAAI5B,aAAa4B,0DAAS5B,UAA1B;AACA,MAAI,CAAC6B,gBAAD,EAAmBC,mBAAnB,IAA0C,qBAAS,KAAT,CAA9C;AAEA,8BAAgB,MAAM;AACpB,QAAI,+CAAKtK,OAAL,KAAgB,CAACwI,UAArB,EAAiC;AAC/B,UAAI+B,SAAS,MAAM;AACjB,YAAIrJ,IAAIlB,OAAR,EAAiB;AACf,cAAI6B,SAAS,+CAAuBX,IAAIlB,OAA3B,EAAoC;AAACwB,sBAAU;AAAX,WAApC,CAAb;AACA8I,8BAAoB,CAAC,CAACzI,OAAOI,QAAP,EAAtB;AACD;AACH,OALA;;AAOAsI,eAR+B,CAU/B;;AACA,UAAIC,WAAW,IAAIC,gBAAJ,CAAqBF,MAArB,CAAf;AACAC,eAASE,OAAT,CAAiBxJ,IAAIlB,OAArB,EAA8B;AAC5B2K,iBAAS,IADmB;AAE5BC,mBAAW,IAFiB;AAG5BC,oBAAY,IAHgB;AAI5BC,yBAAiB,CAAC,UAAD,EAAa,UAAb;AAJW,OAA9B;AAOA,aAAO,MAAM;AACX;AACA;AACA;AACA;AACAN,iBAASO,UAAT;AACF,OANA;AAOD;AACH,GA5BA;AA8BA,SAAOvC,aAAa,KAAb,GAAqB6B,gBAA5B;AACF","names":["$6a99195332edec8b$export$80f3e147d781571c","element","lastFocusedElement","document","activeElement","contains","$645f2e67b85a24c9$var$isStyleVisible","HTMLElement","SVGElement","display","visibility","style","isVisible","getComputedStyle","ownerDocument","defaultView","computedDisplay","computedVisibility","$645f2e67b85a24c9$var$isAttributeVisible","childElement","hasAttribute","nodeName","$645f2e67b85a24c9$export$e989c0fffaa6b27a","parentElement","$9bf71ea28793e738$var$FocusContext","createContext","$9bf71ea28793e738$var$activeScope","$9bf71ea28793e738$export$20e40289641fbbb6","props","children","contain","restoreFocus","autoFocus","startRef","endRef","scopeRef","parentNode","node","$9bf71ea28793e738$var$TreeNode","parent","$9bf71ea28793e738$export$d06fae2ee68b101e","root","getTreeNode","$9bf71ea28793e738$var$isAncestorScope","activeNode","addChild","addNode","current","nextSibling","nodes","push","$9bf71ea28793e738$var$useActiveScopeTracker","$9bf71ea28793e738$var$useFocusContainment","$9bf71ea28793e738$var$useRestoreFocus","$9bf71ea28793e738$var$useAutoFocus","scope","$9bf71ea28793e738$var$isElementInScope","traverse","parentScope","removeTreeNode","focusManager","$9bf71ea28793e738$var$createFocusManagerForScope","value","Provider","hidden","ref","$9bf71ea28793e738$export$10c5169755ce7bd7","_useContext","focusNext","opts","from","tabbable","wrap","accept","sentinel","previousElementSibling","walker","$9bf71ea28793e738$export$2d6ec8fc375ceafa","$9bf71ea28793e738$var$getScopeRoot","currentNode","nextNode","$9bf71ea28793e738$var$focusElement","focusPrevious","length","nextElementSibling","previousNode","focusFirst","focusLast","$9bf71ea28793e738$var$focusableElements","$9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR","join","$9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR","$9bf71ea28793e738$var$shouldContainFocus","focusedNode","raf","cancelAnimationFrame","onKeyDown","e","key","altKey","ctrlKey","metaKey","focusedElement","nextElement","shiftKey","preventDefault","onFocus","target","$9bf71ea28793e738$var$isElementInChildScope","focus","$9bf71ea28793e738$var$focusFirstInScope","onBlur","requestAnimationFrame","body","addEventListener","forEach","removeEventListener","$9bf71ea28793e738$var$isElementInAnyScope","some","Element","closest","s","$9bf71ea28793e738$export$1258395f99bf9cbf","ancestor","_focusScopeTree_getTreeNode","scroll","err","err1","autoFocusRef","useRef","restore","$9bf71ea28793e738$var$shouldRestoreFocus","nodeToRestore","nodeToRestoreRef","stopPropagation","blur","clonedTree","clone","treeNode","selector","createTreeWalker","NodeFilter","SHOW_ELEMENT","acceptNode","_opts_from","FILTER_REJECT","matches","FILTER_ACCEPT","FILTER_SKIP","$9bf71ea28793e738$export$c5251b9e124bf29","defaultOptions","next","$9bf71ea28793e738$var$last","last","lastChild","$9bf71ea28793e738$var$Tree","fastMap","size","data","get","addTreeNode","set","removeChild","child","delete","newTree","constructor","Map","add","undefined","Set","$f7dceffc5ad7768b$export$4e328f61c538687f","isTextInput","within","state","isFocused","isFocusVisible","setFocused","isFocusVisibleState","setFocusVisible","updateState","onFocusChange","focusProps","isDisabled","focusWithinProps","onFocusWithinChange","$907718708eab68af$export$1a38b4ad7f578e1d","focusClass","focusRingClass","Children","only","cloneElement","className","$e6afbd83fe6ebbd2$var$FocusableContext","$e6afbd83fe6ebbd2$var$useFocusableContext","context","_","otherProps","$e6afbd83fe6ebbd2$var$FocusableProvider","$e6afbd83fe6ebbd2$export$13f3202a3e5ddd5","forwardRef","$e6afbd83fe6ebbd2$export$4c014de7c8940b4c","domRef","keyboardProps","interactions","domProps","interactionProps","focusableProps","tabIndex","excludeFromTabOrder","$83013635b024ae3d$export$eac1895992b9f3d6","options","hasTabbableChild","setHasTabbableChild","update","observer","MutationObserver","observe","subtree","childList","attributes","attributeFilter","disconnect"],"sources":["/Users/vux/dev/react-project1/node_modules/@react-aria/button/node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/index.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/button/node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/FocusScope.tsx","/Users/vux/dev/react-project1/node_modules/@react-aria/button/node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/focusSafely.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/button/node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/isElementVisible.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/button/node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/FocusRing.tsx","/Users/vux/dev/react-project1/node_modules/@react-aria/button/node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/useFocusRing.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/button/node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/useFocusable.tsx","/Users/vux/dev/react-project1/node_modules/@react-aria/button/node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/useHasTabbableChild.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {FocusScope, useFocusManager, getFocusableTreeWalker, createFocusManager, isElementInChildOfActiveScope} from './FocusScope';\nexport {FocusRing} from './FocusRing';\nexport {FocusableProvider, useFocusable} from './useFocusable';\nexport {useFocusRing} from './useFocusRing';\nexport {focusSafely} from './focusSafely';\nexport {useHasTabbableChild} from './useHasTabbableChild';\n\nexport type {FocusScopeProps, FocusManager, FocusManagerOptions} from './FocusScope';\nexport type {FocusRingProps} from './FocusRing';\nexport type {FocusableAria, FocusableOptions, FocusableProviderProps} from './useFocusable';\nexport type {AriaFocusRingProps, FocusRingAria} from './useFocusRing';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\nimport {focusSafely} from './focusSafely';\nimport {isElementVisible} from './isElementVisible';\nimport React, {ReactNode, RefObject, useContext, useEffect, useMemo, useRef} from 'react';\nimport {useLayoutEffect} from '@react-aria/utils';\n\n\nexport interface FocusScopeProps {\n  /** The contents of the focus scope. */\n  children: ReactNode,\n\n  /**\n   * Whether to contain focus inside the scope, so users cannot\n   * move focus outside, for example in a modal dialog.\n   */\n  contain?: boolean,\n\n  /**\n   * Whether to restore focus back to the element that was focused\n   * when the focus scope mounted, after the focus scope unmounts.\n   */\n  restoreFocus?: boolean,\n\n  /** Whether to auto focus the first focusable element in the focus scope on mount. */\n  autoFocus?: boolean\n}\n\nexport interface FocusManagerOptions {\n  /** The element to start searching from. The currently focused element by default. */\n  from?: Element,\n  /** Whether to only include tabbable elements, or all focusable elements. */\n  tabbable?: boolean,\n  /** Whether focus should wrap around when it reaches the end of the scope. */\n  wrap?: boolean,\n  /** A callback that determines whether the given element is focused. */\n  accept?: (node: Element) => boolean\n}\n\nexport interface FocusManager {\n  /** Moves focus to the next focusable or tabbable element in the focus scope. */\n  focusNext(opts?: FocusManagerOptions): FocusableElement,\n  /** Moves focus to the previous focusable or tabbable element in the focus scope. */\n  focusPrevious(opts?: FocusManagerOptions): FocusableElement,\n  /** Moves focus to the first focusable or tabbable element in the focus scope. */\n  focusFirst(opts?: FocusManagerOptions): FocusableElement,\n    /** Moves focus to the last focusable or tabbable element in the focus scope. */\n  focusLast(opts?: FocusManagerOptions): FocusableElement\n}\n\ntype ScopeRef = RefObject<Element[]>;\ninterface IFocusContext {\n  focusManager: FocusManager,\n  parentNode: TreeNode | null\n}\n\nconst FocusContext = React.createContext<IFocusContext>(null);\n\nlet activeScope: ScopeRef = null;\n\n// This is a hacky DOM-based implementation of a FocusScope until this RFC lands in React:\n// https://github.com/reactjs/rfcs/pull/109\n\n/**\n * A FocusScope manages focus for its descendants. It supports containing focus inside\n * the scope, restoring focus to the previously focused element on unmount, and auto\n * focusing children on mount. It also acts as a container for a programmatic focus\n * management interface that can be used to move focus forward and back in response\n * to user events.\n */\nexport function FocusScope(props: FocusScopeProps) {\n  let {children, contain, restoreFocus, autoFocus} = props;\n  let startRef = useRef<HTMLSpanElement>();\n  let endRef = useRef<HTMLSpanElement>();\n  let scopeRef = useRef<Element[]>([]);\n  let {parentNode} = useContext(FocusContext) || {};\n\n  // Create a tree node here so we can add children to it even before it is added to the tree.\n  let node = useMemo(() => new TreeNode({scopeRef}), [scopeRef]);\n\n  useLayoutEffect(() => {\n    // If a new scope mounts outside the active scope, (e.g. DialogContainer launched from a menu),\n    // use the active scope as the parent instead of the parent from context. Layout effects run bottom\n    // up, so if the parent is not yet added to the tree, don't do this. Only the outer-most FocusScope\n    // that is being added should get the activeScope as its parent.\n    let parent = parentNode || focusScopeTree.root;\n    if (focusScopeTree.getTreeNode(parent.scopeRef) && activeScope && !isAncestorScope(activeScope, parent.scopeRef)) {\n      let activeNode = focusScopeTree.getTreeNode(activeScope);\n      if (activeNode) {\n        parent = activeNode;\n      }\n    }\n\n    // Add the node to the parent, and to the tree.\n    parent.addChild(node);\n    focusScopeTree.addNode(node);\n  }, [node, parentNode]);\n\n  useLayoutEffect(() => {\n    let node = focusScopeTree.getTreeNode(scopeRef);\n    node.contain = contain;\n  }, [contain]);\n\n  useLayoutEffect(() => {\n    // Find all rendered nodes between the sentinels and add them to the scope.\n    let node = startRef.current.nextSibling;\n    let nodes = [];\n    while (node && node !== endRef.current) {\n      nodes.push(node);\n      node = node.nextSibling;\n    }\n\n    scopeRef.current = nodes;\n  }, [children]);\n\n  useActiveScopeTracker(scopeRef, restoreFocus, contain);\n  useFocusContainment(scopeRef, contain);\n  useRestoreFocus(scopeRef, restoreFocus, contain);\n  useAutoFocus(scopeRef, autoFocus);\n\n  // this layout effect needs to run last so that focusScopeTree cleanup happens at the last moment possible\n  useEffect(() => {\n    if (scopeRef) {\n      let activeElement = document.activeElement;\n      let scope = null;\n      // In strict mode, active scope is incorrectly updated since cleanup will run even though scope hasn't unmounted.\n      // To fix this, we need to update the actual activeScope here\n      if (isElementInScope(activeElement, scopeRef.current)) {\n        // Since useLayoutEffect runs for children first, we need to traverse the focusScope tree and find the bottom most scope that\n        // contains the active element and set that as the activeScope\n        for (let node of focusScopeTree.traverse()) {\n          if (isElementInScope(activeElement, node.scopeRef.current)) {\n            scope = node;\n          }\n        }\n\n        if (scope === focusScopeTree.getTreeNode(scopeRef)) {\n          activeScope = scope.scopeRef;\n        }\n      }\n\n      return () => {\n        // Scope may have been re-parented.\n        let parentScope = focusScopeTree.getTreeNode(scopeRef).parent.scopeRef;\n\n        // Restore the active scope on unmount if this scope or a descendant scope is active.\n        // Parent effect cleanups run before children, so we need to check if the\n        // parent scope actually still exists before restoring the active scope to it.\n        if (\n          (scopeRef === activeScope || isAncestorScope(scopeRef, activeScope)) &&\n          (!parentScope || focusScopeTree.getTreeNode(parentScope))\n        ) {\n          activeScope = parentScope;\n        }\n        focusScopeTree.removeTreeNode(scopeRef);\n      };\n    }\n  }, [scopeRef]);\n\n  let focusManager = useMemo(() => createFocusManagerForScope(scopeRef), []);\n  let value = useMemo(() => ({\n    focusManager,\n    parentNode: node\n  }), [node, focusManager]);\n\n  return (\n    <FocusContext.Provider value={value}>\n      <span data-focus-scope-start hidden ref={startRef} />\n      {children}\n      <span data-focus-scope-end hidden ref={endRef} />\n    </FocusContext.Provider>\n  );\n}\n\n/**\n * Returns a FocusManager interface for the parent FocusScope.\n * A FocusManager can be used to programmatically move focus within\n * a FocusScope, e.g. in response to user events like keyboard navigation.\n */\nexport function useFocusManager(): FocusManager {\n  return useContext(FocusContext)?.focusManager;\n}\n\nfunction createFocusManagerForScope(scopeRef: React.RefObject<Element[]>): FocusManager {\n  return {\n    focusNext(opts: FocusManagerOptions = {}) {\n      let scope = scopeRef.current;\n      let {from, tabbable, wrap, accept} = opts;\n      let node = from || document.activeElement;\n      let sentinel = scope[0].previousElementSibling;\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable, accept}, scope);\n      walker.currentNode = isElementInScope(node, scope) ? node : sentinel;\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (!nextNode && wrap) {\n        walker.currentNode = sentinel;\n        nextNode = walker.nextNode() as FocusableElement;\n      }\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusPrevious(opts: FocusManagerOptions = {}) {\n      let scope = scopeRef.current;\n      let {from, tabbable, wrap, accept} = opts;\n      let node = from || document.activeElement;\n      let sentinel = scope[scope.length - 1].nextElementSibling;\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable, accept}, scope);\n      walker.currentNode = isElementInScope(node, scope) ? node : sentinel;\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (!previousNode && wrap) {\n        walker.currentNode = sentinel;\n        previousNode = walker.previousNode() as FocusableElement;\n      }\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    },\n    focusFirst(opts = {}) {\n      let scope = scopeRef.current;\n      let {tabbable, accept} = opts;\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable, accept}, scope);\n      walker.currentNode = scope[0].previousElementSibling;\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusLast(opts = {}) {\n      let scope = scopeRef.current;\n      let {tabbable, accept} = opts;\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable, accept}, scope);\n      walker.currentNode = scope[scope.length - 1].nextElementSibling;\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    }\n  };\n}\n\nconst focusableElements = [\n  'input:not([disabled]):not([type=hidden])',\n  'select:not([disabled])',\n  'textarea:not([disabled])',\n  'button:not([disabled])',\n  'a[href]',\n  'area[href]',\n  'summary',\n  'iframe',\n  'object',\n  'embed',\n  'audio[controls]',\n  'video[controls]',\n  '[contenteditable]'\n];\n\nconst FOCUSABLE_ELEMENT_SELECTOR = focusableElements.join(':not([hidden]),') + ',[tabindex]:not([disabled]):not([hidden])';\n\nfocusableElements.push('[tabindex]:not([tabindex=\"-1\"]):not([disabled])');\nconst TABBABLE_ELEMENT_SELECTOR = focusableElements.join(':not([hidden]):not([tabindex=\"-1\"]),');\n\nfunction getScopeRoot(scope: Element[]) {\n  return scope[0].parentElement;\n}\n\nfunction shouldContainFocus(scopeRef: ScopeRef) {\n  let scope = focusScopeTree.getTreeNode(activeScope);\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.contain) {\n      return false;\n    }\n\n    scope = scope.parent;\n  }\n\n  return true;\n}\n\nfunction useFocusContainment(scopeRef: RefObject<Element[]>, contain: boolean) {\n  let focusedNode = useRef<FocusableElement>();\n\n  let raf = useRef(null);\n  useLayoutEffect(() => {\n    let scope = scopeRef.current;\n    if (!contain) {\n      // if contain was changed, then we should cancel any ongoing waits to pull focus back into containment\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n        raf.current = null;\n      }\n      return;\n    }\n\n    // Handle the Tab key to contain focus within the scope\n    let onKeyDown = (e) => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || !shouldContainFocus(scopeRef)) {\n        return;\n      }\n\n      let focusedElement = document.activeElement;\n      let scope = scopeRef.current;\n      if (!isElementInScope(focusedElement, scope)) {\n        return;\n      }\n\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable: true}, scope);\n      walker.currentNode = focusedElement;\n      let nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n      if (!nextElement) {\n        walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling : scope[0].previousElementSibling;\n        nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode())  as FocusableElement;\n      }\n\n      e.preventDefault();\n      if (nextElement) {\n        focusElement(nextElement, true);\n      }\n    };\n\n    let onFocus = (e) => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if ((!activeScope || isAncestorScope(activeScope, scopeRef)) && isElementInScope(e.target, scopeRef.current)) {\n        activeScope = scopeRef;\n        focusedNode.current = e.target;\n      } else if (shouldContainFocus(scopeRef) && !isElementInChildScope(e.target, scopeRef)) {\n        // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),\n        // restore focus to the previously focused node or the first tabbable element in the active scope.\n        if (focusedNode.current) {\n          focusedNode.current.focus();\n        } else if (activeScope) {\n          focusFirstInScope(activeScope.current);\n        }\n      } else if (shouldContainFocus(scopeRef)) {\n        focusedNode.current = e.target;\n      }\n    };\n\n    let onBlur = (e) => {\n      // Firefox doesn't shift focus back to the Dialog properly without this\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n      }\n      raf.current = requestAnimationFrame(() => {\n        // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe\n        if (shouldContainFocus(scopeRef) && !isElementInChildScope(document.activeElement, scopeRef)) {\n          activeScope = scopeRef;\n          if (document.body.contains(e.target)) {\n            focusedNode.current = e.target;\n            focusedNode.current.focus();\n          } else if (activeScope) {\n            focusFirstInScope(activeScope.current);\n          }\n        }\n      });\n    };\n\n    document.addEventListener('keydown', onKeyDown, false);\n    document.addEventListener('focusin', onFocus, false);\n    scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    scope.forEach(element => element.addEventListener('focusout', onBlur, false));\n    return () => {\n      document.removeEventListener('keydown', onKeyDown, false);\n      document.removeEventListener('focusin', onFocus, false);\n      scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n      scope.forEach(element => element.removeEventListener('focusout', onBlur, false));\n    };\n  }, [scopeRef, contain]);\n\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => {\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n      }\n    };\n  }, [raf]);\n}\n\nfunction isElementInAnyScope(element: Element) {\n  return isElementInChildScope(element);\n}\n\nfunction isElementInScope(element: Element, scope: Element[]) {\n  return scope.some(node => node.contains(element));\n}\n\nfunction isElementInChildScope(element: Element, scope: ScopeRef = null) {\n  // If the element is within a top layer element (e.g. toasts), always allow moving focus there.\n  if (element instanceof Element && element.closest('[data-react-aria-top-layer]')) {\n    return true;\n  }\n\n  // node.contains in isElementInScope covers child scopes that are also DOM children,\n  // but does not cover child scopes in portals.\n  for (let {scopeRef: s} of focusScopeTree.traverse(focusScopeTree.getTreeNode(scope))) {\n    if (isElementInScope(element, s.current)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/** @private */\nexport function isElementInChildOfActiveScope(element: Element) {\n  return isElementInChildScope(element, activeScope);\n}\n\nfunction isAncestorScope(ancestor: ScopeRef, scope: ScopeRef) {\n  let parent = focusScopeTree.getTreeNode(scope)?.parent;\n  while (parent) {\n    if (parent.scopeRef === ancestor) {\n      return true;\n    }\n    parent = parent.parent;\n  }\n  return false;\n}\n\nfunction focusElement(element: FocusableElement | null, scroll = false) {\n  if (element != null && !scroll) {\n    try {\n      focusSafely(element);\n    } catch (err) {\n      // ignore\n    }\n  } else if (element != null) {\n    try {\n      element.focus();\n    } catch (err) {\n      // ignore\n    }\n  }\n}\n\nfunction focusFirstInScope(scope: Element[], tabbable:boolean = true) {\n  let sentinel = scope[0].previousElementSibling;\n  let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable}, scope);\n  walker.currentNode = sentinel;\n  let nextNode = walker.nextNode();\n\n  // If the scope does not contain a tabbable element, use the first focusable element.\n  if (tabbable && !nextNode) {\n    walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable: false}, scope);\n    walker.currentNode = sentinel;\n    nextNode = walker.nextNode();\n  }\n\n  focusElement(nextNode as FocusableElement);\n}\n\nfunction useAutoFocus(scopeRef: RefObject<Element[]>, autoFocus: boolean) {\n  const autoFocusRef = React.useRef(autoFocus);\n  useEffect(() => {\n    if (autoFocusRef.current) {\n      activeScope = scopeRef;\n      if (!isElementInScope(document.activeElement, activeScope.current)) {\n        focusFirstInScope(scopeRef.current);\n      }\n    }\n    autoFocusRef.current = false;\n  }, [scopeRef]);\n}\n\nfunction useActiveScopeTracker(scopeRef: RefObject<Element[]>, restore: boolean, contain: boolean) {\n  // tracks the active scope, in case restore and contain are both false.\n  // if either are true, this is tracked in useRestoreFocus or useFocusContainment.\n  useLayoutEffect(() => {\n    if (restore || contain) {\n      return;\n    }\n\n    let scope = scopeRef.current;\n\n    let onFocus = (e: FocusEvent) => {\n      let target = e.target as Element;\n      if (isElementInScope(target, scopeRef.current)) {\n        activeScope = scopeRef;\n      } else if (!isElementInAnyScope(target)) {\n        activeScope = null;\n      }\n    };\n\n    document.addEventListener('focusin', onFocus, false);\n    scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    return () => {\n      document.removeEventListener('focusin', onFocus, false);\n      scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n    };\n  }, [scopeRef, restore, contain]);\n}\n\nfunction shouldRestoreFocus(scopeRef: ScopeRef) {\n  let scope = focusScopeTree.getTreeNode(activeScope);\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.nodeToRestore) {\n      return false;\n    }\n\n    scope = scope.parent;\n  }\n\n  return scope?.scopeRef === scopeRef;\n}\n\nfunction useRestoreFocus(scopeRef: RefObject<Element[]>, restoreFocus: boolean, contain: boolean) {\n  // create a ref during render instead of useLayoutEffect so the active element is saved before a child with autoFocus=true mounts.\n  const nodeToRestoreRef = useRef(typeof document !== 'undefined' ? document.activeElement as FocusableElement : null);\n\n  // restoring scopes should all track if they are active regardless of contain, but contain already tracks it plus logic to contain the focus\n  // restoring-non-containing scopes should only care if they become active so they can perform the restore\n  useLayoutEffect(() => {\n    let scope = scopeRef.current;\n    if (!restoreFocus || contain) {\n      return;\n    }\n\n    let onFocus = () => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if (!activeScope || isAncestorScope(activeScope, scopeRef)) {\n        activeScope = scopeRef;\n      }\n    };\n\n    document.addEventListener('focusin', onFocus, false);\n    scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    return () => {\n      document.removeEventListener('focusin', onFocus, false);\n      scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [scopeRef, contain]);\n\n  // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.\n  useLayoutEffect(() => {\n    if (!restoreFocus) {\n      return;\n    }\n\n    focusScopeTree.getTreeNode(scopeRef).nodeToRestore = nodeToRestoreRef.current;\n\n    // Handle the Tab key so that tabbing out of the scope goes to the next element\n    // after the node that had focus when the scope mounted. This is important when\n    // using portals for overlays, so that focus goes to the expected element when\n    // tabbing out of the overlay.\n    let onKeyDown = (e: KeyboardEvent) => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey) {\n        return;\n      }\n\n      let focusedElement = document.activeElement as FocusableElement;\n      if (!isElementInScope(focusedElement, scopeRef.current)) {\n        return;\n      }\n      let nodeToRestore = focusScopeTree.getTreeNode(scopeRef).nodeToRestore;\n\n      // Create a DOM tree walker that matches all tabbable elements\n      let walker = getFocusableTreeWalker(document.body, {tabbable: true});\n\n      // Find the next tabbable element after the currently focused element\n      walker.currentNode = focusedElement;\n      let nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n\n      if (!document.body.contains(nodeToRestore) || nodeToRestore === document.body) {\n        nodeToRestore = null;\n        focusScopeTree.getTreeNode(scopeRef).nodeToRestore = null;\n      }\n\n      // If there is no next element, or it is outside the current scope, move focus to the\n      // next element after the node to restore to instead.\n      if ((!nextElement || !isElementInScope(nextElement, scopeRef.current)) && nodeToRestore) {\n        walker.currentNode = nodeToRestore;\n\n        // Skip over elements within the scope, in case the scope immediately follows the node to restore.\n        do {\n          nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n        } while (isElementInScope(nextElement, scopeRef.current));\n\n        e.preventDefault();\n        e.stopPropagation();\n        if (nextElement) {\n          focusElement(nextElement, true);\n        } else {\n           // If there is no next element and the nodeToRestore isn't within a FocusScope (i.e. we are leaving the top level focus scope)\n           // then move focus to the body.\n           // Otherwise restore focus to the nodeToRestore (e.g menu within a popover -> tabbing to close the menu should move focus to menu trigger)\n          if (!isElementInAnyScope(nodeToRestore)) {\n            focusedElement.blur();\n          } else {\n            focusElement(nodeToRestore, true);\n          }\n        }\n      }\n    };\n\n    if (!contain) {\n      document.addEventListener('keydown', onKeyDown, true);\n    }\n\n    return () => {\n      if (!contain) {\n        document.removeEventListener('keydown', onKeyDown, true);\n      }\n      let nodeToRestore = focusScopeTree.getTreeNode(scopeRef).nodeToRestore;\n\n      // if we already lost focus to the body and this was the active scope, then we should attempt to restore\n      if (\n        restoreFocus\n        && nodeToRestore\n        && (\n          // eslint-disable-next-line react-hooks/exhaustive-deps\n          isElementInScope(document.activeElement, scopeRef.current)\n          || (document.activeElement === document.body && shouldRestoreFocus(scopeRef))\n        )\n      ) {\n        // freeze the focusScopeTree so it persists after the raf, otherwise during unmount nodes are removed from it\n        let clonedTree = focusScopeTree.clone();\n        requestAnimationFrame(() => {\n          // Only restore focus if we've lost focus to the body, the alternative is that focus has been purposefully moved elsewhere\n          if (document.activeElement === document.body) {\n            // look up the tree starting with our scope to find a nodeToRestore still in the DOM\n            let treeNode = clonedTree.getTreeNode(scopeRef);\n            while (treeNode) {\n              if (treeNode.nodeToRestore && document.body.contains(treeNode.nodeToRestore)) {\n                focusElement(treeNode.nodeToRestore);\n                return;\n              }\n              treeNode = treeNode.parent;\n            }\n\n            // If no nodeToRestore was found, focus the first element in the nearest\n            // ancestor scope that is still in the tree.\n            treeNode = clonedTree.getTreeNode(scopeRef);\n            while (treeNode) {\n              if (treeNode.scopeRef && focusScopeTree.getTreeNode(treeNode.scopeRef)) {\n                focusFirstInScope(treeNode.scopeRef.current, true);\n                return;\n              }\n              treeNode = treeNode.parent;\n            }\n          }\n        });\n      }\n    };\n  }, [scopeRef, restoreFocus, contain]);\n}\n\n/**\n * Create a [TreeWalker]{@link https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker}\n * that matches all focusable/tabbable elements.\n */\nexport function getFocusableTreeWalker(root: Element, opts?: FocusManagerOptions, scope?: Element[]) {\n  let selector = opts?.tabbable ? TABBABLE_ELEMENT_SELECTOR : FOCUSABLE_ELEMENT_SELECTOR;\n  let walker = document.createTreeWalker(\n    root,\n    NodeFilter.SHOW_ELEMENT,\n    {\n      acceptNode(node) {\n        // Skip nodes inside the starting node.\n        if (opts?.from?.contains(node)) {\n          return NodeFilter.FILTER_REJECT;\n        }\n\n        if ((node as Element).matches(selector)\n          && isElementVisible(node as Element)\n          && (!scope || isElementInScope(node as Element, scope))\n          && (!opts?.accept || opts.accept(node as Element))\n        ) {\n          return NodeFilter.FILTER_ACCEPT;\n        }\n\n        return NodeFilter.FILTER_SKIP;\n      }\n    }\n  );\n\n  if (opts?.from) {\n    walker.currentNode = opts.from;\n  }\n\n  return walker;\n}\n\n/**\n * Creates a FocusManager object that can be used to move focus within an element.\n */\nexport function createFocusManager(ref: RefObject<Element>, defaultOptions: FocusManagerOptions = {}): FocusManager {\n  return {\n    focusNext(opts: FocusManagerOptions = {}) {\n      let root = ref.current;\n      if (!root) {\n        return;\n      }\n      let {from, tabbable = defaultOptions.tabbable, wrap = defaultOptions.wrap, accept = defaultOptions.accept} = opts;\n      let node = from || document.activeElement;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      if (root.contains(node)) {\n        walker.currentNode = node;\n      }\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (!nextNode && wrap) {\n        walker.currentNode = root;\n        nextNode = walker.nextNode() as FocusableElement;\n      }\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusPrevious(opts: FocusManagerOptions = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return;\n      }\n      let {from, tabbable = defaultOptions.tabbable, wrap = defaultOptions.wrap, accept = defaultOptions.accept} = opts;\n      let node = from || document.activeElement;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      if (root.contains(node)) {\n        walker.currentNode = node;\n      } else {\n        let next = last(walker);\n        if (next) {\n          focusElement(next, true);\n        }\n        return next;\n      }\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (!previousNode && wrap) {\n        walker.currentNode = root;\n        previousNode = last(walker);\n      }\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    },\n    focusFirst(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return;\n      }\n      let {tabbable = defaultOptions.tabbable, accept = defaultOptions.accept} = opts;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusLast(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return;\n      }\n      let {tabbable = defaultOptions.tabbable, accept = defaultOptions.accept} = opts;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      let next = last(walker);\n      if (next) {\n        focusElement(next, true);\n      }\n      return next;\n    }\n  };\n}\n\nfunction last(walker: TreeWalker) {\n  let next: FocusableElement;\n  let last: FocusableElement;\n  do {\n    last = walker.lastChild() as FocusableElement;\n    if (last) {\n      next = last;\n    }\n  } while (last);\n  return next;\n}\n\n\nclass Tree {\n  root: TreeNode;\n  private fastMap = new Map<ScopeRef, TreeNode>();\n\n  constructor() {\n    this.root = new TreeNode({scopeRef: null});\n    this.fastMap.set(null, this.root);\n  }\n\n  get size() {\n    return this.fastMap.size;\n  }\n\n  getTreeNode(data: ScopeRef) {\n    return this.fastMap.get(data);\n  }\n\n  addTreeNode(scopeRef: ScopeRef, parent: ScopeRef, nodeToRestore?: FocusableElement) {\n    let parentNode = this.fastMap.get(parent ?? null);\n    let node = new TreeNode({scopeRef});\n    parentNode.addChild(node);\n    node.parent = parentNode;\n    this.fastMap.set(scopeRef, node);\n    if (nodeToRestore) {\n      node.nodeToRestore = nodeToRestore;\n    }\n  }\n\n  addNode(node: TreeNode) {\n    this.fastMap.set(node.scopeRef, node);\n  }\n\n  removeTreeNode(scopeRef: ScopeRef) {\n    // never remove the root\n    if (scopeRef === null) {\n      return;\n    }\n    let node = this.fastMap.get(scopeRef);\n    let parentNode = node.parent;\n    // when we remove a scope, check if any sibling scopes are trying to restore focus to something inside the scope we're removing\n    // if we are, then replace the siblings restore with the restore from the scope we're removing\n    for (let current of this.traverse()) {\n      if (\n        current !== node &&\n        node.nodeToRestore &&\n        current.nodeToRestore &&\n        node.scopeRef.current &&\n        isElementInScope(current.nodeToRestore, node.scopeRef.current)\n      ) {\n        current.nodeToRestore = node.nodeToRestore;\n      }\n    }\n    let children = node.children;\n    parentNode.removeChild(node);\n    if (children.size > 0) {\n      children.forEach(child => parentNode.addChild(child));\n    }\n\n    this.fastMap.delete(node.scopeRef);\n  }\n\n  // Pre Order Depth First\n  *traverse(node: TreeNode = this.root): Generator<TreeNode> {\n    if (node.scopeRef != null) {\n      yield node;\n    }\n    if (node.children.size > 0) {\n      for (let child of node.children) {\n        yield* this.traverse(child);\n      }\n    }\n  }\n\n  clone(): Tree {\n    let newTree = new Tree();\n    for (let node of this.traverse()) {\n      newTree.addTreeNode(node.scopeRef, node.parent.scopeRef, node.nodeToRestore);\n    }\n    return newTree;\n  }\n}\n\nclass TreeNode {\n  public scopeRef: ScopeRef;\n  public nodeToRestore: FocusableElement;\n  public parent: TreeNode;\n  public children: Set<TreeNode> = new Set();\n  public contain = false;\n\n  constructor(props: {scopeRef: ScopeRef}) {\n    this.scopeRef = props.scopeRef;\n  }\n  addChild(node: TreeNode) {\n    this.children.add(node);\n    node.parent = this;\n  }\n  removeChild(node: TreeNode) {\n    this.children.delete(node);\n    node.parent = undefined;\n  }\n}\n\nexport let focusScopeTree = new Tree();\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\nimport {focusWithoutScrolling, runAfterTransition} from '@react-aria/utils';\nimport {getInteractionModality} from '@react-aria/interactions';\n\n/**\n * A utility function that focuses an element while avoiding undesired side effects such\n * as page scrolling and screen reader issues with CSS transitions.\n */\nexport function focusSafely(element: FocusableElement) {\n  // If the user is interacting with a virtual cursor, e.g. screen reader, then\n  // wait until after any animated transitions that are currently occurring on\n  // the page before shifting focus. This avoids issues with VoiceOver on iOS\n  // causing the page to scroll when moving focus if the element is transitioning\n  // from off the screen.\n  if (getInteractionModality() === 'virtual') {\n    let lastFocusedElement = document.activeElement;\n    runAfterTransition(() => {\n      // If focus did not move and the element is still in the document, focus it.\n      if (document.activeElement === lastFocusedElement && document.contains(element)) {\n        focusWithoutScrolling(element);\n      }\n    });\n  } else {\n    focusWithoutScrolling(element);\n  }\n}\n","/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction isStyleVisible(element: Element) {\n  if (!(element instanceof HTMLElement) && !(element instanceof SVGElement)) {\n    return false;\n  }\n\n  let {display, visibility} = element.style;\n\n  let isVisible = (\n    display !== 'none' &&\n    visibility !== 'hidden' &&\n    visibility !== 'collapse'\n  );\n\n  if (isVisible) {\n    const {getComputedStyle} = element.ownerDocument.defaultView;\n    let {display: computedDisplay, visibility: computedVisibility} = getComputedStyle(element);\n\n    isVisible = (\n      computedDisplay !== 'none' &&\n      computedVisibility !== 'hidden' &&\n      computedVisibility !== 'collapse'\n    );\n  }\n\n  return isVisible;\n}\n\nfunction isAttributeVisible(element: Element, childElement?: Element) {\n  return (\n    !element.hasAttribute('hidden') &&\n    (element.nodeName === 'DETAILS' &&\n      childElement &&\n      childElement.nodeName !== 'SUMMARY'\n      ? element.hasAttribute('open')\n      : true)\n  );\n}\n\n/**\n * Adapted from https://github.com/testing-library/jest-dom and \n * https://github.com/vuejs/vue-test-utils-next/.\n * Licensed under the MIT License.\n * @param element - Element to evaluate for display or visibility.\n */  \nexport function isElementVisible(element: Element, childElement?: Element) {\n  return (\n    element.nodeName !== '#comment' &&\n    isStyleVisible(element) &&\n    isAttributeVisible(element, childElement) &&\n    (!element.parentElement || isElementVisible(element.parentElement, element))\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport clsx from 'clsx';\nimport {mergeProps} from '@react-aria/utils';\nimport React, {ReactElement} from 'react';\nimport {useFocusRing} from './useFocusRing';\n\nexport interface FocusRingProps {\n  /** Child element to apply CSS classes to. */\n  children: ReactElement,\n  /** CSS class to apply when the element is focused. */\n  focusClass?: string,\n  /** CSS class to apply when the element has keyboard focus. */\n  focusRingClass?: string,\n  /**\n   * Whether to show the focus ring when something\n   * inside the container element has focus (true), or\n   * only if the container itself has focus (false).\n   * @default false\n   */\n  within?: boolean,\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\n/**\n * A utility component that applies a CSS class when an element has keyboard focus.\n * Focus rings are visible only when the user is interacting with a keyboard,\n * not with a mouse, touch, or other input methods.\n */\nexport function FocusRing(props: FocusRingProps) {\n  let {children, focusClass, focusRingClass} = props;\n  let {isFocused, isFocusVisible, focusProps} = useFocusRing(props);\n  let child = React.Children.only(children);\n\n  return React.cloneElement(child, mergeProps(child.props, {\n    ...focusProps,\n    className: clsx({\n      [focusClass || '']: isFocused,\n      [focusRingClass || '']: isFocusVisible\n    })\n  }));\n}\n","import {DOMAttributes} from '@react-types/shared';\nimport {isFocusVisible, useFocus, useFocusVisibleListener, useFocusWithin} from '@react-aria/interactions';\nimport {useCallback, useState} from 'react';\nimport {useRef} from 'react';\n\nexport interface AriaFocusRingProps {\n  /**\n   * Whether to show the focus ring when something\n   * inside the container element has focus (true), or\n   * only if the container itself has focus (false).\n   * @default 'false'\n   */\n  within?: boolean,\n\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\nexport interface FocusRingAria {\n  /** Whether the element is currently focused. */\n  isFocused: boolean,\n\n  /** Whether keyboard focus should be visible. */\n  isFocusVisible: boolean,\n\n  /** Props to apply to the container element with the focus ring. */\n  focusProps: DOMAttributes\n}\n\n/**\n * Determines whether a focus ring should be shown to indicate keyboard focus.\n * Focus rings are visible only when the user is interacting with a keyboard,\n * not with a mouse, touch, or other input methods.\n */\nexport function useFocusRing(props: AriaFocusRingProps = {}): FocusRingAria {\n  let {\n    autoFocus = false,\n    isTextInput,\n    within\n  } = props;\n  let state = useRef({\n    isFocused: false,\n    isFocusVisible: autoFocus || isFocusVisible()\n  });\n  let [isFocused, setFocused] = useState(false);\n  let [isFocusVisibleState, setFocusVisible] = useState(() => state.current.isFocused && state.current.isFocusVisible);\n\n  let updateState = useCallback(() => setFocusVisible(state.current.isFocused && state.current.isFocusVisible), []);\n\n  let onFocusChange = useCallback(isFocused => {\n    state.current.isFocused = isFocused;\n    setFocused(isFocused);\n    updateState();\n  }, [updateState]);\n\n  useFocusVisibleListener((isFocusVisible) => {\n    state.current.isFocusVisible = isFocusVisible;\n    updateState();\n  }, [], {isTextInput});\n\n  let {focusProps} = useFocus({\n    isDisabled: within,\n    onFocusChange\n  });\n\n  let {focusWithinProps} = useFocusWithin({\n    isDisabled: !within,\n    onFocusWithinChange: onFocusChange\n  });\n\n  return {\n    isFocused,\n    isFocusVisible: state.current.isFocused && isFocusVisibleState,\n    focusProps: within ? focusWithinProps : focusProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableDOMProps, FocusableElement, FocusableProps} from '@react-types/shared';\nimport {focusSafely} from './';\nimport {mergeProps, useSyncRef} from '@react-aria/utils';\nimport React, {MutableRefObject, ReactNode, RefObject, useContext, useEffect, useRef} from 'react';\nimport {useFocus, useKeyboard} from '@react-aria/interactions';\n\nexport interface FocusableOptions extends FocusableProps, FocusableDOMProps {\n  /** Whether focus should be disabled. */\n  isDisabled?: boolean\n}\n\nexport interface FocusableProviderProps extends DOMAttributes {\n  /** The child element to provide DOM props to. */\n  children?: ReactNode\n}\n\ninterface FocusableContextValue extends FocusableProviderProps {\n  ref?: MutableRefObject<FocusableElement>\n}\n\nlet FocusableContext = React.createContext<FocusableContextValue>(null);\n\nfunction useFocusableContext(ref: RefObject<FocusableElement>): FocusableContextValue {\n  let context = useContext(FocusableContext) || {};\n  useSyncRef(context, ref);\n\n  // eslint-disable-next-line\n  let {ref: _, ...otherProps} = context;\n  return otherProps;\n}\n\n/**\n * Provides DOM props to the nearest focusable child.\n */\nfunction FocusableProvider(props: FocusableProviderProps, ref: RefObject<FocusableElement>) {\n  let {children, ...otherProps} = props;\n  let context = {\n    ...otherProps,\n    ref\n  };\n\n  return (\n    <FocusableContext.Provider value={context}>\n      {children}\n    </FocusableContext.Provider>\n  );\n}\n\nlet _FocusableProvider = React.forwardRef(FocusableProvider);\nexport {_FocusableProvider as FocusableProvider};\n\nexport interface FocusableAria {\n  /** Props for the focusable element. */\n  focusableProps: DOMAttributes\n}\n\n/**\n * Used to make an element focusable and capable of auto focus.\n */\nexport function useFocusable(props: FocusableOptions, domRef: RefObject<FocusableElement>): FocusableAria {\n  let {focusProps} = useFocus(props);\n  let {keyboardProps} = useKeyboard(props);\n  let interactions = mergeProps(focusProps, keyboardProps);\n  let domProps = useFocusableContext(domRef);\n  let interactionProps = props.isDisabled ? {} : domProps;\n  let autoFocusRef = useRef(props.autoFocus);\n\n  useEffect(() => {\n    if (autoFocusRef.current && domRef.current) {\n      focusSafely(domRef.current);\n    }\n    autoFocusRef.current = false;\n  }, [domRef]);\n\n  return {\n    focusableProps: mergeProps(\n      {\n        ...interactions,\n        tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : undefined\n      },\n      interactionProps\n    )\n  };\n}\n","/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {getFocusableTreeWalker} from './FocusScope';\nimport {RefObject, useState} from 'react';\nimport {useLayoutEffect} from '@react-aria/utils';\n\ninterface AriaHasTabbableChildOptions {\n  isDisabled?: boolean\n}\n\n// This was created for a special empty case of a component that can have child or\n// be empty, like Collection/Virtualizer/Table/ListView/etc. When these components\n// are empty they can have a message with a tabbable element, which is like them\n// being not empty, when it comes to focus and tab order.\n\n/**\n * Returns whether an element has a tabbable child, and updates as children change.\n * @private\n */\nexport function useHasTabbableChild(ref: RefObject<Element>, options?: AriaHasTabbableChildOptions): boolean {\n  let isDisabled = options?.isDisabled;\n  let [hasTabbableChild, setHasTabbableChild] = useState(false);\n\n  useLayoutEffect(() => {\n    if (ref?.current && !isDisabled) {\n      let update = () => {\n        if (ref.current) {\n          let walker = getFocusableTreeWalker(ref.current, {tabbable: true});\n          setHasTabbableChild(!!walker.nextNode());\n        }\n      };\n\n      update();\n\n      // Update when new elements are inserted, or the tabIndex/disabled attribute updates.\n      let observer = new MutationObserver(update);\n      observer.observe(ref.current, {\n        subtree: true,\n        childList: true,\n        attributes: true,\n        attributeFilter: ['tabIndex', 'disabled']\n      });\n\n      return () => {\n        // Disconnect mutation observer when a React update occurs on the top-level component\n        // so we update synchronously after re-rendering. Otherwise React will emit act warnings\n        // in tests since mutation observers fire asynchronously. The mutation observer is necessary\n        // so we also update if a child component re-renders and adds/removes something tabbable.\n        observer.disconnect();\n      };\n    }\n  });\n\n  return isDisabled ? false : hasTabbableChild;\n}\n"]},"metadata":{},"sourceType":"module"}