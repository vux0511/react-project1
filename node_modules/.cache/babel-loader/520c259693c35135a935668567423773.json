{"ast":null,"code":"import { useState as $8D3nr$useState, useMemo as $8D3nr$useMemo, useEffect as $8D3nr$useEffect, useCallback as $8D3nr$useCallback } from \"react\";\nimport { useLayoutEffect as $8D3nr$useLayoutEffect } from \"@react-aria/utils\";\nimport $8D3nr$swchelperssrc_define_propertymjs from \"@swc/helpers/src/_define_property.mjs\";\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/*\n* Copyright 2020 Adobe. All rights reserved.\n* This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License. You may obtain a copy\n* of the License at http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software distributed under\n* the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n* OF ANY KIND, either express or implied. See the License for the specific language\n* governing permissions and limitations under the License.\n*/\n\nclass $c74cda7d31af1253$export$c84671f46d6a1ca {\n  /**\n  * Returns whether the layout should invalidate in response to\n  * visible rectangle changes. By default, it only invalidates\n  * when the collection view's size changes. Return true always\n  * to make the layout invalidate while scrolling (e.g. sticky headers).\n  */\n  shouldInvalidate(newRect, oldRect) {\n    // By default, invalidate when the size changes\n    return newRect.width !== oldRect.width || newRect.height !== oldRect.height;\n  }\n  /**\n  * This method allows the layout to perform any pre-computation\n  * it needs to in order to prepare {@link LayoutInfo}s for retrieval.\n  * Called by the collection view before {@link getVisibleLayoutInfos}\n  * or {@link getLayoutInfo} are called.\n  */\n\n\n  validate(invalidationContext) {}\n  /**\n  * Returns a {@link DragTarget} describing a view at the given point to be dragged.\n  * Return `null` to cancel the drag. The default implementation returns the view at the given point.\n  * @param point The point at which the drag occurred.\n  */\n  // getDragTarget(point: Point): DragTarget | null {\n  //   let target = this.virtualizer.keyAtPoint(point);\n  //   if (!target) {\n  //     return null;\n  //   }\n  //   return {\n  //     type: 'item',\n  //     key: target\n  //   };\n  // }\n\n  /**\n  * Returns a {@link DragTarget} object describing where a drop should occur. Return `null`\n  * to reject the drop. The dropped items will be inserted before the resulting target.\n  * @param point The point at which the drop occurred.\n  */\n  // getDropTarget(point: Point): DropTarget | null {\n  //   return null;\n  // }\n\n  /**\n  * Returns the starting attributes for an animated insertion.\n  * The view is animated from this {@link LayoutInfo} to the one returned by {@link getLayoutInfo}.\n  * The default implementation just returns its input.\n  *\n  * @param layoutInfo The proposed LayoutInfo for this view.\n  */\n\n\n  getInitialLayoutInfo(layoutInfo) {\n    return layoutInfo;\n  }\n  /**\n  * Returns the ending attributes for an animated removal.\n  * The view is animated from the {@link LayoutInfo} returned by {@link getLayoutInfo}\n  * to the one returned by this method. The default implementation returns its input.\n  *\n  * @param layoutInfo The original LayoutInfo for this view.\n  */\n\n\n  getFinalLayoutInfo(layoutInfo) {\n    return layoutInfo;\n  }\n\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n\nclass $d7fd61009c21d0bb$export$7e0eeb9da702a085 {\n  /**\n  * Returns a copy of the LayoutInfo.\n  */\n  copy() {\n    let res = new $d7fd61009c21d0bb$export$7e0eeb9da702a085(this.type, this.key, this.rect.copy());\n    res.estimatedSize = this.estimatedSize;\n    res.opacity = this.opacity;\n    res.transform = this.transform;\n    res.parentKey = this.parentKey;\n    res.isSticky = this.isSticky;\n    res.zIndex = this.zIndex;\n    res.allowOverflow = this.allowOverflow;\n    return res;\n  }\n  /**\n  * @param type A string representing the view type. Should be `'item'` for item views.\n                          Other types are used by supplementary views.\n  * @param key The unique key for this view.\n  * @param rect The rectangle describing the size and position of this view.\n  */\n\n\n  constructor(type, key, rect) {\n    this.type = type;\n    this.key = key;\n    this.parentKey = null;\n    this.rect = rect;\n    this.estimatedSize = false;\n    this.isSticky = false;\n    this.opacity = 1;\n    this.transform = null;\n    this.zIndex = 0;\n    this.allowOverflow = false;\n  }\n\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n\nclass $3041db3296945e6e$export$baf26146a414f24a {\n  /**\n  * Returns a copy of this point.\n  */\n  copy() {\n    return new $3041db3296945e6e$export$baf26146a414f24a(this.x, this.y);\n  }\n  /**\n  * Checks if two points are equal.\n  */\n\n\n  equals(point) {\n    return this.x === point.x && this.y === point.y;\n  }\n  /**\n  * Returns true if this point is the origin.\n  */\n\n\n  isOrigin() {\n    return this.x === 0 && this.y === 0;\n  }\n\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.x = x;\n    this.y = y;\n  }\n\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n\nclass $60423f92c7f9ad87$export$c79fc6492f3af13d {\n  /**\n  * The maximum x-coordinate in the rectangle.\n  */\n  get maxX() {\n    return this.x + this.width;\n  }\n  /**\n  * The maximum y-coordinate in the rectangle.\n  */\n\n\n  get maxY() {\n    return this.y + this.height;\n  }\n  /**\n  * The area of the rectangle.\n  */\n\n\n  get area() {\n    return this.width * this.height;\n  }\n  /**\n  * The top left corner of the rectangle.\n  */\n\n\n  get topLeft() {\n    return new (0, $3041db3296945e6e$export$baf26146a414f24a)(this.x, this.y);\n  }\n  /**\n  * The top right corner of the rectangle.\n  */\n\n\n  get topRight() {\n    return new (0, $3041db3296945e6e$export$baf26146a414f24a)(this.maxX, this.y);\n  }\n  /**\n  * The bottom left corner of the rectangle.\n  */\n\n\n  get bottomLeft() {\n    return new (0, $3041db3296945e6e$export$baf26146a414f24a)(this.x, this.maxY);\n  }\n  /**\n  * The bottom right corner of the rectangle.\n  */\n\n\n  get bottomRight() {\n    return new (0, $3041db3296945e6e$export$baf26146a414f24a)(this.maxX, this.maxY);\n  }\n  /**\n  * Returns whether this rectangle intersects another rectangle.\n  * @param rect - The rectangle to check.\n  */\n\n\n  intersects(rect) {\n    return this.x <= rect.x + rect.width && rect.x <= this.x + this.width && this.y <= rect.y + rect.height && rect.y <= this.y + this.height;\n  }\n  /**\n  * Returns whether this rectangle fully contains another rectangle.\n  * @param rect - The rectangle to check.\n  */\n\n\n  containsRect(rect) {\n    return this.x <= rect.x && this.y <= rect.y && this.maxX >= rect.maxX && this.maxY >= rect.maxY;\n  }\n  /**\n  * Returns whether the rectangle contains the given point.\n  * @param point - The point to check.\n  */\n\n\n  containsPoint(point) {\n    return this.x <= point.x && this.y <= point.y && this.maxX >= point.x && this.maxY >= point.y;\n  }\n  /**\n  * Returns the first corner of this rectangle (from top to bottom, left to right)\n  * that is contained in the given rectangle, or null of the rectangles do not intersect.\n  * @param rect - The rectangle to check.\n  */\n\n\n  getCornerInRect(rect) {\n    for (let key of [\"topLeft\", \"topRight\", \"bottomLeft\", \"bottomRight\"]) {\n      if (rect.containsPoint(this[key])) return key;\n    }\n\n    return null;\n  }\n\n  equals(rect) {\n    return rect.x === this.x && rect.y === this.y && rect.width === this.width && rect.height === this.height;\n  }\n\n  pointEquals(point) {\n    return this.x === point.x && this.y === point.y;\n  }\n\n  sizeEquals(size) {\n    return this.width === size.width && this.height === size.height;\n  }\n  /**\n  * Returns the union of this Rect and another.\n  */\n\n\n  union(other) {\n    let x = Math.min(this.x, other.x);\n    let y = Math.min(this.y, other.y);\n    let width = Math.max(this.maxX, other.maxX) - x;\n    let height = Math.max(this.maxY, other.maxY) - y;\n    return new $60423f92c7f9ad87$export$c79fc6492f3af13d(x, y, width, height);\n  }\n  /**\n  * Returns the intersection of this Rect with another.\n  * If the rectangles do not intersect, an all zero Rect is returned.\n  */\n\n\n  intersection(other) {\n    if (!this.intersects(other)) return new $60423f92c7f9ad87$export$c79fc6492f3af13d(0, 0, 0, 0);\n    let x = Math.max(this.x, other.x);\n    let y = Math.max(this.y, other.y);\n    return new $60423f92c7f9ad87$export$c79fc6492f3af13d(x, y, Math.min(this.maxX, other.maxX) - x, Math.min(this.maxY, other.maxY) - y);\n  }\n  /**\n  * Returns a copy of this rectangle.\n  */\n\n\n  copy() {\n    return new $60423f92c7f9ad87$export$c79fc6492f3af13d(this.x, this.y, this.width, this.height);\n  }\n\n  constructor() {\n    let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n\nclass $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec {\n  /**\n  * Returns a copy of this size.\n  */\n  copy() {\n    return new $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec(this.width, this.height);\n  }\n  /**\n  * Returns whether this size is equal to another one.\n  */\n\n\n  equals(other) {\n    return this.width === other.width && this.height === other.height;\n  }\n  /**\n  * The total area of the Size.\n  */\n\n\n  get area() {\n    return this.width * this.height;\n  }\n\n  constructor() {\n    let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.width = width;\n    this.height = height;\n  }\n\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n\nlet $ad1d98aa8f0c31b4$var$KEY = 0;\n\nclass $ad1d98aa8f0c31b4$export$1a5223887c560441 {\n  /**\n  * Prepares the view for reuse. Called just before the view is removed from the DOM.\n  */\n  prepareForReuse() {\n    this.content = null;\n    this.rendered = null;\n    this.layoutInfo = null;\n  }\n\n  constructor(virtualizer) {\n    this.virtualizer = virtualizer;\n    this.key = ++$ad1d98aa8f0c31b4$var$KEY;\n  }\n\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/*\n* Copyright 2020 Adobe. All rights reserved.\n* This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License. You may obtain a copy\n* of the License at http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software distributed under\n* the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n* OF ANY KIND, either express or implied. See the License for the specific language\n* governing permissions and limitations under the License.\n*/\n// use high res timer if available\n\n\nlet $3eb131dcf37ad5f8$var$perf = typeof window !== \"undefined\" ? window.performance : null; // @ts-ignore\n\nlet $3eb131dcf37ad5f8$var$perfNow = $3eb131dcf37ad5f8$var$perf && ($3eb131dcf37ad5f8$var$perf.now || $3eb131dcf37ad5f8$var$perf.webkitNow || $3eb131dcf37ad5f8$var$perf.msNow || $3eb131dcf37ad5f8$var$perf.mozNow);\nlet $3eb131dcf37ad5f8$var$getTime = $3eb131dcf37ad5f8$var$perfNow ? $3eb131dcf37ad5f8$var$perfNow.bind($3eb131dcf37ad5f8$var$perf) : function () {\n  return Date.now ? Date.now() : new Date().getTime();\n};\nlet $3eb131dcf37ad5f8$var$fixTs;\n\nfunction $3eb131dcf37ad5f8$export$dc0b63720788090c(begin, end, duration, ease, fn) {\n  let canceled = false;\n  let raf_id;\n  let promise = new Promise(resolve => {\n    let start = $3eb131dcf37ad5f8$var$getTime();\n    let diffX = end.x - begin.x;\n    let diffY = end.y - begin.y;\n    raf_id = requestAnimationFrame(function run(t) {\n      // if we're using a high res timer, make sure timestamp is not the old epoch-based value.\n      // http://updates.html5rocks.com/2012/05/requestAnimationFrame-API-now-with-sub-millisecond-precision\n      if ($3eb131dcf37ad5f8$var$fixTs == null) $3eb131dcf37ad5f8$var$fixTs = t > 1e12 !== $3eb131dcf37ad5f8$var$getTime() > 1e12;\n      if ($3eb131dcf37ad5f8$var$fixTs) t = $3eb131dcf37ad5f8$var$getTime(); // check if we're done\n\n      let delta = t - start;\n\n      if (delta > duration) {\n        fn(end);\n        resolve();\n      } else {\n        // call frame callback after computing eased time and get the next frame\n        let proceed = fn(new (0, $3041db3296945e6e$export$baf26146a414f24a)(begin.x + diffX * ease(delta / duration), begin.y + diffY * ease(delta / duration)));\n        if (proceed !== false && !canceled) raf_id = requestAnimationFrame(run);\n      }\n    });\n  });\n\n  promise.cancel = function () {\n    canceled = true;\n    cancelAnimationFrame(raf_id);\n  };\n\n  return promise;\n}\n\nfunction $3eb131dcf37ad5f8$export$77860c106b4a6a2e(t) {\n  return t;\n}\n\nfunction $3eb131dcf37ad5f8$export$57636bb43b1ccbb0(t) {\n  return Math.sin(t * Math.PI / 2);\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n\nfunction $fc36f9a046a9ce79$export$37a26b283fd7740e(a, b) {\n  let res = new Set();\n\n  for (let key of a.keys()) if (!b.has(key)) res.add(key);\n\n  return res;\n}\n\nfunction $fc36f9a046a9ce79$export$acaf96a27438246b(a, b) {\n  let toRemove = $fc36f9a046a9ce79$export$37a26b283fd7740e(a, b);\n  let toAdd = $fc36f9a046a9ce79$export$37a26b283fd7740e(b, a);\n  let toUpdate = new Set();\n\n  for (let key of a.keys()) if (b.has(key)) toUpdate.add(key);\n\n  return {\n    toRemove: toRemove,\n    toAdd: toAdd,\n    toUpdate: toUpdate\n  };\n}\n\nfunction* $fc36f9a046a9ce79$export$cfc14088dfefce5f() {\n  for (var _len = arguments.length, iterators = new Array(_len), _key = 0; _key < _len; _key++) {\n    iterators[_key] = arguments[_key];\n  }\n\n  for (let iterator of iterators) yield* iterator;\n}\n\nfunction $fc36f9a046a9ce79$export$6897c284b6f9f4dc(object) {\n  let res = {};\n\n  for (let key in object) res[object[key]] = key;\n\n  return res;\n}\n\nfunction $fc36f9a046a9ce79$export$a8d0d0c8d1c5df64(a, b) {\n  if (a === b) return true;\n  if (a.size !== b.size) return false;\n\n  for (let key of a) {\n    if (!b.has(key)) return false;\n  }\n\n  return true;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n\nclass $364191b3decf3697$var$RollingAverage {\n  addSample(sample) {\n    this.count++;\n    this.value += (sample - this.value) / this.count;\n  }\n\n  constructor() {\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"count\", 0);\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"value\", 0);\n  }\n\n}\n\nclass $364191b3decf3697$export$4455ee6afb38dcbb {\n  setVisibleRect(rect) {\n    let time = performance.now() - this.startTime;\n\n    if (time < 500) {\n      this.averageTime.addSample(time);\n      if (rect.x !== this.visibleRect.x && time > 0) this.velocity.x = (rect.x - this.visibleRect.x) / time;\n      if (rect.y !== this.visibleRect.y && time > 0) this.velocity.y = (rect.y - this.visibleRect.y) / time;\n    }\n\n    this.startTime = performance.now();\n    this.visibleRect = rect;\n  }\n\n  collectMetrics() {\n    let time = performance.now() - this.startTime;\n    if (time < 500) this.averagePerf.addSample(time);\n\n    if (this.visibleRect.height > 0) {\n      let o = Math.abs(this.velocity.y * (this.averageTime.value + this.averagePerf.value));\n      this.overscanY.addSample(o);\n    }\n\n    if (this.visibleRect.width > 0) {\n      let o1 = Math.abs(this.velocity.x * (this.averageTime.value + this.averagePerf.value));\n      this.overscanX.addSample(o1);\n    }\n  }\n\n  getOverscannedRect() {\n    let overscanned = this.visibleRect.copy();\n    let overscanY = Math.round(Math.min(this.visibleRect.height * 2, this.overscanY.value) / 100) * 100;\n\n    if (this.velocity.y > 0) {\n      overscanned.y -= overscanY * 0.2;\n      overscanned.height += overscanY + overscanY * 0.2;\n    } else {\n      overscanned.y -= overscanY;\n      overscanned.height += overscanY + overscanY * 0.2;\n    }\n\n    let overscanX = Math.round(Math.min(this.visibleRect.width * 2, this.overscanX.value) / 100) * 100;\n\n    if (this.velocity.x > 0) {\n      overscanned.x -= overscanX * 0.2;\n      overscanned.width += overscanX + overscanX * 0.2;\n    } else {\n      overscanned.x -= overscanX;\n      overscanned.width += overscanX + overscanX * 0.2;\n    }\n\n    return overscanned;\n  }\n\n  constructor() {\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"startTime\", 0);\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"averagePerf\", new $364191b3decf3697$var$RollingAverage());\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"averageTime\", new $364191b3decf3697$var$RollingAverage());\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"velocity\", new (0, $3041db3296945e6e$export$baf26146a414f24a)(5, 5));\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"overscanX\", new $364191b3decf3697$var$RollingAverage());\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"overscanY\", new $364191b3decf3697$var$RollingAverage());\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"visibleRect\", new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)());\n  }\n\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n\nclass $8e135e531d8dcb66$export$febc5573c75cefb0 {\n  constructor() {\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"level\", 0);\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"actions\", []);\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"animated\", true);\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"initialMap\", new Map());\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"finalMap\", new Map());\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"initialLayoutInfo\", new Map());\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"finalLayoutInfo\", new Map());\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"removed\", new Map());\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"toRemove\", new Map());\n  }\n\n}\n\nclass $38b9490c1cca8fc4$export$89be5a243e59c4b2 {\n  _setContentSize(size) {\n    this._contentSize = size;\n    this.delegate.setContentSize(size);\n  }\n\n  _setContentOffset(offset) {\n    let rect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(offset.x, offset.y, this._visibleRect.width, this._visibleRect.height);\n    this.delegate.setVisibleRect(rect);\n  }\n  /**\n  * Get the size of the scrollable content.\n  */\n\n\n  get contentSize() {\n    return this._contentSize;\n  }\n  /**\n  * Get the collection view's currently visible rectangle.\n  */\n\n\n  get visibleRect() {\n    return this._visibleRect;\n  }\n  /**\n  * Set the collection view's currently visible rectangle.\n  */\n\n\n  set visibleRect(rect) {\n    this._setVisibleRect(rect);\n  }\n\n  _setVisibleRect(rect) {\n    let forceUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let current = this._visibleRect; // Ignore if the rects are equal\n\n    if (rect.equals(current)) return;\n    if (this.shouldOverscan) this._overscanManager.setVisibleRect(rect);\n    let shouldInvalidate = this.layout && this.layout.shouldInvalidate(rect, this._visibleRect);\n\n    this._resetAnimatedContentOffset();\n\n    this._visibleRect = rect;\n    if (shouldInvalidate) this.relayout({\n      offsetChanged: !rect.pointEquals(current),\n      sizeChanged: !rect.sizeEquals(current)\n    });else this.updateSubviews(forceUpdate);\n  }\n\n  get collection() {\n    return this._collection;\n  }\n\n  set collection(data) {\n    this._setData(data);\n  }\n\n  _setData(data) {\n    if (data === this._collection) return;\n    if (this._collection) this._runTransaction(() => {\n      this._collection = data;\n    }, this.transitionDuration > 0);else {\n      this._collection = data;\n      this.reloadData();\n    }\n  }\n  /**\n  * Reloads the data from the data source and relayouts the collection view.\n  * Does not animate any changes. Equivalent to re-assigning the same data source\n  * to the collection view.\n  */\n\n\n  reloadData() {\n    this.relayout({\n      contentChanged: true\n    });\n  }\n  /**\n  * Returns the item with the given key.\n  */\n\n\n  getItem(key) {\n    return this._collection ? this._collection.getItem(key) : null;\n  }\n  /** The set of persisted keys are always present in the DOM, even if not currently in view. */\n\n\n  get persistedKeys() {\n    return this._persistedKeys;\n  }\n  /** The set of persisted keys are always present in the DOM, even if not currently in view. */\n\n\n  set persistedKeys(persistedKeys) {\n    if (!(0, $fc36f9a046a9ce79$export$a8d0d0c8d1c5df64)(persistedKeys, this._persistedKeys)) {\n      this._persistedKeys = persistedKeys;\n      this.updateSubviews();\n    }\n  }\n  /** Returns whether the given key, or an ancestor, is persisted. */\n\n\n  isPersistedKey(key) {\n    // Quick check if the key is directly in the set of persisted keys.\n    if (this._persistedKeys.has(key)) return true; // If not, check if the key is an ancestor of any of the persisted keys.\n\n    for (let k of this._persistedKeys) while (k != null) {\n      let layoutInfo = this.layout.getLayoutInfo(k);\n      if (!layoutInfo) break;\n      k = layoutInfo.parentKey;\n      if (k === key) return true;\n    }\n\n    return false;\n  }\n  /**\n  * Get the collection view's layout.\n  */\n\n\n  get layout() {\n    return this._layout;\n  }\n  /**\n  * Set the collection view's layout.\n  */\n\n\n  set layout(layout) {\n    this.setLayout(layout);\n  }\n  /**\n  * Sets the collection view's layout, optionally with an animated transition\n  * from the current layout to the new layout.\n  * @param layout The layout to switch to.\n  * @param animated Whether to animate the layout change.\n  */\n\n\n  setLayout(layout) {\n    let animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (layout === this._layout) return;\n\n    let applyLayout = () => {\n      if (this._layout) // @ts-ignore\n        this._layout.virtualizer = null;\n      layout.virtualizer = this;\n      this._layout = layout;\n    };\n\n    if (animated) // Animated layout transitions are really simple, thanks to our transaction support.\n      // We just set the layout inside a transaction action, which runs after the initial\n      // layout infos for the animation are retrieved from the previous layout. Then, the\n      // final layout infos are retrieved from the new layout, and animations occur.\n      this._runTransaction(applyLayout);else {\n      applyLayout();\n      this.relayout();\n    }\n  }\n\n  _getReuseType(layoutInfo, content) {\n    if (layoutInfo.type === \"item\" && content) {\n      let type = this.delegate.getType ? this.delegate.getType(content) : \"item\";\n      let reuseType = type === \"item\" ? \"item\" : layoutInfo.type + \"_\" + type;\n      return {\n        type: type,\n        reuseType: reuseType\n      };\n    }\n\n    return {\n      type: layoutInfo.type,\n      reuseType: layoutInfo.type\n    };\n  }\n\n  getReusableView(layoutInfo) {\n    let content = this.getItem(layoutInfo.key);\n\n    let {\n      reuseType: reuseType\n    } = this._getReuseType(layoutInfo, content);\n\n    if (!this._reusableViews[reuseType]) this._reusableViews[reuseType] = [];\n    let reusable = this._reusableViews[reuseType];\n    let view = reusable.length > 0 ? reusable.pop() : new (0, $ad1d98aa8f0c31b4$export$1a5223887c560441)(this);\n    view.viewType = reuseType;\n\n    if (!this._animatedContentOffset.isOrigin()) {\n      layoutInfo = layoutInfo.copy();\n      layoutInfo.rect.x += this._animatedContentOffset.x;\n      layoutInfo.rect.y += this._animatedContentOffset.y;\n    }\n\n    view.layoutInfo = layoutInfo;\n\n    this._renderView(view);\n\n    return view;\n  }\n\n  _renderView(reusableView) {\n    let {\n      type: type,\n      key: key\n    } = reusableView.layoutInfo;\n    reusableView.content = this.getItem(key);\n    reusableView.rendered = this._renderContent(type, reusableView.content);\n  }\n\n  _renderContent(type, content) {\n    let cached = this._renderedContent.get(content);\n\n    if (cached != null) return cached;\n    let rendered = this.delegate.renderView(type, content);\n    if (content) this._renderedContent.set(content, rendered);\n    return rendered;\n  }\n  /**\n  * Returns an array of all currently visible views, including both\n  * item views and supplementary views.\n  */\n\n\n  get visibleViews() {\n    return Array.from(this._visibleViews.values());\n  }\n  /**\n  * Gets the visible view for the given type and key. Returns null if\n  * the view is not currently visible.\n  *\n  * @param key The key of the view to retrieve.\n  */\n\n\n  getView(key) {\n    return this._visibleViews.get(key) || null;\n  }\n  /**\n  * Returns an array of visible views matching the given type.\n  * @param type The view type to find.\n  */\n\n\n  getViewsOfType(type) {\n    return this.visibleViews.filter(v => v.layoutInfo && v.layoutInfo.type === type);\n  }\n  /**\n  * Returns the key for the given view. Returns null\n  * if the view is not currently visible.\n  */\n\n\n  keyForView(view) {\n    if (view && view.layoutInfo) return view.layoutInfo.key;\n    return null;\n  }\n  /**\n  * Returns the key for the item view currently at the given point.\n  */\n\n\n  keyAtPoint(point) {\n    let rect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(point.x, point.y, 1, 1);\n    let layoutInfos = this.layout.getVisibleLayoutInfos(rect); // Layout may return multiple layout infos in the case of\n    // persisted keys, so find the first one that actually intersects.\n\n    for (let layoutInfo of layoutInfos) {\n      if (layoutInfo.rect.intersects(rect)) return layoutInfo.key;\n    }\n\n    return null;\n  }\n  /**\n  * Cleanup for when the Virtualizer will be unmounted.\n  */\n\n\n  willUnmount() {\n    cancelAnimationFrame(this._relayoutRaf);\n  }\n  /**\n  * Triggers a layout invalidation, and updates the visible subviews.\n  */\n\n\n  relayout() {\n    let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // Ignore relayouts while animating the scroll position\n    if (this._scrollAnimation || typeof requestAnimationFrame === \"undefined\") return; // If we already scheduled a relayout, extend the invalidation\n    // context so we coalesce multiple relayouts in the same frame.\n\n    if (this._invalidationContext) {\n      Object.assign(this._invalidationContext, context);\n      return;\n    }\n\n    this._invalidationContext = context;\n    this._relayoutRaf = requestAnimationFrame(() => {\n      this._relayoutRaf = null;\n      this.relayoutNow();\n    });\n  }\n  /**\n  * Performs a relayout immediately. Prefer {@link relayout} over this method\n  * where possible, since it coalesces multiple layout passes in the same tick.\n  */\n\n\n  relayoutNow() {\n    let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._invalidationContext || {};\n\n    // Cancel the scheduled relayout, since we're doing it now.\n    if (this._relayoutRaf) {\n      cancelAnimationFrame(this._relayoutRaf);\n      this._relayoutRaf = null; // Update the provided context with the current invalidationContext since we are cancelling\n      // a scheduled relayoutNow call that has this._invalidationContext set as its default context arg (relayoutNow() in relayout)\n\n      context = { ...this._invalidationContext,\n        ...context\n      };\n    } // Reset the invalidation context\n\n\n    this._invalidationContext = null; // Do nothing if we don't have a layout or content, or we are\n    // in the middle of an animated scroll transition.\n\n    if (!this.layout || !this._collection || this._scrollAnimation) return;\n\n    let scrollAnchor = this._getScrollAnchor(); // Trigger the beforeLayout hook, if provided\n\n\n    if (typeof context.beforeLayout === \"function\") context.beforeLayout(); // Validate the layout\n\n    this.layout.validate(context);\n\n    this._setContentSize(this.layout.getContentSize()); // Trigger the afterLayout hook, if provided\n\n\n    if (typeof context.afterLayout === \"function\") context.afterLayout(); // Adjust scroll position based on scroll anchor, and constrain.\n    // If the content changed, scroll to the top.\n\n    let visibleRect = this.getVisibleRect();\n\n    let restoredScrollAnchor = this._restoreScrollAnchor(scrollAnchor, context);\n\n    let contentOffsetX = context.contentChanged ? 0 : restoredScrollAnchor.x;\n    let contentOffsetY = context.contentChanged ? 0 : restoredScrollAnchor.y;\n    contentOffsetX = Math.max(0, Math.min(this.contentSize.width - visibleRect.width, contentOffsetX));\n    contentOffsetY = Math.max(0, Math.min(this.contentSize.height - visibleRect.height, contentOffsetY));\n    let hasLayoutUpdates = false;\n\n    if (contentOffsetX !== visibleRect.x || contentOffsetY !== visibleRect.y) {\n      // If this is an animated relayout, we do not immediately scroll because it would be jittery.\n      // Save the difference between the current and new content offsets, and apply it to the\n      // individual content items instead. At the end of the animation, we'll reset and set the\n      // scroll offset for real. This ensures jitter-free animation since we don't need to sync\n      // the scroll animation and the content animation.\n      if (context.animated || !this._animatedContentOffset.isOrigin()) {\n        this._animatedContentOffset.x += visibleRect.x - contentOffsetX;\n        this._animatedContentOffset.y += visibleRect.y - contentOffsetY;\n        hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n      } else this._setContentOffset(new (0, $3041db3296945e6e$export$baf26146a414f24a)(contentOffsetX, contentOffsetY));\n    } else hasLayoutUpdates = this.updateSubviews(context.contentChanged); // Apply layout infos, unless this is coming from an animated transaction\n\n\n    if (!(context.transaction && context.animated)) this._applyLayoutInfos(); // Wait for animations, and apply the afterAnimation hook, if provided\n\n    if (context.animated && hasLayoutUpdates) {\n      this._enableTransitions();\n\n      let done = () => {\n        this._disableTransitions(); // Reset scroll position after animations (see above comment).\n\n\n        if (!this._animatedContentOffset.isOrigin()) {\n          // Get the content offset to scroll to, taking _animatedContentOffset into account.\n          let {\n            x: x,\n            y: y\n          } = this.getVisibleRect();\n\n          this._resetAnimatedContentOffset();\n\n          this._setContentOffset(new (0, $3041db3296945e6e$export$baf26146a414f24a)(x, y));\n        }\n\n        if (typeof context.afterAnimation === \"function\") context.afterAnimation();\n      }; // Sometimes the animation takes slightly longer than expected.\n\n\n      setTimeout(done, this.transitionDuration + 100);\n      return;\n    } else if (typeof context.afterAnimation === \"function\") context.afterAnimation();\n  }\n  /**\n  * Corrects DOM order of visible views to match item order of collection.\n  */\n\n\n  _correctItemOrder() {\n    // Defer until after scrolling and animated transactions are complete\n    if (this._isScrolling || this._transaction) return;\n\n    for (let key of this._visibleLayoutInfos.keys()) {\n      let view = this._visibleViews.get(key);\n\n      this._children.delete(view);\n\n      this._children.add(view);\n    }\n  }\n\n  _enableTransitions() {\n    this.delegate.beginAnimations();\n  }\n\n  _disableTransitions() {\n    this.delegate.endAnimations();\n  }\n\n  _getScrollAnchor() {\n    if (!this.anchorScrollPosition) return null;\n    let visibleRect = this.getVisibleRect(); // Ask the delegate to provide a scroll anchor, if possible\n\n    if (this.delegate.getScrollAnchor) {\n      let key = this.delegate.getScrollAnchor(visibleRect);\n\n      if (key != null) {\n        let layoutInfo = this.layout.getLayoutInfo(key);\n        let corner = layoutInfo.rect.getCornerInRect(visibleRect);\n\n        if (corner) {\n          let key1 = layoutInfo.key;\n          let offset = layoutInfo.rect[corner].y - visibleRect.y;\n          return {\n            key: key1,\n            layoutInfo: layoutInfo,\n            corner: corner,\n            offset: offset\n          };\n        }\n      }\n    } // No need to anchor the scroll position if it is at the top\n\n\n    if (visibleRect.y === 0 && !this.anchorScrollPositionAtTop) return null; // Find a view with a visible corner that has the smallest distance to the top of the collection view\n\n    let cornerAnchor = null;\n\n    for (let [key2, view] of this._visibleViews) {\n      let layoutInfo1 = view.layoutInfo;\n\n      if (layoutInfo1 && layoutInfo1.rect.area > 0) {\n        let corner1 = layoutInfo1.rect.getCornerInRect(visibleRect);\n\n        if (corner1) {\n          let offset1 = layoutInfo1.rect[corner1].y - visibleRect.y;\n          if (!cornerAnchor || offset1 < cornerAnchor.offset) cornerAnchor = {\n            key: key2,\n            layoutInfo: layoutInfo1,\n            corner: corner1,\n            offset: offset1\n          };\n        }\n      }\n    }\n\n    return cornerAnchor;\n  }\n\n  _restoreScrollAnchor(scrollAnchor, context) {\n    let contentOffset = this.getVisibleRect();\n\n    if (scrollAnchor) {\n      var _context_transaction;\n\n      let finalAnchor = ((_context_transaction = context.transaction) === null || _context_transaction === void 0 ? void 0 : _context_transaction.animated) ? context.transaction.finalMap.get(scrollAnchor.key) : this.layout.getLayoutInfo(scrollAnchor.layoutInfo.key);\n\n      if (finalAnchor) {\n        let adjustment = finalAnchor.rect[scrollAnchor.corner].y - contentOffset.y - scrollAnchor.offset;\n        contentOffset.y += adjustment;\n      }\n    }\n\n    return contentOffset;\n  }\n\n  getVisibleRect() {\n    let v = this.visibleRect;\n    let x = v.x - this._animatedContentOffset.x;\n    let y = v.y - this._animatedContentOffset.y;\n    return new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(x, y, v.width, v.height);\n  }\n\n  getVisibleLayoutInfos() {\n    let rect = this.shouldOverscan ? this._overscanManager.getOverscannedRect() : this.getVisibleRect();\n    this._visibleLayoutInfos = this._getLayoutInfoMap(rect);\n    return this._visibleLayoutInfos;\n  }\n\n  _getLayoutInfoMap(rect) {\n    let copy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n    let map = new Map();\n\n    for (let layoutInfo of layoutInfos) {\n      if (copy) layoutInfo = layoutInfo.copy();\n      map.set(layoutInfo.key, layoutInfo);\n    }\n\n    return map;\n  }\n\n  updateSubviews() {\n    let forceUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (!this._collection) return;\n    let visibleLayoutInfos = this.getVisibleLayoutInfos();\n    let currentlyVisible = this._visibleViews;\n    let toAdd, toRemove, toUpdate; // If this is a force update, remove and re-add all views.\n    // Otherwise, find and update the diff.\n\n    if (forceUpdate) {\n      toAdd = visibleLayoutInfos;\n      toRemove = currentlyVisible;\n      toUpdate = new Set();\n    } else {\n      ({\n        toAdd: toAdd,\n        toRemove: toRemove,\n        toUpdate: toUpdate\n      } = (0, $fc36f9a046a9ce79$export$acaf96a27438246b)(currentlyVisible, visibleLayoutInfos));\n\n      for (let key of toUpdate) {\n        let view = currentlyVisible.get(key);\n        if (!view || !view.layoutInfo) continue;\n        let item = this.getItem(visibleLayoutInfos.get(key).key);\n        if (view.content === item) toUpdate.delete(key);else {\n          // If the view type changes, delete and recreate the view instead of updating\n          let {\n            reuseType: reuseType\n          } = this._getReuseType(view.layoutInfo, item);\n\n          if (view.viewType !== reuseType) {\n            toUpdate.delete(key);\n            toAdd.add(key);\n            toRemove.add(key);\n          }\n        }\n      } // We are done if the sets are equal\n\n\n      if (toAdd.size === 0 && toRemove.size === 0 && toUpdate.size === 0) {\n        if (this._transaction) this._applyLayoutInfos();\n        return;\n      }\n    } // Track views that should be removed. They are not removed from\n    // the DOM immediately, since we may reuse and need to re-insert\n    // them back into the DOM anyway.\n\n\n    let removed = new Set();\n\n    for (let key1 of toRemove.keys()) {\n      let view1 = this._visibleViews.get(key1);\n\n      if (view1) {\n        removed.add(view1);\n\n        this._visibleViews.delete(key1); // If we are in the middle of a transaction, wait until the end\n        // of the animations to remove the views from the DOM. Also means\n        // we can't reuse those views immediately.\n\n\n        if (this._transaction) this._transaction.toRemove.set(key1, view1);else this.reuseView(view1);\n      }\n    }\n\n    for (let key2 of toAdd.keys()) {\n      let layoutInfo = visibleLayoutInfos.get(key2);\n      let view2; // If we're in a transaction, and a layout change happens\n      // during the animations such that a view that was going\n      // to be removed is now not, we don't create a new view\n      // since the old one is still in the DOM, marked as toRemove.\n\n      if (this._transaction) {\n        // if transaction, get initial layout attributes for the animation\n        if (this._transaction.initialLayoutInfo.has(key2)) layoutInfo = this._transaction.initialLayoutInfo.get(key2);\n        view2 = this._transaction.toRemove.get(key2);\n\n        if (view2) {\n          this._transaction.toRemove.delete(key2);\n\n          this._applyLayoutInfo(view2, layoutInfo);\n        }\n      }\n\n      if (!view2) {\n        // Create or reuse a view for this row\n        view2 = this.getReusableView(layoutInfo); // Add the view to the DOM if needed\n\n        if (!removed.has(view2)) this._children.add(view2);\n      }\n\n      this._visibleViews.set(key2, view2);\n\n      removed.delete(view2);\n    }\n\n    for (let key3 of toUpdate) {\n      let view3 = currentlyVisible.get(key3);\n\n      this._renderedContent.delete(key3);\n\n      this._renderView(view3);\n    } // Remove the remaining rows to delete from the DOM\n\n\n    if (!this._transaction) this.removeViews(removed);\n\n    this._correctItemOrder();\n\n    this._flushVisibleViews();\n\n    let hasLayoutUpdates = this._transaction && (toAdd.size > 0 || toRemove.size > 0 || this._hasLayoutUpdates());\n\n    if (hasLayoutUpdates) requestAnimationFrame(() => {\n      // If we're in a transaction, apply animations to visible views\n      // and \"to be removed\" views, which animate off screen.\n      if (this._transaction) requestAnimationFrame(() => this._applyLayoutInfos());\n    });\n    return hasLayoutUpdates;\n  }\n\n  afterRender() {\n    if (this.shouldOverscan) this._overscanManager.collectMetrics();\n  }\n\n  _flushVisibleViews() {\n    // CollectionVirtualizer deals with a flattened set of LayoutInfos, but they can represent heirarchy\n    // by referencing a parentKey. Just before rendering the visible views, we rebuild this heirarchy\n    // by creating a mapping of views by parent key and recursively calling the delegate's renderWrapper\n    // method to build the final tree.\n    let viewsByParentKey = new Map([[null, []]]);\n\n    for (let view of this._children) {\n      var _view_layoutInfo, _viewsByParentKey_get, _view_layoutInfo1, _view_layoutInfo2, _view_layoutInfo3;\n\n      if (((_view_layoutInfo = view.layoutInfo) === null || _view_layoutInfo === void 0 ? void 0 : _view_layoutInfo.parentKey) != null && !viewsByParentKey.has(view.layoutInfo.parentKey)) viewsByParentKey.set(view.layoutInfo.parentKey, []);\n      (_viewsByParentKey_get = viewsByParentKey.get((_view_layoutInfo1 = view.layoutInfo) === null || _view_layoutInfo1 === void 0 ? void 0 : _view_layoutInfo1.parentKey)) === null || _viewsByParentKey_get === void 0 ? void 0 : _viewsByParentKey_get.push(view);\n      if (!viewsByParentKey.has((_view_layoutInfo2 = view.layoutInfo) === null || _view_layoutInfo2 === void 0 ? void 0 : _view_layoutInfo2.key)) viewsByParentKey.set((_view_layoutInfo3 = view.layoutInfo) === null || _view_layoutInfo3 === void 0 ? void 0 : _view_layoutInfo3.key, []);\n    }\n\n    let buildTree = (parent, views) => views.map(view => {\n      let children = viewsByParentKey.get(view.layoutInfo.key);\n      return this.delegate.renderWrapper(parent, view, children, childViews => buildTree(view, childViews));\n    });\n\n    let children = buildTree(null, viewsByParentKey.get(null));\n    this.delegate.setVisibleViews(children);\n  }\n\n  _applyLayoutInfo(view, layoutInfo) {\n    if (view.layoutInfo === layoutInfo) return false;\n    view.layoutInfo = layoutInfo;\n    return true;\n  }\n\n  _applyLayoutInfos() {\n    let updated = false; // Apply layout infos to visible views\n\n    for (let view of this._visibleViews.values()) {\n      let cur = view.layoutInfo;\n\n      if ((cur === null || cur === void 0 ? void 0 : cur.key) != null) {\n        let layoutInfo = this.layout.getLayoutInfo(cur.key);\n        if (this._applyLayoutInfo(view, layoutInfo)) updated = true;\n      }\n    } // Apply final layout infos for views that will be removed\n\n\n    if (this._transaction) {\n      for (let view1 of this._transaction.toRemove.values()) {\n        let cur1 = view1.layoutInfo;\n\n        if ((cur1 === null || cur1 === void 0 ? void 0 : cur1.key) != null) {\n          let layoutInfo1 = this.layout.getLayoutInfo(cur1.key);\n          if (this._applyLayoutInfo(view1, layoutInfo1)) updated = true;\n        }\n      }\n\n      for (let view2 of this._transaction.removed.values()) {\n        let cur2 = view2.layoutInfo;\n        let layoutInfo2 = this._transaction.finalLayoutInfo.get(cur2.key) || cur2;\n        layoutInfo2 = this.layout.getFinalLayoutInfo(layoutInfo2.copy());\n        if (this._applyLayoutInfo(view2, layoutInfo2)) updated = true;\n      }\n    }\n\n    if (updated) this._flushVisibleViews();\n  }\n\n  _hasLayoutUpdates() {\n    if (!this._transaction) return false;\n\n    for (let view of this._visibleViews.values()) {\n      let cur = view.layoutInfo;\n      if (!cur) return true;\n      let layoutInfo = this.layout.getLayoutInfo(cur.key);\n      if ( // Uses equals rather than pointEquals so that width/height changes are taken into account\n      !cur.rect.equals(layoutInfo.rect) || cur.opacity !== layoutInfo.opacity || cur.transform !== layoutInfo.transform) return true;\n    }\n\n    return false;\n  }\n\n  reuseView(view) {\n    view.prepareForReuse();\n\n    this._reusableViews[view.viewType].push(view);\n  }\n\n  removeViews(toRemove) {\n    for (let view of toRemove) this._children.delete(view);\n  }\n\n  updateItemSize(key, size) {\n    // TODO: we should be able to invalidate a single index path\n    // @ts-ignore\n    if (!this.layout.updateItemSize) return; // If the scroll position is currently animating, add the update\n    // to a queue to be processed after the animation is complete.\n\n    if (this._scrollAnimation) {\n      this._sizeUpdateQueue.set(key, size);\n\n      return;\n    } // @ts-ignore\n\n\n    let changed = this.layout.updateItemSize(key, size);\n    if (changed) this.relayout();\n  }\n\n  startScrolling() {\n    this._isScrolling = true;\n  }\n\n  endScrolling() {\n    this._isScrolling = false;\n\n    this._correctItemOrder();\n\n    this._flushVisibleViews();\n  }\n\n  _resetAnimatedContentOffset() {\n    // Reset the animated content offset of subviews. See comment in relayoutNow for details.\n    if (!this._animatedContentOffset.isOrigin()) {\n      this._animatedContentOffset = new (0, $3041db3296945e6e$export$baf26146a414f24a)(0, 0);\n\n      this._applyLayoutInfos();\n    }\n  }\n  /**\n  * Scrolls the item with the given key into view, optionally with an animation.\n  * @param key The key of the item to scroll into view.\n  * @param duration The duration of the scroll animation.\n  */\n\n\n  scrollToItem(key, options) {\n    // key can be 0, so check if null or undefined\n    if (key == null) return;\n    let layoutInfo = this.layout.getLayoutInfo(key);\n    if (!layoutInfo) return;\n    let {\n      duration = 300,\n      shouldScrollX = true,\n      shouldScrollY = true,\n      offsetX = 0,\n      offsetY = 0\n    } = options;\n    let x = this.visibleRect.x;\n    let y = this.visibleRect.y;\n    let minX = layoutInfo.rect.x - offsetX;\n    let minY = layoutInfo.rect.y - offsetY;\n    let maxX = x + this.visibleRect.width;\n    let maxY = y + this.visibleRect.height;\n\n    if (shouldScrollX) {\n      if (minX <= x || maxX === 0) x = minX;else if (layoutInfo.rect.maxX > maxX) x += layoutInfo.rect.maxX - maxX;\n    }\n\n    if (shouldScrollY) {\n      if (minY <= y || maxY === 0) y = minY;else if (layoutInfo.rect.maxY > maxY) y += layoutInfo.rect.maxY - maxY;\n    }\n\n    return this.scrollTo(new (0, $3041db3296945e6e$export$baf26146a414f24a)(x, y), duration);\n  }\n  /**\n  * Performs an animated scroll to the given offset.\n  * @param offset - The offset to scroll to.\n  * @param duration The duration of the animation.\n  * @returns A promise that resolves when the animation is complete.\n  */\n\n\n  scrollTo(offset) {\n    let duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 300;\n\n    // Cancel the current scroll animation\n    if (this._scrollAnimation) {\n      this._scrollAnimation.cancel();\n\n      this._scrollAnimation = null;\n    } // Set the content offset synchronously if the duration is zero\n\n\n    if (duration <= 0 || this.visibleRect.pointEquals(offset)) {\n      this._setContentOffset(offset);\n\n      return Promise.resolve();\n    }\n\n    this.startScrolling();\n    this._scrollAnimation = (0, $3eb131dcf37ad5f8$export$dc0b63720788090c)(this.visibleRect, offset, duration, (0, $3eb131dcf37ad5f8$export$57636bb43b1ccbb0), offset => {\n      this._setContentOffset(offset);\n    });\n\n    this._scrollAnimation.then(() => {\n      this._scrollAnimation = null; // Process view size updates that occurred during the animation.\n      // Only views that are still visible will be actually updated.\n\n      for (let [key, size] of this._sizeUpdateQueue) this.updateItemSize(key, size);\n\n      this._sizeUpdateQueue.clear();\n\n      this.relayout();\n\n      this._processTransactionQueue();\n\n      this.endScrolling();\n    });\n\n    return this._scrollAnimation;\n  }\n\n  _runTransaction(action, animated) {\n    this._startTransaction();\n\n    if (this._nextTransaction) this._nextTransaction.actions.push(action);\n\n    this._endTransaction(animated);\n  }\n\n  _startTransaction() {\n    if (!this._nextTransaction) this._nextTransaction = new (0, $8e135e531d8dcb66$export$febc5573c75cefb0)();\n    this._nextTransaction.level++;\n  }\n\n  _endTransaction(animated) {\n    if (!this._nextTransaction) return false; // Save whether the transaction should be animated.\n\n    if (animated != null) this._nextTransaction.animated = animated; // If we haven't reached level 0, we are still in a\n    // nested transaction. Wait for the parent to end.\n\n    if (--this._nextTransaction.level > 0) return false; // Do nothing for empty transactions\n\n    if (this._nextTransaction.actions.length === 0) {\n      this._nextTransaction = null;\n      return false;\n    } // Default animations to true\n\n\n    if (this._nextTransaction.animated == null) this._nextTransaction.animated = true; // Enqueue the transaction\n\n    this._transactionQueue.push(this._nextTransaction);\n\n    this._nextTransaction = null;\n\n    this._processTransactionQueue();\n\n    return true;\n  }\n\n  _processTransactionQueue() {\n    // If the current transaction is animating, wait until the end\n    // to process the next transaction.\n    if (this._transaction || this._scrollAnimation) return;\n\n    let next = this._transactionQueue.shift();\n\n    if (next) this._performTransaction(next);\n  }\n\n  _getContentRect() {\n    return new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(0, 0, this.contentSize.width, this.contentSize.height);\n  }\n\n  _performTransaction(transaction) {\n    this._transaction = transaction;\n    this.relayoutNow({\n      transaction: transaction,\n      animated: transaction.animated,\n      beforeLayout: () => {\n        // Get the initial layout infos for all views before the updates\n        // so we can figure out which views to add and remove.\n        if (transaction.animated) transaction.initialMap = this._getLayoutInfoMap(this._getContentRect(), true); // Apply the actions that occurred during this transaction\n\n        for (let action of transaction.actions) action();\n      },\n      afterLayout: () => {\n        // Get the final layout infos after the updates\n        if (transaction.animated) {\n          transaction.finalMap = this._getLayoutInfoMap(this._getContentRect());\n\n          this._setupTransactionAnimations(transaction);\n        } else this._transaction = null;\n      },\n      afterAnimation: () => {\n        // Remove and reuse views when animations are done\n        if (transaction.toRemove.size > 0 || transaction.removed.size > 0) for (let view of (0, $fc36f9a046a9ce79$export$cfc14088dfefce5f)(transaction.toRemove.values(), transaction.removed.values())) {\n          this._children.delete(view);\n\n          this.reuseView(view);\n        }\n        this._transaction = null; // Ensure DOM order is correct for accessibility after animations are complete\n\n        this._correctItemOrder();\n\n        this._flushVisibleViews();\n\n        this._processTransactionQueue();\n      }\n    });\n  }\n\n  _setupTransactionAnimations(transaction) {\n    let {\n      initialMap: initialMap,\n      finalMap: finalMap\n    } = transaction; // Store initial and final layout infos for animations\n\n    for (let [key, layoutInfo] of initialMap) if (finalMap.has(key)) // Store the initial layout info for use during animations.\n      transaction.initialLayoutInfo.set(key, layoutInfo);else // This view was removed. Store the layout info for use\n      // in Layout#getFinalLayoutInfo during animations.\n      transaction.finalLayoutInfo.set(layoutInfo.key, layoutInfo); // Get initial layout infos for views that were added\n\n\n    for (let [key1, layoutInfo1] of finalMap) if (!initialMap.has(key1)) {\n      let initialLayoutInfo = this.layout.getInitialLayoutInfo(layoutInfo1.copy());\n      transaction.initialLayoutInfo.set(key1, initialLayoutInfo);\n    } // Figure out which views were removed.\n\n\n    for (let [key2, view] of this._visibleViews) // If an item has a width of 0, there is no need to remove it from the _visibleViews.\n    // Removing an item with  width of 0 can cause a loop where the item gets added, removed,\n    // added, removed... etc in a loop.\n    if (!finalMap.has(key2) && view.layoutInfo.rect.width > 0) {\n      transaction.removed.set(key2, view);\n\n      this._visibleViews.delete(key2); // In case something weird happened, where we have a view but no\n      // initial layout info, use the one attached to the view.\n\n\n      if (view.layoutInfo) {\n        if (!transaction.finalLayoutInfo.has(view.layoutInfo.key)) transaction.finalLayoutInfo.set(view.layoutInfo.key, view.layoutInfo);\n      }\n    }\n  }\n\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this._contentSize = new (0, $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec)();\n    this._visibleRect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)();\n    this._reusableViews = {};\n    this._visibleLayoutInfos = new Map();\n    this._visibleViews = new Map();\n    this._renderedContent = new WeakMap();\n    this._children = new Set();\n    this._invalidationContext = null;\n    this._overscanManager = new (0, $364191b3decf3697$export$4455ee6afb38dcbb)();\n    this._persistedKeys = new Set();\n    this._scrollAnimation = null;\n    this._isScrolling = false;\n    this._sizeUpdateQueue = new Map();\n    this._animatedContentOffset = new (0, $3041db3296945e6e$export$baf26146a414f24a)(0, 0);\n    this._transaction = null;\n    this._nextTransaction = null;\n    this._transactionQueue = [];\n\n    var _options_transitionDuration; // Set options from passed object if given\n\n\n    this.transitionDuration = (_options_transitionDuration = options.transitionDuration) !== null && _options_transitionDuration !== void 0 ? _options_transitionDuration : 500;\n    this.anchorScrollPosition = options.anchorScrollPosition || false;\n    this.anchorScrollPositionAtTop = options.anchorScrollPositionAtTop || false;\n    this.shouldOverscan = options.shouldOverscan !== false;\n\n    for (let key of [\"delegate\", \"size\", \"layout\", \"collection\"]) if (options[key]) this[key] = options[key];\n  }\n\n}\n\nfunction $fc0b13b484ac1194$export$1505db82fe357e65(opts) {\n  let [visibleViews, setVisibleViews] = (0, $8D3nr$useState)([]);\n  let [contentSize, setContentSize] = (0, $8D3nr$useState)(new (0, $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec)());\n  let [isAnimating, setAnimating] = (0, $8D3nr$useState)(false);\n  let [isScrolling, setScrolling] = (0, $8D3nr$useState)(false);\n  let virtualizer = (0, $8D3nr$useMemo)(() => new (0, $38b9490c1cca8fc4$export$89be5a243e59c4b2)(), []);\n  virtualizer.delegate = {\n    setVisibleViews: setVisibleViews,\n\n    setVisibleRect(rect) {\n      virtualizer.visibleRect = rect;\n      opts.onVisibleRectChange(rect);\n    },\n\n    setContentSize: setContentSize,\n    renderView: opts.renderView,\n    renderWrapper: opts.renderWrapper,\n    beginAnimations: () => setAnimating(true),\n    endAnimations: () => setAnimating(false),\n    getScrollAnchor: opts.getScrollAnchor\n  };\n  virtualizer.layout = opts.layout;\n  virtualizer.collection = opts.collection;\n  virtualizer.transitionDuration = opts.transitionDuration;\n  (0, $8D3nr$useLayoutEffect)(() => {\n    virtualizer.afterRender();\n  }); // eslint-disable-next-line arrow-body-style\n\n  (0, $8D3nr$useEffect)(() => {\n    return () => virtualizer.willUnmount(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  let setVisibleRect = (0, $8D3nr$useCallback)(rect => {\n    virtualizer.visibleRect = rect;\n  }, [virtualizer]);\n  let startScrolling = (0, $8D3nr$useCallback)(() => {\n    virtualizer.startScrolling();\n    setScrolling(true);\n  }, [virtualizer]);\n  let endScrolling = (0, $8D3nr$useCallback)(() => {\n    virtualizer.endScrolling();\n    setScrolling(false);\n  }, [virtualizer]);\n  let state = (0, $8D3nr$useMemo)(() => ({\n    virtualizer: virtualizer,\n    visibleViews: visibleViews,\n    setVisibleRect: setVisibleRect,\n    contentSize: contentSize,\n    isAnimating: isAnimating,\n    isScrolling: isScrolling,\n    startScrolling: startScrolling,\n    endScrolling: endScrolling\n  }), [virtualizer, visibleViews, setVisibleRect, contentSize, isAnimating, isScrolling, startScrolling, endScrolling]);\n  return state;\n}\n\nexport { $c74cda7d31af1253$export$c84671f46d6a1ca as Layout, $d7fd61009c21d0bb$export$7e0eeb9da702a085 as LayoutInfo, $3041db3296945e6e$export$baf26146a414f24a as Point, $60423f92c7f9ad87$export$c79fc6492f3af13d as Rect, $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec as Size, $ad1d98aa8f0c31b4$export$1a5223887c560441 as ReusableView, $fc0b13b484ac1194$export$1505db82fe357e65 as useVirtualizerState };","map":{"version":3,"mappings":"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","names":["$c74cda7d31af1253$export$c84671f46d6a1ca","shouldInvalidate","newRect","oldRect","width","height","validate","invalidationContext","getInitialLayoutInfo","layoutInfo","getFinalLayoutInfo","$d7fd61009c21d0bb$export$7e0eeb9da702a085","copy","res","type","key","rect","estimatedSize","opacity","transform","parentKey","isSticky","zIndex","allowOverflow","constructor","$3041db3296945e6e$export$baf26146a414f24a","x","y","equals","point","isOrigin","$60423f92c7f9ad87$export$c79fc6492f3af13d","maxX","maxY","intersects","containsRect","containsPoint","getCornerInRect","pointEquals","sizeEquals","size","union","other","Math","min","max","intersection","$ee1bfa90a957fb8a$export$cb6da89c6af1a8ec","$ad1d98aa8f0c31b4$var$KEY","$ad1d98aa8f0c31b4$export$1a5223887c560441","prepareForReuse","content","rendered","virtualizer","$3eb131dcf37ad5f8$var$perf","window","performance","$3eb131dcf37ad5f8$var$perfNow","now","webkitNow","msNow","mozNow","$3eb131dcf37ad5f8$var$getTime","bind","Date","getTime","$3eb131dcf37ad5f8$var$fixTs","$3eb131dcf37ad5f8$export$dc0b63720788090c","begin","end","duration","ease","fn","canceled","raf_id","promise","Promise","resolve","start","diffX","diffY","requestAnimationFrame","run","t","delta","proceed","cancel","cancelAnimationFrame","$3eb131dcf37ad5f8$export$77860c106b4a6a2e","$3eb131dcf37ad5f8$export$57636bb43b1ccbb0","sin","PI","$fc36f9a046a9ce79$export$37a26b283fd7740e","a","b","Set","keys","has","add","$fc36f9a046a9ce79$export$acaf96a27438246b","toRemove","toAdd","toUpdate","$fc36f9a046a9ce79$export$cfc14088dfefce5f","iterators","iterator","$fc36f9a046a9ce79$export$6897c284b6f9f4dc","object","$fc36f9a046a9ce79$export$a8d0d0c8d1c5df64","$364191b3decf3697$var$RollingAverage","addSample","sample","count","value","$364191b3decf3697$export$4455ee6afb38dcbb","setVisibleRect","time","startTime","averageTime","visibleRect","velocity","collectMetrics","averagePerf","o","abs","overscanY","o1","overscanX","getOverscannedRect","overscanned","round","$8e135e531d8dcb66$export$febc5573c75cefb0","Map","$38b9490c1cca8fc4$export$89be5a243e59c4b2","_setContentSize","_contentSize","delegate","setContentSize","_setContentOffset","offset","_visibleRect","_setVisibleRect","forceUpdate","current","shouldOverscan","_overscanManager","layout","_resetAnimatedContentOffset","relayout","offsetChanged","sizeChanged","updateSubviews","_collection","data","_setData","_runTransaction","transitionDuration","reloadData","contentChanged","getItem","_persistedKeys","persistedKeys","isPersistedKey","k","getLayoutInfo","_layout","setLayout","animated","applyLayout","_getReuseType","getType","reuseType","getReusableView","_reusableViews","reusable","view","length","pop","viewType","_animatedContentOffset","_renderView","reusableView","_renderContent","cached","_renderedContent","get","renderView","set","Array","from","_visibleViews","values","getView","getViewsOfType","visibleViews","filter","v","keyForView","keyAtPoint","layoutInfos","getVisibleLayoutInfos","willUnmount","_relayoutRaf","context","_scrollAnimation","_invalidationContext","Object","assign","relayoutNow","scrollAnchor","_getScrollAnchor","beforeLayout","getContentSize","afterLayout","getVisibleRect","restoredScrollAnchor","_restoreScrollAnchor","contentOffsetX","contentOffsetY","contentSize","hasLayoutUpdates","transaction","_applyLayoutInfos","_enableTransitions","done","_disableTransitions","afterAnimation","setTimeout","_correctItemOrder","_isScrolling","_transaction","_visibleLayoutInfos","_children","delete","beginAnimations","endAnimations","anchorScrollPosition","getScrollAnchor","corner","key1","anchorScrollPositionAtTop","cornerAnchor","key2","layoutInfo1","area","corner1","offset1","contentOffset","_context_transaction","finalAnchor","finalMap","adjustment","_getLayoutInfoMap","map","visibleLayoutInfos","currentlyVisible","item","removed","view1","reuseView","view2","initialLayoutInfo","_applyLayoutInfo","key3","view3","removeViews","_flushVisibleViews","_hasLayoutUpdates","afterRender","viewsByParentKey","_view_layoutInfo","_viewsByParentKey_get","_view_layoutInfo1","_view_layoutInfo2","_view_layoutInfo3","push","buildTree","parent","views","children","renderWrapper","childViews","setVisibleViews","updated","cur","cur1","cur2","layoutInfo2","finalLayoutInfo","updateItemSize","_sizeUpdateQueue","changed","startScrolling","endScrolling","scrollToItem","options","shouldScrollX","shouldScrollY","offsetX","offsetY","minX","minY","scrollTo","then","clear","_processTransactionQueue","action","_startTransaction","_nextTransaction","actions","_endTransaction","level","_transactionQueue","next","shift","_performTransaction","_getContentRect","initialMap","_setupTransactionAnimations","WeakMap","_options_transitionDuration","$fc0b13b484ac1194$export$1505db82fe357e65","opts","isAnimating","setAnimating","isScrolling","setScrolling","onVisibleRectChange","collection","state"],"sources":["/Users/vux/dev/react-project1/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/index.ts","/Users/vux/dev/react-project1/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/Layout.ts","/Users/vux/dev/react-project1/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/LayoutInfo.ts","/Users/vux/dev/react-project1/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/Point.ts","/Users/vux/dev/react-project1/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/Rect.ts","/Users/vux/dev/react-project1/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/Size.ts","/Users/vux/dev/react-project1/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/ReusableView.ts","/Users/vux/dev/react-project1/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/useVirtualizerState.ts","/Users/vux/dev/react-project1/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/Virtualizer.ts","/Users/vux/dev/react-project1/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/tween.ts","/Users/vux/dev/react-project1/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/utils.ts","/Users/vux/dev/react-project1/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/OverscanManager.ts","/Users/vux/dev/react-project1/node_modules/@react-stately/virtualizer/dist/packages/@react-stately/virtualizer/src/Transaction.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {InvalidationContext} from './types';\nexport type {VirtualizerState} from './useVirtualizerState';\nexport type {RectCorner} from './Rect';\n\nexport {Layout} from './Layout';\nexport {LayoutInfo} from './LayoutInfo';\nexport {Point} from './Point';\nexport {Rect} from './Rect';\nexport {Size} from './Size';\nexport {ReusableView} from './ReusableView';\nexport {useVirtualizerState} from './useVirtualizerState';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {InvalidationContext} from './types';\nimport {Key} from 'react';\nimport {LayoutInfo} from './LayoutInfo';\n// import {Point} from './Point';\nimport {Rect} from './Rect';\nimport {Size} from './Size';\nimport {Virtualizer} from './Virtualizer';\n// import { DragTarget, DropTarget } from '@react-types/shared';\n\n/**\n * [CollectionView]{@link CollectionView} supports arbitrary layout objects, which compute what views are visible, and how\n * to position and style them. However, layouts do not create the views themselves directly. Instead,\n * layouts produce lightweight {@link LayoutInfo} objects which describe various properties of a view,\n * such as its position and size. The {@link CollectionView} is then responsible for creating the actual\n * views as needed, based on this layout information.\n *\n * Every layout extends from the {@link Layout} abstract base class. Layouts must implement a minimum of the\n * two methods listed below. All other methods can be optionally overridden to implement custom behavior.\n *\n * @see {@link getVisibleLayoutInfos}\n * @see {@link getLayoutInfo}\n */\nexport abstract class Layout<T extends object> {\n  /** The CollectionView the layout is currently attached to. */\n  virtualizer: Virtualizer<T, any, any>;\n\n  /**\n   * Returns whether the layout should invalidate in response to\n   * visible rectangle changes. By default, it only invalidates\n   * when the collection view's size changes. Return true always\n   * to make the layout invalidate while scrolling (e.g. sticky headers).\n   */\n  shouldInvalidate(newRect: Rect, oldRect: Rect): boolean {\n    // By default, invalidate when the size changes\n    return newRect.width !== oldRect.width\n        || newRect.height !== oldRect.height;\n  }\n\n  /**\n   * This method allows the layout to perform any pre-computation\n   * it needs to in order to prepare {@link LayoutInfo}s for retrieval.\n   * Called by the collection view before {@link getVisibleLayoutInfos}\n   * or {@link getLayoutInfo} are called.\n   */\n  validate(invalidationContext: InvalidationContext<T, any>) {} // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Returns an array of {@link LayoutInfo} objects which are inside the given rectangle.\n   * Should be implemented by subclasses.\n   * @param rect The rectangle that should contain the returned LayoutInfo objects.\n   */\n  abstract getVisibleLayoutInfos(rect: Rect): LayoutInfo[];\n\n  /**\n   * Returns a {@link LayoutInfo} for the given key.\n   * Should be implemented by subclasses.\n   * @param key The key of the LayoutInfo to retrieve.\n   */\n  abstract getLayoutInfo(key: Key): LayoutInfo;\n\n  /**\n   * Returns size of the content. By default, it returns collectionView's size.\n   */\n  abstract getContentSize(): Size;\n\n  /**\n   * Returns a {@link DragTarget} describing a view at the given point to be dragged.\n   * Return `null` to cancel the drag. The default implementation returns the view at the given point.\n   * @param point The point at which the drag occurred.\n   */\n  // getDragTarget(point: Point): DragTarget | null {\n  //   let target = this.virtualizer.keyAtPoint(point);\n  //   if (!target) {\n  //     return null;\n  //   }\n\n  //   return {\n  //     type: 'item',\n  //     key: target\n  //   };\n  // }\n\n  /**\n   * Returns a {@link DragTarget} object describing where a drop should occur. Return `null`\n   * to reject the drop. The dropped items will be inserted before the resulting target.\n   * @param point The point at which the drop occurred.\n   */\n  // getDropTarget(point: Point): DropTarget | null {\n  //   return null;\n  // }\n\n  /**\n   * Returns the starting attributes for an animated insertion.\n   * The view is animated from this {@link LayoutInfo} to the one returned by {@link getLayoutInfo}.\n   * The default implementation just returns its input.\n   *\n   * @param layoutInfo The proposed LayoutInfo for this view.\n   */\n  getInitialLayoutInfo(layoutInfo: LayoutInfo): LayoutInfo {\n    return layoutInfo;\n  }\n\n  /**\n   * Returns the ending attributes for an animated removal.\n   * The view is animated from the {@link LayoutInfo} returned by {@link getLayoutInfo}\n   * to the one returned by this method. The default implementation returns its input.\n   *\n   * @param layoutInfo The original LayoutInfo for this view.\n   */\n  getFinalLayoutInfo(layoutInfo: LayoutInfo): LayoutInfo {\n    return layoutInfo;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {Rect} from './Rect';\n\n/**\n * Instances of this lightweight class are created by {@link Layout} subclasses\n * to represent each view in the {@link CollectionView}. LayoutInfo objects describe\n * various properties of a view, such as its position and size, and style information.\n * The collection view uses this information when creating actual views to display.\n */\nexport class LayoutInfo {\n  /**\n   * A string representing the view type. Should be `'item'` for item views.\n   * Other types are used by supplementary views.\n   */\n  type: string;\n\n  /**\n   * A unique key for this view. For item views, it should match the content key.\n   */\n  key: Key;\n\n  /**\n   * The key for a parent layout info, if any.\n   */\n  parentKey: Key | null;\n\n  /**\n   * The rectangle describing the size and position of this view.\n   */\n  rect: Rect;\n\n  /**\n   * Whether the size is estimated. `false` by default.\n   */\n  estimatedSize: boolean;\n\n  /**\n   * Whether the layout info sticks to the viewport when scrolling.\n   */\n  isSticky: boolean;\n\n  /**\n   * The view's opacity. 1 by default.\n   */\n  opacity: number;\n\n  /**\n   * A CSS transform string to apply to the view. `null` by default.\n   */\n  transform: string | null;\n\n  /**\n   * The z-index of the view. 0 by default.\n   */\n  zIndex: number;\n\n  /**\n   * Whether the layout info allows its contents to overflow its container.\n   * @default false\n   */\n  allowOverflow: boolean;\n\n  /**\n   * @param type A string representing the view type. Should be `'item'` for item views.\n                            Other types are used by supplementary views.\n   * @param key The unique key for this view.\n   * @param rect The rectangle describing the size and position of this view.\n   */\n  constructor(type: string, key: Key, rect: Rect) {\n    this.type = type;\n    this.key = key;\n    this.parentKey = null;\n    this.rect = rect;\n    this.estimatedSize = false;\n    this.isSticky = false;\n    this.opacity = 1;\n    this.transform = null;\n    this.zIndex = 0;\n    this.allowOverflow = false;\n  }\n\n  /**\n   * Returns a copy of the LayoutInfo.\n   */\n  copy(): LayoutInfo {\n    let res = new LayoutInfo(this.type, this.key, this.rect.copy());\n    res.estimatedSize = this.estimatedSize;\n    res.opacity = this.opacity;\n    res.transform = this.transform;\n    res.parentKey = this.parentKey;\n    res.isSticky = this.isSticky;\n    res.zIndex = this.zIndex;\n    res.allowOverflow = this.allowOverflow;\n    return res;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport class Point {\n  /** The x-coordinate of the point. */\n  x: number;\n\n  /** The y-coordinate of the point. */\n  y: number;\n\n  constructor(x = 0, y = 0) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Returns a copy of this point.\n   */\n  copy(): Point {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * Checks if two points are equal.\n   */\n  equals(point: Point): boolean {\n    return this.x === point.x && this.y === point.y;\n  }\n\n  /**\n   * Returns true if this point is the origin.\n   */\n  isOrigin(): boolean {\n    return this.x === 0 && this.y === 0;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Point} from './Point';\nimport {Size} from './Size';\n\nexport type RectCorner = 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';\n\n/**\n * Represents a rectangle.\n */\nexport class Rect {\n  /** The x-coordinate of the rectangle. */\n  x: number;\n\n  /** The y-coordinate of the rectangle. */\n  y: number;\n\n  /** The width of the rectangle. */\n  width: number;\n\n  /** The height of the rectangle. */\n  height: number;\n\n  constructor(x = 0, y = 0, width = 0, height = 0) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * The maximum x-coordinate in the rectangle.\n   */\n  get maxX(): number {\n    return this.x + this.width;\n  }\n\n  /**\n   * The maximum y-coordinate in the rectangle.\n   */\n  get maxY(): number {\n    return this.y + this.height;\n  }\n\n  /**\n   * The area of the rectangle.\n   */\n  get area(): number {\n    return this.width * this.height;\n  }\n\n  /**\n   * The top left corner of the rectangle.\n   */\n  get topLeft(): Point {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * The top right corner of the rectangle.\n   */\n  get topRight(): Point {\n    return new Point(this.maxX, this.y);\n  }\n\n  /**\n   * The bottom left corner of the rectangle.\n   */\n  get bottomLeft(): Point {\n    return new Point(this.x, this.maxY);\n  }\n\n  /**\n   * The bottom right corner of the rectangle.\n   */\n  get bottomRight(): Point {\n    return new Point(this.maxX, this.maxY);\n  }\n\n  /**\n   * Returns whether this rectangle intersects another rectangle.\n   * @param rect - The rectangle to check.\n   */\n  intersects(rect: Rect): boolean {\n    return this.x <= rect.x + rect.width\n        && rect.x <= this.x + this.width\n        && this.y <= rect.y + rect.height\n        && rect.y <= this.y + this.height;\n  }\n\n  /**\n   * Returns whether this rectangle fully contains another rectangle.\n   * @param rect - The rectangle to check.\n   */\n  containsRect(rect: Rect): boolean {\n    return this.x <= rect.x\n        && this.y <= rect.y\n        && this.maxX >= rect.maxX\n        && this.maxY >= rect.maxY;\n  }\n\n  /**\n   * Returns whether the rectangle contains the given point.\n   * @param point - The point to check.\n   */\n  containsPoint(point: Point): boolean {\n    return this.x <= point.x\n        && this.y <= point.y\n        && this.maxX >= point.x\n        && this.maxY >= point.y;\n  }\n\n  /**\n   * Returns the first corner of this rectangle (from top to bottom, left to right)\n   * that is contained in the given rectangle, or null of the rectangles do not intersect.\n   * @param rect - The rectangle to check.\n   */\n  getCornerInRect(rect: Rect): RectCorner | null {\n    for (let key of ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']) {\n      if (rect.containsPoint(this[key])) {\n        return key as RectCorner;\n      }\n    }\n\n    return null;\n  }\n\n  equals(rect: Rect) {\n    return rect.x === this.x\n        && rect.y === this.y\n        && rect.width === this.width\n        && rect.height === this.height;\n  }\n\n  pointEquals(point: Point | Rect) {\n    return this.x === point.x\n        && this.y === point.y;\n  }\n\n  sizeEquals(size: Size | Rect) {\n    return this.width === size.width\n        && this.height === size.height;\n  }\n\n  /**\n   * Returns the union of this Rect and another.\n   */\n  union(other: Rect) {\n    let x = Math.min(this.x, other.x);\n    let y = Math.min(this.y, other.y);\n    let width = Math.max(this.maxX, other.maxX) - x;\n    let height = Math.max(this.maxY, other.maxY) - y;\n    return new Rect(x, y, width, height);\n  }\n\n  /**\n   * Returns the intersection of this Rect with another.\n   * If the rectangles do not intersect, an all zero Rect is returned.\n   */\n  intersection(other: Rect): Rect {\n    if (!this.intersects(other)) {\n      return new Rect(0, 0, 0, 0);\n    }\n\n    let x = Math.max(this.x, other.x);\n    let y = Math.max(this.y, other.y);\n    return new Rect(\n      x,\n      y,\n      Math.min(this.maxX, other.maxX) - x,\n      Math.min(this.maxY, other.maxY) - y\n    );\n  }\n\n  /**\n   * Returns a copy of this rectangle.\n   */\n  copy(): Rect {\n    return new Rect(this.x, this.y, this.width, this.height);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport class Size {\n  width: number;\n  height: number;\n\n  constructor(width = 0, height = 0) {\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * Returns a copy of this size.\n   */\n  copy(): Size {\n    return new Size(this.width, this.height);\n  }\n\n  /**\n   * Returns whether this size is equal to another one.\n   */\n  equals(other: Size): boolean {\n    return this.width === other.width\n        && this.height === other.height;\n  }\n\n  /**\n   * The total area of the Size.\n   */\n  get area() {\n    return this.width * this.height;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {LayoutInfo} from './LayoutInfo';\nimport {Virtualizer} from './Virtualizer';\n\nlet KEY = 0;\n\n/**\n * [CollectionView]{@link CollectionView} creates instances of the [ReusableView]{@link ReusableView} class to\n * represent views currently being displayed. ReusableViews manage a DOM node, handle\n * applying {@link LayoutInfo} objects to the view, and render content\n * as needed. Subclasses must implement the {@link render} method at a\n * minimum. Other methods can be overridden to customize behavior.\n */\nexport class ReusableView<T extends object, V> {\n  /** The CollectionVirtualizer this view is a part of. */\n  virtualizer: Virtualizer<T, V, unknown>;\n\n  /** The LayoutInfo this view is currently representing. */\n  layoutInfo: LayoutInfo | null;\n\n  /** The content currently being displayed by this view, set by the collection view. */\n  content: T;\n\n  rendered: V;\n\n  viewType: string;\n  key: Key;\n\n  constructor(virtualizer: Virtualizer<T, V, unknown>) {\n    this.virtualizer = virtualizer;\n    this.key = ++KEY;\n  }\n\n  /**\n   * Prepares the view for reuse. Called just before the view is removed from the DOM.\n   */\n  prepareForReuse() {\n    this.content = null;\n    this.rendered = null;\n    this.layoutInfo = null;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection} from '@react-types/shared';\nimport {Key, useCallback, useEffect, useMemo, useState} from 'react';\nimport {Layout} from './Layout';\nimport {Rect} from './Rect';\nimport {ReusableView} from './ReusableView';\nimport {Size} from './Size';\nimport {useLayoutEffect} from '@react-aria/utils';\nimport {Virtualizer} from './Virtualizer';\n\ninterface VirtualizerProps<T extends object, V, W> {\n  renderView(type: string, content: T): V,\n  renderWrapper(\n    parent: ReusableView<T, V> | null,\n    reusableView: ReusableView<T, V>,\n    children: ReusableView<T, V>[],\n    renderChildren: (views: ReusableView<T, V>[]) => W[]\n  ): W,\n  layout: Layout<T>,\n  collection: Collection<T>,\n  onVisibleRectChange(rect: Rect): void,\n  getScrollAnchor?(rect: Rect): Key,\n  transitionDuration?: number\n}\n\nexport interface VirtualizerState<T extends object, V, W> {\n  visibleViews: W[],\n  setVisibleRect: (rect: Rect) => void,\n  contentSize: Size,\n  isAnimating: boolean,\n  virtualizer: Virtualizer<T, V, W>,\n  isScrolling: boolean,\n  startScrolling: () => void,\n  endScrolling: () => void\n}\n\nexport function useVirtualizerState<T extends object, V, W>(opts: VirtualizerProps<T, V, W>): VirtualizerState<T, V, W> {\n  let [visibleViews, setVisibleViews] = useState<W[]>([]);\n  let [contentSize, setContentSize] = useState(new Size());\n  let [isAnimating, setAnimating] = useState(false);\n  let [isScrolling, setScrolling] = useState(false);\n  let virtualizer = useMemo(() => new Virtualizer<T, V, W>(), []);\n\n  virtualizer.delegate = {\n    setVisibleViews,\n    setVisibleRect(rect) {\n      virtualizer.visibleRect = rect;\n      opts.onVisibleRectChange(rect);\n    },\n    setContentSize,\n    renderView: opts.renderView,\n    renderWrapper: opts.renderWrapper,\n    beginAnimations: () => setAnimating(true),\n    endAnimations: () => setAnimating(false),\n    getScrollAnchor: opts.getScrollAnchor\n  };\n\n  virtualizer.layout = opts.layout;\n  virtualizer.collection = opts.collection;\n  virtualizer.transitionDuration = opts.transitionDuration;\n\n  useLayoutEffect(() => {\n    virtualizer.afterRender();\n  });\n\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => virtualizer.willUnmount();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let setVisibleRect = useCallback((rect) => {\n    virtualizer.visibleRect = rect;\n  }, [virtualizer]);\n  let startScrolling = useCallback(() => {\n    virtualizer.startScrolling();\n    setScrolling(true);\n  }, [virtualizer]);\n  let endScrolling = useCallback(() => {\n    virtualizer.endScrolling();\n    setScrolling(false);\n  }, [virtualizer]);\n\n  let state = useMemo(() => ({\n    virtualizer,\n    visibleViews,\n    setVisibleRect,\n    contentSize,\n    isAnimating,\n    isScrolling,\n    startScrolling,\n    endScrolling\n  }), [\n    virtualizer,\n    visibleViews,\n    setVisibleRect,\n    contentSize,\n    isAnimating,\n    isScrolling,\n    startScrolling,\n    endScrolling\n  ]);\n\n  return state;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CancelablePromise, easeOut, tween} from './tween';\nimport {Collection} from '@react-types/shared';\nimport {concatIterators, difference, isSetEqual} from './utils';\nimport {\n  InvalidationContext,\n  ScrollAnchor,\n  ScrollToItemOptions,\n  VirtualizerDelegate,\n  VirtualizerOptions\n} from './types';\nimport {Key} from 'react';\nimport {Layout} from './Layout';\nimport {LayoutInfo} from './LayoutInfo';\nimport {OverscanManager} from './OverscanManager';\nimport {Point} from './Point';\nimport {Rect} from './Rect';\nimport {ReusableView} from './ReusableView';\nimport {Size} from './Size';\nimport {Transaction} from './Transaction';\n\n/**\n * The CollectionView class renders a scrollable collection of data using customizable layouts,\n * and manages animated updates to the data over time. It supports very large collections by\n * only rendering visible views to the DOM, reusing them as you scroll. Collection views can\n * present any type of view, including non-item views such as section headers and footers.\n * Optionally, the {@link EditableCollectionView} subclass can be used to enable user interaction\n * with the collection, including drag and drop, multiple selection, and keyboard interacton.\n *\n * Collection views get their data from a {@link DataSource} object that you provide. Items are\n * grouped into sections by the data source, and the collection view calls its methods to retrieve\n * the data. When data changes, the data source emits change events, and the collection view\n * updates as appropriate, optionally with an animated transition. There is one built-in data source\n * implementation, {@link ArrayDataSource}, which renders content from a 2d array.\n *\n * Collection views use {@link Layout} objects to compute what views should be visible, and how\n * to position and style them. This means that collection views can have their items arranged in\n * a stack, a grid, a circle, or any other layout you can think of. The layout can be changed\n * dynamically at runtime as well, optionally with an animated transition between the layouts.\n *\n * Layouts produce information on what views should appear in the collection view, but do not create\n * the views themselves directly. It is the responsibility of the {@link CollectionViewDelegate} object\n * to create instances of {@link ReusableView} subclasses which render the items into DOM nodes.\n * The delegate determines what type of view to display for each item, and creates instances of\n * views as needed by the collection view. Those views are then reused by the collection view as\n * the user scrolls through the content.\n */\nexport class Virtualizer<T extends object, V, W> {\n  /**\n   * The collection view delegate. The delegate is used by the collection view\n   * to create and configure views.\n   */\n  delegate: VirtualizerDelegate<T, V, W>;\n\n  /** The duration of animated layout changes, in milliseconds. Default is 500ms. */\n  transitionDuration: number;\n\n  /**\n   * Whether to enable scroll anchoring. This will attempt to restore the scroll position\n   * after layout changes outside the viewport. Default is off.\n   */\n  anchorScrollPosition: boolean;\n\n  /** Whether to anchor the scroll position when at the top of the content. Default is off. */\n  anchorScrollPositionAtTop: boolean;\n\n  /**\n   * Whether to overscan the visible area to pre-render items slightly outside and\n   * improve performance. Default is on.\n   */\n  shouldOverscan: boolean;\n\n  private _collection: Collection<T>;\n  private _layout: Layout<T>;\n  private _contentSize: Size;\n  private _visibleRect: Rect;\n  private _visibleLayoutInfos: Map<Key, LayoutInfo>;\n  private _reusableViews: {[type: string]: ReusableView<T, V>[]};\n  private _visibleViews: Map<Key, ReusableView<T, V>>;\n  private _renderedContent: WeakMap<T, V>;\n  private _children: Set<ReusableView<T, V>>;\n  private _invalidationContext: InvalidationContext<T, V> | null;\n  private _overscanManager: OverscanManager;\n  private _persistedKeys: Set<Key>;\n  private _relayoutRaf: number | null;\n  private _scrollAnimation: CancelablePromise<void> | null;\n  private _isScrolling: boolean;\n  private _sizeUpdateQueue: Map<Key, Size>;\n  private _animatedContentOffset: Point;\n  private _transaction: Transaction<T, V> | null;\n  private _nextTransaction: Transaction<T, V> | null;\n  private _transactionQueue: Transaction<T, V>[];\n\n  constructor(options: VirtualizerOptions<T, V, W> = {}) {\n    this._contentSize = new Size;\n    this._visibleRect = new Rect;\n\n    this._reusableViews = {};\n    this._visibleLayoutInfos = new Map();\n    this._visibleViews = new Map();\n    this._renderedContent = new WeakMap();\n    this._children = new Set();\n    this._invalidationContext = null;\n    this._overscanManager = new OverscanManager();\n    this._persistedKeys = new Set();\n\n    this._scrollAnimation = null;\n    this._isScrolling = false;\n    this._sizeUpdateQueue = new Map();\n    this._animatedContentOffset = new Point(0, 0);\n\n    this._transaction = null;\n    this._nextTransaction = null;\n    this._transactionQueue = [];\n\n    // Set options from passed object if given\n    this.transitionDuration = options.transitionDuration ?? 500;\n    this.anchorScrollPosition = options.anchorScrollPosition || false;\n    this.anchorScrollPositionAtTop = options.anchorScrollPositionAtTop || false;\n    this.shouldOverscan = options.shouldOverscan !== false;\n    for (let key of ['delegate', 'size', 'layout', 'collection']) {\n      if (options[key]) {\n        this[key] = options[key];\n      }\n    }\n  }\n\n  _setContentSize(size: Size) {\n    this._contentSize = size;\n    this.delegate.setContentSize(size);\n  }\n\n  _setContentOffset(offset: Point) {\n    let rect = new Rect(offset.x, offset.y, this._visibleRect.width, this._visibleRect.height);\n    this.delegate.setVisibleRect(rect);\n  }\n\n  /**\n   * Get the size of the scrollable content.\n   */\n  get contentSize(): Size {\n    return this._contentSize;\n  }\n\n  /**\n   * Get the collection view's currently visible rectangle.\n   */\n  get visibleRect(): Rect {\n    return this._visibleRect;\n  }\n\n  /**\n   * Set the collection view's currently visible rectangle.\n   */\n  set visibleRect(rect: Rect) {\n    this._setVisibleRect(rect);\n  }\n\n  _setVisibleRect(rect: Rect, forceUpdate = false) {\n    let current = this._visibleRect;\n\n    // Ignore if the rects are equal\n    if (rect.equals(current)) {\n      return;\n    }\n\n    if (this.shouldOverscan) {\n      this._overscanManager.setVisibleRect(rect);\n    }\n\n    let shouldInvalidate = this.layout && this.layout.shouldInvalidate(rect, this._visibleRect);\n\n    this._resetAnimatedContentOffset();\n    this._visibleRect = rect;\n\n    if (shouldInvalidate) {\n      this.relayout({\n        offsetChanged: !rect.pointEquals(current),\n        sizeChanged: !rect.sizeEquals(current)\n      });\n    } else {\n      this.updateSubviews(forceUpdate);\n    }\n  }\n\n  get collection(): Collection<T> {\n    return this._collection;\n  }\n\n  set collection(data: Collection<T>) {\n    this._setData(data);\n  }\n\n  private _setData(data: Collection<T>) {\n    if (data === this._collection) {\n      return;\n    }\n\n    if (this._collection) {\n      this._runTransaction(() => {\n        this._collection = data;\n      }, this.transitionDuration > 0);\n    } else {\n      this._collection = data;\n      this.reloadData();\n    }\n  }\n\n  /**\n   * Reloads the data from the data source and relayouts the collection view.\n   * Does not animate any changes. Equivalent to re-assigning the same data source\n   * to the collection view.\n   */\n  reloadData() {\n    this.relayout({\n      contentChanged: true\n    });\n  }\n\n  /**\n   * Returns the item with the given key.\n   */\n  getItem(key: Key) {\n    return this._collection ? this._collection.getItem(key) : null;\n  }\n\n  /** The set of persisted keys are always present in the DOM, even if not currently in view. */\n  get persistedKeys(): Set<Key> {\n    return this._persistedKeys;\n  }\n\n  /** The set of persisted keys are always present in the DOM, even if not currently in view. */\n  set persistedKeys(persistedKeys: Set<Key>) {\n    if (!isSetEqual(persistedKeys, this._persistedKeys)) {\n      this._persistedKeys = persistedKeys;\n      this.updateSubviews();\n    }\n  }\n\n  /** Returns whether the given key, or an ancestor, is persisted. */\n  isPersistedKey(key: Key) {\n    // Quick check if the key is directly in the set of persisted keys.\n    if (this._persistedKeys.has(key)) {\n      return true;\n    }\n\n    // If not, check if the key is an ancestor of any of the persisted keys.\n    for (let k of this._persistedKeys) {\n      while (k != null) {\n        let layoutInfo = this.layout.getLayoutInfo(k);\n        if (!layoutInfo) {\n          break;\n        }\n\n        k = layoutInfo.parentKey;\n\n        if (k === key) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Get the collection view's layout.\n   */\n  get layout(): Layout<T> {\n    return this._layout;\n  }\n\n  /**\n   * Set the collection view's layout.\n   */\n  set layout(layout: Layout<T>) {\n    this.setLayout(layout);\n  }\n\n  /**\n   * Sets the collection view's layout, optionally with an animated transition\n   * from the current layout to the new layout.\n   * @param layout The layout to switch to.\n   * @param animated Whether to animate the layout change.\n   */\n  setLayout(layout: Layout<T>, animated = false) {\n    if (layout === this._layout) {\n      return;\n    }\n\n    let applyLayout = () => {\n      if (this._layout) {\n        // @ts-ignore\n        this._layout.virtualizer = null;\n      }\n\n      layout.virtualizer = this;\n      this._layout = layout;\n    };\n\n    if (animated) {\n      // Animated layout transitions are really simple, thanks to our transaction support.\n      // We just set the layout inside a transaction action, which runs after the initial\n      // layout infos for the animation are retrieved from the previous layout. Then, the\n      // final layout infos are retrieved from the new layout, and animations occur.\n      this._runTransaction(applyLayout);\n    } else {\n      applyLayout();\n      this.relayout();\n    }\n  }\n\n  private _getReuseType(layoutInfo: LayoutInfo, content: T | null) {\n    if (layoutInfo.type === 'item' && content) {\n      let type = this.delegate.getType ? this.delegate.getType(content) : 'item';\n      let reuseType = type === 'item' ? 'item' : layoutInfo.type + '_' + type;\n      return {type, reuseType};\n    }\n\n    return {\n      type: layoutInfo.type,\n      reuseType: layoutInfo.type\n    };\n  }\n\n  getReusableView(layoutInfo: LayoutInfo): ReusableView<T, V> {\n    let content = this.getItem(layoutInfo.key);\n    let {reuseType} = this._getReuseType(layoutInfo, content);\n\n    if (!this._reusableViews[reuseType]) {\n      this._reusableViews[reuseType] = [];\n    }\n\n    let reusable = this._reusableViews[reuseType];\n    let view = reusable.length > 0\n      ? reusable.pop()\n      : new ReusableView<T, V>(this);\n\n    view.viewType = reuseType;\n\n    if (!this._animatedContentOffset.isOrigin()) {\n      layoutInfo = layoutInfo.copy();\n      layoutInfo.rect.x += this._animatedContentOffset.x;\n      layoutInfo.rect.y += this._animatedContentOffset.y;\n    }\n\n    view.layoutInfo = layoutInfo;\n\n    this._renderView(view);\n    return view;\n  }\n\n  private _renderView(reusableView: ReusableView<T, V>) {\n    let {type, key} = reusableView.layoutInfo;\n    reusableView.content = this.getItem(key);\n    reusableView.rendered = this._renderContent(type, reusableView.content);\n  }\n\n  private _renderContent(type: string, content: T) {\n    let cached = this._renderedContent.get(content);\n    if (cached != null) {\n      return cached;\n    }\n\n    let rendered = this.delegate.renderView(type, content);\n    if (content) {\n      this._renderedContent.set(content, rendered);\n    }\n    return rendered;\n  }\n\n  /**\n   * Returns an array of all currently visible views, including both\n   * item views and supplementary views.\n   */\n  get visibleViews(): ReusableView<T, V>[] {\n    return Array.from(this._visibleViews.values());\n  }\n\n  /**\n   * Gets the visible view for the given type and key. Returns null if\n   * the view is not currently visible.\n   *\n   * @param key The key of the view to retrieve.\n   */\n  getView(key: Key): ReusableView<T, V> | null {\n    return this._visibleViews.get(key) || null;\n  }\n\n  /**\n   * Returns an array of visible views matching the given type.\n   * @param type The view type to find.\n   */\n  getViewsOfType(type: string): ReusableView<T, V>[] {\n    return this.visibleViews.filter(v => v.layoutInfo && v.layoutInfo.type === type);\n  }\n\n  /**\n   * Returns the key for the given view. Returns null\n   * if the view is not currently visible.\n   */\n  keyForView(view: ReusableView<T, V>): Key | null {\n    if (view && view.layoutInfo) {\n      return view.layoutInfo.key;\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns the key for the item view currently at the given point.\n   */\n  keyAtPoint(point: Point): Key | null {\n    let rect = new Rect(point.x, point.y, 1, 1);\n    let layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n\n    // Layout may return multiple layout infos in the case of\n    // persisted keys, so find the first one that actually intersects.\n    for (let layoutInfo of layoutInfos) {\n      if (layoutInfo.rect.intersects(rect)) {\n        return layoutInfo.key;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Cleanup for when the Virtualizer will be unmounted.\n   */\n  willUnmount() {\n    cancelAnimationFrame(this._relayoutRaf);\n  }\n\n  /**\n   * Triggers a layout invalidation, and updates the visible subviews.\n   */\n  relayout(context: InvalidationContext<T, V> = {}) {\n    // Ignore relayouts while animating the scroll position\n    if (this._scrollAnimation || typeof requestAnimationFrame === 'undefined') {\n      return;\n    }\n\n    // If we already scheduled a relayout, extend the invalidation\n    // context so we coalesce multiple relayouts in the same frame.\n    if (this._invalidationContext) {\n      Object.assign(this._invalidationContext, context);\n      return;\n    }\n\n    this._invalidationContext = context;\n    this._relayoutRaf = requestAnimationFrame(() => {\n      this._relayoutRaf = null;\n      this.relayoutNow();\n    });\n  }\n\n  /**\n   * Performs a relayout immediately. Prefer {@link relayout} over this method\n   * where possible, since it coalesces multiple layout passes in the same tick.\n   */\n  relayoutNow(context: InvalidationContext<T, V> = this._invalidationContext || {}) {\n    // Cancel the scheduled relayout, since we're doing it now.\n    if (this._relayoutRaf) {\n      cancelAnimationFrame(this._relayoutRaf);\n      this._relayoutRaf = null;\n      // Update the provided context with the current invalidationContext since we are cancelling\n      // a scheduled relayoutNow call that has this._invalidationContext set as its default context arg (relayoutNow() in relayout)\n      context = {...this._invalidationContext, ...context};\n    }\n\n    // Reset the invalidation context\n    this._invalidationContext = null;\n\n    // Do nothing if we don't have a layout or content, or we are\n    // in the middle of an animated scroll transition.\n    if (!this.layout || !this._collection || this._scrollAnimation) {\n      return;\n    }\n\n    let scrollAnchor = this._getScrollAnchor();\n\n    // Trigger the beforeLayout hook, if provided\n    if (typeof context.beforeLayout === 'function') {\n      context.beforeLayout();\n    }\n\n    // Validate the layout\n    this.layout.validate(context);\n    this._setContentSize(this.layout.getContentSize());\n\n    // Trigger the afterLayout hook, if provided\n    if (typeof context.afterLayout === 'function') {\n      context.afterLayout();\n    }\n\n    // Adjust scroll position based on scroll anchor, and constrain.\n    // If the content changed, scroll to the top.\n    let visibleRect = this.getVisibleRect();\n    let restoredScrollAnchor = this._restoreScrollAnchor(scrollAnchor, context);\n    let contentOffsetX = context.contentChanged ? 0 : restoredScrollAnchor.x;\n    let contentOffsetY = context.contentChanged ? 0 : restoredScrollAnchor.y;\n    contentOffsetX = Math.max(0, Math.min(this.contentSize.width - visibleRect.width, contentOffsetX));\n    contentOffsetY = Math.max(0, Math.min(this.contentSize.height - visibleRect.height, contentOffsetY));\n\n    let hasLayoutUpdates = false;\n    if (contentOffsetX !== visibleRect.x || contentOffsetY !== visibleRect.y) {\n      // If this is an animated relayout, we do not immediately scroll because it would be jittery.\n      // Save the difference between the current and new content offsets, and apply it to the\n      // individual content items instead. At the end of the animation, we'll reset and set the\n      // scroll offset for real. This ensures jitter-free animation since we don't need to sync\n      // the scroll animation and the content animation.\n      if (context.animated || !this._animatedContentOffset.isOrigin()) {\n        this._animatedContentOffset.x += visibleRect.x - contentOffsetX;\n        this._animatedContentOffset.y += visibleRect.y - contentOffsetY;\n        hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n      } else {\n        this._setContentOffset(new Point(contentOffsetX, contentOffsetY));\n      }\n    } else {\n      hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n    }\n\n    // Apply layout infos, unless this is coming from an animated transaction\n    if (!(context.transaction && context.animated)) {\n      this._applyLayoutInfos();\n    }\n\n    // Wait for animations, and apply the afterAnimation hook, if provided\n    if (context.animated && hasLayoutUpdates) {\n      this._enableTransitions();\n\n      let done = () => {\n        this._disableTransitions();\n\n        // Reset scroll position after animations (see above comment).\n        if (!this._animatedContentOffset.isOrigin()) {\n          // Get the content offset to scroll to, taking _animatedContentOffset into account.\n          let {x, y} = this.getVisibleRect();\n          this._resetAnimatedContentOffset();\n          this._setContentOffset(new Point(x, y));\n        }\n\n        if (typeof context.afterAnimation === 'function') {\n          context.afterAnimation();\n        }\n      };\n\n      // Sometimes the animation takes slightly longer than expected.\n      setTimeout(done, this.transitionDuration + 100);\n      return;\n    } else if (typeof context.afterAnimation === 'function') {\n      context.afterAnimation();\n    }\n  }\n\n  /**\n   * Corrects DOM order of visible views to match item order of collection.\n   */\n  private _correctItemOrder() {\n    // Defer until after scrolling and animated transactions are complete\n    if (this._isScrolling || this._transaction) {\n      return;\n    }\n\n    for (let key of this._visibleLayoutInfos.keys()) {\n      let view = this._visibleViews.get(key);\n      this._children.delete(view);\n      this._children.add(view);\n    }\n  }\n\n  private _enableTransitions() {\n    this.delegate.beginAnimations();\n  }\n\n  private _disableTransitions() {\n    this.delegate.endAnimations();\n  }\n\n  private _getScrollAnchor(): ScrollAnchor | null {\n    if (!this.anchorScrollPosition) {\n      return null;\n    }\n\n    let visibleRect = this.getVisibleRect();\n\n    // Ask the delegate to provide a scroll anchor, if possible\n    if (this.delegate.getScrollAnchor) {\n      let key = this.delegate.getScrollAnchor(visibleRect);\n      if (key != null) {\n        let layoutInfo = this.layout.getLayoutInfo(key);\n        let corner = layoutInfo.rect.getCornerInRect(visibleRect);\n        if (corner) {\n          let key = layoutInfo.key;\n          let offset = layoutInfo.rect[corner].y - visibleRect.y;\n          return {key, layoutInfo, corner, offset};\n        }\n      }\n    }\n\n    // No need to anchor the scroll position if it is at the top\n    if (visibleRect.y === 0 && !this.anchorScrollPositionAtTop) {\n      return null;\n    }\n\n    // Find a view with a visible corner that has the smallest distance to the top of the collection view\n    let cornerAnchor: ScrollAnchor | null = null;\n\n    for (let [key, view] of this._visibleViews) {\n      let layoutInfo = view.layoutInfo;\n      if (layoutInfo && layoutInfo.rect.area > 0) {\n        let corner = layoutInfo.rect.getCornerInRect(visibleRect);\n\n        if (corner) {\n          let offset = layoutInfo.rect[corner].y - visibleRect.y;\n          if (!cornerAnchor || (offset < cornerAnchor.offset)) {\n            cornerAnchor = {key, layoutInfo, corner, offset};\n          }\n        }\n      }\n    }\n\n    return cornerAnchor;\n  }\n\n  private _restoreScrollAnchor(scrollAnchor: ScrollAnchor | null, context: InvalidationContext<T, V>) {\n    let contentOffset = this.getVisibleRect();\n\n    if (scrollAnchor) {\n      let finalAnchor = context.transaction?.animated\n        ? context.transaction.finalMap.get(scrollAnchor.key)\n        : this.layout.getLayoutInfo(scrollAnchor.layoutInfo.key);\n\n      if (finalAnchor) {\n        let adjustment = (finalAnchor.rect[scrollAnchor.corner].y - contentOffset.y) - scrollAnchor.offset;\n        contentOffset.y += adjustment;\n      }\n    }\n\n    return contentOffset;\n  }\n\n  getVisibleRect(): Rect {\n    let v = this.visibleRect;\n    let x = v.x - this._animatedContentOffset.x;\n    let y = v.y - this._animatedContentOffset.y;\n    return new Rect(x, y, v.width, v.height);\n  }\n\n  getVisibleLayoutInfos() {\n    let rect = this.shouldOverscan ? this._overscanManager.getOverscannedRect() : this.getVisibleRect();\n    this._visibleLayoutInfos = this._getLayoutInfoMap(rect);\n    return this._visibleLayoutInfos;\n  }\n\n  private _getLayoutInfoMap(rect: Rect, copy = false) {\n    let layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n    let map = new Map;\n\n    for (let layoutInfo of layoutInfos) {\n      if (copy) {\n        layoutInfo = layoutInfo.copy();\n      }\n\n      map.set(layoutInfo.key, layoutInfo);\n    }\n\n    return map;\n  }\n\n  updateSubviews(forceUpdate = false) {\n    if (!this._collection) {\n      return;\n    }\n\n    let visibleLayoutInfos = this.getVisibleLayoutInfos();\n    let currentlyVisible = this._visibleViews;\n    let toAdd, toRemove, toUpdate;\n\n    // If this is a force update, remove and re-add all views.\n    // Otherwise, find and update the diff.\n    if (forceUpdate) {\n      toAdd = visibleLayoutInfos;\n      toRemove = currentlyVisible;\n      toUpdate = new Set();\n    } else {\n      ({toAdd, toRemove, toUpdate} = difference(currentlyVisible, visibleLayoutInfos));\n\n      for (let key of toUpdate) {\n        let view = currentlyVisible.get(key);\n        if (!view || !view.layoutInfo) {\n          continue;\n        }\n\n        let item = this.getItem(visibleLayoutInfos.get(key).key);\n        if (view.content === item) {\n          toUpdate.delete(key);\n        } else {\n          // If the view type changes, delete and recreate the view instead of updating\n          let {reuseType} = this._getReuseType(view.layoutInfo, item);\n          if (view.viewType !== reuseType) {\n            toUpdate.delete(key);\n            toAdd.add(key);\n            toRemove.add(key);\n          }\n        }\n      }\n\n      // We are done if the sets are equal\n      if (toAdd.size === 0 && toRemove.size === 0 && toUpdate.size === 0) {\n        if (this._transaction) {\n          this._applyLayoutInfos();\n        }\n\n        return;\n      }\n    }\n\n    // Track views that should be removed. They are not removed from\n    // the DOM immediately, since we may reuse and need to re-insert\n    // them back into the DOM anyway.\n    let removed = new Set<ReusableView<T, V>>();\n\n    for (let key of toRemove.keys()) {\n      let view = this._visibleViews.get(key);\n      if (view) {\n        removed.add(view);\n        this._visibleViews.delete(key);\n\n        // If we are in the middle of a transaction, wait until the end\n        // of the animations to remove the views from the DOM. Also means\n        // we can't reuse those views immediately.\n        if (this._transaction) {\n          this._transaction.toRemove.set(key, view);\n        } else {\n          this.reuseView(view);\n        }\n      }\n    }\n\n    for (let key of toAdd.keys()) {\n      let layoutInfo = visibleLayoutInfos.get(key);\n      let view: ReusableView<T, V> | void;\n\n      // If we're in a transaction, and a layout change happens\n      // during the animations such that a view that was going\n      // to be removed is now not, we don't create a new view\n      // since the old one is still in the DOM, marked as toRemove.\n      if (this._transaction) {\n        // if transaction, get initial layout attributes for the animation\n        if (this._transaction.initialLayoutInfo.has(key)) {\n          layoutInfo = this._transaction.initialLayoutInfo.get(key);\n        }\n\n        view = this._transaction.toRemove.get(key);\n        if (view) {\n          this._transaction.toRemove.delete(key);\n          this._applyLayoutInfo(view, layoutInfo);\n        }\n      }\n\n      if (!view) {\n        // Create or reuse a view for this row\n        view = this.getReusableView(layoutInfo);\n\n        // Add the view to the DOM if needed\n        if (!removed.has(view)) {\n          this._children.add(view);\n        }\n      }\n\n      this._visibleViews.set(key, view);\n      removed.delete(view);\n    }\n\n    for (let key of toUpdate) {\n      let view = currentlyVisible.get(key) as ReusableView<T, V>;\n      this._renderedContent.delete(key);\n      this._renderView(view);\n    }\n\n    // Remove the remaining rows to delete from the DOM\n    if (!this._transaction) {\n      this.removeViews(removed);\n    }\n\n    this._correctItemOrder();\n    this._flushVisibleViews();\n\n    let hasLayoutUpdates = this._transaction && (toAdd.size > 0 || toRemove.size > 0 || this._hasLayoutUpdates());\n    if (hasLayoutUpdates) {\n      requestAnimationFrame(() => {\n        // If we're in a transaction, apply animations to visible views\n        // and \"to be removed\" views, which animate off screen.\n        if (this._transaction) {\n          requestAnimationFrame(() => this._applyLayoutInfos());\n        }\n      });\n    }\n\n    return hasLayoutUpdates;\n  }\n\n  afterRender() {\n    if (this.shouldOverscan) {\n      this._overscanManager.collectMetrics();\n    }\n  }\n\n  private _flushVisibleViews() {\n    // CollectionVirtualizer deals with a flattened set of LayoutInfos, but they can represent heirarchy\n    // by referencing a parentKey. Just before rendering the visible views, we rebuild this heirarchy\n    // by creating a mapping of views by parent key and recursively calling the delegate's renderWrapper\n    // method to build the final tree.\n    let viewsByParentKey = new Map([[null, []]]);\n    for (let view of this._children) {\n      if (view.layoutInfo?.parentKey != null && !viewsByParentKey.has(view.layoutInfo.parentKey)) {\n        viewsByParentKey.set(view.layoutInfo.parentKey, []);\n      }\n\n      viewsByParentKey.get(view.layoutInfo?.parentKey)?.push(view);\n      if (!viewsByParentKey.has(view.layoutInfo?.key)) {\n        viewsByParentKey.set(view.layoutInfo?.key, []);\n      }\n    }\n\n    let buildTree = (parent: ReusableView<T, V>, views: ReusableView<T, V>[]): W[] => views.map(view => {\n      let children = viewsByParentKey.get(view.layoutInfo.key);\n      return this.delegate.renderWrapper(\n        parent,\n        view,\n        children,\n        (childViews) => buildTree(view, childViews)\n      );\n    });\n\n    let children = buildTree(null, viewsByParentKey.get(null));\n    this.delegate.setVisibleViews(children);\n  }\n\n  private _applyLayoutInfo(view: ReusableView<T, V>, layoutInfo: LayoutInfo) {\n    if (view.layoutInfo === layoutInfo) {\n      return false;\n    }\n\n    view.layoutInfo = layoutInfo;\n    return true;\n  }\n\n  private _applyLayoutInfos() {\n    let updated = false;\n\n    // Apply layout infos to visible views\n    for (let view of this._visibleViews.values()) {\n      let cur = view.layoutInfo;\n      if (cur?.key != null) {\n        let layoutInfo = this.layout.getLayoutInfo(cur.key);\n        if (this._applyLayoutInfo(view, layoutInfo)) {\n          updated = true;\n        }\n      }\n    }\n\n    // Apply final layout infos for views that will be removed\n    if (this._transaction) {\n      for (let view of this._transaction.toRemove.values()) {\n        let cur = view.layoutInfo;\n        if (cur?.key != null) {\n          let layoutInfo = this.layout.getLayoutInfo(cur.key);\n          if (this._applyLayoutInfo(view, layoutInfo)) {\n            updated = true;\n          }\n        }\n      }\n\n      for (let view of this._transaction.removed.values()) {\n        let cur = view.layoutInfo;\n        let layoutInfo = this._transaction.finalLayoutInfo.get(cur.key) || cur;\n        layoutInfo = this.layout.getFinalLayoutInfo(layoutInfo.copy());\n        if (this._applyLayoutInfo(view, layoutInfo)) {\n          updated = true;\n        }\n      }\n    }\n\n    if (updated) {\n      this._flushVisibleViews();\n    }\n  }\n\n  private _hasLayoutUpdates() {\n    if (!this._transaction) {\n      return false;\n    }\n\n    for (let view of this._visibleViews.values()) {\n      let cur = view.layoutInfo;\n      if (!cur) {\n        return true;\n      }\n\n      let layoutInfo = this.layout.getLayoutInfo(cur.key);\n      if (\n        // Uses equals rather than pointEquals so that width/height changes are taken into account\n        !cur.rect.equals(layoutInfo.rect) ||\n        cur.opacity !== layoutInfo.opacity ||\n        cur.transform !== layoutInfo.transform\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  reuseView(view: ReusableView<T, V>) {\n    view.prepareForReuse();\n    this._reusableViews[view.viewType].push(view);\n  }\n\n  removeViews(toRemove: Set<ReusableView<T, V>>) {\n    for (let view of toRemove) {\n      this._children.delete(view);\n    }\n  }\n\n  updateItemSize(key: Key, size: Size) {\n    // TODO: we should be able to invalidate a single index path\n    // @ts-ignore\n    if (!this.layout.updateItemSize) {\n      return;\n    }\n\n    // If the scroll position is currently animating, add the update\n    // to a queue to be processed after the animation is complete.\n    if (this._scrollAnimation) {\n      this._sizeUpdateQueue.set(key, size);\n      return;\n    }\n\n    // @ts-ignore\n    let changed = this.layout.updateItemSize(key, size);\n    if (changed) {\n      this.relayout();\n    }\n  }\n\n  startScrolling() {\n    this._isScrolling = true;\n  }\n\n  endScrolling() {\n    this._isScrolling = false;\n    this._correctItemOrder();\n    this._flushVisibleViews();\n  }\n\n  private _resetAnimatedContentOffset() {\n    // Reset the animated content offset of subviews. See comment in relayoutNow for details.\n    if (!this._animatedContentOffset.isOrigin()) {\n      this._animatedContentOffset = new Point(0, 0);\n      this._applyLayoutInfos();\n    }\n  }\n\n  /**\n   * Scrolls the item with the given key into view, optionally with an animation.\n   * @param key The key of the item to scroll into view.\n   * @param duration The duration of the scroll animation.\n   */\n  scrollToItem(key: Key, options?: ScrollToItemOptions) {\n    // key can be 0, so check if null or undefined\n    if (key == null) {\n      return;\n    }\n\n    let layoutInfo = this.layout.getLayoutInfo(key);\n    if (!layoutInfo) {\n      return;\n    }\n\n    let {\n      duration = 300,\n      shouldScrollX = true,\n      shouldScrollY = true,\n      offsetX = 0,\n      offsetY = 0\n    } = options;\n\n    let x = this.visibleRect.x;\n    let y = this.visibleRect.y;\n    let minX = layoutInfo.rect.x - offsetX;\n    let minY = layoutInfo.rect.y - offsetY;\n    let maxX = x + this.visibleRect.width;\n    let maxY = y + this.visibleRect.height;\n\n    if (shouldScrollX) {\n      if (minX <= x || maxX === 0) {\n        x = minX;\n      } else if (layoutInfo.rect.maxX > maxX) {\n        x += layoutInfo.rect.maxX - maxX;\n      }\n    }\n\n    if (shouldScrollY) {\n      if (minY <= y || maxY === 0) {\n        y = minY;\n      } else if (layoutInfo.rect.maxY > maxY) {\n        y += layoutInfo.rect.maxY - maxY;\n      }\n    }\n\n    return this.scrollTo(new Point(x, y), duration);\n  }\n\n  /**\n   * Performs an animated scroll to the given offset.\n   * @param offset - The offset to scroll to.\n   * @param duration The duration of the animation.\n   * @returns A promise that resolves when the animation is complete.\n   */\n  scrollTo(offset: Point, duration: number = 300): Promise<void> {\n    // Cancel the current scroll animation\n    if (this._scrollAnimation) {\n      this._scrollAnimation.cancel();\n      this._scrollAnimation = null;\n    }\n\n    // Set the content offset synchronously if the duration is zero\n    if (duration <= 0 || this.visibleRect.pointEquals(offset)) {\n      this._setContentOffset(offset);\n      return Promise.resolve();\n    }\n\n    this.startScrolling();\n\n    this._scrollAnimation = tween(this.visibleRect, offset, duration, easeOut, offset => {this._setContentOffset(offset);});\n    this._scrollAnimation.then(() => {\n      this._scrollAnimation = null;\n\n      // Process view size updates that occurred during the animation.\n      // Only views that are still visible will be actually updated.\n      for (let [key, size] of this._sizeUpdateQueue) {\n        this.updateItemSize(key, size);\n      }\n\n      this._sizeUpdateQueue.clear();\n      this.relayout();\n      this._processTransactionQueue();\n      this.endScrolling();\n    });\n\n    return this._scrollAnimation;\n  }\n\n  private _runTransaction(action: () => void, animated?: boolean) {\n    this._startTransaction();\n    if (this._nextTransaction) {\n      this._nextTransaction.actions.push(action);\n    }\n    this._endTransaction(animated);\n  }\n\n  private _startTransaction() {\n    if (!this._nextTransaction) {\n      this._nextTransaction = new Transaction;\n    }\n\n    this._nextTransaction.level++;\n  }\n\n  private _endTransaction(animated?: boolean) {\n    if (!this._nextTransaction) {\n      return false;\n    }\n\n    // Save whether the transaction should be animated.\n    if (animated != null) {\n      this._nextTransaction.animated = animated;\n    }\n\n    // If we haven't reached level 0, we are still in a\n    // nested transaction. Wait for the parent to end.\n    if (--this._nextTransaction.level > 0) {\n      return false;\n    }\n\n    // Do nothing for empty transactions\n    if (this._nextTransaction.actions.length === 0) {\n      this._nextTransaction = null;\n      return false;\n    }\n\n    // Default animations to true\n    if (this._nextTransaction.animated == null) {\n      this._nextTransaction.animated = true;\n    }\n\n    // Enqueue the transaction\n    this._transactionQueue.push(this._nextTransaction);\n    this._nextTransaction = null;\n\n    this._processTransactionQueue();\n    return true;\n  }\n\n  private _processTransactionQueue() {\n    // If the current transaction is animating, wait until the end\n    // to process the next transaction.\n    if (this._transaction || this._scrollAnimation) {\n      return;\n    }\n\n    let next = this._transactionQueue.shift();\n    if (next) {\n      this._performTransaction(next);\n    }\n  }\n\n  private _getContentRect(): Rect {\n    return new Rect(0, 0, this.contentSize.width, this.contentSize.height);\n  }\n\n  private _performTransaction(transaction: Transaction<T, V>) {\n    this._transaction = transaction;\n\n    this.relayoutNow({\n      transaction: transaction,\n      animated: transaction.animated,\n\n      beforeLayout: () => {\n        // Get the initial layout infos for all views before the updates\n        // so we can figure out which views to add and remove.\n        if (transaction.animated) {\n          transaction.initialMap = this._getLayoutInfoMap(this._getContentRect(), true);\n        }\n\n        // Apply the actions that occurred during this transaction\n        for (let action of transaction.actions) {\n          action();\n        }\n      },\n\n      afterLayout: () => {\n        // Get the final layout infos after the updates\n        if (transaction.animated) {\n          transaction.finalMap = this._getLayoutInfoMap(this._getContentRect());\n          this._setupTransactionAnimations(transaction);\n        } else {\n          this._transaction = null;\n        }\n      },\n\n      afterAnimation: () => {\n        // Remove and reuse views when animations are done\n        if (transaction.toRemove.size > 0 || transaction.removed.size > 0) {\n          for (let view of concatIterators(transaction.toRemove.values(), transaction.removed.values())) {\n            this._children.delete(view);\n            this.reuseView(view);\n          }\n        }\n\n        this._transaction = null;\n\n        // Ensure DOM order is correct for accessibility after animations are complete\n        this._correctItemOrder();\n        this._flushVisibleViews();\n\n        this._processTransactionQueue();\n      }\n    });\n  }\n\n  private _setupTransactionAnimations(transaction: Transaction<T, V>) {\n    let {initialMap, finalMap} = transaction;\n\n    // Store initial and final layout infos for animations\n    for (let [key, layoutInfo] of initialMap) {\n      if (finalMap.has(key)) {\n        // Store the initial layout info for use during animations.\n        transaction.initialLayoutInfo.set(key, layoutInfo);\n      } else {\n        // This view was removed. Store the layout info for use\n        // in Layout#getFinalLayoutInfo during animations.\n        transaction.finalLayoutInfo.set(layoutInfo.key, layoutInfo);\n      }\n    }\n\n    // Get initial layout infos for views that were added\n    for (let [key, layoutInfo] of finalMap) {\n      if (!initialMap.has(key)) {\n        let initialLayoutInfo = this.layout.getInitialLayoutInfo(layoutInfo.copy());\n        transaction.initialLayoutInfo.set(key, initialLayoutInfo);\n      }\n    }\n\n    // Figure out which views were removed.\n    for (let [key, view] of this._visibleViews) {\n      // If an item has a width of 0, there is no need to remove it from the _visibleViews.\n      // Removing an item with  width of 0 can cause a loop where the item gets added, removed,\n      // added, removed... etc in a loop.\n      if (!finalMap.has(key) && view.layoutInfo.rect.width > 0) {\n        transaction.removed.set(key, view);\n        this._visibleViews.delete(key);\n\n        // In case something weird happened, where we have a view but no\n        // initial layout info, use the one attached to the view.\n        if (view.layoutInfo) {\n          if (!transaction.finalLayoutInfo.has(view.layoutInfo.key)) {\n            transaction.finalLayoutInfo.set(view.layoutInfo.key, view.layoutInfo);\n          }\n        }\n      }\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Point} from './Point';\n\n// use high res timer if available\nlet perf = typeof window !== 'undefined' ? window.performance : null;\n// @ts-ignore\nlet perfNow = perf && (perf.now || perf.webkitNow || perf.msNow || perf.mozNow);\nlet getTime = perfNow ? perfNow.bind(perf) : function () {\n  return Date.now ? Date.now() : new Date().getTime();\n};\n\nlet fixTs: boolean;\n\nexport interface CancelablePromise<T> extends Promise<T> {\n  cancel(): void\n}\n\nexport function tween(begin, end, duration, ease, fn): CancelablePromise<void> {\n  let canceled = false;\n  let raf_id: number;\n\n  let promise = new Promise(resolve => {\n    let start = getTime();\n    let diffX = end.x - begin.x;\n    let diffY = end.y - begin.y;\n\n    raf_id = requestAnimationFrame(function run(t) {\n      // if we're using a high res timer, make sure timestamp is not the old epoch-based value.\n      // http://updates.html5rocks.com/2012/05/requestAnimationFrame-API-now-with-sub-millisecond-precision\n      if (fixTs == null) {\n        fixTs = t > 1e12 !== getTime() > 1e12;\n      }\n\n      if (fixTs) {\n        t = getTime();\n      }\n\n      // check if we're done\n      let delta = t - start;\n      if (delta > duration) {\n        fn(end);\n        resolve();\n      } else {\n        // call frame callback after computing eased time and get the next frame\n        let proceed = fn(new Point(\n          begin.x + diffX * ease(delta / duration),\n          begin.y + diffY * ease(delta / duration)\n        ));\n\n        if (proceed !== false && !canceled) {\n          raf_id = requestAnimationFrame(run);\n        }\n      }\n    });\n  }) as CancelablePromise<void>;\n\n  promise.cancel = function () {\n    canceled = true;\n    cancelAnimationFrame(raf_id);\n  };\n\n  return promise;\n}\n\n// easing functions\nexport function linearEasing(t) {\n  return t;\n}\n\nexport function easeOut(t) {\n  return Math.sin(t * Math.PI / 2);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport function keyDiff<T>(a: Map<T, any>, b: Map<T, any>): Set<T> {\n  let res = new Set<T>();\n\n  for (let key of a.keys()) {\n    if (!b.has(key)) {\n      res.add(key);\n    }\n  }\n\n  return res;\n}\n\n/**\n * Returns the key difference between two maps. Returns a set of\n * keys to add to and remove from a to make it equal to b.\n * @private\n */\nexport function difference<T>(a: Map<T, any>, b: Map<T, any>) {\n  let toRemove = keyDiff(a, b);\n  let toAdd = keyDiff(b, a);\n  let toUpdate = new Set;\n  for (let key of a.keys()) {\n    if (b.has(key)) {\n      toUpdate.add(key);\n    }\n  }\n  return {toRemove, toAdd, toUpdate};\n}\n\n/**\n * Returns an iterator that yields the items in all of the given iterators.\n * @private\n */\nexport function* concatIterators<T>(...iterators: Iterable<T>[]) {\n  for (let iterator of iterators) {\n    yield* iterator;\n  }\n}\n\n/**\n * Inverts the keys and values of an object.\n * @private\n */\nexport function invert(object) {\n  let res = {};\n  for (let key in object) {\n    res[object[key]] = key;\n  }\n\n  return res;\n}\n\n/** Returns whether two sets are equal. */\nexport function isSetEqual<T>(a: Set<T>, b: Set<T>): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  if (a.size !== b.size) {\n    return false;\n  }\n\n  for (let key of a) {\n    if (!b.has(key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Point} from './Point';\nimport {Rect} from './Rect';\n\nclass RollingAverage {\n  private count: number = 0;\n  value: number = 0;\n  \n  addSample(sample: number) {\n    this.count++;\n    this.value += (sample - this.value) / this.count;\n  }\n}\n\nexport class OverscanManager {\n  private startTime = 0;\n  private averagePerf = new RollingAverage();\n  private averageTime = new RollingAverage();\n  private velocity = new Point(5, 5);\n  private overscanX = new RollingAverage();\n  private overscanY = new RollingAverage();\n  private visibleRect = new Rect();\n  \n  setVisibleRect(rect: Rect) {\n    let time = performance.now() - this.startTime;\n    if (time < 500) {\n      this.averageTime.addSample(time);\n\n      if (rect.x !== this.visibleRect.x && time > 0) {\n        this.velocity.x = (rect.x - this.visibleRect.x) / time;\n      }\n\n      if (rect.y !== this.visibleRect.y && time > 0) {\n        this.velocity.y = (rect.y - this.visibleRect.y) / time;\n      }\n    }\n\n    this.startTime = performance.now();\n    this.visibleRect = rect;\n  }\n\n  collectMetrics() {\n    let time = performance.now() - this.startTime;\n    if (time < 500) {\n      this.averagePerf.addSample(time);\n    }\n\n    if (this.visibleRect.height > 0) {\n      let o = Math.abs(this.velocity.y * (this.averageTime.value + this.averagePerf.value));  \n      this.overscanY.addSample(o);\n    }\n\n    if (this.visibleRect.width > 0) {\n      let o = Math.abs(this.velocity.x * (this.averageTime.value + this.averagePerf.value));  \n      this.overscanX.addSample(o);\n    }\n  }\n\n  getOverscannedRect() {\n    let overscanned = this.visibleRect.copy();\n\n    let overscanY = Math.round(Math.min(this.visibleRect.height * 2, this.overscanY.value) / 100) * 100;\n    if (this.velocity.y > 0) {\n      overscanned.y -= overscanY * 0.2;\n      overscanned.height += overscanY + overscanY * 0.2;\n    } else {\n      overscanned.y -= overscanY;\n      overscanned.height += overscanY + overscanY * 0.2;\n    }\n\n    let overscanX = Math.round(Math.min(this.visibleRect.width * 2, this.overscanX.value) / 100) * 100;\n    if (this.velocity.x > 0) {\n      overscanned.x -= overscanX * 0.2;\n      overscanned.width += overscanX + overscanX * 0.2;\n    } else {\n      overscanned.x -= overscanX;\n      overscanned.width += overscanX + overscanX * 0.2;\n    }\n\n    return overscanned;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {LayoutInfo} from './LayoutInfo';\nimport {ReusableView} from './ReusableView';\n\ntype LayoutInfoMap = Map<Key, LayoutInfo>;\nexport class Transaction<T extends object, V> {\n  level = 0;\n  actions: (() => void)[] = [];\n  animated = true;\n  initialMap: LayoutInfoMap = new Map();\n  finalMap: LayoutInfoMap = new Map();\n  initialLayoutInfo: LayoutInfoMap = new Map();\n  finalLayoutInfo: LayoutInfoMap = new Map();\n  removed: Map<Key, ReusableView<T, V>> = new Map();\n  toRemove: Map<Key, ReusableView<T, V>> = new Map();\n}\n"]},"metadata":{},"sourceType":"module"}