{"ast":null,"code":"import e, { useRef as t, useImperativeHandle as r, useLayoutEffect as s } from \"react\";\nimport o from \"../utils/with-defaults\";\nimport i from \"../input\";\nimport n from \"../use-resize\";\nimport { warn as a } from \"../utils/console\";\nimport { excludedInputPropsForTextarea as m } from \"../utils/prop-types\";\nimport { __DEV__ as u } from \"../utils/assertion\";\nimport { calculateNodeHeight as c, getSizingData as l } from \"./utils\";\nimport { jsx as p } from \"react/jsx-runtime\";\nconst f = e.forwardRef((o, f) => {\n  const x = t(null),\n        h = e.useRef(0),\n        d = e.useRef(),\n        {\n    cacheMeasurements: g,\n    rows: y,\n    maxRows: w,\n    minRows: R,\n    onChange: H,\n    onHeightChange: j,\n    css: v,\n    ...C\n  } = o;\n  Object.keys(C).forEach(e => {\n    m.indexOf(e) > -1 && delete C[e];\n  });\n  const P = void 0 !== C.value;\n  u && C.style && (\"maxHeight\" in C.style && a(\"Using `style.maxHeight` for <Textarea/> is not supported. Please use `maxRows`.\"), \"minHeight\" in C.style && a(\"Using `style.minHeight` for <Textarea/> is not supported. Please use `minRows`.\")), r(f, () => x.current);\n\n  const T = () => {\n    const e = x.current,\n          t = g && d.current ? d.current : l(e);\n    if (!t) return;\n    d.current = t;\n    const [r, s] = c(t, e.value || e.placeholder || \"x\", y || R, y || w);\n    h.current !== r && (h.current = r, e.style.setProperty(\"height\", `${r}px`, \"important\"), j && j(r, {\n      rowHeight: s\n    }));\n  };\n\n  return \"undefined\" != typeof document && (s(T), n(T)), p(i, {\n    ref: x,\n    as: \"textarea\",\n    css: v,\n    onChange: e => {\n      P || T(), H && H(e);\n    },\n    ...C\n  });\n});\nu && (f.displayName = \"NextUI.Textarea\"), f.toString = () => \".nextui-textarea\";\nexport default o(f, {\n  minRows: 3,\n  maxRows: 6,\n  cacheMeasurements: !0,\n  initialValue: \"\"\n});","map":{"version":3,"sources":["/Users/vux/dev/react-project1/node_modules/@nextui-org/react/esm/textarea/textarea.js"],"names":["e","useRef","t","useImperativeHandle","r","useLayoutEffect","s","o","i","n","warn","a","excludedInputPropsForTextarea","m","__DEV__","u","calculateNodeHeight","c","getSizingData","l","jsx","p","f","forwardRef","x","h","d","cacheMeasurements","g","rows","y","maxRows","w","minRows","R","onChange","H","onHeightChange","j","css","v","C","Object","keys","forEach","indexOf","P","value","style","current","T","placeholder","setProperty","rowHeight","document","ref","as","displayName","toString","initialValue"],"mappings":"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","sourcesContent":["import e,{useRef as t,useImperativeHandle as r,useLayoutEffect as s}from\"react\";import o from\"../utils/with-defaults\";import i from\"../input\";import n from\"../use-resize\";import{warn as a}from\"../utils/console\";import{excludedInputPropsForTextarea as m}from\"../utils/prop-types\";import{__DEV__ as u}from\"../utils/assertion\";import{calculateNodeHeight as c,getSizingData as l}from\"./utils\";import{jsx as p}from\"react/jsx-runtime\";const f=e.forwardRef(((o,f)=>{const x=t(null),h=e.useRef(0),d=e.useRef(),{cacheMeasurements:g,rows:y,maxRows:w,minRows:R,onChange:H,onHeightChange:j,css:v,...C}=o;Object.keys(C).forEach((e=>{m.indexOf(e)>-1&&delete C[e]}));const P=void 0!==C.value;u&&C.style&&(\"maxHeight\"in C.style&&a(\"Using `style.maxHeight` for <Textarea/> is not supported. Please use `maxRows`.\"),\"minHeight\"in C.style&&a(\"Using `style.minHeight` for <Textarea/> is not supported. Please use `minRows`.\")),r(f,(()=>x.current));const T=()=>{const e=x.current,t=g&&d.current?d.current:l(e);if(!t)return;d.current=t;const[r,s]=c(t,e.value||e.placeholder||\"x\",y||R,y||w);h.current!==r&&(h.current=r,e.style.setProperty(\"height\",`${r}px`,\"important\"),j&&j(r,{rowHeight:s}))};return\"undefined\"!=typeof document&&(s(T),n(T)),p(i,{ref:x,as:\"textarea\",css:v,onChange:e=>{P||T(),H&&H(e)},...C})}));u&&(f.displayName=\"NextUI.Textarea\"),f.toString=()=>\".nextui-textarea\";export default o(f,{minRows:3,maxRows:6,cacheMeasurements:!0,initialValue:\"\"});"]},"metadata":{},"sourceType":"module"}