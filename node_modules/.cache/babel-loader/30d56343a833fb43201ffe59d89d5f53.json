{"ast":null,"code":"import { useState as $6imuh$useState, useRef as $6imuh$useRef, useCallback as $6imuh$useCallback } from \"react\";\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/*\n* Copyright 2020 Adobe. All rights reserved.\n* This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License. You may obtain a copy\n* of the License at http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software distributed under\n* the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n* OF ANY KIND, either express or implied. See the License for the specific language\n* governing permissions and limitations under the License.\n*/\n\nfunction $458b0a5536c1a7cf$export$40bfa8c7b0832715(value, defaultValue, onChange) {\n  let [stateValue, setStateValue] = (0, $6imuh$useState)(value || defaultValue);\n  let ref = (0, $6imuh$useRef)(value !== undefined);\n  let wasControlled = ref.current;\n  let isControlled = value !== undefined; // Internal state reference for useCallback\n\n  let stateRef = (0, $6imuh$useRef)(stateValue);\n  if (wasControlled !== isControlled) console.warn(`WARN: A component changed from ${wasControlled ? \"controlled\" : \"uncontrolled\"} to ${isControlled ? \"controlled\" : \"uncontrolled\"}.`);\n  ref.current = isControlled;\n  let setValue = (0, $6imuh$useCallback)(function (value) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    let onChangeCaller = function (value) {\n      if (onChange) {\n        for (var _len2 = arguments.length, onChangeArgs = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          onChangeArgs[_key2 - 1] = arguments[_key2];\n        }\n\n        if (!Object.is(stateRef.current, value)) onChange(value, ...onChangeArgs);\n      }\n\n      if (!isControlled) stateRef.current = value;\n    };\n\n    if (typeof value === \"function\") {\n      console.warn(\"We can not support a function callback. See Github Issues for details https://github.com/adobe/react-spectrum/issues/2320\"); // this supports functional updates https://reactjs.org/docs/hooks-reference.html#functional-updates\n      // when someone using useControlledState calls setControlledState(myFunc)\n      // this will call our useState setState with a function as well which invokes myFunc and calls onChange with the value from myFunc\n      // if we're in an uncontrolled state, then we also return the value of myFunc which to setState looks as though it was just called with myFunc from the beginning\n      // otherwise we just return the controlled value, which won't cause a rerender because React knows to bail out when the value is the same\n\n      let updateFunction = function (oldValue) {\n        for (var _len3 = arguments.length, functionArgs = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n          functionArgs[_key3 - 1] = arguments[_key3];\n        }\n\n        let interceptedValue = value(isControlled ? stateRef.current : oldValue, ...functionArgs);\n        onChangeCaller(interceptedValue, ...args);\n        if (!isControlled) return interceptedValue;\n        return oldValue;\n      };\n\n      setStateValue(updateFunction);\n    } else {\n      if (!isControlled) setStateValue(value);\n      onChangeCaller(value, ...args);\n    }\n  }, [isControlled, onChange]); // If a controlled component's value prop changes, we need to update stateRef\n\n  if (isControlled) stateRef.current = value;else value = stateValue;\n  return [value, setValue];\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/**\n* Takes a value and forces it to the closest min/max if it's outside. Also forces it to the closest valid step.\n*/\n\n\nfunction $9446cca9a3875146$export$7d15b64cf5a3a4c4(value) {\n  let min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -Infinity;\n  let max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;\n  let newValue = Math.min(Math.max(value, min), max);\n  return newValue;\n}\n\nfunction $9446cca9a3875146$export$cb6e0bb50bc19463(value, min, max, step) {\n  let remainder = (value - (isNaN(min) ? 0 : min)) % step;\n  let snappedValue = Math.abs(remainder) * 2 >= step ? value + Math.sign(remainder) * (step - Math.abs(remainder)) : value - remainder;\n\n  if (!isNaN(min)) {\n    if (snappedValue < min) snappedValue = min;else if (!isNaN(max) && snappedValue > max) snappedValue = min + Math.floor((max - min) / step) * step;\n  } else if (!isNaN(max) && snappedValue > max) snappedValue = Math.floor(max / step) * step; // correct floating point behavior by rounding to step precision\n\n\n  let string = step.toString();\n  let index = string.indexOf(\".\");\n  let precision = index >= 0 ? string.length - index : 0;\n\n  if (precision > 0) {\n    let pow = Math.pow(10, precision);\n    snappedValue = Math.round(snappedValue * pow) / pow;\n  }\n\n  return snappedValue;\n}\n\nfunction $9446cca9a3875146$export$b6268554fba451f(value, digits) {\n  let base = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n  const pow = Math.pow(base, digits);\n  return Math.round(value * pow) / pow;\n}\n\nexport { $458b0a5536c1a7cf$export$40bfa8c7b0832715 as useControlledState, $9446cca9a3875146$export$7d15b64cf5a3a4c4 as clamp, $9446cca9a3875146$export$cb6e0bb50bc19463 as snapValueToStep, $9446cca9a3875146$export$b6268554fba451f as toFixedNumber };","map":{"version":3,"mappings":"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","names":["$458b0a5536c1a7cf$export$40bfa8c7b0832715","value","defaultValue","onChange","stateValue","setStateValue","ref","undefined","wasControlled","current","isControlled","stateRef","console","warn","setValue","args","onChangeCaller","onChangeArgs","Object","is","updateFunction","oldValue","functionArgs","interceptedValue","$9446cca9a3875146$export$7d15b64cf5a3a4c4","min","Infinity","max","newValue","Math","$9446cca9a3875146$export$cb6e0bb50bc19463","step","remainder","isNaN","snappedValue","abs","sign","floor","string","toString","index","indexOf","precision","length","pow","round","$9446cca9a3875146$export$b6268554fba451f","digits","base"],"sources":["/Users/vux/dev/react-project1/node_modules/@react-stately/utils/dist/packages/@react-stately/utils/src/index.ts","/Users/vux/dev/react-project1/node_modules/@react-stately/utils/dist/packages/@react-stately/utils/src/useControlledState.ts","/Users/vux/dev/react-project1/node_modules/@react-stately/utils/dist/packages/@react-stately/utils/src/number.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nexport {useControlledState} from './useControlledState';\nexport {clamp, snapValueToStep, toFixedNumber} from './number';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {useCallback, useRef, useState} from 'react';\n\nexport function useControlledState<T>(\n  value: T,\n  defaultValue: T,\n  onChange: (value: T, ...args: any[]) => void\n): [T, (value: T, ...args: any[]) => void]  {\n  let [stateValue, setStateValue] = useState(value || defaultValue);\n  let ref = useRef(value !== undefined);\n  let wasControlled = ref.current;\n  let isControlled = value !== undefined;\n  // Internal state reference for useCallback\n  let stateRef = useRef(stateValue);\n  if (wasControlled !== isControlled) {\n    console.warn(`WARN: A component changed from ${wasControlled ? 'controlled' : 'uncontrolled'} to ${isControlled ? 'controlled' : 'uncontrolled'}.`);\n  }\n\n  ref.current = isControlled;\n\n  let setValue = useCallback((value, ...args) => {\n    let onChangeCaller = (value, ...onChangeArgs) => {\n      if (onChange) {\n        if (!Object.is(stateRef.current, value)) {\n          onChange(value, ...onChangeArgs);\n        }\n      }\n      if (!isControlled) {\n        stateRef.current = value;\n      }\n    };\n\n    if (typeof value === 'function') {\n      console.warn('We can not support a function callback. See Github Issues for details https://github.com/adobe/react-spectrum/issues/2320');\n      // this supports functional updates https://reactjs.org/docs/hooks-reference.html#functional-updates\n      // when someone using useControlledState calls setControlledState(myFunc)\n      // this will call our useState setState with a function as well which invokes myFunc and calls onChange with the value from myFunc\n      // if we're in an uncontrolled state, then we also return the value of myFunc which to setState looks as though it was just called with myFunc from the beginning\n      // otherwise we just return the controlled value, which won't cause a rerender because React knows to bail out when the value is the same\n      let updateFunction = (oldValue, ...functionArgs) => {\n        let interceptedValue = value(isControlled ? stateRef.current : oldValue, ...functionArgs);\n        onChangeCaller(interceptedValue, ...args);\n        if (!isControlled) {\n          return interceptedValue;\n        }\n        return oldValue;\n      };\n      setStateValue(updateFunction);\n    } else {\n      if (!isControlled) {\n        setStateValue(value);\n      }\n      onChangeCaller(value, ...args);\n    }\n  }, [isControlled, onChange]);\n\n  // If a controlled component's value prop changes, we need to update stateRef\n  if (isControlled) {\n    stateRef.current = value;\n  } else {\n    value = stateValue;\n  }\n\n  return [value, setValue];\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/**\n * Takes a value and forces it to the closest min/max if it's outside. Also forces it to the closest valid step.\n */\nexport function clamp(value: number, min: number = -Infinity, max: number = Infinity): number {\n  let newValue = Math.min(Math.max(value, min), max);\n  return newValue;\n}\n\nexport function snapValueToStep(value: number, min: number, max: number, step: number): number {\n  let remainder = ((value - (isNaN(min) ? 0 : min)) % step);\n  let snappedValue = Math.abs(remainder) * 2 >= step\n    ? value + Math.sign(remainder) * (step - Math.abs(remainder))\n    : value - remainder;\n\n  if (!isNaN(min)) {\n    if (snappedValue < min) {\n      snappedValue = min;\n    } else if (!isNaN(max) && snappedValue > max) {\n      snappedValue = min + Math.floor((max - min) / step) * step;\n    }\n  } else if (!isNaN(max) && snappedValue > max) {\n    snappedValue = Math.floor(max / step) * step;\n  }\n\n  // correct floating point behavior by rounding to step precision\n  let string = step.toString();\n  let index = string.indexOf('.');\n  let precision = index >= 0 ? string.length - index : 0;\n\n  if (precision > 0) {\n    let pow = Math.pow(10, precision);\n    snappedValue = Math.round(snappedValue * pow) / pow;\n  }\n\n  return snappedValue;\n}\n\n/* Takes a value and rounds off to the number of digits. */\nexport function toFixedNumber(value: number, digits: number, base: number = 10): number {\n  const pow = Math.pow(base, digits);\n\n  return Math.round(value * pow) / pow;\n}\n"]},"metadata":{},"sourceType":"module"}