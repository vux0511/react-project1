{"ast":null,"code":"/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport { MessageDictionary, MessageFormatter } from '@internationalized/message';\nimport { useCallback, useMemo } from 'react';\nimport { useLocale } from '@react-aria/i18n';\nconst cache = new WeakMap();\n\nfunction getCachedDictionary(strings) {\n  let dictionary = cache.get(strings);\n\n  if (!dictionary) {\n    dictionary = new MessageDictionary(strings);\n    cache.set(strings, dictionary);\n  }\n\n  return dictionary;\n}\n/**\n * Handles formatting ICU Message strings to create localized strings for the current locale.\n * Automatically updates when the locale changes, and handles caching of messages for performance.\n * @param strings - A mapping of languages to strings by key.\n * @deprecated - use useLocalizedStringFormatter instead.\n */\n\n\nexport function useMessageFormatter(strings) {\n  let {\n    locale\n  } = useLocale();\n  let dictionary = useMemo(() => getCachedDictionary(strings), [strings]);\n  let formatter = useMemo(() => new MessageFormatter(locale, dictionary), [locale, dictionary]);\n  return useCallback((key, variables) => formatter.format(key, variables), [formatter]);\n}","map":{"version":3,"sources":["/Users/vux/dev/react-project1/node_modules/@react-aria/selection/node_modules/@react-aria/i18n/dist/useMessageFormatter.module.mjs"],"names":["MessageDictionary","MessageFormatter","useCallback","useMemo","useLocale","cache","WeakMap","getCachedDictionary","strings","dictionary","get","set","useMessageFormatter","locale","formatter","key","variables","format"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,iBAAT,EAA4BC,gBAA5B,QAAoD,4BAApD;AACA,SAASC,WAAT,EAAsBC,OAAtB,QAAqC,OAArC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,MAAMC,KAAK,GAAG,IAAIC,OAAJ,EAAd;;AAEA,SAASC,mBAAT,CAA6BC,OAA7B,EAAsC;AACpC,MAAIC,UAAU,GAAGJ,KAAK,CAACK,GAAN,CAAUF,OAAV,CAAjB;;AAEA,MAAI,CAACC,UAAL,EAAiB;AACfA,IAAAA,UAAU,GAAG,IAAIT,iBAAJ,CAAsBQ,OAAtB,CAAb;AACAH,IAAAA,KAAK,CAACM,GAAN,CAAUH,OAAV,EAAmBC,UAAnB;AACD;;AAED,SAAOA,UAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,SAASG,mBAAT,CAA6BJ,OAA7B,EAAsC;AAC3C,MAAI;AACFK,IAAAA;AADE,MAEAT,SAAS,EAFb;AAGA,MAAIK,UAAU,GAAGN,OAAO,CAAC,MAAMI,mBAAmB,CAACC,OAAD,CAA1B,EAAqC,CAACA,OAAD,CAArC,CAAxB;AACA,MAAIM,SAAS,GAAGX,OAAO,CAAC,MAAM,IAAIF,gBAAJ,CAAqBY,MAArB,EAA6BJ,UAA7B,CAAP,EAAiD,CAACI,MAAD,EAASJ,UAAT,CAAjD,CAAvB;AACA,SAAOP,WAAW,CAAC,CAACa,GAAD,EAAMC,SAAN,KAAoBF,SAAS,CAACG,MAAV,CAAiBF,GAAjB,EAAsBC,SAAtB,CAArB,EAAuD,CAACF,SAAD,CAAvD,CAAlB;AACD","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport { MessageDictionary, MessageFormatter } from '@internationalized/message';\nimport { useCallback, useMemo } from 'react';\nimport { useLocale } from '@react-aria/i18n';\nconst cache = new WeakMap();\n\nfunction getCachedDictionary(strings) {\n  let dictionary = cache.get(strings);\n\n  if (!dictionary) {\n    dictionary = new MessageDictionary(strings);\n    cache.set(strings, dictionary);\n  }\n\n  return dictionary;\n}\n/**\n * Handles formatting ICU Message strings to create localized strings for the current locale.\n * Automatically updates when the locale changes, and handles caching of messages for performance.\n * @param strings - A mapping of languages to strings by key.\n * @deprecated - use useLocalizedStringFormatter instead.\n */\n\n\nexport function useMessageFormatter(strings) {\n  let {\n    locale\n  } = useLocale();\n  let dictionary = useMemo(() => getCachedDictionary(strings), [strings]);\n  let formatter = useMemo(() => new MessageFormatter(locale, dictionary), [locale, dictionary]);\n  return useCallback((key, variables) => formatter.format(key, variables), [formatter]);\n}\n"]},"metadata":{},"sourceType":"module"}