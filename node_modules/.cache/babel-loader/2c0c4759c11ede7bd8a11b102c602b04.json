{"ast":null,"code":"import { useId as $1Hnir$useId, filterDOMProps as $1Hnir$filterDOMProps, mergeProps as $1Hnir$mergeProps, useSlotId as $1Hnir$useSlotId } from \"@react-aria/utils\";\nimport { useLocalizedStringFormatter as $1Hnir$useLocalizedStringFormatter } from \"@react-aria/i18n\";\nimport { useLongPress as $1Hnir$useLongPress, usePress as $1Hnir$usePress, useHover as $1Hnir$useHover, isFocusVisible as $1Hnir$isFocusVisible } from \"@react-aria/interactions\";\nimport { useOverlayTrigger as $1Hnir$useOverlayTrigger } from \"@react-aria/overlays\";\nimport { useSelectableList as $1Hnir$useSelectableList, useSelectableItem as $1Hnir$useSelectableItem } from \"@react-aria/selection\";\nimport { getItemCount as $1Hnir$getItemCount } from \"@react-stately/collections\";\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nvar $9bdd31893c9700c3$exports = {};\nvar $c0398ad35c3639b7$exports = {};\n$c0398ad35c3639b7$exports = {\n  \"longPressMessage\": `اضغط مطولاً أو اضغط على Alt + السهم لأسفل لفتح القائمة`\n};\nvar $7af657c4165927c3$exports = {};\n$7af657c4165927c3$exports = {\n  \"longPressMessage\": `Натиснете продължително или натиснете Alt+ стрелка надолу, за да отворите менюто`\n};\nvar $d95d4da6d531ab81$exports = {};\n$d95d4da6d531ab81$exports = {\n  \"longPressMessage\": `Dlouhým stiskem nebo stisknutím kláves Alt + šipka dolů otevřete nabídku`\n};\nvar $24ebda9c775dca17$exports = {};\n$24ebda9c775dca17$exports = {\n  \"longPressMessage\": `Langt tryk eller tryk på Alt + pil ned for at åbne menuen`\n};\nvar $743e0dfca6cab1e9$exports = {};\n$743e0dfca6cab1e9$exports = {\n  \"longPressMessage\": `Drücken Sie lange oder drücken Sie Alt + Nach-unten, um das Menü zu öffnen`\n};\nvar $a2f41026e05f1c84$exports = {};\n$a2f41026e05f1c84$exports = {\n  \"longPressMessage\": `Πιέστε παρατεταμένα ή πατήστε Alt + κάτω βέλος για να ανοίξετε το μενού`\n};\nvar $43b800e97c901737$exports = {};\n$43b800e97c901737$exports = {\n  \"longPressMessage\": `Long press or press Alt + ArrowDown to open menu`\n};\nvar $442f5f6ac211e29f$exports = {};\n$442f5f6ac211e29f$exports = {\n  \"longPressMessage\": `Mantenga pulsado o pulse Alt + flecha abajo para abrir el menú`\n};\nvar $dff280acfeb2d8ac$exports = {};\n$dff280acfeb2d8ac$exports = {\n  \"longPressMessage\": `Menüü avamiseks vajutage pikalt või vajutage klahve Alt + allanool`\n};\nvar $51608325613944d7$exports = {};\n$51608325613944d7$exports = {\n  \"longPressMessage\": `Avaa valikko painamalla pohjassa tai näppäinyhdistelmällä Alt + Alanuoli`\n};\nvar $c4a1b1eabeaa87be$exports = {};\n$c4a1b1eabeaa87be$exports = {\n  \"longPressMessage\": `Appuyez de manière prolongée ou appuyez sur Alt + Flèche vers le bas pour ouvrir le menu.`\n};\nvar $8c74815cdee18d1b$exports = {};\n$8c74815cdee18d1b$exports = {\n  \"longPressMessage\": `לחץ לחיצה ארוכה או הקש Alt + ArrowDown כדי לפתוח את התפריט`\n};\nvar $fd0e9ef6a7fe0ec9$exports = {};\n$fd0e9ef6a7fe0ec9$exports = {\n  \"longPressMessage\": `Dugo pritisnite ili pritisnite Alt + strelicu prema dolje za otvaranje izbornika`\n};\nvar $a89a74a39eba465a$exports = {};\n$a89a74a39eba465a$exports = {\n  \"longPressMessage\": `Nyomja meg hosszan, vagy nyomja meg az Alt + lefele nyíl gombot a menü megnyitásához`\n};\nvar $edc7c66594a0ae8a$exports = {};\n$edc7c66594a0ae8a$exports = {\n  \"longPressMessage\": `Premere a lungo o premere Alt + Freccia giù per aprire il menu`\n};\nvar $f1ab51510712db52$exports = {};\n$f1ab51510712db52$exports = {\n  \"longPressMessage\": `長押しまたは Alt+下矢印キーでメニューを開く`\n};\nvar $f9b672d9b82fa3d6$exports = {};\n$f9b672d9b82fa3d6$exports = {\n  \"longPressMessage\": `길게 누르거나 Alt + 아래쪽 화살표를 눌러 메뉴 열기`\n};\nvar $a385f3910feda499$exports = {};\n$a385f3910feda499$exports = {\n  \"longPressMessage\": `Norėdami atidaryti meniu, nuspaudę palaikykite arba paspauskite „Alt + ArrowDown“.`\n};\nvar $4f1bde932c441789$exports = {};\n$4f1bde932c441789$exports = {\n  \"longPressMessage\": `Lai atvērtu izvēlni, turiet nospiestu vai nospiediet taustiņu kombināciju Alt + lejupvērstā bultiņa`\n};\nvar $914a51a8a594d5be$exports = {};\n$914a51a8a594d5be$exports = {\n  \"longPressMessage\": `Langt trykk eller trykk Alt + PilNed for å åpne menyen`\n};\nvar $89aaf803103bb500$exports = {};\n$89aaf803103bb500$exports = {\n  \"longPressMessage\": `Druk lang op Alt + pijl-omlaag of druk op Alt om het menu te openen`\n};\nvar $c685891476dbaaca$exports = {};\n$c685891476dbaaca$exports = {\n  \"longPressMessage\": `Naciśnij i przytrzymaj lub naciśnij klawisze Alt + Strzałka w dół, aby otworzyć menu`\n};\nvar $885879b9b10c2959$exports = {};\n$885879b9b10c2959$exports = {\n  \"longPressMessage\": `Pressione e segure ou pressione Alt + Seta para baixo para abrir o menu`\n};\nvar $6b39616688a51692$exports = {};\n$6b39616688a51692$exports = {\n  \"longPressMessage\": `Prima continuamente ou prima Alt + Seta Para Baixo para abrir o menu`\n};\nvar $f26362aed63f47e2$exports = {};\n$f26362aed63f47e2$exports = {\n  \"longPressMessage\": `Apăsați lung sau apăsați pe Alt + săgeată în jos pentru a deschide meniul`\n};\nvar $06cbade644558bf0$exports = {};\n$06cbade644558bf0$exports = {\n  \"longPressMessage\": `Нажмите и удерживайте или нажмите Alt + Стрелка вниз, чтобы открыть меню`\n};\nvar $0a391ff68f9d59b1$exports = {};\n$0a391ff68f9d59b1$exports = {\n  \"longPressMessage\": `Ponuku otvoríte dlhým stlačením alebo stlačením klávesu Alt + klávesu so šípkou nadol`\n};\nvar $8193cf0e649c7928$exports = {};\n$8193cf0e649c7928$exports = {\n  \"longPressMessage\": `Za odprtje menija pritisnite in držite gumb ali pritisnite Alt+puščica navzdol`\n};\nvar $f398debcce5a5c55$exports = {};\n$f398debcce5a5c55$exports = {\n  \"longPressMessage\": `Dugo pritisnite ili pritisnite Alt + strelicu prema dole da otvorite meni`\n};\nvar $9e9fef000aa4c013$exports = {};\n$9e9fef000aa4c013$exports = {\n  \"longPressMessage\": `Håll nedtryckt eller tryck på Alt + pil nedåt för att öppna menyn`\n};\nvar $c016c8183bbe3d68$exports = {};\n$c016c8183bbe3d68$exports = {\n  \"longPressMessage\": `Menüyü açmak için uzun basın veya Alt + Aşağı Ok tuşuna basın`\n};\nvar $ca4f6c8462244e62$exports = {};\n$ca4f6c8462244e62$exports = {\n  \"longPressMessage\": `Довго або звичайно натисніть комбінацію клавіш Alt і стрілка вниз, щоб відкрити меню`\n};\nvar $2d9960c02ccac927$exports = {};\n$2d9960c02ccac927$exports = {\n  \"longPressMessage\": `长按或按 Alt + 向下方向键以打开菜单`\n};\nvar $f1b682a4c8c5631c$exports = {};\n$f1b682a4c8c5631c$exports = {\n  \"longPressMessage\": `長按或按 Alt+向下鍵以開啟功能表`\n};\n$9bdd31893c9700c3$exports = {\n  \"ar-AE\": $c0398ad35c3639b7$exports,\n  \"bg-BG\": $7af657c4165927c3$exports,\n  \"cs-CZ\": $d95d4da6d531ab81$exports,\n  \"da-DK\": $24ebda9c775dca17$exports,\n  \"de-DE\": $743e0dfca6cab1e9$exports,\n  \"el-GR\": $a2f41026e05f1c84$exports,\n  \"en-US\": $43b800e97c901737$exports,\n  \"es-ES\": $442f5f6ac211e29f$exports,\n  \"et-EE\": $dff280acfeb2d8ac$exports,\n  \"fi-FI\": $51608325613944d7$exports,\n  \"fr-FR\": $c4a1b1eabeaa87be$exports,\n  \"he-IL\": $8c74815cdee18d1b$exports,\n  \"hr-HR\": $fd0e9ef6a7fe0ec9$exports,\n  \"hu-HU\": $a89a74a39eba465a$exports,\n  \"it-IT\": $edc7c66594a0ae8a$exports,\n  \"ja-JP\": $f1ab51510712db52$exports,\n  \"ko-KR\": $f9b672d9b82fa3d6$exports,\n  \"lt-LT\": $a385f3910feda499$exports,\n  \"lv-LV\": $4f1bde932c441789$exports,\n  \"nb-NO\": $914a51a8a594d5be$exports,\n  \"nl-NL\": $89aaf803103bb500$exports,\n  \"pl-PL\": $c685891476dbaaca$exports,\n  \"pt-BR\": $885879b9b10c2959$exports,\n  \"pt-PT\": $6b39616688a51692$exports,\n  \"ro-RO\": $f26362aed63f47e2$exports,\n  \"ru-RU\": $06cbade644558bf0$exports,\n  \"sk-SK\": $0a391ff68f9d59b1$exports,\n  \"sl-SI\": $8193cf0e649c7928$exports,\n  \"sr-SP\": $f398debcce5a5c55$exports,\n  \"sv-SE\": $9e9fef000aa4c013$exports,\n  \"tr-TR\": $c016c8183bbe3d68$exports,\n  \"uk-UA\": $ca4f6c8462244e62$exports,\n  \"zh-CN\": $2d9960c02ccac927$exports,\n  \"zh-TW\": $f1b682a4c8c5631c$exports\n};\n\nfunction $168583247155ddda$export$dc9c12ed27dd1b49(props, state, ref) {\n  let {\n    type = 'menu',\n    isDisabled: isDisabled,\n    trigger = 'press'\n  } = props;\n  let menuTriggerId = $1Hnir$useId();\n  let {\n    triggerProps: triggerProps,\n    overlayProps: overlayProps\n  } = $1Hnir$useOverlayTrigger({\n    type: type\n  }, state, ref);\n\n  let onKeyDown = e => {\n    if (isDisabled) return;\n    if (trigger === 'longPress' && !e.altKey) return;\n    if (ref && ref.current) switch (e.key) {\n      case 'Enter':\n      case ' ':\n        if (trigger === 'longPress') return;\n      // fallthrough\n\n      case 'ArrowDown':\n        // Stop propagation, unless it would already be handled by useKeyboard.\n        if (!('continuePropagation' in e)) e.stopPropagation();\n        e.preventDefault();\n        state.toggle('first');\n        break;\n\n      case 'ArrowUp':\n        if (!('continuePropagation' in e)) e.stopPropagation();\n        e.preventDefault();\n        state.toggle('last');\n        break;\n    }\n  };\n\n  let stringFormatter = $1Hnir$useLocalizedStringFormatter( /*@__PURE__*/$parcel$interopDefault($9bdd31893c9700c3$exports));\n  let {\n    longPressProps: longPressProps\n  } = $1Hnir$useLongPress({\n    isDisabled: isDisabled || trigger !== 'longPress',\n    accessibilityDescription: stringFormatter.format('longPressMessage'),\n\n    onLongPressStart() {\n      state.close();\n    },\n\n    onLongPress() {\n      state.open('first');\n    }\n\n  });\n  let pressProps = {\n    onPressStart(e) {\n      // For consistency with native, open the menu on mouse/key down, but touch up.\n      if (e.pointerType !== 'touch' && e.pointerType !== 'keyboard' && !isDisabled) // If opened with a screen reader, auto focus the first item.\n        // Otherwise, the menu itself will be focused.\n        state.toggle(e.pointerType === 'virtual' ? 'first' : null);\n    },\n\n    onPress(e) {\n      if (e.pointerType === 'touch' && !isDisabled) state.toggle();\n    }\n\n  }; // omit onPress from triggerProps since we override it above.\n\n  delete triggerProps.onPress;\n  return {\n    menuTriggerProps: { ...triggerProps,\n      ...(trigger === 'press' ? pressProps : longPressProps),\n      id: menuTriggerId,\n      onKeyDown: onKeyDown\n    },\n    menuProps: { ...overlayProps,\n      'aria-labelledby': menuTriggerId,\n      autoFocus: state.focusStrategy,\n      onClose: state.close\n    }\n  };\n}\n\nconst $d5336fe17ce95402$export$6f49b4016bfc8d56 = new WeakMap();\n\nfunction $d5336fe17ce95402$export$38eaa17faae8f579(props, state, ref) {\n  let {\n    shouldFocusWrap = true,\n    ...otherProps\n  } = props;\n  if (!props['aria-label'] && !props['aria-labelledby']) console.warn('An aria-label or aria-labelledby prop is required for accessibility.');\n  let domProps = $1Hnir$filterDOMProps(props, {\n    labelable: true\n  });\n  let {\n    listProps: listProps\n  } = $1Hnir$useSelectableList({ ...otherProps,\n    ref: ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    shouldFocusWrap: shouldFocusWrap\n  });\n  $d5336fe17ce95402$export$6f49b4016bfc8d56.set(state, {\n    onClose: props.onClose,\n    onAction: props.onAction\n  });\n  return {\n    menuProps: $1Hnir$mergeProps(domProps, {\n      role: 'menu',\n      ...listProps\n    })\n  };\n}\n\nfunction $a2e5df62f93c7633$export$9d32628fc2aea7da(props, state, ref) {\n  let {\n    key: key,\n    closeOnSelect: closeOnSelect,\n    isVirtualized: isVirtualized\n  } = props;\n\n  var _isDisabled;\n\n  let isDisabled = (_isDisabled = props.isDisabled) !== null && _isDisabled !== void 0 ? _isDisabled : state.disabledKeys.has(key);\n\n  var _isSelected;\n\n  let isSelected = (_isSelected = props.isSelected) !== null && _isSelected !== void 0 ? _isSelected : state.selectionManager.isSelected(key);\n  let isFocused = state.selectionManager.focusedKey === key;\n  let data = $d5336fe17ce95402$export$6f49b4016bfc8d56.get(state);\n  let onClose = props.onClose || data.onClose;\n  let onAction = props.onAction || data.onAction;\n  let role = 'menuitem';\n  if (state.selectionManager.selectionMode === 'single') role = 'menuitemradio';else if (state.selectionManager.selectionMode === 'multiple') role = 'menuitemcheckbox';\n  let labelId = $1Hnir$useSlotId();\n  let descriptionId = $1Hnir$useSlotId();\n  let keyboardId = $1Hnir$useSlotId();\n  let ariaProps = {\n    'aria-disabled': isDisabled,\n    role: role,\n    'aria-label': props['aria-label'],\n    'aria-labelledby': labelId,\n    'aria-describedby': [descriptionId, keyboardId].filter(Boolean).join(' ') || undefined\n  };\n  if (state.selectionManager.selectionMode !== 'none') ariaProps['aria-checked'] = isSelected;\n\n  if (isVirtualized) {\n    ariaProps['aria-posinset'] = state.collection.getItem(key).index;\n    ariaProps['aria-setsize'] = $1Hnir$getItemCount(state.collection);\n  }\n\n  let onKeyDown = e => {\n    // Ignore repeating events, which may have started on the menu trigger before moving\n    // focus to the menu item. We want to wait for a second complete key press sequence.\n    if (e.repeat) return;\n\n    switch (e.key) {\n      case ' ':\n        if (!isDisabled && state.selectionManager.selectionMode === 'none' && closeOnSelect !== false && onClose) onClose();\n        break;\n\n      case 'Enter':\n        // The Enter key should always close on select, except if overridden.\n        if (!isDisabled && closeOnSelect !== false && onClose) onClose();\n        break;\n    }\n  };\n\n  let onPressStart = e => {\n    if (e.pointerType === 'keyboard' && onAction) onAction(key);\n  };\n\n  let onPressUp = e => {\n    if (e.pointerType !== 'keyboard') {\n      if (onAction) onAction(key); // Pressing a menu item should close by default in single selection mode but not multiple\n      // selection mode, except if overridden by the closeOnSelect prop.\n\n      if (onClose && (closeOnSelect !== null && closeOnSelect !== void 0 ? closeOnSelect : state.selectionManager.selectionMode !== 'multiple')) onClose();\n    }\n  };\n\n  let {\n    itemProps: itemProps\n  } = $1Hnir$useSelectableItem({\n    selectionManager: state.selectionManager,\n    key: key,\n    ref: ref,\n    shouldSelectOnPressUp: true,\n    allowsDifferentPressOrigin: true\n  });\n  let {\n    pressProps: pressProps,\n    isPressed: isPressed\n  } = $1Hnir$usePress({\n    onPressStart: onPressStart,\n    onPressUp: onPressUp,\n    isDisabled: isDisabled\n  });\n  let {\n    hoverProps: hoverProps\n  } = $1Hnir$useHover({\n    isDisabled: isDisabled,\n\n    onHoverStart() {\n      if (!$1Hnir$isFocusVisible()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n\n  });\n  return {\n    menuItemProps: { ...ariaProps,\n      ...$1Hnir$mergeProps(itemProps, pressProps, hoverProps, {\n        onKeyDown: onKeyDown\n      })\n    },\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    keyboardShortcutProps: {\n      id: keyboardId\n    },\n    isFocused: isFocused,\n    isSelected: isSelected,\n    isPressed: isPressed,\n    isDisabled: isDisabled\n  };\n}\n\nfunction $3e5eb2498db5b506$export$73f7a44322579622(props) {\n  let {\n    heading: heading,\n    'aria-label': ariaLabel\n  } = props;\n  let headingId = $1Hnir$useId();\n  return {\n    itemProps: {\n      role: 'presentation'\n    },\n    headingProps: heading ? {\n      // Techincally, menus cannot contain headings according to ARIA.\n      // We hide the heading from assistive technology, and only use it\n      // as a label for the nested group.\n      id: headingId,\n      'aria-hidden': true\n    } : {},\n    groupProps: {\n      role: 'group',\n      'aria-label': ariaLabel,\n      'aria-labelledby': heading ? headingId : undefined\n    }\n  };\n}\n\nexport { $168583247155ddda$export$dc9c12ed27dd1b49 as useMenuTrigger, $d5336fe17ce95402$export$38eaa17faae8f579 as useMenu, $a2e5df62f93c7633$export$9d32628fc2aea7da as useMenuItem, $3e5eb2498db5b506$export$73f7a44322579622 as useMenuSection };","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAAA,yBAAc,GAAG;AAAG,sBAAqB;AAAxB,CAAjB;;ACAAC,yBAAc,GAAG;AAAG,sBAAqB;AAAxB,CAAjB;;ACAAC,yBAAc,GAAG;AAAG,sBAAqB;AAAxB,CAAjB;;ACAAC,yBAAc,GAAG;AAAG,sBAAqB;AAAxB,CAAjB;;ACAAC,yBAAc,GAAG;AAAG,sBAAqB;AAAxB,CAAjB;;ACAAC,yBAAc,GAAG;AAAG,sBAAqB;AAAxB,CAAjB;;ACAAC,yBAAc,GAAG;AAAG,sBAAqB;AAAxB,CAAjB;;ACAAC,yBAAc,GAAG;AAAG,sBAAqB;AAAxB,CAAjB;;ACAAC,yBAAc,GAAG;AAAG,sBAAqB;AAAxB,CAAjB;;ACAAC,yBAAc,GAAG;AAAG,sBAAqB;AAAxB,CAAjB;;ACAAC,yBAAc,GAAG;AAAG,sBAAqB;AAAxB,CAAjB;;ACAAC,yBAAc,GAAG;AAAG,sBAAqB;AAAxB,CAAjB;;ACAAC,yBAAc,GAAG;AAAG,sBAAqB;AAAxB,CAAjB;;ACAAC,yBAAc,GAAG;AAAG,sBAAqB;AAAxB,CAAjB;;ACAAC,yBAAc,GAAG;AAAG,sBAAqB;AAAxB,CAAjB;;ACAAC,yBAAc,GAAG;AAAG,sBAAqB;AAAxB,CAAjB;;ACAAC,yBAAc,GAAG;AAAG,sBAAqB;AAAxB,CAAjB;;ACAAC,yBAAc,GAAG;AAAG,sBAAqB;AAAxB,CAAjB;;ACAAC,yBAAc,GAAG;AAAG,sBAAqB;AAAxB,CAAjB;;ACAAC,yBAAc,GAAG;AAAG,sBAAqB;AAAxB,CAAjB;;ACAAC,yBAAc,GAAG;AAAG,sBAAqB;AAAxB,CAAjB;;ACAAC,yBAAc,GAAG;AAAG,sBAAqB;AAAxB,CAAjB;;ACAAC,yBAAc,GAAG;AAAG,sBAAqB;AAAxB,CAAjB;;ACAAC,yBAAc,GAAG;AAAG,sBAAqB;AAAxB,CAAjB;;ACAAC,yBAAc,GAAG;AAAG,sBAAqB;AAAxB,CAAjB;;ACAAC,yBAAc,GAAG;AAAG,sBAAqB;AAAxB,CAAjB;;ACAAC,yBAAc,GAAG;AAAG,sBAAqB;AAAxB,CAAjB;;ACAAC,yBAAc,GAAG;AAAG,sBAAqB;AAAxB,CAAjB;;ACAAC,yBAAc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","names":["$c0398ad35c3639b7$exports","$7af657c4165927c3$exports","$d95d4da6d531ab81$exports","$24ebda9c775dca17$exports","$743e0dfca6cab1e9$exports","$a2f41026e05f1c84$exports","$43b800e97c901737$exports","$442f5f6ac211e29f$exports","$dff280acfeb2d8ac$exports","$51608325613944d7$exports","$c4a1b1eabeaa87be$exports","$8c74815cdee18d1b$exports","$fd0e9ef6a7fe0ec9$exports","$a89a74a39eba465a$exports","$edc7c66594a0ae8a$exports","$f1ab51510712db52$exports","$f9b672d9b82fa3d6$exports","$a385f3910feda499$exports","$4f1bde932c441789$exports","$914a51a8a594d5be$exports","$89aaf803103bb500$exports","$c685891476dbaaca$exports","$885879b9b10c2959$exports","$6b39616688a51692$exports","$f26362aed63f47e2$exports","$06cbade644558bf0$exports","$0a391ff68f9d59b1$exports","$8193cf0e649c7928$exports","$f398debcce5a5c55$exports","$9e9fef000aa4c013$exports","$c016c8183bbe3d68$exports","$ca4f6c8462244e62$exports","$2d9960c02ccac927$exports","$f1b682a4c8c5631c$exports","$9bdd31893c9700c3$exports","$168583247155ddda$export$dc9c12ed27dd1b49","props","state","ref","type","isDisabled","trigger","menuTriggerId","$1Hnir$useId","triggerProps","overlayProps","$1Hnir$useOverlayTrigger","onKeyDown","e","altKey","current","key","stopPropagation","preventDefault","toggle","stringFormatter","$1Hnir$useLocalizedStringFormatter","longPressProps","$1Hnir$useLongPress","accessibilityDescription","format","onLongPressStart","close","onLongPress","open","pressProps","onPressStart","pointerType","onPress","menuTriggerProps","id","menuProps","autoFocus","focusStrategy","onClose","$d5336fe17ce95402$export$6f49b4016bfc8d56","WeakMap","$d5336fe17ce95402$export$38eaa17faae8f579","shouldFocusWrap","otherProps","console","warn","domProps","$1Hnir$filterDOMProps","labelable","listProps","$1Hnir$useSelectableList","selectionManager","collection","disabledKeys","set","onAction","$1Hnir$mergeProps","role","$a2e5df62f93c7633$export$9d32628fc2aea7da","closeOnSelect","isVirtualized","_isDisabled","has","_isSelected","isSelected","isFocused","focusedKey","data","get","selectionMode","labelId","$1Hnir$useSlotId","descriptionId","keyboardId","ariaProps","filter","Boolean","join","undefined","getItem","index","$1Hnir$getItemCount","repeat","onPressUp","itemProps","$1Hnir$useSelectableItem","shouldSelectOnPressUp","allowsDifferentPressOrigin","isPressed","$1Hnir$usePress","hoverProps","$1Hnir$useHover","onHoverStart","$1Hnir$isFocusVisible","setFocused","setFocusedKey","menuItemProps","labelProps","descriptionProps","keyboardShortcutProps","$3e5eb2498db5b506$export$73f7a44322579622","heading","ariaLabel","headingId","headingProps","groupProps"],"sources":["/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/ar-AE.json","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/bg-BG.json","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/cs-CZ.json","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/da-DK.json","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/de-DE.json","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/el-GR.json","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/en-US.json","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/es-ES.json","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/et-EE.json","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/fi-FI.json","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/fr-FR.json","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/he-IL.json","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/hr-HR.json","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/hu-HU.json","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/it-IT.json","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/ja-JP.json","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/ko-KR.json","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/lt-LT.json","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/lv-LV.json","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/nb-NO.json","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/nl-NL.json","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/pl-PL.json","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/pt-BR.json","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/pt-PT.json","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/ro-RO.json","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/ru-RU.json","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/sk-SK.json","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/sl-SI.json","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/sr-SP.json","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/sv-SE.json","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/tr-TR.json","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/uk-UA.json","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/zh-CN.json","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/zh-TW.json","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/intl/*.js","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/src/useMenuTrigger.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/src/useMenu.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/src/useMenuItem.ts","/Users/vux/dev/react-project1/node_modules/@react-aria/menu/dist/packages/@react-aria/menu/src/useMenuSection.ts"],"sourcesContent":["{\n  \"longPressMessage\": \"اضغط مطولاً أو اضغط على Alt + السهم لأسفل لفتح القائمة\"\n}\n","{\n  \"longPressMessage\": \"Натиснете продължително или натиснете Alt+ стрелка надолу, за да отворите менюто\"\n}\n","{\n  \"longPressMessage\": \"Dlouhým stiskem nebo stisknutím kláves Alt + šipka dolů otevřete nabídku\"\n}\n","{\n  \"longPressMessage\": \"Langt tryk eller tryk på Alt + pil ned for at åbne menuen\"\n}\n","{\n  \"longPressMessage\": \"Drücken Sie lange oder drücken Sie Alt + Nach-unten, um das Menü zu öffnen\"\n}\n","{\n  \"longPressMessage\": \"Πιέστε παρατεταμένα ή πατήστε Alt + κάτω βέλος για να ανοίξετε το μενού\"\n}\n","{\n  \"longPressMessage\": \"Long press or press Alt + ArrowDown to open menu\"\n}\n","{\n  \"longPressMessage\": \"Mantenga pulsado o pulse Alt + flecha abajo para abrir el menú\"\n}\n","{\n  \"longPressMessage\": \"Menüü avamiseks vajutage pikalt või vajutage klahve Alt + allanool\"\n}\n","{\n  \"longPressMessage\": \"Avaa valikko painamalla pohjassa tai näppäinyhdistelmällä Alt + Alanuoli\"\n}\n","{\n  \"longPressMessage\": \"Appuyez de manière prolongée ou appuyez sur Alt + Flèche vers le bas pour ouvrir le menu.\"\n}\n","{\n  \"longPressMessage\": \"לחץ לחיצה ארוכה או הקש Alt + ArrowDown כדי לפתוח את התפריט\"\n}\n","{\n  \"longPressMessage\": \"Dugo pritisnite ili pritisnite Alt + strelicu prema dolje za otvaranje izbornika\"\n}\n","{\n  \"longPressMessage\": \"Nyomja meg hosszan, vagy nyomja meg az Alt + lefele nyíl gombot a menü megnyitásához\"\n}\n","{\n  \"longPressMessage\": \"Premere a lungo o premere Alt + Freccia giù per aprire il menu\"\n}\n","{\n  \"longPressMessage\": \"長押しまたは Alt+下矢印キーでメニューを開く\"\n}\n","{\n  \"longPressMessage\": \"길게 누르거나 Alt + 아래쪽 화살표를 눌러 메뉴 열기\"\n}\n","{\n  \"longPressMessage\": \"Norėdami atidaryti meniu, nuspaudę palaikykite arba paspauskite „Alt + ArrowDown“.\"\n}\n","{\n  \"longPressMessage\": \"Lai atvērtu izvēlni, turiet nospiestu vai nospiediet taustiņu kombināciju Alt + lejupvērstā bultiņa\"\n}\n","{\n  \"longPressMessage\": \"Langt trykk eller trykk Alt + PilNed for å åpne menyen\"\n}\n","{\n  \"longPressMessage\": \"Druk lang op Alt + pijl-omlaag of druk op Alt om het menu te openen\"\n}\n","{\n  \"longPressMessage\": \"Naciśnij i przytrzymaj lub naciśnij klawisze Alt + Strzałka w dół, aby otworzyć menu\"\n}\n","{\n  \"longPressMessage\": \"Pressione e segure ou pressione Alt + Seta para baixo para abrir o menu\"\n}\n","{\n  \"longPressMessage\": \"Prima continuamente ou prima Alt + Seta Para Baixo para abrir o menu\"\n}\n","{\n  \"longPressMessage\": \"Apăsați lung sau apăsați pe Alt + săgeată în jos pentru a deschide meniul\"\n}\n","{\n  \"longPressMessage\": \"Нажмите и удерживайте или нажмите Alt + Стрелка вниз, чтобы открыть меню\"\n}\n","{\n  \"longPressMessage\": \"Ponuku otvoríte dlhým stlačením alebo stlačením klávesu Alt + klávesu so šípkou nadol\"\n}\n","{\n  \"longPressMessage\": \"Za odprtje menija pritisnite in držite gumb ali pritisnite Alt+puščica navzdol\"\n}\n","{\n  \"longPressMessage\": \"Dugo pritisnite ili pritisnite Alt + strelicu prema dole da otvorite meni\"\n}\n","{\n  \"longPressMessage\": \"Håll nedtryckt eller tryck på Alt + pil nedåt för att öppna menyn\"\n}\n","{\n  \"longPressMessage\": \"Menüyü açmak için uzun basın veya Alt + Aşağı Ok tuşuna basın\"\n}\n","{\n  \"longPressMessage\": \"Довго або звичайно натисніть комбінацію клавіш Alt і стрілка вниз, щоб відкрити меню\"\n}\n","{\n  \"longPressMessage\": \"长按或按 Alt + 向下方向键以打开菜单\"\n}\n","{\n  \"longPressMessage\": \"長按或按 Alt+向下鍵以開啟功能表\"\n}\n","const _temp0 = require(\"./ar-AE.json\");\nconst _temp1 = require(\"./bg-BG.json\");\nconst _temp2 = require(\"./cs-CZ.json\");\nconst _temp3 = require(\"./da-DK.json\");\nconst _temp4 = require(\"./de-DE.json\");\nconst _temp5 = require(\"./el-GR.json\");\nconst _temp6 = require(\"./en-US.json\");\nconst _temp7 = require(\"./es-ES.json\");\nconst _temp8 = require(\"./et-EE.json\");\nconst _temp9 = require(\"./fi-FI.json\");\nconst _temp10 = require(\"./fr-FR.json\");\nconst _temp11 = require(\"./he-IL.json\");\nconst _temp12 = require(\"./hr-HR.json\");\nconst _temp13 = require(\"./hu-HU.json\");\nconst _temp14 = require(\"./it-IT.json\");\nconst _temp15 = require(\"./ja-JP.json\");\nconst _temp16 = require(\"./ko-KR.json\");\nconst _temp17 = require(\"./lt-LT.json\");\nconst _temp18 = require(\"./lv-LV.json\");\nconst _temp19 = require(\"./nb-NO.json\");\nconst _temp20 = require(\"./nl-NL.json\");\nconst _temp21 = require(\"./pl-PL.json\");\nconst _temp22 = require(\"./pt-BR.json\");\nconst _temp23 = require(\"./pt-PT.json\");\nconst _temp24 = require(\"./ro-RO.json\");\nconst _temp25 = require(\"./ru-RU.json\");\nconst _temp26 = require(\"./sk-SK.json\");\nconst _temp27 = require(\"./sl-SI.json\");\nconst _temp28 = require(\"./sr-SP.json\");\nconst _temp29 = require(\"./sv-SE.json\");\nconst _temp30 = require(\"./tr-TR.json\");\nconst _temp31 = require(\"./uk-UA.json\");\nconst _temp32 = require(\"./zh-CN.json\");\nconst _temp33 = require(\"./zh-TW.json\");\nmodule.exports = {\n  \"ar-AE\": _temp0,\n  \"bg-BG\": _temp1,\n  \"cs-CZ\": _temp2,\n  \"da-DK\": _temp3,\n  \"de-DE\": _temp4,\n  \"el-GR\": _temp5,\n  \"en-US\": _temp6,\n  \"es-ES\": _temp7,\n  \"et-EE\": _temp8,\n  \"fi-FI\": _temp9,\n  \"fr-FR\": _temp10,\n  \"he-IL\": _temp11,\n  \"hr-HR\": _temp12,\n  \"hu-HU\": _temp13,\n  \"it-IT\": _temp14,\n  \"ja-JP\": _temp15,\n  \"ko-KR\": _temp16,\n  \"lt-LT\": _temp17,\n  \"lv-LV\": _temp18,\n  \"nb-NO\": _temp19,\n  \"nl-NL\": _temp20,\n  \"pl-PL\": _temp21,\n  \"pt-BR\": _temp22,\n  \"pt-PT\": _temp23,\n  \"ro-RO\": _temp24,\n  \"ru-RU\": _temp25,\n  \"sk-SK\": _temp26,\n  \"sl-SI\": _temp27,\n  \"sr-SP\": _temp28,\n  \"sv-SE\": _temp29,\n  \"tr-TR\": _temp30,\n  \"uk-UA\": _temp31,\n  \"zh-CN\": _temp32,\n  \"zh-TW\": _temp33\n}","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaButtonProps} from '@react-types/button';\nimport {AriaMenuOptions} from './useMenu';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {MenuTriggerState} from '@react-stately/menu';\nimport {MenuTriggerType} from '@react-types/menu';\nimport {RefObject} from 'react';\nimport {useId} from '@react-aria/utils';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useLongPress} from '@react-aria/interactions';\nimport {useOverlayTrigger} from '@react-aria/overlays';\n\nexport interface AriaMenuTriggerProps {\n  /** The type of menu that the menu trigger opens. */\n  type?: 'menu' | 'listbox',\n  /** Whether menu trigger is disabled. */\n  isDisabled?: boolean,\n  /** How menu is triggered. */\n  trigger?: MenuTriggerType\n}\n\nexport interface MenuTriggerAria<T> {\n  /** Props for the menu trigger element. */\n  menuTriggerProps: AriaButtonProps,\n\n  /** Props for the menu. */\n  menuProps: AriaMenuOptions<T>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a menu trigger.\n * @param props - Props for the menu trigger.\n * @param state - State for the menu trigger.\n */\nexport function useMenuTrigger<T>(props: AriaMenuTriggerProps, state: MenuTriggerState, ref: RefObject<Element>): MenuTriggerAria<T> {\n  let {\n    type = 'menu' as AriaMenuTriggerProps['type'],\n    isDisabled,\n    trigger = 'press'\n  } = props;\n\n  let menuTriggerId = useId();\n  let {triggerProps, overlayProps} = useOverlayTrigger({type}, state, ref);\n\n  let onKeyDown = (e) => {\n    if (isDisabled) {\n      return;\n    }\n\n    if (trigger === 'longPress' && !e.altKey) {\n      return;\n    }\n\n    if (ref && ref.current) {\n      switch (e.key) {\n        case 'Enter':\n        case ' ':\n          if (trigger === 'longPress') {\n            return;\n          }\n          // fallthrough\n        case 'ArrowDown':\n          // Stop propagation, unless it would already be handled by useKeyboard.\n          if (!('continuePropagation' in e)) {\n            e.stopPropagation();\n          }\n          e.preventDefault();\n          state.toggle('first');\n          break;\n        case 'ArrowUp':\n          if (!('continuePropagation' in e)) {\n            e.stopPropagation();\n          }\n          e.preventDefault();\n          state.toggle('last');\n          break;\n      }\n    }\n  };\n\n  let stringFormatter = useLocalizedStringFormatter(intlMessages);\n  let {longPressProps} = useLongPress({\n    isDisabled: isDisabled || trigger !== 'longPress',\n    accessibilityDescription: stringFormatter.format('longPressMessage'),\n    onLongPressStart() {\n      state.close();\n    },\n    onLongPress() {\n      state.open('first');\n    }\n  });\n\n  let pressProps =  {\n    onPressStart(e) {\n      // For consistency with native, open the menu on mouse/key down, but touch up.\n      if (e.pointerType !== 'touch' && e.pointerType !== 'keyboard' && !isDisabled) {\n        // If opened with a screen reader, auto focus the first item.\n        // Otherwise, the menu itself will be focused.\n        state.toggle(e.pointerType === 'virtual' ? 'first' : null);\n      }\n    },\n    onPress(e) {\n      if (e.pointerType === 'touch' && !isDisabled) {\n        state.toggle();\n      }\n    }\n  };\n\n  // omit onPress from triggerProps since we override it above.\n  delete triggerProps.onPress;\n\n  return {\n    menuTriggerProps: {\n      ...triggerProps,\n      ...(trigger === 'press' ? pressProps : longPressProps),\n      id: menuTriggerId,\n      onKeyDown\n    },\n    menuProps: {\n      ...overlayProps,\n      'aria-labelledby': menuTriggerId,\n      autoFocus: state.focusStrategy,\n      onClose: state.close\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaMenuProps} from '@react-types/menu';\nimport {DOMAttributes, KeyboardDelegate} from '@react-types/shared';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {Key, RefObject} from 'react';\nimport {TreeState} from '@react-stately/tree';\nimport {useSelectableList} from '@react-aria/selection';\n\nexport interface MenuAria {\n  /** Props for the menu element. */\n  menuProps: DOMAttributes\n}\n\nexport interface AriaMenuOptions<T> extends Omit<AriaMenuProps<T>, 'children'> {\n  /** Whether the menu uses virtual scrolling. */\n  isVirtualized?: boolean,\n\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate\n}\n\ninterface MenuData {\n  onClose?: () => void,\n  onAction?: (key: Key) => void\n}\n\nexport const menuData = new WeakMap<TreeState<unknown>, MenuData>();\n\n/**\n * Provides the behavior and accessibility implementation for a menu component.\n * A menu displays a list of actions or options that a user can choose.\n * @param props - Props for the menu.\n * @param state - State for the menu, as returned by `useListState`.\n */\nexport function useMenu<T>(props: AriaMenuOptions<T>, state: TreeState<T>, ref: RefObject<HTMLElement>): MenuAria {\n  let {\n    shouldFocusWrap = true,\n    ...otherProps\n  } = props;\n\n  if (!props['aria-label'] && !props['aria-labelledby']) {\n    console.warn('An aria-label or aria-labelledby prop is required for accessibility.');\n  }\n\n  let domProps = filterDOMProps(props, {labelable: true});\n  let {listProps} = useSelectableList({\n    ...otherProps,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    shouldFocusWrap\n  });\n\n  menuData.set(state, {\n    onClose: props.onClose,\n    onAction: props.onAction\n  });\n\n  return {\n    menuProps: mergeProps(domProps, {\n      role: 'menu',\n      ...listProps\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableElement, PressEvent} from '@react-types/shared';\nimport {getItemCount} from '@react-stately/collections';\nimport {isFocusVisible, useHover, usePress} from '@react-aria/interactions';\nimport {Key, RefObject} from 'react';\nimport {menuData} from './useMenu';\nimport {mergeProps, useSlotId} from '@react-aria/utils';\nimport {TreeState} from '@react-stately/tree';\nimport {useSelectableItem} from '@react-aria/selection';\n\nexport interface MenuItemAria {\n  /** Props for the menu item element. */\n  menuItemProps: DOMAttributes,\n\n  /** Props for the main text element inside the menu item. */\n  labelProps: DOMAttributes,\n\n  /** Props for the description text element inside the menu item, if any. */\n  descriptionProps: DOMAttributes,\n\n  /** Props for the keyboard shortcut text element inside the item, if any. */\n  keyboardShortcutProps: DOMAttributes,\n\n  /** Whether the item is currently focused. */\n  isFocused: boolean,\n  /** Whether the item is currently selected. */\n  isSelected: boolean,\n  /** Whether the item is currently in a pressed state. */\n  isPressed: boolean,\n  /** Whether the item is disabled. */\n  isDisabled: boolean\n}\n\nexport interface AriaMenuItemProps {\n  /**\n   * Whether the menu item is disabled.\n   * @deprecated - pass disabledKeys to useTreeState instead.\n   */\n  isDisabled?: boolean,\n\n  /**\n   * Whether the menu item is selected.\n   * @deprecated - pass selectedKeys to useTreeState instead.\n   */\n  isSelected?: boolean,\n\n  /** A screen reader only label for the menu item. */\n  'aria-label'?: string,\n\n  /** The unique key for the menu item. */\n  key?: Key,\n\n  /**\n   * Handler that is called when the menu should close after selecting an item.\n   * @deprecated - pass to the menu instead.\n   */\n  onClose?: () => void,\n\n  /**\n   * Whether the menu should close when the menu item is selected.\n   * @default true\n   */\n  closeOnSelect?: boolean,\n\n  /** Whether the menu item is contained in a virtual scrolling menu. */\n  isVirtualized?: boolean,\n\n  /**\n   * Handler that is called when the user activates the item.\n   * @deprecated - pass to the menu instead.\n   */\n  onAction?: (key: Key) => void\n}\n\n/**\n * Provides the behavior and accessibility implementation for an item in a menu.\n * See `useMenu` for more details about menus.\n * @param props - Props for the item.\n * @param state - State for the menu, as returned by `useTreeState`.\n */\nexport function useMenuItem<T>(props: AriaMenuItemProps, state: TreeState<T>, ref: RefObject<FocusableElement>): MenuItemAria {\n  let {\n    key,\n    closeOnSelect,\n    isVirtualized\n  } = props;\n\n  let isDisabled = props.isDisabled ?? state.disabledKeys.has(key);\n  let isSelected = props.isSelected ?? state.selectionManager.isSelected(key);\n  let isFocused = state.selectionManager.focusedKey === key;\n\n  let data = menuData.get(state);\n  let onClose = props.onClose || data.onClose;\n  let onAction = props.onAction || data.onAction;\n\n  let role = 'menuitem';\n  if (state.selectionManager.selectionMode === 'single') {\n    role = 'menuitemradio';\n  } else if (state.selectionManager.selectionMode === 'multiple') {\n    role = 'menuitemcheckbox';\n  }\n\n  let labelId = useSlotId();\n  let descriptionId = useSlotId();\n  let keyboardId = useSlotId();\n\n  let ariaProps = {\n    'aria-disabled': isDisabled,\n    role,\n    'aria-label': props['aria-label'],\n    'aria-labelledby': labelId,\n    'aria-describedby': [descriptionId, keyboardId].filter(Boolean).join(' ') || undefined\n  };\n\n  if (state.selectionManager.selectionMode !== 'none') {\n    ariaProps['aria-checked'] = isSelected;\n  }\n\n  if (isVirtualized) {\n    ariaProps['aria-posinset'] = state.collection.getItem(key).index;\n    ariaProps['aria-setsize'] = getItemCount(state.collection);\n  }\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    // Ignore repeating events, which may have started on the menu trigger before moving\n    // focus to the menu item. We want to wait for a second complete key press sequence.\n    if (e.repeat) {\n      return;\n    }\n\n    switch (e.key) {\n      case ' ':\n        if (!isDisabled && state.selectionManager.selectionMode === 'none' && closeOnSelect !== false && onClose) {\n          onClose();\n        }\n        break;\n      case 'Enter':\n        // The Enter key should always close on select, except if overridden.\n        if (!isDisabled && closeOnSelect !== false && onClose) {\n          onClose();\n        }\n        break;\n    }\n  };\n\n  let onPressStart = (e: PressEvent) => {\n    if (e.pointerType === 'keyboard' && onAction) {\n      onAction(key);\n    }\n  };\n\n  let onPressUp = (e: PressEvent) => {\n    if (e.pointerType !== 'keyboard') {\n      if (onAction) {\n        onAction(key);\n      }\n\n      // Pressing a menu item should close by default in single selection mode but not multiple\n      // selection mode, except if overridden by the closeOnSelect prop.\n      if (onClose && (closeOnSelect ?? state.selectionManager.selectionMode !== 'multiple')) {\n        onClose();\n      }\n    }\n  };\n\n  let {itemProps} = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key,\n    ref,\n    shouldSelectOnPressUp: true,\n    allowsDifferentPressOrigin: true\n  });\n\n  let {pressProps, isPressed} = usePress({onPressStart, onPressUp, isDisabled});\n  let {hoverProps} = useHover({\n    isDisabled,\n    onHoverStart() {\n      if (!isFocusVisible()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n  });\n\n  return {\n    menuItemProps: {\n      ...ariaProps,\n      ...mergeProps(itemProps, pressProps, hoverProps, {onKeyDown})\n    },\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    keyboardShortcutProps: {\n      id: keyboardId\n    },\n    isFocused,\n    isSelected,\n    isPressed,\n    isDisabled\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes} from '@react-types/shared';\nimport {ReactNode} from 'react';\nimport {useId} from '@react-aria/utils';\n\nexport interface AriaMenuSectionProps {\n  /** The heading for the section. */\n  heading?: ReactNode,\n  /** An accessibility label for the section. Required if `heading` is not present. */\n  'aria-label'?: string\n}\n\nexport interface MenuSectionAria {\n  /** Props for the wrapper list item. */\n  itemProps: DOMAttributes,\n\n  /** Props for the heading element, if any. */\n  headingProps: DOMAttributes,\n\n  /** Props for the group element. */\n  groupProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a section in a menu.\n * See `useMenu` for more details about menus.\n * @param props - Props for the section.\n */\nexport function useMenuSection(props: AriaMenuSectionProps): MenuSectionAria {\n  let {heading, 'aria-label': ariaLabel} = props;\n  let headingId = useId();\n\n  return {\n    itemProps: {\n      role: 'presentation'\n    },\n    headingProps: heading ? {\n      // Techincally, menus cannot contain headings according to ARIA.\n      // We hide the heading from assistive technology, and only use it\n      // as a label for the nested group.\n      id: headingId,\n      'aria-hidden': true\n    } : {},\n    groupProps: {\n      role: 'group',\n      'aria-label': ariaLabel,\n      'aria-labelledby': heading ? headingId : undefined\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}